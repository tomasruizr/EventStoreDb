// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: persistent.proto
#ifndef GRPC_persistent_2eproto__INCLUDED
#define GRPC_persistent_2eproto__INCLUDED

#include "persistent.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace event_store {
namespace client {
namespace persistent_subscriptions {

class PersistentSubscriptions final {
 public:
  static constexpr char const* service_full_name() {
    return "event_store.client.persistent_subscriptions.PersistentSubscriptions";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::event_store::client::persistent_subscriptions::CreateResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::CreateResp>> AsyncCreate(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::CreateResp>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::CreateResp>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::CreateResp>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::event_store::client::persistent_subscriptions::UpdateResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::UpdateResp>> AsyncUpdate(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::UpdateResp>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::UpdateResp>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::UpdateResp>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::event_store::client::persistent_subscriptions::DeleteResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::DeleteResp>> AsyncDelete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::DeleteResp>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::DeleteResp>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::DeleteResp>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>> Read(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>>(ReadRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>> AsyncRead(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>>(AsyncReadRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>> PrepareAsyncRead(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>>(PrepareAsyncReadRaw(context, cq));
    }
    virtual ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::event_store::client::persistent_subscriptions::GetInfoResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::GetInfoResp>> AsyncGetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::GetInfoResp>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::GetInfoResp>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::GetInfoResp>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ReplayParkedResp>> AsyncReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ReplayParkedResp>>(AsyncReplayParkedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ReplayParkedResp>> PrepareAsyncReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ReplayParkedResp>>(PrepareAsyncReplayParkedRaw(context, request, cq));
    }
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::event_store::client::persistent_subscriptions::ListResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ListResp>> AsyncList(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ListResp>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ListResp>> PrepareAsyncList(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ListResp>>(PrepareAsyncListRaw(context, request, cq));
    }
    virtual ::grpc::Status RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> AsyncRestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(AsyncRestartSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> PrepareAsyncRestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(PrepareAsyncRestartSubsystemRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Create(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq* request, ::event_store::client::persistent_subscriptions::CreateResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::CreateResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq* request, ::event_store::client::persistent_subscriptions::CreateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq* request, ::event_store::client::persistent_subscriptions::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::CreateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Update(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Update(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Update(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::event_store::client::persistent_subscriptions::ReadReq,::event_store::client::persistent_subscriptions::ReadResp>* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::event_store::client::persistent_subscriptions::ReadReq,::event_store::client::persistent_subscriptions::ReadResp>* reactor) = 0;
      #endif
      virtual void GetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplayParked(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReplayParked(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReplayParked(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void List(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq* request, ::event_store::client::persistent_subscriptions::ListResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ListResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq* request, ::event_store::client::persistent_subscriptions::ListResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq* request, ::event_store::client::persistent_subscriptions::ListResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ListResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ListResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::CreateResp>* AsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::CreateResp>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::UpdateResp>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::UpdateResp>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::DeleteResp>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::DeleteResp>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>* ReadRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>* AsyncReadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>* PrepareAsyncReadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::GetInfoResp>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::GetInfoResp>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ReplayParkedResp>* AsyncReplayParkedRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ReplayParkedResp>* PrepareAsyncReplayParkedRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ListResp>* AsyncListRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::persistent_subscriptions::ListResp>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* AsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* PrepareAsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::event_store::client::persistent_subscriptions::CreateResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::CreateResp>> AsyncCreate(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::CreateResp>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::CreateResp>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::CreateResp>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::event_store::client::persistent_subscriptions::UpdateResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::UpdateResp>> AsyncUpdate(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::UpdateResp>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::UpdateResp>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::UpdateResp>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::event_store::client::persistent_subscriptions::DeleteResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::DeleteResp>> AsyncDelete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::DeleteResp>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::DeleteResp>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::DeleteResp>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>> Read(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>>(ReadRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>> AsyncRead(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>>(AsyncReadRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>> PrepareAsyncRead(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>>(PrepareAsyncReadRaw(context, cq));
    }
    ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::event_store::client::persistent_subscriptions::GetInfoResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::GetInfoResp>> AsyncGetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::GetInfoResp>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::GetInfoResp>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::GetInfoResp>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    ::grpc::Status ReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ReplayParkedResp>> AsyncReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ReplayParkedResp>>(AsyncReplayParkedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ReplayParkedResp>> PrepareAsyncReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ReplayParkedResp>>(PrepareAsyncReplayParkedRaw(context, request, cq));
    }
    ::grpc::Status List(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::event_store::client::persistent_subscriptions::ListResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ListResp>> AsyncList(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ListResp>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ListResp>> PrepareAsyncList(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ListResp>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> AsyncRestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(AsyncRestartSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> PrepareAsyncRestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(PrepareAsyncRestartSubsystemRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq* request, ::event_store::client::persistent_subscriptions::CreateResp* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::CreateResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq* request, ::event_store::client::persistent_subscriptions::CreateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq* request, ::event_store::client::persistent_subscriptions::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::CreateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Update(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Update(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Update(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Delete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::event_store::client::persistent_subscriptions::ReadReq,::event_store::client::persistent_subscriptions::ReadResp>* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::event_store::client::persistent_subscriptions::ReadReq,::event_store::client::persistent_subscriptions::ReadResp>* reactor) override;
      #endif
      void GetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, std::function<void(::grpc::Status)>) override;
      void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetInfo(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, std::function<void(::grpc::Status)>) override;
      void ReplayParked(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayParked(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReplayParked(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReplayParked(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void List(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq* request, ::event_store::client::persistent_subscriptions::ListResp* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ListResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq* request, ::event_store::client::persistent_subscriptions::ListResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void List(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq* request, ::event_store::client::persistent_subscriptions::ListResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ListResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void List(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::persistent_subscriptions::ListResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::CreateResp>* AsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::CreateResp>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::CreateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::UpdateResp>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::UpdateResp>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::DeleteResp>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::DeleteResp>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>* ReadRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>* AsyncReadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>* PrepareAsyncReadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::GetInfoResp>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::GetInfoResp>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ReplayParkedResp>* AsyncReplayParkedRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ReplayParkedResp>* PrepareAsyncReplayParkedRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ListResp>* AsyncListRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::persistent_subscriptions::ListResp>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::event_store::client::persistent_subscriptions::ListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* AsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* PrepareAsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplayParked_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_RestartSubsystem_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::event_store::client::persistent_subscriptions::CreateReq* request, ::event_store::client::persistent_subscriptions::CreateResp* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::event_store::client::persistent_subscriptions::UpdateReq* request, ::event_store::client::persistent_subscriptions::UpdateResp* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::event_store::client::persistent_subscriptions::DeleteReq* request, ::event_store::client::persistent_subscriptions::DeleteResp* response);
    virtual ::grpc::Status Read(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::event_store::client::persistent_subscriptions::ReadResp, ::event_store::client::persistent_subscriptions::ReadReq>* stream);
    virtual ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response);
    virtual ::grpc::Status ReplayParked(::grpc::ServerContext* context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response);
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::event_store::client::persistent_subscriptions::ListReq* request, ::event_store::client::persistent_subscriptions::ListResp* response);
    virtual ::grpc::Status RestartSubsystem(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::CreateReq* /*request*/, ::event_store::client::persistent_subscriptions::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::event_store::client::persistent_subscriptions::CreateReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::persistent_subscriptions::CreateResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::UpdateReq* /*request*/, ::event_store::client::persistent_subscriptions::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::event_store::client::persistent_subscriptions::UpdateReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::persistent_subscriptions::UpdateResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::DeleteReq* /*request*/, ::event_store::client::persistent_subscriptions::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::event_store::client::persistent_subscriptions::DeleteReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::persistent_subscriptions::DeleteResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::persistent_subscriptions::ReadResp, ::event_store::client::persistent_subscriptions::ReadReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::event_store::client::persistent_subscriptions::ReadResp, ::event_store::client::persistent_subscriptions::ReadReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInfo() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::GetInfoReq* /*request*/, ::event_store::client::persistent_subscriptions::GetInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::persistent_subscriptions::GetInfoResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplayParked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplayParked() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReplayParked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayParked(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* /*request*/, ::event_store::client::persistent_subscriptions::ReplayParkedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayParked(::grpc::ServerContext* context, ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::persistent_subscriptions::ReplayParkedResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ListReq* /*request*/, ::event_store::client::persistent_subscriptions::ListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::event_store::client::persistent_subscriptions::ListReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::persistent_subscriptions::ListResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestartSubsystem() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartSubsystem(::grpc::ServerContext* context, ::event_store::client::Empty* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Update<WithAsyncMethod_Delete<WithAsyncMethod_Read<WithAsyncMethod_GetInfo<WithAsyncMethod_ReplayParked<WithAsyncMethod_List<WithAsyncMethod_RestartSubsystem<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::CreateReq, ::event_store::client::persistent_subscriptions::CreateResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::persistent_subscriptions::CreateReq* request, ::event_store::client::persistent_subscriptions::CreateResp* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::experimental::MessageAllocator< ::event_store::client::persistent_subscriptions::CreateReq, ::event_store::client::persistent_subscriptions::CreateResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::CreateReq, ::event_store::client::persistent_subscriptions::CreateResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::CreateReq* /*request*/, ::event_store::client::persistent_subscriptions::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::CreateReq* /*request*/, ::event_store::client::persistent_subscriptions::CreateResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::CreateReq* /*request*/, ::event_store::client::persistent_subscriptions::CreateResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::UpdateReq, ::event_store::client::persistent_subscriptions::UpdateResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::persistent_subscriptions::UpdateReq* request, ::event_store::client::persistent_subscriptions::UpdateResp* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::experimental::MessageAllocator< ::event_store::client::persistent_subscriptions::UpdateReq, ::event_store::client::persistent_subscriptions::UpdateResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::UpdateReq, ::event_store::client::persistent_subscriptions::UpdateResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::UpdateReq* /*request*/, ::event_store::client::persistent_subscriptions::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::UpdateReq* /*request*/, ::event_store::client::persistent_subscriptions::UpdateResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Update(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::UpdateReq* /*request*/, ::event_store::client::persistent_subscriptions::UpdateResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::DeleteReq, ::event_store::client::persistent_subscriptions::DeleteResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::persistent_subscriptions::DeleteReq* request, ::event_store::client::persistent_subscriptions::DeleteResp* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::event_store::client::persistent_subscriptions::DeleteReq, ::event_store::client::persistent_subscriptions::DeleteResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::DeleteReq, ::event_store::client::persistent_subscriptions::DeleteResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::DeleteReq* /*request*/, ::event_store::client::persistent_subscriptions::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::DeleteReq* /*request*/, ::event_store::client::persistent_subscriptions::DeleteResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::DeleteReq* /*request*/, ::event_store::client::persistent_subscriptions::DeleteResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Read(context); }));
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::persistent_subscriptions::ReadResp, ::event_store::client::persistent_subscriptions::ReadReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>* Read(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::event_store::client::persistent_subscriptions::ReadReq, ::event_store::client::persistent_subscriptions::ReadResp>* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::GetInfoReq, ::event_store::client::persistent_subscriptions::GetInfoResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::persistent_subscriptions::GetInfoReq* request, ::event_store::client::persistent_subscriptions::GetInfoResp* response) { return this->GetInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetInfo(
        ::grpc::experimental::MessageAllocator< ::event_store::client::persistent_subscriptions::GetInfoReq, ::event_store::client::persistent_subscriptions::GetInfoResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::GetInfoReq, ::event_store::client::persistent_subscriptions::GetInfoResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::GetInfoReq* /*request*/, ::event_store::client::persistent_subscriptions::GetInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::GetInfoReq* /*request*/, ::event_store::client::persistent_subscriptions::GetInfoResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::GetInfoReq* /*request*/, ::event_store::client::persistent_subscriptions::GetInfoResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReplayParked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReplayParked() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::ReplayParkedReq, ::event_store::client::persistent_subscriptions::ReplayParkedResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* request, ::event_store::client::persistent_subscriptions::ReplayParkedResp* response) { return this->ReplayParked(context, request, response); }));}
    void SetMessageAllocatorFor_ReplayParked(
        ::grpc::experimental::MessageAllocator< ::event_store::client::persistent_subscriptions::ReplayParkedReq, ::event_store::client::persistent_subscriptions::ReplayParkedResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::ReplayParkedReq, ::event_store::client::persistent_subscriptions::ReplayParkedResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReplayParked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayParked(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* /*request*/, ::event_store::client::persistent_subscriptions::ReplayParkedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayParked(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* /*request*/, ::event_store::client::persistent_subscriptions::ReplayParkedResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayParked(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* /*request*/, ::event_store::client::persistent_subscriptions::ReplayParkedResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::ListReq, ::event_store::client::persistent_subscriptions::ListResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::persistent_subscriptions::ListReq* request, ::event_store::client::persistent_subscriptions::ListResp* response) { return this->List(context, request, response); }));}
    void SetMessageAllocatorFor_List(
        ::grpc::experimental::MessageAllocator< ::event_store::client::persistent_subscriptions::ListReq, ::event_store::client::persistent_subscriptions::ListResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::persistent_subscriptions::ListReq, ::event_store::client::persistent_subscriptions::ListResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ListReq* /*request*/, ::event_store::client::persistent_subscriptions::ListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ListReq* /*request*/, ::event_store::client::persistent_subscriptions::ListResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ListReq* /*request*/, ::event_store::client::persistent_subscriptions::ListResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RestartSubsystem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) { return this->RestartSubsystem(context, request, response); }));}
    void SetMessageAllocatorFor_RestartSubsystem(
        ::grpc::experimental::MessageAllocator< ::event_store::client::Empty, ::event_store::client::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartSubsystem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_GetInfo<ExperimentalWithCallbackMethod_ReplayParked<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_RestartSubsystem<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_GetInfo<ExperimentalWithCallbackMethod_ReplayParked<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_RestartSubsystem<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::CreateReq* /*request*/, ::event_store::client::persistent_subscriptions::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::UpdateReq* /*request*/, ::event_store::client::persistent_subscriptions::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::DeleteReq* /*request*/, ::event_store::client::persistent_subscriptions::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::persistent_subscriptions::ReadResp, ::event_store::client::persistent_subscriptions::ReadReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInfo() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::GetInfoReq* /*request*/, ::event_store::client::persistent_subscriptions::GetInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplayParked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplayParked() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReplayParked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayParked(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* /*request*/, ::event_store::client::persistent_subscriptions::ReplayParkedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ListReq* /*request*/, ::event_store::client::persistent_subscriptions::ListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestartSubsystem() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::CreateReq* /*request*/, ::event_store::client::persistent_subscriptions::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::UpdateReq* /*request*/, ::event_store::client::persistent_subscriptions::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::DeleteReq* /*request*/, ::event_store::client::persistent_subscriptions::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::persistent_subscriptions::ReadResp, ::event_store::client::persistent_subscriptions::ReadReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInfo() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::GetInfoReq* /*request*/, ::event_store::client::persistent_subscriptions::GetInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplayParked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplayParked() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReplayParked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayParked(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* /*request*/, ::event_store::client::persistent_subscriptions::ReplayParkedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplayParked(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ListReq* /*request*/, ::event_store::client::persistent_subscriptions::ListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestartSubsystem() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartSubsystem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::CreateReq* /*request*/, ::event_store::client::persistent_subscriptions::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::UpdateReq* /*request*/, ::event_store::client::persistent_subscriptions::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Update(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::DeleteReq* /*request*/, ::event_store::client::persistent_subscriptions::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Read(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::persistent_subscriptions::ReadResp, ::event_store::client::persistent_subscriptions::ReadReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Read(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::GetInfoReq* /*request*/, ::event_store::client::persistent_subscriptions::GetInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReplayParked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReplayParked() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplayParked(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReplayParked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplayParked(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* /*request*/, ::event_store::client::persistent_subscriptions::ReplayParkedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReplayParked(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReplayParked(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->List(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ListReq* /*request*/, ::event_store::client::persistent_subscriptions::ListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* List(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RestartSubsystem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestartSubsystem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartSubsystem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::persistent_subscriptions::CreateReq, ::event_store::client::persistent_subscriptions::CreateResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::persistent_subscriptions::CreateReq, ::event_store::client::persistent_subscriptions::CreateResp>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::CreateReq* /*request*/, ::event_store::client::persistent_subscriptions::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::persistent_subscriptions::CreateReq,::event_store::client::persistent_subscriptions::CreateResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::persistent_subscriptions::UpdateReq, ::event_store::client::persistent_subscriptions::UpdateResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::persistent_subscriptions::UpdateReq, ::event_store::client::persistent_subscriptions::UpdateResp>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::UpdateReq* /*request*/, ::event_store::client::persistent_subscriptions::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::persistent_subscriptions::UpdateReq,::event_store::client::persistent_subscriptions::UpdateResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::persistent_subscriptions::DeleteReq, ::event_store::client::persistent_subscriptions::DeleteResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::persistent_subscriptions::DeleteReq, ::event_store::client::persistent_subscriptions::DeleteResp>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::DeleteReq* /*request*/, ::event_store::client::persistent_subscriptions::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::persistent_subscriptions::DeleteReq,::event_store::client::persistent_subscriptions::DeleteResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInfo() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::persistent_subscriptions::GetInfoReq, ::event_store::client::persistent_subscriptions::GetInfoResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::persistent_subscriptions::GetInfoReq, ::event_store::client::persistent_subscriptions::GetInfoResp>* streamer) {
                       return this->StreamedGetInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::GetInfoReq* /*request*/, ::event_store::client::persistent_subscriptions::GetInfoResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::persistent_subscriptions::GetInfoReq,::event_store::client::persistent_subscriptions::GetInfoResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplayParked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplayParked() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::persistent_subscriptions::ReplayParkedReq, ::event_store::client::persistent_subscriptions::ReplayParkedResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::persistent_subscriptions::ReplayParkedReq, ::event_store::client::persistent_subscriptions::ReplayParkedResp>* streamer) {
                       return this->StreamedReplayParked(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplayParked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplayParked(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ReplayParkedReq* /*request*/, ::event_store::client::persistent_subscriptions::ReplayParkedResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplayParked(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::persistent_subscriptions::ReplayParkedReq,::event_store::client::persistent_subscriptions::ReplayParkedResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::persistent_subscriptions::ListReq, ::event_store::client::persistent_subscriptions::ListResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::persistent_subscriptions::ListReq, ::event_store::client::persistent_subscriptions::ListResp>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::event_store::client::persistent_subscriptions::ListReq* /*request*/, ::event_store::client::persistent_subscriptions::ListResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::persistent_subscriptions::ListReq,::event_store::client::persistent_subscriptions::ListResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestartSubsystem() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::Empty, ::event_store::client::Empty>* streamer) {
                       return this->StreamedRestartSubsystem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestartSubsystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::Empty,::event_store::client::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_ReplayParked<WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_RestartSubsystem<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_ReplayParked<WithStreamedUnaryMethod_List<WithStreamedUnaryMethod_RestartSubsystem<Service > > > > > > > StreamedService;
};

}  // namespace persistent_subscriptions
}  // namespace client
}  // namespace event_store


#endif  // GRPC_persistent_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: projections.proto

#include "projections.pb.h"
#include "projections.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace event_store {
namespace client {
namespace projections {

static const char* Projections_method_names[] = {
  "/event_store.client.projections.Projections/Create",
  "/event_store.client.projections.Projections/Update",
  "/event_store.client.projections.Projections/Delete",
  "/event_store.client.projections.Projections/Statistics",
  "/event_store.client.projections.Projections/Disable",
  "/event_store.client.projections.Projections/Enable",
  "/event_store.client.projections.Projections/Reset",
  "/event_store.client.projections.Projections/State",
  "/event_store.client.projections.Projections/Result",
  "/event_store.client.projections.Projections/RestartSubsystem",
};

std::unique_ptr< Projections::Stub> Projections::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Projections::Stub> stub(new Projections::Stub(channel));
  return stub;
}

Projections::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(Projections_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Projections_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Projections_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Statistics_(Projections_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Disable_(Projections_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(Projections_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(Projections_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_State_(Projections_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Result_(Projections_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestartSubsystem_(Projections_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Projections::Stub::Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::event_store::client::projections::CreateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Projections::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::CreateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::CreateResp>* Projections::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::CreateResp>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::CreateResp>* Projections::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::CreateResp>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status Projections::Stub::Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::event_store::client::projections::UpdateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Projections::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::UpdateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::UpdateResp>* Projections::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::UpdateResp>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::UpdateResp>* Projections::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::UpdateResp>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status Projections::Stub::Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::event_store::client::projections::DeleteResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Projections::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DeleteResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DeleteResp>* Projections::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::DeleteResp>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DeleteResp>* Projections::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::DeleteResp>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::ClientReader< ::event_store::client::projections::StatisticsResp>* Projections::Stub::StatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::event_store::client::projections::StatisticsResp>::Create(channel_.get(), rpcmethod_Statistics_, context, request);
}

void Projections::Stub::experimental_async::Statistics(::grpc::ClientContext* context, ::event_store::client::projections::StatisticsReq* request, ::grpc::experimental::ClientReadReactor< ::event_store::client::projections::StatisticsResp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::event_store::client::projections::StatisticsResp>::Create(stub_->channel_.get(), stub_->rpcmethod_Statistics_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::event_store::client::projections::StatisticsResp>* Projections::Stub::AsyncStatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::event_store::client::projections::StatisticsResp>::Create(channel_.get(), cq, rpcmethod_Statistics_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::event_store::client::projections::StatisticsResp>* Projections::Stub::PrepareAsyncStatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::event_store::client::projections::StatisticsResp>::Create(channel_.get(), cq, rpcmethod_Statistics_, context, request, false, nullptr);
}

::grpc::Status Projections::Stub::Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::event_store::client::projections::DisableResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void Projections::Stub::experimental_async::Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DisableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DisableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DisableResp>* Projections::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::DisableResp>::Create(channel_.get(), cq, rpcmethod_Disable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DisableResp>* Projections::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::DisableResp>::Create(channel_.get(), cq, rpcmethod_Disable_, context, request, false);
}

::grpc::Status Projections::Stub::Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::event_store::client::projections::EnableResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void Projections::Stub::experimental_async::Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::EnableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::EnableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::EnableResp>* Projections::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::EnableResp>::Create(channel_.get(), cq, rpcmethod_Enable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::EnableResp>* Projections::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::EnableResp>::Create(channel_.get(), cq, rpcmethod_Enable_, context, request, false);
}

::grpc::Status Projections::Stub::Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::event_store::client::projections::ResetResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void Projections::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResetResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResetResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResetResp>* Projections::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::ResetResp>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResetResp>* Projections::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::ResetResp>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, false);
}

::grpc::Status Projections::Stub::State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::event_store::client::projections::StateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_State_, context, request, response);
}

void Projections::Stub::experimental_async::State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::StateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::StateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_State_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::StateResp>* Projections::Stub::AsyncStateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::StateResp>::Create(channel_.get(), cq, rpcmethod_State_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::StateResp>* Projections::Stub::PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::StateResp>::Create(channel_.get(), cq, rpcmethod_State_, context, request, false);
}

::grpc::Status Projections::Stub::Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::event_store::client::projections::ResultResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Result_, context, request, response);
}

void Projections::Stub::experimental_async::Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Result_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Result(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResultResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Result_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Result_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::Result(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResultResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Result_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResultResp>* Projections::Stub::AsyncResultRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::ResultResp>::Create(channel_.get(), cq, rpcmethod_Result_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResultResp>* Projections::Stub::PrepareAsyncResultRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::projections::ResultResp>::Create(channel_.get(), cq, rpcmethod_Result_, context, request, false);
}

::grpc::Status Projections::Stub::RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RestartSubsystem_, context, request, response);
}

void Projections::Stub::experimental_async::RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartSubsystem_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartSubsystem_, context, request, response, std::move(f));
}

void Projections::Stub::experimental_async::RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartSubsystem_, context, request, response, reactor);
}

void Projections::Stub::experimental_async::RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartSubsystem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Projections::Stub::AsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_RestartSubsystem_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Projections::Stub::PrepareAsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_RestartSubsystem_, context, request, false);
}

Projections::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::projections::CreateReq, ::event_store::client::projections::CreateResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::CreateReq* req,
             ::event_store::client::projections::CreateResp* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::projections::UpdateReq, ::event_store::client::projections::UpdateResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::UpdateReq* req,
             ::event_store::client::projections::UpdateResp* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::projections::DeleteReq, ::event_store::client::projections::DeleteResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::DeleteReq* req,
             ::event_store::client::projections::DeleteResp* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Projections::Service, ::event_store::client::projections::StatisticsReq, ::event_store::client::projections::StatisticsResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::StatisticsReq* req,
             ::grpc_impl::ServerWriter<::event_store::client::projections::StatisticsResp>* writer) {
               return service->Statistics(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::projections::DisableReq, ::event_store::client::projections::DisableResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::DisableReq* req,
             ::event_store::client::projections::DisableResp* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::projections::EnableReq, ::event_store::client::projections::EnableResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::EnableReq* req,
             ::event_store::client::projections::EnableResp* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::projections::ResetReq, ::event_store::client::projections::ResetResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::ResetReq* req,
             ::event_store::client::projections::ResetResp* resp) {
               return service->Reset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::projections::StateReq, ::event_store::client::projections::StateResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::StateReq* req,
             ::event_store::client::projections::StateResp* resp) {
               return service->State(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::projections::ResultReq, ::event_store::client::projections::ResultResp>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::projections::ResultReq* req,
             ::event_store::client::projections::ResultResp* resp) {
               return service->Result(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Projections_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Projections::Service, ::event_store::client::Empty, ::event_store::client::Empty>(
          [](Projections::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::Empty* req,
             ::event_store::client::Empty* resp) {
               return service->RestartSubsystem(ctx, req, resp);
             }, this)));
}

Projections::Service::~Service() {
}

::grpc::Status Projections::Service::Create(::grpc::ServerContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::Update(::grpc::ServerContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::Delete(::grpc::ServerContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::Statistics(::grpc::ServerContext* context, const ::event_store::client::projections::StatisticsReq* request, ::grpc::ServerWriter< ::event_store::client::projections::StatisticsResp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::Disable(::grpc::ServerContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::Enable(::grpc::ServerContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::Reset(::grpc::ServerContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::State(::grpc::ServerContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::Result(::grpc::ServerContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Projections::Service::RestartSubsystem(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace event_store
}  // namespace client
}  // namespace projections


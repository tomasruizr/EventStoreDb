// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_operations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_operations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "shared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_operations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_operations_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_operations_2eproto;
namespace event_store {
namespace client {
namespace operations {
class ScavengeResp;
class ScavengeRespDefaultTypeInternal;
extern ScavengeRespDefaultTypeInternal _ScavengeResp_default_instance_;
class SetNodePriorityReq;
class SetNodePriorityReqDefaultTypeInternal;
extern SetNodePriorityReqDefaultTypeInternal _SetNodePriorityReq_default_instance_;
class StartScavengeReq;
class StartScavengeReqDefaultTypeInternal;
extern StartScavengeReqDefaultTypeInternal _StartScavengeReq_default_instance_;
class StartScavengeReq_Options;
class StartScavengeReq_OptionsDefaultTypeInternal;
extern StartScavengeReq_OptionsDefaultTypeInternal _StartScavengeReq_Options_default_instance_;
class StopScavengeReq;
class StopScavengeReqDefaultTypeInternal;
extern StopScavengeReqDefaultTypeInternal _StopScavengeReq_default_instance_;
class StopScavengeReq_Options;
class StopScavengeReq_OptionsDefaultTypeInternal;
extern StopScavengeReq_OptionsDefaultTypeInternal _StopScavengeReq_Options_default_instance_;
}  // namespace operations
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::client::operations::ScavengeResp* Arena::CreateMaybeMessage<::event_store::client::operations::ScavengeResp>(Arena*);
template<> ::event_store::client::operations::SetNodePriorityReq* Arena::CreateMaybeMessage<::event_store::client::operations::SetNodePriorityReq>(Arena*);
template<> ::event_store::client::operations::StartScavengeReq* Arena::CreateMaybeMessage<::event_store::client::operations::StartScavengeReq>(Arena*);
template<> ::event_store::client::operations::StartScavengeReq_Options* Arena::CreateMaybeMessage<::event_store::client::operations::StartScavengeReq_Options>(Arena*);
template<> ::event_store::client::operations::StopScavengeReq* Arena::CreateMaybeMessage<::event_store::client::operations::StopScavengeReq>(Arena*);
template<> ::event_store::client::operations::StopScavengeReq_Options* Arena::CreateMaybeMessage<::event_store::client::operations::StopScavengeReq_Options>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace client {
namespace operations {

enum ScavengeResp_ScavengeResult : int {
  ScavengeResp_ScavengeResult_Started = 0,
  ScavengeResp_ScavengeResult_InProgress = 1,
  ScavengeResp_ScavengeResult_Stopped = 2,
  ScavengeResp_ScavengeResult_ScavengeResp_ScavengeResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ScavengeResp_ScavengeResult_ScavengeResp_ScavengeResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ScavengeResp_ScavengeResult_IsValid(int value);
constexpr ScavengeResp_ScavengeResult ScavengeResp_ScavengeResult_ScavengeResult_MIN = ScavengeResp_ScavengeResult_Started;
constexpr ScavengeResp_ScavengeResult ScavengeResp_ScavengeResult_ScavengeResult_MAX = ScavengeResp_ScavengeResult_Stopped;
constexpr int ScavengeResp_ScavengeResult_ScavengeResult_ARRAYSIZE = ScavengeResp_ScavengeResult_ScavengeResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScavengeResp_ScavengeResult_descriptor();
template<typename T>
inline const std::string& ScavengeResp_ScavengeResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScavengeResp_ScavengeResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScavengeResp_ScavengeResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScavengeResp_ScavengeResult_descriptor(), enum_t_value);
}
inline bool ScavengeResp_ScavengeResult_Parse(
    const std::string& name, ScavengeResp_ScavengeResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScavengeResp_ScavengeResult>(
    ScavengeResp_ScavengeResult_descriptor(), name, value);
}
// ===================================================================

class StartScavengeReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.operations.StartScavengeReq.Options) */ {
 public:
  inline StartScavengeReq_Options() : StartScavengeReq_Options(nullptr) {};
  virtual ~StartScavengeReq_Options();

  StartScavengeReq_Options(const StartScavengeReq_Options& from);
  StartScavengeReq_Options(StartScavengeReq_Options&& from) noexcept
    : StartScavengeReq_Options() {
    *this = ::std::move(from);
  }

  inline StartScavengeReq_Options& operator=(const StartScavengeReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartScavengeReq_Options& operator=(StartScavengeReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartScavengeReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartScavengeReq_Options* internal_default_instance() {
    return reinterpret_cast<const StartScavengeReq_Options*>(
               &_StartScavengeReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartScavengeReq_Options& a, StartScavengeReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(StartScavengeReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartScavengeReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartScavengeReq_Options* New() const final {
    return CreateMaybeMessage<StartScavengeReq_Options>(nullptr);
  }

  StartScavengeReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartScavengeReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartScavengeReq_Options& from);
  void MergeFrom(const StartScavengeReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartScavengeReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.operations.StartScavengeReq.Options";
  }
  protected:
  explicit StartScavengeReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadCountFieldNumber = 1,
    kStartFromChunkFieldNumber = 2,
  };
  // int32 thread_count = 1;
  void clear_thread_count();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_count() const;
  void set_thread_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thread_count() const;
  void _internal_set_thread_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_from_chunk = 2;
  void clear_start_from_chunk();
  ::PROTOBUF_NAMESPACE_ID::int32 start_from_chunk() const;
  void set_start_from_chunk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_from_chunk() const;
  void _internal_set_start_from_chunk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.operations.StartScavengeReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_from_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class StartScavengeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.operations.StartScavengeReq) */ {
 public:
  inline StartScavengeReq() : StartScavengeReq(nullptr) {};
  virtual ~StartScavengeReq();

  StartScavengeReq(const StartScavengeReq& from);
  StartScavengeReq(StartScavengeReq&& from) noexcept
    : StartScavengeReq() {
    *this = ::std::move(from);
  }

  inline StartScavengeReq& operator=(const StartScavengeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartScavengeReq& operator=(StartScavengeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartScavengeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartScavengeReq* internal_default_instance() {
    return reinterpret_cast<const StartScavengeReq*>(
               &_StartScavengeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartScavengeReq& a, StartScavengeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StartScavengeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartScavengeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartScavengeReq* New() const final {
    return CreateMaybeMessage<StartScavengeReq>(nullptr);
  }

  StartScavengeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartScavengeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartScavengeReq& from);
  void MergeFrom(const StartScavengeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartScavengeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.operations.StartScavengeReq";
  }
  protected:
  explicit StartScavengeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StartScavengeReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.operations.StartScavengeReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::operations::StartScavengeReq_Options& options() const;
  ::event_store::client::operations::StartScavengeReq_Options* release_options();
  ::event_store::client::operations::StartScavengeReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::operations::StartScavengeReq_Options* options);
  private:
  const ::event_store::client::operations::StartScavengeReq_Options& _internal_options() const;
  ::event_store::client::operations::StartScavengeReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::operations::StartScavengeReq_Options* options);
  ::event_store::client::operations::StartScavengeReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.operations.StartScavengeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::operations::StartScavengeReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class StopScavengeReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.operations.StopScavengeReq.Options) */ {
 public:
  inline StopScavengeReq_Options() : StopScavengeReq_Options(nullptr) {};
  virtual ~StopScavengeReq_Options();

  StopScavengeReq_Options(const StopScavengeReq_Options& from);
  StopScavengeReq_Options(StopScavengeReq_Options&& from) noexcept
    : StopScavengeReq_Options() {
    *this = ::std::move(from);
  }

  inline StopScavengeReq_Options& operator=(const StopScavengeReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopScavengeReq_Options& operator=(StopScavengeReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopScavengeReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopScavengeReq_Options* internal_default_instance() {
    return reinterpret_cast<const StopScavengeReq_Options*>(
               &_StopScavengeReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopScavengeReq_Options& a, StopScavengeReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(StopScavengeReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopScavengeReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopScavengeReq_Options* New() const final {
    return CreateMaybeMessage<StopScavengeReq_Options>(nullptr);
  }

  StopScavengeReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopScavengeReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopScavengeReq_Options& from);
  void MergeFrom(const StopScavengeReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopScavengeReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.operations.StopScavengeReq.Options";
  }
  protected:
  explicit StopScavengeReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScavengeIdFieldNumber = 1,
  };
  // string scavenge_id = 1;
  void clear_scavenge_id();
  const std::string& scavenge_id() const;
  void set_scavenge_id(const std::string& value);
  void set_scavenge_id(std::string&& value);
  void set_scavenge_id(const char* value);
  void set_scavenge_id(const char* value, size_t size);
  std::string* mutable_scavenge_id();
  std::string* release_scavenge_id();
  void set_allocated_scavenge_id(std::string* scavenge_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scavenge_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scavenge_id(
      std::string* scavenge_id);
  private:
  const std::string& _internal_scavenge_id() const;
  void _internal_set_scavenge_id(const std::string& value);
  std::string* _internal_mutable_scavenge_id();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.operations.StopScavengeReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scavenge_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class StopScavengeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.operations.StopScavengeReq) */ {
 public:
  inline StopScavengeReq() : StopScavengeReq(nullptr) {};
  virtual ~StopScavengeReq();

  StopScavengeReq(const StopScavengeReq& from);
  StopScavengeReq(StopScavengeReq&& from) noexcept
    : StopScavengeReq() {
    *this = ::std::move(from);
  }

  inline StopScavengeReq& operator=(const StopScavengeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopScavengeReq& operator=(StopScavengeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopScavengeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopScavengeReq* internal_default_instance() {
    return reinterpret_cast<const StopScavengeReq*>(
               &_StopScavengeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopScavengeReq& a, StopScavengeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StopScavengeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopScavengeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopScavengeReq* New() const final {
    return CreateMaybeMessage<StopScavengeReq>(nullptr);
  }

  StopScavengeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopScavengeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopScavengeReq& from);
  void MergeFrom(const StopScavengeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopScavengeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.operations.StopScavengeReq";
  }
  protected:
  explicit StopScavengeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopScavengeReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.operations.StopScavengeReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::operations::StopScavengeReq_Options& options() const;
  ::event_store::client::operations::StopScavengeReq_Options* release_options();
  ::event_store::client::operations::StopScavengeReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::operations::StopScavengeReq_Options* options);
  private:
  const ::event_store::client::operations::StopScavengeReq_Options& _internal_options() const;
  ::event_store::client::operations::StopScavengeReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::operations::StopScavengeReq_Options* options);
  ::event_store::client::operations::StopScavengeReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.operations.StopScavengeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::operations::StopScavengeReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class ScavengeResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.operations.ScavengeResp) */ {
 public:
  inline ScavengeResp() : ScavengeResp(nullptr) {};
  virtual ~ScavengeResp();

  ScavengeResp(const ScavengeResp& from);
  ScavengeResp(ScavengeResp&& from) noexcept
    : ScavengeResp() {
    *this = ::std::move(from);
  }

  inline ScavengeResp& operator=(const ScavengeResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScavengeResp& operator=(ScavengeResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScavengeResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScavengeResp* internal_default_instance() {
    return reinterpret_cast<const ScavengeResp*>(
               &_ScavengeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ScavengeResp& a, ScavengeResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ScavengeResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScavengeResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScavengeResp* New() const final {
    return CreateMaybeMessage<ScavengeResp>(nullptr);
  }

  ScavengeResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScavengeResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScavengeResp& from);
  void MergeFrom(const ScavengeResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScavengeResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.operations.ScavengeResp";
  }
  protected:
  explicit ScavengeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ScavengeResp_ScavengeResult ScavengeResult;
  static constexpr ScavengeResult Started =
    ScavengeResp_ScavengeResult_Started;
  static constexpr ScavengeResult InProgress =
    ScavengeResp_ScavengeResult_InProgress;
  static constexpr ScavengeResult Stopped =
    ScavengeResp_ScavengeResult_Stopped;
  static inline bool ScavengeResult_IsValid(int value) {
    return ScavengeResp_ScavengeResult_IsValid(value);
  }
  static constexpr ScavengeResult ScavengeResult_MIN =
    ScavengeResp_ScavengeResult_ScavengeResult_MIN;
  static constexpr ScavengeResult ScavengeResult_MAX =
    ScavengeResp_ScavengeResult_ScavengeResult_MAX;
  static constexpr int ScavengeResult_ARRAYSIZE =
    ScavengeResp_ScavengeResult_ScavengeResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScavengeResult_descriptor() {
    return ScavengeResp_ScavengeResult_descriptor();
  }
  template<typename T>
  static inline const std::string& ScavengeResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScavengeResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScavengeResult_Name.");
    return ScavengeResp_ScavengeResult_Name(enum_t_value);
  }
  static inline bool ScavengeResult_Parse(const std::string& name,
      ScavengeResult* value) {
    return ScavengeResp_ScavengeResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScavengeIdFieldNumber = 1,
    kScavengeResultFieldNumber = 2,
  };
  // string scavenge_id = 1;
  void clear_scavenge_id();
  const std::string& scavenge_id() const;
  void set_scavenge_id(const std::string& value);
  void set_scavenge_id(std::string&& value);
  void set_scavenge_id(const char* value);
  void set_scavenge_id(const char* value, size_t size);
  std::string* mutable_scavenge_id();
  std::string* release_scavenge_id();
  void set_allocated_scavenge_id(std::string* scavenge_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scavenge_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scavenge_id(
      std::string* scavenge_id);
  private:
  const std::string& _internal_scavenge_id() const;
  void _internal_set_scavenge_id(const std::string& value);
  std::string* _internal_mutable_scavenge_id();
  public:

  // .event_store.client.operations.ScavengeResp.ScavengeResult scavenge_result = 2;
  void clear_scavenge_result();
  ::event_store::client::operations::ScavengeResp_ScavengeResult scavenge_result() const;
  void set_scavenge_result(::event_store::client::operations::ScavengeResp_ScavengeResult value);
  private:
  ::event_store::client::operations::ScavengeResp_ScavengeResult _internal_scavenge_result() const;
  void _internal_set_scavenge_result(::event_store::client::operations::ScavengeResp_ScavengeResult value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.operations.ScavengeResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scavenge_id_;
  int scavenge_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// -------------------------------------------------------------------

class SetNodePriorityReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.operations.SetNodePriorityReq) */ {
 public:
  inline SetNodePriorityReq() : SetNodePriorityReq(nullptr) {};
  virtual ~SetNodePriorityReq();

  SetNodePriorityReq(const SetNodePriorityReq& from);
  SetNodePriorityReq(SetNodePriorityReq&& from) noexcept
    : SetNodePriorityReq() {
    *this = ::std::move(from);
  }

  inline SetNodePriorityReq& operator=(const SetNodePriorityReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNodePriorityReq& operator=(SetNodePriorityReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetNodePriorityReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNodePriorityReq* internal_default_instance() {
    return reinterpret_cast<const SetNodePriorityReq*>(
               &_SetNodePriorityReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetNodePriorityReq& a, SetNodePriorityReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNodePriorityReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNodePriorityReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetNodePriorityReq* New() const final {
    return CreateMaybeMessage<SetNodePriorityReq>(nullptr);
  }

  SetNodePriorityReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetNodePriorityReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetNodePriorityReq& from);
  void MergeFrom(const SetNodePriorityReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNodePriorityReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.operations.SetNodePriorityReq";
  }
  protected:
  explicit SetNodePriorityReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_operations_2eproto);
    return ::descriptor_table_operations_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 1,
  };
  // int32 priority = 1;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.operations.SetNodePriorityReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_operations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartScavengeReq_Options

// int32 thread_count = 1;
inline void StartScavengeReq_Options::clear_thread_count() {
  thread_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartScavengeReq_Options::_internal_thread_count() const {
  return thread_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartScavengeReq_Options::thread_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.operations.StartScavengeReq.Options.thread_count)
  return _internal_thread_count();
}
inline void StartScavengeReq_Options::_internal_set_thread_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thread_count_ = value;
}
inline void StartScavengeReq_Options::set_thread_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thread_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.operations.StartScavengeReq.Options.thread_count)
}

// int32 start_from_chunk = 2;
inline void StartScavengeReq_Options::clear_start_from_chunk() {
  start_from_chunk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartScavengeReq_Options::_internal_start_from_chunk() const {
  return start_from_chunk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartScavengeReq_Options::start_from_chunk() const {
  // @@protoc_insertion_point(field_get:event_store.client.operations.StartScavengeReq.Options.start_from_chunk)
  return _internal_start_from_chunk();
}
inline void StartScavengeReq_Options::_internal_set_start_from_chunk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_from_chunk_ = value;
}
inline void StartScavengeReq_Options::set_start_from_chunk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_from_chunk(value);
  // @@protoc_insertion_point(field_set:event_store.client.operations.StartScavengeReq.Options.start_from_chunk)
}

// -------------------------------------------------------------------

// StartScavengeReq

// .event_store.client.operations.StartScavengeReq.Options options = 1;
inline bool StartScavengeReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool StartScavengeReq::has_options() const {
  return _internal_has_options();
}
inline void StartScavengeReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::operations::StartScavengeReq_Options& StartScavengeReq::_internal_options() const {
  const ::event_store::client::operations::StartScavengeReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::operations::StartScavengeReq_Options*>(
      &::event_store::client::operations::_StartScavengeReq_Options_default_instance_);
}
inline const ::event_store::client::operations::StartScavengeReq_Options& StartScavengeReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.operations.StartScavengeReq.options)
  return _internal_options();
}
inline void StartScavengeReq::unsafe_arena_set_allocated_options(
    ::event_store::client::operations::StartScavengeReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.operations.StartScavengeReq.options)
}
inline ::event_store::client::operations::StartScavengeReq_Options* StartScavengeReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::operations::StartScavengeReq_Options* StartScavengeReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.operations.StartScavengeReq.options)
  
  ::event_store::client::operations::StartScavengeReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::operations::StartScavengeReq_Options* StartScavengeReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::operations::StartScavengeReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::operations::StartScavengeReq_Options* StartScavengeReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.operations.StartScavengeReq.options)
  return _internal_mutable_options();
}
inline void StartScavengeReq::set_allocated_options(::event_store::client::operations::StartScavengeReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.operations.StartScavengeReq.options)
}

// -------------------------------------------------------------------

// StopScavengeReq_Options

// string scavenge_id = 1;
inline void StopScavengeReq_Options::clear_scavenge_id() {
  scavenge_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopScavengeReq_Options::scavenge_id() const {
  // @@protoc_insertion_point(field_get:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
  return _internal_scavenge_id();
}
inline void StopScavengeReq_Options::set_scavenge_id(const std::string& value) {
  _internal_set_scavenge_id(value);
  // @@protoc_insertion_point(field_set:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
}
inline std::string* StopScavengeReq_Options::mutable_scavenge_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
  return _internal_mutable_scavenge_id();
}
inline const std::string& StopScavengeReq_Options::_internal_scavenge_id() const {
  return scavenge_id_.Get();
}
inline void StopScavengeReq_Options::_internal_set_scavenge_id(const std::string& value) {
  
  scavenge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopScavengeReq_Options::set_scavenge_id(std::string&& value) {
  
  scavenge_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
}
inline void StopScavengeReq_Options::set_scavenge_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scavenge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
}
inline void StopScavengeReq_Options::set_scavenge_id(const char* value,
    size_t size) {
  
  scavenge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
}
inline std::string* StopScavengeReq_Options::_internal_mutable_scavenge_id() {
  
  return scavenge_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopScavengeReq_Options::release_scavenge_id() {
  // @@protoc_insertion_point(field_release:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
  return scavenge_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopScavengeReq_Options::set_allocated_scavenge_id(std::string* scavenge_id) {
  if (scavenge_id != nullptr) {
    
  } else {
    
  }
  scavenge_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scavenge_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
}
inline std::string* StopScavengeReq_Options::unsafe_arena_release_scavenge_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scavenge_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopScavengeReq_Options::unsafe_arena_set_allocated_scavenge_id(
    std::string* scavenge_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scavenge_id != nullptr) {
    
  } else {
    
  }
  scavenge_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scavenge_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.operations.StopScavengeReq.Options.scavenge_id)
}

// -------------------------------------------------------------------

// StopScavengeReq

// .event_store.client.operations.StopScavengeReq.Options options = 1;
inline bool StopScavengeReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool StopScavengeReq::has_options() const {
  return _internal_has_options();
}
inline void StopScavengeReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::operations::StopScavengeReq_Options& StopScavengeReq::_internal_options() const {
  const ::event_store::client::operations::StopScavengeReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::operations::StopScavengeReq_Options*>(
      &::event_store::client::operations::_StopScavengeReq_Options_default_instance_);
}
inline const ::event_store::client::operations::StopScavengeReq_Options& StopScavengeReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.operations.StopScavengeReq.options)
  return _internal_options();
}
inline void StopScavengeReq::unsafe_arena_set_allocated_options(
    ::event_store::client::operations::StopScavengeReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.operations.StopScavengeReq.options)
}
inline ::event_store::client::operations::StopScavengeReq_Options* StopScavengeReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::operations::StopScavengeReq_Options* StopScavengeReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.operations.StopScavengeReq.options)
  
  ::event_store::client::operations::StopScavengeReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::operations::StopScavengeReq_Options* StopScavengeReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::operations::StopScavengeReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::operations::StopScavengeReq_Options* StopScavengeReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.operations.StopScavengeReq.options)
  return _internal_mutable_options();
}
inline void StopScavengeReq::set_allocated_options(::event_store::client::operations::StopScavengeReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.operations.StopScavengeReq.options)
}

// -------------------------------------------------------------------

// ScavengeResp

// string scavenge_id = 1;
inline void ScavengeResp::clear_scavenge_id() {
  scavenge_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScavengeResp::scavenge_id() const {
  // @@protoc_insertion_point(field_get:event_store.client.operations.ScavengeResp.scavenge_id)
  return _internal_scavenge_id();
}
inline void ScavengeResp::set_scavenge_id(const std::string& value) {
  _internal_set_scavenge_id(value);
  // @@protoc_insertion_point(field_set:event_store.client.operations.ScavengeResp.scavenge_id)
}
inline std::string* ScavengeResp::mutable_scavenge_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.operations.ScavengeResp.scavenge_id)
  return _internal_mutable_scavenge_id();
}
inline const std::string& ScavengeResp::_internal_scavenge_id() const {
  return scavenge_id_.Get();
}
inline void ScavengeResp::_internal_set_scavenge_id(const std::string& value) {
  
  scavenge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScavengeResp::set_scavenge_id(std::string&& value) {
  
  scavenge_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.operations.ScavengeResp.scavenge_id)
}
inline void ScavengeResp::set_scavenge_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scavenge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.operations.ScavengeResp.scavenge_id)
}
inline void ScavengeResp::set_scavenge_id(const char* value,
    size_t size) {
  
  scavenge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.operations.ScavengeResp.scavenge_id)
}
inline std::string* ScavengeResp::_internal_mutable_scavenge_id() {
  
  return scavenge_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScavengeResp::release_scavenge_id() {
  // @@protoc_insertion_point(field_release:event_store.client.operations.ScavengeResp.scavenge_id)
  return scavenge_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScavengeResp::set_allocated_scavenge_id(std::string* scavenge_id) {
  if (scavenge_id != nullptr) {
    
  } else {
    
  }
  scavenge_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scavenge_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.operations.ScavengeResp.scavenge_id)
}
inline std::string* ScavengeResp::unsafe_arena_release_scavenge_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.operations.ScavengeResp.scavenge_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scavenge_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ScavengeResp::unsafe_arena_set_allocated_scavenge_id(
    std::string* scavenge_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scavenge_id != nullptr) {
    
  } else {
    
  }
  scavenge_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scavenge_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.operations.ScavengeResp.scavenge_id)
}

// .event_store.client.operations.ScavengeResp.ScavengeResult scavenge_result = 2;
inline void ScavengeResp::clear_scavenge_result() {
  scavenge_result_ = 0;
}
inline ::event_store::client::operations::ScavengeResp_ScavengeResult ScavengeResp::_internal_scavenge_result() const {
  return static_cast< ::event_store::client::operations::ScavengeResp_ScavengeResult >(scavenge_result_);
}
inline ::event_store::client::operations::ScavengeResp_ScavengeResult ScavengeResp::scavenge_result() const {
  // @@protoc_insertion_point(field_get:event_store.client.operations.ScavengeResp.scavenge_result)
  return _internal_scavenge_result();
}
inline void ScavengeResp::_internal_set_scavenge_result(::event_store::client::operations::ScavengeResp_ScavengeResult value) {
  
  scavenge_result_ = value;
}
inline void ScavengeResp::set_scavenge_result(::event_store::client::operations::ScavengeResp_ScavengeResult value) {
  _internal_set_scavenge_result(value);
  // @@protoc_insertion_point(field_set:event_store.client.operations.ScavengeResp.scavenge_result)
}

// -------------------------------------------------------------------

// SetNodePriorityReq

// int32 priority = 1;
inline void SetNodePriorityReq::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetNodePriorityReq::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetNodePriorityReq::priority() const {
  // @@protoc_insertion_point(field_get:event_store.client.operations.SetNodePriorityReq.priority)
  return _internal_priority();
}
inline void SetNodePriorityReq::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void SetNodePriorityReq::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:event_store.client.operations.SetNodePriorityReq.priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations
}  // namespace client
}  // namespace event_store

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::event_store::client::operations::ScavengeResp_ScavengeResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event_store::client::operations::ScavengeResp_ScavengeResult>() {
  return ::event_store::client::operations::ScavengeResp_ScavengeResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_operations_2eproto

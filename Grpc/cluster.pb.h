// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cluster_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cluster_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "shared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cluster_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cluster_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cluster_2eproto;
namespace event_store {
namespace cluster {
class AcceptRequest;
class AcceptRequestDefaultTypeInternal;
extern AcceptRequestDefaultTypeInternal _AcceptRequest_default_instance_;
class CloneAssignment;
class CloneAssignmentDefaultTypeInternal;
extern CloneAssignmentDefaultTypeInternal _CloneAssignment_default_instance_;
class ClusterInfo;
class ClusterInfoDefaultTypeInternal;
extern ClusterInfoDefaultTypeInternal _ClusterInfo_default_instance_;
class CreateChunk;
class CreateChunkDefaultTypeInternal;
extern CreateChunkDefaultTypeInternal _CreateChunk_default_instance_;
class DataChunkBulk;
class DataChunkBulkDefaultTypeInternal;
extern DataChunkBulkDefaultTypeInternal _DataChunkBulk_default_instance_;
class DropSubscription;
class DropSubscriptionDefaultTypeInternal;
extern DropSubscriptionDefaultTypeInternal _DropSubscription_default_instance_;
class EndPoint;
class EndPointDefaultTypeInternal;
extern EndPointDefaultTypeInternal _EndPoint_default_instance_;
class Epoch;
class EpochDefaultTypeInternal;
extern EpochDefaultTypeInternal _Epoch_default_instance_;
class FollowerAssignment;
class FollowerAssignmentDefaultTypeInternal;
extern FollowerAssignmentDefaultTypeInternal _FollowerAssignment_default_instance_;
class GossipRequest;
class GossipRequestDefaultTypeInternal;
extern GossipRequestDefaultTypeInternal _GossipRequest_default_instance_;
class LeaderIsResigningOkRequest;
class LeaderIsResigningOkRequestDefaultTypeInternal;
extern LeaderIsResigningOkRequestDefaultTypeInternal _LeaderIsResigningOkRequest_default_instance_;
class LeaderIsResigningRequest;
class LeaderIsResigningRequestDefaultTypeInternal;
extern LeaderIsResigningRequestDefaultTypeInternal _LeaderIsResigningRequest_default_instance_;
class MemberInfo;
class MemberInfoDefaultTypeInternal;
extern MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
class PrepareOkRequest;
class PrepareOkRequestDefaultTypeInternal;
extern PrepareOkRequestDefaultTypeInternal _PrepareOkRequest_default_instance_;
class PrepareRequest;
class PrepareRequestDefaultTypeInternal;
extern PrepareRequestDefaultTypeInternal _PrepareRequest_default_instance_;
class ProposalRequest;
class ProposalRequestDefaultTypeInternal;
extern ProposalRequestDefaultTypeInternal _ProposalRequest_default_instance_;
class RawChunkBulk;
class RawChunkBulkDefaultTypeInternal;
extern RawChunkBulkDefaultTypeInternal _RawChunkBulk_default_instance_;
class ReplicaLogPositionAck;
class ReplicaLogPositionAckDefaultTypeInternal;
extern ReplicaLogPositionAckDefaultTypeInternal _ReplicaLogPositionAck_default_instance_;
class ReplicaLogWrite;
class ReplicaLogWriteDefaultTypeInternal;
extern ReplicaLogWriteDefaultTypeInternal _ReplicaLogWrite_default_instance_;
class ReplicaSubscribed;
class ReplicaSubscribedDefaultTypeInternal;
extern ReplicaSubscribedDefaultTypeInternal _ReplicaSubscribed_default_instance_;
class ReplicaSubscriptionRetry;
class ReplicaSubscriptionRetryDefaultTypeInternal;
extern ReplicaSubscriptionRetryDefaultTypeInternal _ReplicaSubscriptionRetry_default_instance_;
class ReplicatedTo;
class ReplicatedToDefaultTypeInternal;
extern ReplicatedToDefaultTypeInternal _ReplicatedTo_default_instance_;
class SubscribeReplica;
class SubscribeReplicaDefaultTypeInternal;
extern SubscribeReplicaDefaultTypeInternal _SubscribeReplica_default_instance_;
class ViewChangeProofRequest;
class ViewChangeProofRequestDefaultTypeInternal;
extern ViewChangeProofRequestDefaultTypeInternal _ViewChangeProofRequest_default_instance_;
class ViewChangeRequest;
class ViewChangeRequestDefaultTypeInternal;
extern ViewChangeRequestDefaultTypeInternal _ViewChangeRequest_default_instance_;
}  // namespace cluster
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::cluster::AcceptRequest* Arena::CreateMaybeMessage<::event_store::cluster::AcceptRequest>(Arena*);
template<> ::event_store::cluster::CloneAssignment* Arena::CreateMaybeMessage<::event_store::cluster::CloneAssignment>(Arena*);
template<> ::event_store::cluster::ClusterInfo* Arena::CreateMaybeMessage<::event_store::cluster::ClusterInfo>(Arena*);
template<> ::event_store::cluster::CreateChunk* Arena::CreateMaybeMessage<::event_store::cluster::CreateChunk>(Arena*);
template<> ::event_store::cluster::DataChunkBulk* Arena::CreateMaybeMessage<::event_store::cluster::DataChunkBulk>(Arena*);
template<> ::event_store::cluster::DropSubscription* Arena::CreateMaybeMessage<::event_store::cluster::DropSubscription>(Arena*);
template<> ::event_store::cluster::EndPoint* Arena::CreateMaybeMessage<::event_store::cluster::EndPoint>(Arena*);
template<> ::event_store::cluster::Epoch* Arena::CreateMaybeMessage<::event_store::cluster::Epoch>(Arena*);
template<> ::event_store::cluster::FollowerAssignment* Arena::CreateMaybeMessage<::event_store::cluster::FollowerAssignment>(Arena*);
template<> ::event_store::cluster::GossipRequest* Arena::CreateMaybeMessage<::event_store::cluster::GossipRequest>(Arena*);
template<> ::event_store::cluster::LeaderIsResigningOkRequest* Arena::CreateMaybeMessage<::event_store::cluster::LeaderIsResigningOkRequest>(Arena*);
template<> ::event_store::cluster::LeaderIsResigningRequest* Arena::CreateMaybeMessage<::event_store::cluster::LeaderIsResigningRequest>(Arena*);
template<> ::event_store::cluster::MemberInfo* Arena::CreateMaybeMessage<::event_store::cluster::MemberInfo>(Arena*);
template<> ::event_store::cluster::PrepareOkRequest* Arena::CreateMaybeMessage<::event_store::cluster::PrepareOkRequest>(Arena*);
template<> ::event_store::cluster::PrepareRequest* Arena::CreateMaybeMessage<::event_store::cluster::PrepareRequest>(Arena*);
template<> ::event_store::cluster::ProposalRequest* Arena::CreateMaybeMessage<::event_store::cluster::ProposalRequest>(Arena*);
template<> ::event_store::cluster::RawChunkBulk* Arena::CreateMaybeMessage<::event_store::cluster::RawChunkBulk>(Arena*);
template<> ::event_store::cluster::ReplicaLogPositionAck* Arena::CreateMaybeMessage<::event_store::cluster::ReplicaLogPositionAck>(Arena*);
template<> ::event_store::cluster::ReplicaLogWrite* Arena::CreateMaybeMessage<::event_store::cluster::ReplicaLogWrite>(Arena*);
template<> ::event_store::cluster::ReplicaSubscribed* Arena::CreateMaybeMessage<::event_store::cluster::ReplicaSubscribed>(Arena*);
template<> ::event_store::cluster::ReplicaSubscriptionRetry* Arena::CreateMaybeMessage<::event_store::cluster::ReplicaSubscriptionRetry>(Arena*);
template<> ::event_store::cluster::ReplicatedTo* Arena::CreateMaybeMessage<::event_store::cluster::ReplicatedTo>(Arena*);
template<> ::event_store::cluster::SubscribeReplica* Arena::CreateMaybeMessage<::event_store::cluster::SubscribeReplica>(Arena*);
template<> ::event_store::cluster::ViewChangeProofRequest* Arena::CreateMaybeMessage<::event_store::cluster::ViewChangeProofRequest>(Arena*);
template<> ::event_store::cluster::ViewChangeRequest* Arena::CreateMaybeMessage<::event_store::cluster::ViewChangeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace cluster {

enum MemberInfo_VNodeState : int {
  MemberInfo_VNodeState_Initializing = 0,
  MemberInfo_VNodeState_DiscoverLeader = 1,
  MemberInfo_VNodeState_Unknown = 2,
  MemberInfo_VNodeState_PreReplica = 3,
  MemberInfo_VNodeState_CatchingUp = 4,
  MemberInfo_VNodeState_Clone = 5,
  MemberInfo_VNodeState_Follower = 6,
  MemberInfo_VNodeState_PreLeader = 7,
  MemberInfo_VNodeState_Leader = 8,
  MemberInfo_VNodeState_Manager = 9,
  MemberInfo_VNodeState_ShuttingDown = 10,
  MemberInfo_VNodeState_Shutdown = 11,
  MemberInfo_VNodeState_ReadOnlyLeaderless = 12,
  MemberInfo_VNodeState_PreReadOnlyReplica = 13,
  MemberInfo_VNodeState_ReadOnlyReplica = 14,
  MemberInfo_VNodeState_ResigningLeader = 15,
  MemberInfo_VNodeState_MemberInfo_VNodeState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MemberInfo_VNodeState_MemberInfo_VNodeState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MemberInfo_VNodeState_IsValid(int value);
constexpr MemberInfo_VNodeState MemberInfo_VNodeState_VNodeState_MIN = MemberInfo_VNodeState_Initializing;
constexpr MemberInfo_VNodeState MemberInfo_VNodeState_VNodeState_MAX = MemberInfo_VNodeState_ResigningLeader;
constexpr int MemberInfo_VNodeState_VNodeState_ARRAYSIZE = MemberInfo_VNodeState_VNodeState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberInfo_VNodeState_descriptor();
template<typename T>
inline const std::string& MemberInfo_VNodeState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemberInfo_VNodeState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemberInfo_VNodeState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MemberInfo_VNodeState_descriptor(), enum_t_value);
}
inline bool MemberInfo_VNodeState_Parse(
    const std::string& name, MemberInfo_VNodeState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MemberInfo_VNodeState>(
    MemberInfo_VNodeState_descriptor(), name, value);
}
// ===================================================================

class GossipRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.GossipRequest) */ {
 public:
  inline GossipRequest() : GossipRequest(nullptr) {};
  virtual ~GossipRequest();

  GossipRequest(const GossipRequest& from);
  GossipRequest(GossipRequest&& from) noexcept
    : GossipRequest() {
    *this = ::std::move(from);
  }

  inline GossipRequest& operator=(const GossipRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipRequest& operator=(GossipRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipRequest* internal_default_instance() {
    return reinterpret_cast<const GossipRequest*>(
               &_GossipRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GossipRequest& a, GossipRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GossipRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GossipRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GossipRequest* New() const final {
    return CreateMaybeMessage<GossipRequest>(nullptr);
  }

  GossipRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipRequest& from);
  void MergeFrom(const GossipRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.GossipRequest";
  }
  protected:
  explicit GossipRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kServerFieldNumber = 2,
  };
  // .event_store.cluster.ClusterInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::event_store::cluster::ClusterInfo& info() const;
  ::event_store::cluster::ClusterInfo* release_info();
  ::event_store::cluster::ClusterInfo* mutable_info();
  void set_allocated_info(::event_store::cluster::ClusterInfo* info);
  private:
  const ::event_store::cluster::ClusterInfo& _internal_info() const;
  ::event_store::cluster::ClusterInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::event_store::cluster::ClusterInfo* info);
  ::event_store::cluster::ClusterInfo* unsafe_arena_release_info();

  // .event_store.cluster.EndPoint server = 2;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::event_store::cluster::EndPoint& server() const;
  ::event_store::cluster::EndPoint* release_server();
  ::event_store::cluster::EndPoint* mutable_server();
  void set_allocated_server(::event_store::cluster::EndPoint* server);
  private:
  const ::event_store::cluster::EndPoint& _internal_server() const;
  ::event_store::cluster::EndPoint* _internal_mutable_server();
  public:
  void unsafe_arena_set_allocated_server(
      ::event_store::cluster::EndPoint* server);
  ::event_store::cluster::EndPoint* unsafe_arena_release_server();

  // @@protoc_insertion_point(class_scope:event_store.cluster.GossipRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::cluster::ClusterInfo* info_;
  ::event_store::cluster::EndPoint* server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ViewChangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ViewChangeRequest) */ {
 public:
  inline ViewChangeRequest() : ViewChangeRequest(nullptr) {};
  virtual ~ViewChangeRequest();

  ViewChangeRequest(const ViewChangeRequest& from);
  ViewChangeRequest(ViewChangeRequest&& from) noexcept
    : ViewChangeRequest() {
    *this = ::std::move(from);
  }

  inline ViewChangeRequest& operator=(const ViewChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewChangeRequest& operator=(ViewChangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewChangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewChangeRequest* internal_default_instance() {
    return reinterpret_cast<const ViewChangeRequest*>(
               &_ViewChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ViewChangeRequest& a, ViewChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewChangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewChangeRequest* New() const final {
    return CreateMaybeMessage<ViewChangeRequest>(nullptr);
  }

  ViewChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewChangeRequest& from);
  void MergeFrom(const ViewChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ViewChangeRequest";
  }
  protected:
  explicit ViewChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kServerHttpFieldNumber = 2,
    kAttemptedViewFieldNumber = 3,
  };
  // .event_store.client.UUID server_id = 1;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const ::event_store::client::UUID& server_id() const;
  ::event_store::client::UUID* release_server_id();
  ::event_store::client::UUID* mutable_server_id();
  void set_allocated_server_id(::event_store::client::UUID* server_id);
  private:
  const ::event_store::client::UUID& _internal_server_id() const;
  ::event_store::client::UUID* _internal_mutable_server_id();
  public:
  void unsafe_arena_set_allocated_server_id(
      ::event_store::client::UUID* server_id);
  ::event_store::client::UUID* unsafe_arena_release_server_id();

  // .event_store.cluster.EndPoint server_http = 2;
  bool has_server_http() const;
  private:
  bool _internal_has_server_http() const;
  public:
  void clear_server_http();
  const ::event_store::cluster::EndPoint& server_http() const;
  ::event_store::cluster::EndPoint* release_server_http();
  ::event_store::cluster::EndPoint* mutable_server_http();
  void set_allocated_server_http(::event_store::cluster::EndPoint* server_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_server_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_server_http();
  public:
  void unsafe_arena_set_allocated_server_http(
      ::event_store::cluster::EndPoint* server_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_server_http();

  // int32 attempted_view = 3;
  void clear_attempted_view();
  ::PROTOBUF_NAMESPACE_ID::int32 attempted_view() const;
  void set_attempted_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attempted_view() const;
  void _internal_set_attempted_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.ViewChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* server_id_;
  ::event_store::cluster::EndPoint* server_http_;
  ::PROTOBUF_NAMESPACE_ID::int32 attempted_view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ViewChangeProofRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ViewChangeProofRequest) */ {
 public:
  inline ViewChangeProofRequest() : ViewChangeProofRequest(nullptr) {};
  virtual ~ViewChangeProofRequest();

  ViewChangeProofRequest(const ViewChangeProofRequest& from);
  ViewChangeProofRequest(ViewChangeProofRequest&& from) noexcept
    : ViewChangeProofRequest() {
    *this = ::std::move(from);
  }

  inline ViewChangeProofRequest& operator=(const ViewChangeProofRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewChangeProofRequest& operator=(ViewChangeProofRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewChangeProofRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewChangeProofRequest* internal_default_instance() {
    return reinterpret_cast<const ViewChangeProofRequest*>(
               &_ViewChangeProofRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ViewChangeProofRequest& a, ViewChangeProofRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewChangeProofRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewChangeProofRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewChangeProofRequest* New() const final {
    return CreateMaybeMessage<ViewChangeProofRequest>(nullptr);
  }

  ViewChangeProofRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewChangeProofRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewChangeProofRequest& from);
  void MergeFrom(const ViewChangeProofRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewChangeProofRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ViewChangeProofRequest";
  }
  protected:
  explicit ViewChangeProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kServerHttpFieldNumber = 2,
    kInstalledViewFieldNumber = 3,
  };
  // .event_store.client.UUID server_id = 1;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const ::event_store::client::UUID& server_id() const;
  ::event_store::client::UUID* release_server_id();
  ::event_store::client::UUID* mutable_server_id();
  void set_allocated_server_id(::event_store::client::UUID* server_id);
  private:
  const ::event_store::client::UUID& _internal_server_id() const;
  ::event_store::client::UUID* _internal_mutable_server_id();
  public:
  void unsafe_arena_set_allocated_server_id(
      ::event_store::client::UUID* server_id);
  ::event_store::client::UUID* unsafe_arena_release_server_id();

  // .event_store.cluster.EndPoint server_http = 2;
  bool has_server_http() const;
  private:
  bool _internal_has_server_http() const;
  public:
  void clear_server_http();
  const ::event_store::cluster::EndPoint& server_http() const;
  ::event_store::cluster::EndPoint* release_server_http();
  ::event_store::cluster::EndPoint* mutable_server_http();
  void set_allocated_server_http(::event_store::cluster::EndPoint* server_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_server_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_server_http();
  public:
  void unsafe_arena_set_allocated_server_http(
      ::event_store::cluster::EndPoint* server_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_server_http();

  // int32 installed_view = 3;
  void clear_installed_view();
  ::PROTOBUF_NAMESPACE_ID::int32 installed_view() const;
  void set_installed_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_installed_view() const;
  void _internal_set_installed_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.ViewChangeProofRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* server_id_;
  ::event_store::cluster::EndPoint* server_http_;
  ::PROTOBUF_NAMESPACE_ID::int32 installed_view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class PrepareRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.PrepareRequest) */ {
 public:
  inline PrepareRequest() : PrepareRequest(nullptr) {};
  virtual ~PrepareRequest();

  PrepareRequest(const PrepareRequest& from);
  PrepareRequest(PrepareRequest&& from) noexcept
    : PrepareRequest() {
    *this = ::std::move(from);
  }

  inline PrepareRequest& operator=(const PrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareRequest& operator=(PrepareRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareRequest*>(
               &_PrepareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrepareRequest& a, PrepareRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareRequest* New() const final {
    return CreateMaybeMessage<PrepareRequest>(nullptr);
  }

  PrepareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareRequest& from);
  void MergeFrom(const PrepareRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.PrepareRequest";
  }
  protected:
  explicit PrepareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kServerHttpFieldNumber = 2,
    kViewFieldNumber = 3,
  };
  // .event_store.client.UUID server_id = 1;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const ::event_store::client::UUID& server_id() const;
  ::event_store::client::UUID* release_server_id();
  ::event_store::client::UUID* mutable_server_id();
  void set_allocated_server_id(::event_store::client::UUID* server_id);
  private:
  const ::event_store::client::UUID& _internal_server_id() const;
  ::event_store::client::UUID* _internal_mutable_server_id();
  public:
  void unsafe_arena_set_allocated_server_id(
      ::event_store::client::UUID* server_id);
  ::event_store::client::UUID* unsafe_arena_release_server_id();

  // .event_store.cluster.EndPoint server_http = 2;
  bool has_server_http() const;
  private:
  bool _internal_has_server_http() const;
  public:
  void clear_server_http();
  const ::event_store::cluster::EndPoint& server_http() const;
  ::event_store::cluster::EndPoint* release_server_http();
  ::event_store::cluster::EndPoint* mutable_server_http();
  void set_allocated_server_http(::event_store::cluster::EndPoint* server_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_server_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_server_http();
  public:
  void unsafe_arena_set_allocated_server_http(
      ::event_store::cluster::EndPoint* server_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_server_http();

  // int32 view = 3;
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::int32 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.PrepareRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* server_id_;
  ::event_store::cluster::EndPoint* server_http_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class PrepareOkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.PrepareOkRequest) */ {
 public:
  inline PrepareOkRequest() : PrepareOkRequest(nullptr) {};
  virtual ~PrepareOkRequest();

  PrepareOkRequest(const PrepareOkRequest& from);
  PrepareOkRequest(PrepareOkRequest&& from) noexcept
    : PrepareOkRequest() {
    *this = ::std::move(from);
  }

  inline PrepareOkRequest& operator=(const PrepareOkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareOkRequest& operator=(PrepareOkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareOkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareOkRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareOkRequest*>(
               &_PrepareOkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrepareOkRequest& a, PrepareOkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareOkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareOkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareOkRequest* New() const final {
    return CreateMaybeMessage<PrepareOkRequest>(nullptr);
  }

  PrepareOkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareOkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareOkRequest& from);
  void MergeFrom(const PrepareOkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareOkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.PrepareOkRequest";
  }
  protected:
  explicit PrepareOkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 2,
    kServerHttpFieldNumber = 3,
    kEpochIdFieldNumber = 6,
    kEpochLeaderInstanceIdFieldNumber = 7,
    kClusterInfoFieldNumber = 12,
    kViewFieldNumber = 1,
    kEpochNumberFieldNumber = 4,
    kEpochPositionFieldNumber = 5,
    kLastCommitPositionFieldNumber = 8,
    kWriterCheckpointFieldNumber = 9,
    kChaserCheckpointFieldNumber = 10,
    kNodePriorityFieldNumber = 11,
  };
  // .event_store.client.UUID server_id = 2;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const ::event_store::client::UUID& server_id() const;
  ::event_store::client::UUID* release_server_id();
  ::event_store::client::UUID* mutable_server_id();
  void set_allocated_server_id(::event_store::client::UUID* server_id);
  private:
  const ::event_store::client::UUID& _internal_server_id() const;
  ::event_store::client::UUID* _internal_mutable_server_id();
  public:
  void unsafe_arena_set_allocated_server_id(
      ::event_store::client::UUID* server_id);
  ::event_store::client::UUID* unsafe_arena_release_server_id();

  // .event_store.cluster.EndPoint server_http = 3;
  bool has_server_http() const;
  private:
  bool _internal_has_server_http() const;
  public:
  void clear_server_http();
  const ::event_store::cluster::EndPoint& server_http() const;
  ::event_store::cluster::EndPoint* release_server_http();
  ::event_store::cluster::EndPoint* mutable_server_http();
  void set_allocated_server_http(::event_store::cluster::EndPoint* server_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_server_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_server_http();
  public:
  void unsafe_arena_set_allocated_server_http(
      ::event_store::cluster::EndPoint* server_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_server_http();

  // .event_store.client.UUID epoch_id = 6;
  bool has_epoch_id() const;
  private:
  bool _internal_has_epoch_id() const;
  public:
  void clear_epoch_id();
  const ::event_store::client::UUID& epoch_id() const;
  ::event_store::client::UUID* release_epoch_id();
  ::event_store::client::UUID* mutable_epoch_id();
  void set_allocated_epoch_id(::event_store::client::UUID* epoch_id);
  private:
  const ::event_store::client::UUID& _internal_epoch_id() const;
  ::event_store::client::UUID* _internal_mutable_epoch_id();
  public:
  void unsafe_arena_set_allocated_epoch_id(
      ::event_store::client::UUID* epoch_id);
  ::event_store::client::UUID* unsafe_arena_release_epoch_id();

  // .event_store.client.UUID epoch_leader_instance_id = 7;
  bool has_epoch_leader_instance_id() const;
  private:
  bool _internal_has_epoch_leader_instance_id() const;
  public:
  void clear_epoch_leader_instance_id();
  const ::event_store::client::UUID& epoch_leader_instance_id() const;
  ::event_store::client::UUID* release_epoch_leader_instance_id();
  ::event_store::client::UUID* mutable_epoch_leader_instance_id();
  void set_allocated_epoch_leader_instance_id(::event_store::client::UUID* epoch_leader_instance_id);
  private:
  const ::event_store::client::UUID& _internal_epoch_leader_instance_id() const;
  ::event_store::client::UUID* _internal_mutable_epoch_leader_instance_id();
  public:
  void unsafe_arena_set_allocated_epoch_leader_instance_id(
      ::event_store::client::UUID* epoch_leader_instance_id);
  ::event_store::client::UUID* unsafe_arena_release_epoch_leader_instance_id();

  // .event_store.cluster.ClusterInfo cluster_info = 12;
  bool has_cluster_info() const;
  private:
  bool _internal_has_cluster_info() const;
  public:
  void clear_cluster_info();
  const ::event_store::cluster::ClusterInfo& cluster_info() const;
  ::event_store::cluster::ClusterInfo* release_cluster_info();
  ::event_store::cluster::ClusterInfo* mutable_cluster_info();
  void set_allocated_cluster_info(::event_store::cluster::ClusterInfo* cluster_info);
  private:
  const ::event_store::cluster::ClusterInfo& _internal_cluster_info() const;
  ::event_store::cluster::ClusterInfo* _internal_mutable_cluster_info();
  public:
  void unsafe_arena_set_allocated_cluster_info(
      ::event_store::cluster::ClusterInfo* cluster_info);
  ::event_store::cluster::ClusterInfo* unsafe_arena_release_cluster_info();

  // int32 view = 1;
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::int32 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 epoch_number = 4;
  void clear_epoch_number();
  ::PROTOBUF_NAMESPACE_ID::int32 epoch_number() const;
  void set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epoch_number() const;
  void _internal_set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 epoch_position = 5;
  void clear_epoch_position();
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_position() const;
  void set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_epoch_position() const;
  void _internal_set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_commit_position = 8;
  void clear_last_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position() const;
  void set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_commit_position() const;
  void _internal_set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 writer_checkpoint = 9;
  void clear_writer_checkpoint();
  ::PROTOBUF_NAMESPACE_ID::int64 writer_checkpoint() const;
  void set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_writer_checkpoint() const;
  void _internal_set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 chaser_checkpoint = 10;
  void clear_chaser_checkpoint();
  ::PROTOBUF_NAMESPACE_ID::int64 chaser_checkpoint() const;
  void set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_chaser_checkpoint() const;
  void _internal_set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 node_priority = 11;
  void clear_node_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 node_priority() const;
  void set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_priority() const;
  void _internal_set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.PrepareOkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* server_id_;
  ::event_store::cluster::EndPoint* server_http_;
  ::event_store::client::UUID* epoch_id_;
  ::event_store::client::UUID* epoch_leader_instance_id_;
  ::event_store::cluster::ClusterInfo* cluster_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_;
  ::PROTOBUF_NAMESPACE_ID::int32 epoch_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 writer_checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 chaser_checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ProposalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ProposalRequest) */ {
 public:
  inline ProposalRequest() : ProposalRequest(nullptr) {};
  virtual ~ProposalRequest();

  ProposalRequest(const ProposalRequest& from);
  ProposalRequest(ProposalRequest&& from) noexcept
    : ProposalRequest() {
    *this = ::std::move(from);
  }

  inline ProposalRequest& operator=(const ProposalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalRequest& operator=(ProposalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposalRequest* internal_default_instance() {
    return reinterpret_cast<const ProposalRequest*>(
               &_ProposalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProposalRequest& a, ProposalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposalRequest* New() const final {
    return CreateMaybeMessage<ProposalRequest>(nullptr);
  }

  ProposalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposalRequest& from);
  void MergeFrom(const ProposalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ProposalRequest";
  }
  protected:
  explicit ProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kServerHttpFieldNumber = 2,
    kLeaderIdFieldNumber = 3,
    kLeaderHttpFieldNumber = 4,
    kEpochIdFieldNumber = 8,
    kEpochLeaderInstanceIdFieldNumber = 9,
    kViewFieldNumber = 5,
    kEpochNumberFieldNumber = 6,
    kEpochPositionFieldNumber = 7,
    kLastCommitPositionFieldNumber = 10,
    kWriterCheckpointFieldNumber = 11,
    kChaserCheckpointFieldNumber = 12,
    kNodePriorityFieldNumber = 13,
  };
  // .event_store.client.UUID server_id = 1;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const ::event_store::client::UUID& server_id() const;
  ::event_store::client::UUID* release_server_id();
  ::event_store::client::UUID* mutable_server_id();
  void set_allocated_server_id(::event_store::client::UUID* server_id);
  private:
  const ::event_store::client::UUID& _internal_server_id() const;
  ::event_store::client::UUID* _internal_mutable_server_id();
  public:
  void unsafe_arena_set_allocated_server_id(
      ::event_store::client::UUID* server_id);
  ::event_store::client::UUID* unsafe_arena_release_server_id();

  // .event_store.cluster.EndPoint server_http = 2;
  bool has_server_http() const;
  private:
  bool _internal_has_server_http() const;
  public:
  void clear_server_http();
  const ::event_store::cluster::EndPoint& server_http() const;
  ::event_store::cluster::EndPoint* release_server_http();
  ::event_store::cluster::EndPoint* mutable_server_http();
  void set_allocated_server_http(::event_store::cluster::EndPoint* server_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_server_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_server_http();
  public:
  void unsafe_arena_set_allocated_server_http(
      ::event_store::cluster::EndPoint* server_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_server_http();

  // .event_store.client.UUID leader_id = 3;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  const ::event_store::client::UUID& leader_id() const;
  ::event_store::client::UUID* release_leader_id();
  ::event_store::client::UUID* mutable_leader_id();
  void set_allocated_leader_id(::event_store::client::UUID* leader_id);
  private:
  const ::event_store::client::UUID& _internal_leader_id() const;
  ::event_store::client::UUID* _internal_mutable_leader_id();
  public:
  void unsafe_arena_set_allocated_leader_id(
      ::event_store::client::UUID* leader_id);
  ::event_store::client::UUID* unsafe_arena_release_leader_id();

  // .event_store.cluster.EndPoint leader_http = 4;
  bool has_leader_http() const;
  private:
  bool _internal_has_leader_http() const;
  public:
  void clear_leader_http();
  const ::event_store::cluster::EndPoint& leader_http() const;
  ::event_store::cluster::EndPoint* release_leader_http();
  ::event_store::cluster::EndPoint* mutable_leader_http();
  void set_allocated_leader_http(::event_store::cluster::EndPoint* leader_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_leader_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_leader_http();
  public:
  void unsafe_arena_set_allocated_leader_http(
      ::event_store::cluster::EndPoint* leader_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_leader_http();

  // .event_store.client.UUID epoch_id = 8;
  bool has_epoch_id() const;
  private:
  bool _internal_has_epoch_id() const;
  public:
  void clear_epoch_id();
  const ::event_store::client::UUID& epoch_id() const;
  ::event_store::client::UUID* release_epoch_id();
  ::event_store::client::UUID* mutable_epoch_id();
  void set_allocated_epoch_id(::event_store::client::UUID* epoch_id);
  private:
  const ::event_store::client::UUID& _internal_epoch_id() const;
  ::event_store::client::UUID* _internal_mutable_epoch_id();
  public:
  void unsafe_arena_set_allocated_epoch_id(
      ::event_store::client::UUID* epoch_id);
  ::event_store::client::UUID* unsafe_arena_release_epoch_id();

  // .event_store.client.UUID epoch_leader_instance_id = 9;
  bool has_epoch_leader_instance_id() const;
  private:
  bool _internal_has_epoch_leader_instance_id() const;
  public:
  void clear_epoch_leader_instance_id();
  const ::event_store::client::UUID& epoch_leader_instance_id() const;
  ::event_store::client::UUID* release_epoch_leader_instance_id();
  ::event_store::client::UUID* mutable_epoch_leader_instance_id();
  void set_allocated_epoch_leader_instance_id(::event_store::client::UUID* epoch_leader_instance_id);
  private:
  const ::event_store::client::UUID& _internal_epoch_leader_instance_id() const;
  ::event_store::client::UUID* _internal_mutable_epoch_leader_instance_id();
  public:
  void unsafe_arena_set_allocated_epoch_leader_instance_id(
      ::event_store::client::UUID* epoch_leader_instance_id);
  ::event_store::client::UUID* unsafe_arena_release_epoch_leader_instance_id();

  // int32 view = 5;
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::int32 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 epoch_number = 6;
  void clear_epoch_number();
  ::PROTOBUF_NAMESPACE_ID::int32 epoch_number() const;
  void set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epoch_number() const;
  void _internal_set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 epoch_position = 7;
  void clear_epoch_position();
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_position() const;
  void set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_epoch_position() const;
  void _internal_set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_commit_position = 10;
  void clear_last_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position() const;
  void set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_commit_position() const;
  void _internal_set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 writer_checkpoint = 11;
  void clear_writer_checkpoint();
  ::PROTOBUF_NAMESPACE_ID::int64 writer_checkpoint() const;
  void set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_writer_checkpoint() const;
  void _internal_set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 chaser_checkpoint = 12;
  void clear_chaser_checkpoint();
  ::PROTOBUF_NAMESPACE_ID::int64 chaser_checkpoint() const;
  void set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_chaser_checkpoint() const;
  void _internal_set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 node_priority = 13;
  void clear_node_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 node_priority() const;
  void set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_priority() const;
  void _internal_set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.ProposalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* server_id_;
  ::event_store::cluster::EndPoint* server_http_;
  ::event_store::client::UUID* leader_id_;
  ::event_store::cluster::EndPoint* leader_http_;
  ::event_store::client::UUID* epoch_id_;
  ::event_store::client::UUID* epoch_leader_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_;
  ::PROTOBUF_NAMESPACE_ID::int32 epoch_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 writer_checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 chaser_checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class AcceptRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.AcceptRequest) */ {
 public:
  inline AcceptRequest() : AcceptRequest(nullptr) {};
  virtual ~AcceptRequest();

  AcceptRequest(const AcceptRequest& from);
  AcceptRequest(AcceptRequest&& from) noexcept
    : AcceptRequest() {
    *this = ::std::move(from);
  }

  inline AcceptRequest& operator=(const AcceptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptRequest& operator=(AcceptRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptRequest*>(
               &_AcceptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AcceptRequest& a, AcceptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptRequest* New() const final {
    return CreateMaybeMessage<AcceptRequest>(nullptr);
  }

  AcceptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptRequest& from);
  void MergeFrom(const AcceptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.AcceptRequest";
  }
  protected:
  explicit AcceptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kServerHttpFieldNumber = 2,
    kLeaderIdFieldNumber = 3,
    kLeaderHttpFieldNumber = 4,
    kViewFieldNumber = 5,
  };
  // .event_store.client.UUID server_id = 1;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const ::event_store::client::UUID& server_id() const;
  ::event_store::client::UUID* release_server_id();
  ::event_store::client::UUID* mutable_server_id();
  void set_allocated_server_id(::event_store::client::UUID* server_id);
  private:
  const ::event_store::client::UUID& _internal_server_id() const;
  ::event_store::client::UUID* _internal_mutable_server_id();
  public:
  void unsafe_arena_set_allocated_server_id(
      ::event_store::client::UUID* server_id);
  ::event_store::client::UUID* unsafe_arena_release_server_id();

  // .event_store.cluster.EndPoint server_http = 2;
  bool has_server_http() const;
  private:
  bool _internal_has_server_http() const;
  public:
  void clear_server_http();
  const ::event_store::cluster::EndPoint& server_http() const;
  ::event_store::cluster::EndPoint* release_server_http();
  ::event_store::cluster::EndPoint* mutable_server_http();
  void set_allocated_server_http(::event_store::cluster::EndPoint* server_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_server_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_server_http();
  public:
  void unsafe_arena_set_allocated_server_http(
      ::event_store::cluster::EndPoint* server_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_server_http();

  // .event_store.client.UUID leader_id = 3;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  const ::event_store::client::UUID& leader_id() const;
  ::event_store::client::UUID* release_leader_id();
  ::event_store::client::UUID* mutable_leader_id();
  void set_allocated_leader_id(::event_store::client::UUID* leader_id);
  private:
  const ::event_store::client::UUID& _internal_leader_id() const;
  ::event_store::client::UUID* _internal_mutable_leader_id();
  public:
  void unsafe_arena_set_allocated_leader_id(
      ::event_store::client::UUID* leader_id);
  ::event_store::client::UUID* unsafe_arena_release_leader_id();

  // .event_store.cluster.EndPoint leader_http = 4;
  bool has_leader_http() const;
  private:
  bool _internal_has_leader_http() const;
  public:
  void clear_leader_http();
  const ::event_store::cluster::EndPoint& leader_http() const;
  ::event_store::cluster::EndPoint* release_leader_http();
  ::event_store::cluster::EndPoint* mutable_leader_http();
  void set_allocated_leader_http(::event_store::cluster::EndPoint* leader_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_leader_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_leader_http();
  public:
  void unsafe_arena_set_allocated_leader_http(
      ::event_store::cluster::EndPoint* leader_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_leader_http();

  // int32 view = 5;
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::int32 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.AcceptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* server_id_;
  ::event_store::cluster::EndPoint* server_http_;
  ::event_store::client::UUID* leader_id_;
  ::event_store::cluster::EndPoint* leader_http_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class LeaderIsResigningRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.LeaderIsResigningRequest) */ {
 public:
  inline LeaderIsResigningRequest() : LeaderIsResigningRequest(nullptr) {};
  virtual ~LeaderIsResigningRequest();

  LeaderIsResigningRequest(const LeaderIsResigningRequest& from);
  LeaderIsResigningRequest(LeaderIsResigningRequest&& from) noexcept
    : LeaderIsResigningRequest() {
    *this = ::std::move(from);
  }

  inline LeaderIsResigningRequest& operator=(const LeaderIsResigningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderIsResigningRequest& operator=(LeaderIsResigningRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderIsResigningRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderIsResigningRequest* internal_default_instance() {
    return reinterpret_cast<const LeaderIsResigningRequest*>(
               &_LeaderIsResigningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LeaderIsResigningRequest& a, LeaderIsResigningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderIsResigningRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderIsResigningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderIsResigningRequest* New() const final {
    return CreateMaybeMessage<LeaderIsResigningRequest>(nullptr);
  }

  LeaderIsResigningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderIsResigningRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderIsResigningRequest& from);
  void MergeFrom(const LeaderIsResigningRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderIsResigningRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.LeaderIsResigningRequest";
  }
  protected:
  explicit LeaderIsResigningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kLeaderHttpFieldNumber = 2,
  };
  // .event_store.client.UUID leader_id = 1;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  const ::event_store::client::UUID& leader_id() const;
  ::event_store::client::UUID* release_leader_id();
  ::event_store::client::UUID* mutable_leader_id();
  void set_allocated_leader_id(::event_store::client::UUID* leader_id);
  private:
  const ::event_store::client::UUID& _internal_leader_id() const;
  ::event_store::client::UUID* _internal_mutable_leader_id();
  public:
  void unsafe_arena_set_allocated_leader_id(
      ::event_store::client::UUID* leader_id);
  ::event_store::client::UUID* unsafe_arena_release_leader_id();

  // .event_store.cluster.EndPoint leader_http = 2;
  bool has_leader_http() const;
  private:
  bool _internal_has_leader_http() const;
  public:
  void clear_leader_http();
  const ::event_store::cluster::EndPoint& leader_http() const;
  ::event_store::cluster::EndPoint* release_leader_http();
  ::event_store::cluster::EndPoint* mutable_leader_http();
  void set_allocated_leader_http(::event_store::cluster::EndPoint* leader_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_leader_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_leader_http();
  public:
  void unsafe_arena_set_allocated_leader_http(
      ::event_store::cluster::EndPoint* leader_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_leader_http();

  // @@protoc_insertion_point(class_scope:event_store.cluster.LeaderIsResigningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* leader_id_;
  ::event_store::cluster::EndPoint* leader_http_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class LeaderIsResigningOkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.LeaderIsResigningOkRequest) */ {
 public:
  inline LeaderIsResigningOkRequest() : LeaderIsResigningOkRequest(nullptr) {};
  virtual ~LeaderIsResigningOkRequest();

  LeaderIsResigningOkRequest(const LeaderIsResigningOkRequest& from);
  LeaderIsResigningOkRequest(LeaderIsResigningOkRequest&& from) noexcept
    : LeaderIsResigningOkRequest() {
    *this = ::std::move(from);
  }

  inline LeaderIsResigningOkRequest& operator=(const LeaderIsResigningOkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderIsResigningOkRequest& operator=(LeaderIsResigningOkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderIsResigningOkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderIsResigningOkRequest* internal_default_instance() {
    return reinterpret_cast<const LeaderIsResigningOkRequest*>(
               &_LeaderIsResigningOkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LeaderIsResigningOkRequest& a, LeaderIsResigningOkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderIsResigningOkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderIsResigningOkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderIsResigningOkRequest* New() const final {
    return CreateMaybeMessage<LeaderIsResigningOkRequest>(nullptr);
  }

  LeaderIsResigningOkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderIsResigningOkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderIsResigningOkRequest& from);
  void MergeFrom(const LeaderIsResigningOkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderIsResigningOkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.LeaderIsResigningOkRequest";
  }
  protected:
  explicit LeaderIsResigningOkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kLeaderHttpFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kServerHttpFieldNumber = 4,
  };
  // .event_store.client.UUID leader_id = 1;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  const ::event_store::client::UUID& leader_id() const;
  ::event_store::client::UUID* release_leader_id();
  ::event_store::client::UUID* mutable_leader_id();
  void set_allocated_leader_id(::event_store::client::UUID* leader_id);
  private:
  const ::event_store::client::UUID& _internal_leader_id() const;
  ::event_store::client::UUID* _internal_mutable_leader_id();
  public:
  void unsafe_arena_set_allocated_leader_id(
      ::event_store::client::UUID* leader_id);
  ::event_store::client::UUID* unsafe_arena_release_leader_id();

  // .event_store.cluster.EndPoint leader_http = 2;
  bool has_leader_http() const;
  private:
  bool _internal_has_leader_http() const;
  public:
  void clear_leader_http();
  const ::event_store::cluster::EndPoint& leader_http() const;
  ::event_store::cluster::EndPoint* release_leader_http();
  ::event_store::cluster::EndPoint* mutable_leader_http();
  void set_allocated_leader_http(::event_store::cluster::EndPoint* leader_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_leader_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_leader_http();
  public:
  void unsafe_arena_set_allocated_leader_http(
      ::event_store::cluster::EndPoint* leader_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_leader_http();

  // .event_store.client.UUID server_id = 3;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const ::event_store::client::UUID& server_id() const;
  ::event_store::client::UUID* release_server_id();
  ::event_store::client::UUID* mutable_server_id();
  void set_allocated_server_id(::event_store::client::UUID* server_id);
  private:
  const ::event_store::client::UUID& _internal_server_id() const;
  ::event_store::client::UUID* _internal_mutable_server_id();
  public:
  void unsafe_arena_set_allocated_server_id(
      ::event_store::client::UUID* server_id);
  ::event_store::client::UUID* unsafe_arena_release_server_id();

  // .event_store.cluster.EndPoint server_http = 4;
  bool has_server_http() const;
  private:
  bool _internal_has_server_http() const;
  public:
  void clear_server_http();
  const ::event_store::cluster::EndPoint& server_http() const;
  ::event_store::cluster::EndPoint* release_server_http();
  ::event_store::cluster::EndPoint* mutable_server_http();
  void set_allocated_server_http(::event_store::cluster::EndPoint* server_http);
  private:
  const ::event_store::cluster::EndPoint& _internal_server_http() const;
  ::event_store::cluster::EndPoint* _internal_mutable_server_http();
  public:
  void unsafe_arena_set_allocated_server_http(
      ::event_store::cluster::EndPoint* server_http);
  ::event_store::cluster::EndPoint* unsafe_arena_release_server_http();

  // @@protoc_insertion_point(class_scope:event_store.cluster.LeaderIsResigningOkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* leader_id_;
  ::event_store::cluster::EndPoint* leader_http_;
  ::event_store::client::UUID* server_id_;
  ::event_store::cluster::EndPoint* server_http_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ClusterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ClusterInfo) */ {
 public:
  inline ClusterInfo() : ClusterInfo(nullptr) {};
  virtual ~ClusterInfo();

  ClusterInfo(const ClusterInfo& from);
  ClusterInfo(ClusterInfo&& from) noexcept
    : ClusterInfo() {
    *this = ::std::move(from);
  }

  inline ClusterInfo& operator=(const ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterInfo& operator=(ClusterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterInfo* internal_default_instance() {
    return reinterpret_cast<const ClusterInfo*>(
               &_ClusterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClusterInfo& a, ClusterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfo* New() const final {
    return CreateMaybeMessage<ClusterInfo>(nullptr);
  }

  ClusterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterInfo& from);
  void MergeFrom(const ClusterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ClusterInfo";
  }
  protected:
  explicit ClusterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .event_store.cluster.MemberInfo members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::event_store::cluster::MemberInfo* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::MemberInfo >*
      mutable_members();
  private:
  const ::event_store::cluster::MemberInfo& _internal_members(int index) const;
  ::event_store::cluster::MemberInfo* _internal_add_members();
  public:
  const ::event_store::cluster::MemberInfo& members(int index) const;
  ::event_store::cluster::MemberInfo* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::MemberInfo >&
      members() const;

  // @@protoc_insertion_point(class_scope:event_store.cluster.ClusterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::MemberInfo > members_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class EndPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.EndPoint) */ {
 public:
  inline EndPoint() : EndPoint(nullptr) {};
  virtual ~EndPoint();

  EndPoint(const EndPoint& from);
  EndPoint(EndPoint&& from) noexcept
    : EndPoint() {
    *this = ::std::move(from);
  }

  inline EndPoint& operator=(const EndPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPoint& operator=(EndPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPoint* internal_default_instance() {
    return reinterpret_cast<const EndPoint*>(
               &_EndPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EndPoint& a, EndPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPoint* New() const final {
    return CreateMaybeMessage<EndPoint>(nullptr);
  }

  EndPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPoint& from);
  void MergeFrom(const EndPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.EndPoint";
  }
  protected:
  explicit EndPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.EndPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class MemberInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.MemberInfo) */ {
 public:
  inline MemberInfo() : MemberInfo(nullptr) {};
  virtual ~MemberInfo();

  MemberInfo(const MemberInfo& from);
  MemberInfo(MemberInfo&& from) noexcept
    : MemberInfo() {
    *this = ::std::move(from);
  }

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberInfo& operator=(MemberInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberInfo* internal_default_instance() {
    return reinterpret_cast<const MemberInfo*>(
               &_MemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MemberInfo& a, MemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberInfo* New() const final {
    return CreateMaybeMessage<MemberInfo>(nullptr);
  }

  MemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberInfo& from);
  void MergeFrom(const MemberInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.MemberInfo";
  }
  protected:
  explicit MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MemberInfo_VNodeState VNodeState;
  static constexpr VNodeState Initializing =
    MemberInfo_VNodeState_Initializing;
  static constexpr VNodeState DiscoverLeader =
    MemberInfo_VNodeState_DiscoverLeader;
  static constexpr VNodeState Unknown =
    MemberInfo_VNodeState_Unknown;
  static constexpr VNodeState PreReplica =
    MemberInfo_VNodeState_PreReplica;
  static constexpr VNodeState CatchingUp =
    MemberInfo_VNodeState_CatchingUp;
  static constexpr VNodeState Clone =
    MemberInfo_VNodeState_Clone;
  static constexpr VNodeState Follower =
    MemberInfo_VNodeState_Follower;
  static constexpr VNodeState PreLeader =
    MemberInfo_VNodeState_PreLeader;
  static constexpr VNodeState Leader =
    MemberInfo_VNodeState_Leader;
  static constexpr VNodeState Manager =
    MemberInfo_VNodeState_Manager;
  static constexpr VNodeState ShuttingDown =
    MemberInfo_VNodeState_ShuttingDown;
  static constexpr VNodeState Shutdown =
    MemberInfo_VNodeState_Shutdown;
  static constexpr VNodeState ReadOnlyLeaderless =
    MemberInfo_VNodeState_ReadOnlyLeaderless;
  static constexpr VNodeState PreReadOnlyReplica =
    MemberInfo_VNodeState_PreReadOnlyReplica;
  static constexpr VNodeState ReadOnlyReplica =
    MemberInfo_VNodeState_ReadOnlyReplica;
  static constexpr VNodeState ResigningLeader =
    MemberInfo_VNodeState_ResigningLeader;
  static inline bool VNodeState_IsValid(int value) {
    return MemberInfo_VNodeState_IsValid(value);
  }
  static constexpr VNodeState VNodeState_MIN =
    MemberInfo_VNodeState_VNodeState_MIN;
  static constexpr VNodeState VNodeState_MAX =
    MemberInfo_VNodeState_VNodeState_MAX;
  static constexpr int VNodeState_ARRAYSIZE =
    MemberInfo_VNodeState_VNodeState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VNodeState_descriptor() {
    return MemberInfo_VNodeState_descriptor();
  }
  template<typename T>
  static inline const std::string& VNodeState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VNodeState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VNodeState_Name.");
    return MemberInfo_VNodeState_Name(enum_t_value);
  }
  static inline bool VNodeState_Parse(const std::string& name,
      VNodeState* value) {
    return MemberInfo_VNodeState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdvertiseHostToClientAsFieldNumber = 18,
    kInstanceIdFieldNumber = 1,
    kHttpEndPointFieldNumber = 5,
    kInternalTcpFieldNumber = 6,
    kExternalTcpFieldNumber = 7,
    kEpochIdFieldNumber = 15,
    kTimeStampFieldNumber = 2,
    kStateFieldNumber = 3,
    kIsAliveFieldNumber = 4,
    kInternalTcpUsesTlsFieldNumber = 8,
    kExternalTcpUsesTlsFieldNumber = 9,
    kIsReadOnlyReplicaFieldNumber = 17,
    kLastCommitPositionFieldNumber = 10,
    kWriterCheckpointFieldNumber = 11,
    kChaserCheckpointFieldNumber = 12,
    kEpochPositionFieldNumber = 13,
    kEpochNumberFieldNumber = 14,
    kNodePriorityFieldNumber = 16,
    kAdvertiseHttpPortToClientAsFieldNumber = 19,
    kAdvertiseTcpPortToClientAsFieldNumber = 20,
  };
  // string advertise_host_to_client_as = 18;
  void clear_advertise_host_to_client_as();
  const std::string& advertise_host_to_client_as() const;
  void set_advertise_host_to_client_as(const std::string& value);
  void set_advertise_host_to_client_as(std::string&& value);
  void set_advertise_host_to_client_as(const char* value);
  void set_advertise_host_to_client_as(const char* value, size_t size);
  std::string* mutable_advertise_host_to_client_as();
  std::string* release_advertise_host_to_client_as();
  void set_allocated_advertise_host_to_client_as(std::string* advertise_host_to_client_as);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_advertise_host_to_client_as();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_advertise_host_to_client_as(
      std::string* advertise_host_to_client_as);
  private:
  const std::string& _internal_advertise_host_to_client_as() const;
  void _internal_set_advertise_host_to_client_as(const std::string& value);
  std::string* _internal_mutable_advertise_host_to_client_as();
  public:

  // .event_store.client.UUID instance_id = 1;
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  const ::event_store::client::UUID& instance_id() const;
  ::event_store::client::UUID* release_instance_id();
  ::event_store::client::UUID* mutable_instance_id();
  void set_allocated_instance_id(::event_store::client::UUID* instance_id);
  private:
  const ::event_store::client::UUID& _internal_instance_id() const;
  ::event_store::client::UUID* _internal_mutable_instance_id();
  public:
  void unsafe_arena_set_allocated_instance_id(
      ::event_store::client::UUID* instance_id);
  ::event_store::client::UUID* unsafe_arena_release_instance_id();

  // .event_store.cluster.EndPoint http_end_point = 5;
  bool has_http_end_point() const;
  private:
  bool _internal_has_http_end_point() const;
  public:
  void clear_http_end_point();
  const ::event_store::cluster::EndPoint& http_end_point() const;
  ::event_store::cluster::EndPoint* release_http_end_point();
  ::event_store::cluster::EndPoint* mutable_http_end_point();
  void set_allocated_http_end_point(::event_store::cluster::EndPoint* http_end_point);
  private:
  const ::event_store::cluster::EndPoint& _internal_http_end_point() const;
  ::event_store::cluster::EndPoint* _internal_mutable_http_end_point();
  public:
  void unsafe_arena_set_allocated_http_end_point(
      ::event_store::cluster::EndPoint* http_end_point);
  ::event_store::cluster::EndPoint* unsafe_arena_release_http_end_point();

  // .event_store.cluster.EndPoint internal_tcp = 6;
  bool has_internal_tcp() const;
  private:
  bool _internal_has_internal_tcp() const;
  public:
  void clear_internal_tcp();
  const ::event_store::cluster::EndPoint& internal_tcp() const;
  ::event_store::cluster::EndPoint* release_internal_tcp();
  ::event_store::cluster::EndPoint* mutable_internal_tcp();
  void set_allocated_internal_tcp(::event_store::cluster::EndPoint* internal_tcp);
  private:
  const ::event_store::cluster::EndPoint& _internal_internal_tcp() const;
  ::event_store::cluster::EndPoint* _internal_mutable_internal_tcp();
  public:
  void unsafe_arena_set_allocated_internal_tcp(
      ::event_store::cluster::EndPoint* internal_tcp);
  ::event_store::cluster::EndPoint* unsafe_arena_release_internal_tcp();

  // .event_store.cluster.EndPoint external_tcp = 7;
  bool has_external_tcp() const;
  private:
  bool _internal_has_external_tcp() const;
  public:
  void clear_external_tcp();
  const ::event_store::cluster::EndPoint& external_tcp() const;
  ::event_store::cluster::EndPoint* release_external_tcp();
  ::event_store::cluster::EndPoint* mutable_external_tcp();
  void set_allocated_external_tcp(::event_store::cluster::EndPoint* external_tcp);
  private:
  const ::event_store::cluster::EndPoint& _internal_external_tcp() const;
  ::event_store::cluster::EndPoint* _internal_mutable_external_tcp();
  public:
  void unsafe_arena_set_allocated_external_tcp(
      ::event_store::cluster::EndPoint* external_tcp);
  ::event_store::cluster::EndPoint* unsafe_arena_release_external_tcp();

  // .event_store.client.UUID epoch_id = 15;
  bool has_epoch_id() const;
  private:
  bool _internal_has_epoch_id() const;
  public:
  void clear_epoch_id();
  const ::event_store::client::UUID& epoch_id() const;
  ::event_store::client::UUID* release_epoch_id();
  ::event_store::client::UUID* mutable_epoch_id();
  void set_allocated_epoch_id(::event_store::client::UUID* epoch_id);
  private:
  const ::event_store::client::UUID& _internal_epoch_id() const;
  ::event_store::client::UUID* _internal_mutable_epoch_id();
  public:
  void unsafe_arena_set_allocated_epoch_id(
      ::event_store::client::UUID* epoch_id);
  ::event_store::client::UUID* unsafe_arena_release_epoch_id();

  // int64 time_stamp = 2;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .event_store.cluster.MemberInfo.VNodeState state = 3;
  void clear_state();
  ::event_store::cluster::MemberInfo_VNodeState state() const;
  void set_state(::event_store::cluster::MemberInfo_VNodeState value);
  private:
  ::event_store::cluster::MemberInfo_VNodeState _internal_state() const;
  void _internal_set_state(::event_store::cluster::MemberInfo_VNodeState value);
  public:

  // bool is_alive = 4;
  void clear_is_alive();
  bool is_alive() const;
  void set_is_alive(bool value);
  private:
  bool _internal_is_alive() const;
  void _internal_set_is_alive(bool value);
  public:

  // bool internal_tcp_uses_tls = 8;
  void clear_internal_tcp_uses_tls();
  bool internal_tcp_uses_tls() const;
  void set_internal_tcp_uses_tls(bool value);
  private:
  bool _internal_internal_tcp_uses_tls() const;
  void _internal_set_internal_tcp_uses_tls(bool value);
  public:

  // bool external_tcp_uses_tls = 9;
  void clear_external_tcp_uses_tls();
  bool external_tcp_uses_tls() const;
  void set_external_tcp_uses_tls(bool value);
  private:
  bool _internal_external_tcp_uses_tls() const;
  void _internal_set_external_tcp_uses_tls(bool value);
  public:

  // bool is_read_only_replica = 17;
  void clear_is_read_only_replica();
  bool is_read_only_replica() const;
  void set_is_read_only_replica(bool value);
  private:
  bool _internal_is_read_only_replica() const;
  void _internal_set_is_read_only_replica(bool value);
  public:

  // int64 last_commit_position = 10;
  void clear_last_commit_position();
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position() const;
  void set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_commit_position() const;
  void _internal_set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 writer_checkpoint = 11;
  void clear_writer_checkpoint();
  ::PROTOBUF_NAMESPACE_ID::int64 writer_checkpoint() const;
  void set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_writer_checkpoint() const;
  void _internal_set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 chaser_checkpoint = 12;
  void clear_chaser_checkpoint();
  ::PROTOBUF_NAMESPACE_ID::int64 chaser_checkpoint() const;
  void set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_chaser_checkpoint() const;
  void _internal_set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 epoch_position = 13;
  void clear_epoch_position();
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_position() const;
  void set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_epoch_position() const;
  void _internal_set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 epoch_number = 14;
  void clear_epoch_number();
  ::PROTOBUF_NAMESPACE_ID::int32 epoch_number() const;
  void set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epoch_number() const;
  void _internal_set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 node_priority = 16;
  void clear_node_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 node_priority() const;
  void set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_priority() const;
  void _internal_set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 advertise_http_port_to_client_as = 19;
  void clear_advertise_http_port_to_client_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 advertise_http_port_to_client_as() const;
  void set_advertise_http_port_to_client_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_advertise_http_port_to_client_as() const;
  void _internal_set_advertise_http_port_to_client_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 advertise_tcp_port_to_client_as = 20;
  void clear_advertise_tcp_port_to_client_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 advertise_tcp_port_to_client_as() const;
  void set_advertise_tcp_port_to_client_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_advertise_tcp_port_to_client_as() const;
  void _internal_set_advertise_tcp_port_to_client_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.MemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr advertise_host_to_client_as_;
  ::event_store::client::UUID* instance_id_;
  ::event_store::cluster::EndPoint* http_end_point_;
  ::event_store::cluster::EndPoint* internal_tcp_;
  ::event_store::cluster::EndPoint* external_tcp_;
  ::event_store::client::UUID* epoch_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  int state_;
  bool is_alive_;
  bool internal_tcp_uses_tls_;
  bool external_tcp_uses_tls_;
  bool is_read_only_replica_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_commit_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 writer_checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 chaser_checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 epoch_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 advertise_http_port_to_client_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 advertise_tcp_port_to_client_as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ReplicaLogWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ReplicaLogWrite) */ {
 public:
  inline ReplicaLogWrite() : ReplicaLogWrite(nullptr) {};
  virtual ~ReplicaLogWrite();

  ReplicaLogWrite(const ReplicaLogWrite& from);
  ReplicaLogWrite(ReplicaLogWrite&& from) noexcept
    : ReplicaLogWrite() {
    *this = ::std::move(from);
  }

  inline ReplicaLogWrite& operator=(const ReplicaLogWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaLogWrite& operator=(ReplicaLogWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplicaLogWrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicaLogWrite* internal_default_instance() {
    return reinterpret_cast<const ReplicaLogWrite*>(
               &_ReplicaLogWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReplicaLogWrite& a, ReplicaLogWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaLogWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaLogWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicaLogWrite* New() const final {
    return CreateMaybeMessage<ReplicaLogWrite>(nullptr);
  }

  ReplicaLogWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicaLogWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicaLogWrite& from);
  void MergeFrom(const ReplicaLogWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaLogWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ReplicaLogWrite";
  }
  protected:
  explicit ReplicaLogWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicaIdFieldNumber = 2,
    kLogPositionFieldNumber = 1,
  };
  // bytes replica_id = 2;
  void clear_replica_id();
  const std::string& replica_id() const;
  void set_replica_id(const std::string& value);
  void set_replica_id(std::string&& value);
  void set_replica_id(const char* value);
  void set_replica_id(const void* value, size_t size);
  std::string* mutable_replica_id();
  std::string* release_replica_id();
  void set_allocated_replica_id(std::string* replica_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_replica_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_replica_id(
      std::string* replica_id);
  private:
  const std::string& _internal_replica_id() const;
  void _internal_set_replica_id(const std::string& value);
  std::string* _internal_mutable_replica_id();
  public:

  // int64 log_position = 1;
  void clear_log_position();
  ::PROTOBUF_NAMESPACE_ID::int64 log_position() const;
  void set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_log_position() const;
  void _internal_set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.ReplicaLogWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replica_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 log_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ReplicatedTo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ReplicatedTo) */ {
 public:
  inline ReplicatedTo() : ReplicatedTo(nullptr) {};
  virtual ~ReplicatedTo();

  ReplicatedTo(const ReplicatedTo& from);
  ReplicatedTo(ReplicatedTo&& from) noexcept
    : ReplicatedTo() {
    *this = ::std::move(from);
  }

  inline ReplicatedTo& operator=(const ReplicatedTo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicatedTo& operator=(ReplicatedTo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplicatedTo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicatedTo* internal_default_instance() {
    return reinterpret_cast<const ReplicatedTo*>(
               &_ReplicatedTo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReplicatedTo& a, ReplicatedTo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicatedTo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicatedTo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicatedTo* New() const final {
    return CreateMaybeMessage<ReplicatedTo>(nullptr);
  }

  ReplicatedTo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicatedTo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicatedTo& from);
  void MergeFrom(const ReplicatedTo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicatedTo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ReplicatedTo";
  }
  protected:
  explicit ReplicatedTo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogPositionFieldNumber = 1,
  };
  // int64 log_position = 1;
  void clear_log_position();
  ::PROTOBUF_NAMESPACE_ID::int64 log_position() const;
  void set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_log_position() const;
  void _internal_set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.ReplicatedTo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 log_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class Epoch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.Epoch) */ {
 public:
  inline Epoch() : Epoch(nullptr) {};
  virtual ~Epoch();

  Epoch(const Epoch& from);
  Epoch(Epoch&& from) noexcept
    : Epoch() {
    *this = ::std::move(from);
  }

  inline Epoch& operator=(const Epoch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Epoch& operator=(Epoch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Epoch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Epoch* internal_default_instance() {
    return reinterpret_cast<const Epoch*>(
               &_Epoch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Epoch& a, Epoch& b) {
    a.Swap(&b);
  }
  inline void Swap(Epoch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Epoch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Epoch* New() const final {
    return CreateMaybeMessage<Epoch>(nullptr);
  }

  Epoch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Epoch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Epoch& from);
  void MergeFrom(const Epoch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Epoch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.Epoch";
  }
  protected:
  explicit Epoch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochIdFieldNumber = 3,
    kEpochPositionFieldNumber = 1,
    kEpochNumberFieldNumber = 2,
  };
  // bytes epoch_id = 3;
  void clear_epoch_id();
  const std::string& epoch_id() const;
  void set_epoch_id(const std::string& value);
  void set_epoch_id(std::string&& value);
  void set_epoch_id(const char* value);
  void set_epoch_id(const void* value, size_t size);
  std::string* mutable_epoch_id();
  std::string* release_epoch_id();
  void set_allocated_epoch_id(std::string* epoch_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_epoch_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_epoch_id(
      std::string* epoch_id);
  private:
  const std::string& _internal_epoch_id() const;
  void _internal_set_epoch_id(const std::string& value);
  std::string* _internal_mutable_epoch_id();
  public:

  // int64 epoch_position = 1;
  void clear_epoch_position();
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_position() const;
  void set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_epoch_position() const;
  void _internal_set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 epoch_number = 2;
  void clear_epoch_number();
  ::PROTOBUF_NAMESPACE_ID::int32 epoch_number() const;
  void set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epoch_number() const;
  void _internal_set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.Epoch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epoch_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 epoch_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class SubscribeReplica PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.SubscribeReplica) */ {
 public:
  inline SubscribeReplica() : SubscribeReplica(nullptr) {};
  virtual ~SubscribeReplica();

  SubscribeReplica(const SubscribeReplica& from);
  SubscribeReplica(SubscribeReplica&& from) noexcept
    : SubscribeReplica() {
    *this = ::std::move(from);
  }

  inline SubscribeReplica& operator=(const SubscribeReplica& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeReplica& operator=(SubscribeReplica&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeReplica& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeReplica* internal_default_instance() {
    return reinterpret_cast<const SubscribeReplica*>(
               &_SubscribeReplica_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SubscribeReplica& a, SubscribeReplica& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeReplica* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeReplica* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeReplica* New() const final {
    return CreateMaybeMessage<SubscribeReplica>(nullptr);
  }

  SubscribeReplica* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeReplica>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeReplica& from);
  void MergeFrom(const SubscribeReplica& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeReplica* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.SubscribeReplica";
  }
  protected:
  explicit SubscribeReplica(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastEpochsFieldNumber = 3,
    kChunkIdFieldNumber = 2,
    kIpFieldNumber = 4,
    kLeaderIdFieldNumber = 6,
    kSubscriptionIdFieldNumber = 7,
    kLogPositionFieldNumber = 1,
    kPortFieldNumber = 5,
    kIsPromotableFieldNumber = 8,
  };
  // repeated .event_store.cluster.Epoch LastEpochs = 3;
  int lastepochs_size() const;
  private:
  int _internal_lastepochs_size() const;
  public:
  void clear_lastepochs();
  ::event_store::cluster::Epoch* mutable_lastepochs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::Epoch >*
      mutable_lastepochs();
  private:
  const ::event_store::cluster::Epoch& _internal_lastepochs(int index) const;
  ::event_store::cluster::Epoch* _internal_add_lastepochs();
  public:
  const ::event_store::cluster::Epoch& lastepochs(int index) const;
  ::event_store::cluster::Epoch* add_lastepochs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::Epoch >&
      lastepochs() const;

  // bytes chunk_id = 2;
  void clear_chunk_id();
  const std::string& chunk_id() const;
  void set_chunk_id(const std::string& value);
  void set_chunk_id(std::string&& value);
  void set_chunk_id(const char* value);
  void set_chunk_id(const void* value, size_t size);
  std::string* mutable_chunk_id();
  std::string* release_chunk_id();
  void set_allocated_chunk_id(std::string* chunk_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_chunk_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chunk_id(
      std::string* chunk_id);
  private:
  const std::string& _internal_chunk_id() const;
  void _internal_set_chunk_id(const std::string& value);
  std::string* _internal_mutable_chunk_id();
  public:

  // bytes ip = 4;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes leader_id = 6;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 7;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // int64 log_position = 1;
  void clear_log_position();
  ::PROTOBUF_NAMESPACE_ID::int64 log_position() const;
  void set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_log_position() const;
  void _internal_set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 port = 5;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_promotable = 8;
  void clear_is_promotable();
  bool is_promotable() const;
  void set_is_promotable(bool value);
  private:
  bool _internal_is_promotable() const;
  void _internal_set_is_promotable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.SubscribeReplica)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::Epoch > lastepochs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 log_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  bool is_promotable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ReplicaSubscriptionRetry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ReplicaSubscriptionRetry) */ {
 public:
  inline ReplicaSubscriptionRetry() : ReplicaSubscriptionRetry(nullptr) {};
  virtual ~ReplicaSubscriptionRetry();

  ReplicaSubscriptionRetry(const ReplicaSubscriptionRetry& from);
  ReplicaSubscriptionRetry(ReplicaSubscriptionRetry&& from) noexcept
    : ReplicaSubscriptionRetry() {
    *this = ::std::move(from);
  }

  inline ReplicaSubscriptionRetry& operator=(const ReplicaSubscriptionRetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaSubscriptionRetry& operator=(ReplicaSubscriptionRetry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplicaSubscriptionRetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicaSubscriptionRetry* internal_default_instance() {
    return reinterpret_cast<const ReplicaSubscriptionRetry*>(
               &_ReplicaSubscriptionRetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReplicaSubscriptionRetry& a, ReplicaSubscriptionRetry& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaSubscriptionRetry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaSubscriptionRetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicaSubscriptionRetry* New() const final {
    return CreateMaybeMessage<ReplicaSubscriptionRetry>(nullptr);
  }

  ReplicaSubscriptionRetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicaSubscriptionRetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicaSubscriptionRetry& from);
  void MergeFrom(const ReplicaSubscriptionRetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaSubscriptionRetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ReplicaSubscriptionRetry";
  }
  protected:
  explicit ReplicaSubscriptionRetry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kSubscriptionIdFieldNumber = 2,
  };
  // bytes leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 2;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.ReplicaSubscriptionRetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ReplicaSubscribed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ReplicaSubscribed) */ {
 public:
  inline ReplicaSubscribed() : ReplicaSubscribed(nullptr) {};
  virtual ~ReplicaSubscribed();

  ReplicaSubscribed(const ReplicaSubscribed& from);
  ReplicaSubscribed(ReplicaSubscribed&& from) noexcept
    : ReplicaSubscribed() {
    *this = ::std::move(from);
  }

  inline ReplicaSubscribed& operator=(const ReplicaSubscribed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaSubscribed& operator=(ReplicaSubscribed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplicaSubscribed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicaSubscribed* internal_default_instance() {
    return reinterpret_cast<const ReplicaSubscribed*>(
               &_ReplicaSubscribed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReplicaSubscribed& a, ReplicaSubscribed& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaSubscribed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaSubscribed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicaSubscribed* New() const final {
    return CreateMaybeMessage<ReplicaSubscribed>(nullptr);
  }

  ReplicaSubscribed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicaSubscribed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicaSubscribed& from);
  void MergeFrom(const ReplicaSubscribed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaSubscribed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ReplicaSubscribed";
  }
  protected:
  explicit ReplicaSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kSubscriptionIdFieldNumber = 2,
    kSubscriptionPositionFieldNumber = 3,
  };
  // bytes leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 2;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // int64 subscription_position = 3;
  void clear_subscription_position();
  ::PROTOBUF_NAMESPACE_ID::int64 subscription_position() const;
  void set_subscription_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_subscription_position() const;
  void _internal_set_subscription_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.ReplicaSubscribed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 subscription_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class ReplicaLogPositionAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.ReplicaLogPositionAck) */ {
 public:
  inline ReplicaLogPositionAck() : ReplicaLogPositionAck(nullptr) {};
  virtual ~ReplicaLogPositionAck();

  ReplicaLogPositionAck(const ReplicaLogPositionAck& from);
  ReplicaLogPositionAck(ReplicaLogPositionAck&& from) noexcept
    : ReplicaLogPositionAck() {
    *this = ::std::move(from);
  }

  inline ReplicaLogPositionAck& operator=(const ReplicaLogPositionAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaLogPositionAck& operator=(ReplicaLogPositionAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplicaLogPositionAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicaLogPositionAck* internal_default_instance() {
    return reinterpret_cast<const ReplicaLogPositionAck*>(
               &_ReplicaLogPositionAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReplicaLogPositionAck& a, ReplicaLogPositionAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaLogPositionAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaLogPositionAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicaLogPositionAck* New() const final {
    return CreateMaybeMessage<ReplicaLogPositionAck>(nullptr);
  }

  ReplicaLogPositionAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicaLogPositionAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicaLogPositionAck& from);
  void MergeFrom(const ReplicaLogPositionAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaLogPositionAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.ReplicaLogPositionAck";
  }
  protected:
  explicit ReplicaLogPositionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 1,
    kReplicationLogPositionFieldNumber = 2,
  };
  // bytes subscription_id = 1;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // int64 replication_log_position = 2;
  void clear_replication_log_position();
  ::PROTOBUF_NAMESPACE_ID::int64 replication_log_position() const;
  void set_replication_log_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_replication_log_position() const;
  void _internal_set_replication_log_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.ReplicaLogPositionAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 replication_log_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class CreateChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.CreateChunk) */ {
 public:
  inline CreateChunk() : CreateChunk(nullptr) {};
  virtual ~CreateChunk();

  CreateChunk(const CreateChunk& from);
  CreateChunk(CreateChunk&& from) noexcept
    : CreateChunk() {
    *this = ::std::move(from);
  }

  inline CreateChunk& operator=(const CreateChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChunk& operator=(CreateChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChunk* internal_default_instance() {
    return reinterpret_cast<const CreateChunk*>(
               &_CreateChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CreateChunk& a, CreateChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChunk* New() const final {
    return CreateMaybeMessage<CreateChunk>(nullptr);
  }

  CreateChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateChunk& from);
  void MergeFrom(const CreateChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.CreateChunk";
  }
  protected:
  explicit CreateChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kSubscriptionIdFieldNumber = 2,
    kChunkHeaderBytesFieldNumber = 3,
    kFileSizeFieldNumber = 4,
    kIsCompletedChunkFieldNumber = 5,
  };
  // bytes leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 2;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // bytes chunk_header_bytes = 3;
  void clear_chunk_header_bytes();
  const std::string& chunk_header_bytes() const;
  void set_chunk_header_bytes(const std::string& value);
  void set_chunk_header_bytes(std::string&& value);
  void set_chunk_header_bytes(const char* value);
  void set_chunk_header_bytes(const void* value, size_t size);
  std::string* mutable_chunk_header_bytes();
  std::string* release_chunk_header_bytes();
  void set_allocated_chunk_header_bytes(std::string* chunk_header_bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_chunk_header_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chunk_header_bytes(
      std::string* chunk_header_bytes);
  private:
  const std::string& _internal_chunk_header_bytes() const;
  void _internal_set_chunk_header_bytes(const std::string& value);
  std::string* _internal_mutable_chunk_header_bytes();
  public:

  // int32 file_size = 4;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::int32 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_completed_chunk = 5;
  void clear_is_completed_chunk();
  bool is_completed_chunk() const;
  void set_is_completed_chunk(bool value);
  private:
  bool _internal_is_completed_chunk() const;
  void _internal_set_is_completed_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.CreateChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_header_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_size_;
  bool is_completed_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class RawChunkBulk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.RawChunkBulk) */ {
 public:
  inline RawChunkBulk() : RawChunkBulk(nullptr) {};
  virtual ~RawChunkBulk();

  RawChunkBulk(const RawChunkBulk& from);
  RawChunkBulk(RawChunkBulk&& from) noexcept
    : RawChunkBulk() {
    *this = ::std::move(from);
  }

  inline RawChunkBulk& operator=(const RawChunkBulk& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawChunkBulk& operator=(RawChunkBulk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawChunkBulk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawChunkBulk* internal_default_instance() {
    return reinterpret_cast<const RawChunkBulk*>(
               &_RawChunkBulk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RawChunkBulk& a, RawChunkBulk& b) {
    a.Swap(&b);
  }
  inline void Swap(RawChunkBulk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawChunkBulk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawChunkBulk* New() const final {
    return CreateMaybeMessage<RawChunkBulk>(nullptr);
  }

  RawChunkBulk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawChunkBulk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawChunkBulk& from);
  void MergeFrom(const RawChunkBulk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawChunkBulk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.RawChunkBulk";
  }
  protected:
  explicit RawChunkBulk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kSubscriptionIdFieldNumber = 2,
    kRawBytesFieldNumber = 6,
    kChunkStartNumberFieldNumber = 3,
    kChunkEndNumberFieldNumber = 4,
    kRawPositionFieldNumber = 5,
    kCompleteChunkFieldNumber = 7,
  };
  // bytes leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 2;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // bytes raw_bytes = 6;
  void clear_raw_bytes();
  const std::string& raw_bytes() const;
  void set_raw_bytes(const std::string& value);
  void set_raw_bytes(std::string&& value);
  void set_raw_bytes(const char* value);
  void set_raw_bytes(const void* value, size_t size);
  std::string* mutable_raw_bytes();
  std::string* release_raw_bytes();
  void set_allocated_raw_bytes(std::string* raw_bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_raw_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_raw_bytes(
      std::string* raw_bytes);
  private:
  const std::string& _internal_raw_bytes() const;
  void _internal_set_raw_bytes(const std::string& value);
  std::string* _internal_mutable_raw_bytes();
  public:

  // int32 chunk_start_number = 3;
  void clear_chunk_start_number();
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_start_number() const;
  void set_chunk_start_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_start_number() const;
  void _internal_set_chunk_start_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chunk_end_number = 4;
  void clear_chunk_end_number();
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_end_number() const;
  void set_chunk_end_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_end_number() const;
  void _internal_set_chunk_end_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 raw_position = 5;
  void clear_raw_position();
  ::PROTOBUF_NAMESPACE_ID::int32 raw_position() const;
  void set_raw_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raw_position() const;
  void _internal_set_raw_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool complete_chunk = 7;
  void clear_complete_chunk();
  bool complete_chunk() const;
  void set_complete_chunk(bool value);
  private:
  bool _internal_complete_chunk() const;
  void _internal_set_complete_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.RawChunkBulk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_start_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_end_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 raw_position_;
  bool complete_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class DataChunkBulk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.DataChunkBulk) */ {
 public:
  inline DataChunkBulk() : DataChunkBulk(nullptr) {};
  virtual ~DataChunkBulk();

  DataChunkBulk(const DataChunkBulk& from);
  DataChunkBulk(DataChunkBulk&& from) noexcept
    : DataChunkBulk() {
    *this = ::std::move(from);
  }

  inline DataChunkBulk& operator=(const DataChunkBulk& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChunkBulk& operator=(DataChunkBulk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataChunkBulk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataChunkBulk* internal_default_instance() {
    return reinterpret_cast<const DataChunkBulk*>(
               &_DataChunkBulk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DataChunkBulk& a, DataChunkBulk& b) {
    a.Swap(&b);
  }
  inline void Swap(DataChunkBulk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChunkBulk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataChunkBulk* New() const final {
    return CreateMaybeMessage<DataChunkBulk>(nullptr);
  }

  DataChunkBulk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataChunkBulk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataChunkBulk& from);
  void MergeFrom(const DataChunkBulk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataChunkBulk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.DataChunkBulk";
  }
  protected:
  explicit DataChunkBulk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kSubscriptionIdFieldNumber = 2,
    kDataBytesFieldNumber = 6,
    kChunkStartNumberFieldNumber = 3,
    kChunkEndNumberFieldNumber = 4,
    kSubscriptionPositionFieldNumber = 5,
    kCompleteChunkFieldNumber = 7,
  };
  // bytes leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 2;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // bytes data_bytes = 6;
  void clear_data_bytes();
  const std::string& data_bytes() const;
  void set_data_bytes(const std::string& value);
  void set_data_bytes(std::string&& value);
  void set_data_bytes(const char* value);
  void set_data_bytes(const void* value, size_t size);
  std::string* mutable_data_bytes();
  std::string* release_data_bytes();
  void set_allocated_data_bytes(std::string* data_bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data_bytes(
      std::string* data_bytes);
  private:
  const std::string& _internal_data_bytes() const;
  void _internal_set_data_bytes(const std::string& value);
  std::string* _internal_mutable_data_bytes();
  public:

  // int32 chunk_start_number = 3;
  void clear_chunk_start_number();
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_start_number() const;
  void set_chunk_start_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_start_number() const;
  void _internal_set_chunk_start_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chunk_end_number = 4;
  void clear_chunk_end_number();
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_end_number() const;
  void set_chunk_end_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_end_number() const;
  void _internal_set_chunk_end_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 subscription_position = 5;
  void clear_subscription_position();
  ::PROTOBUF_NAMESPACE_ID::int64 subscription_position() const;
  void set_subscription_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_subscription_position() const;
  void _internal_set_subscription_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool complete_chunk = 7;
  void clear_complete_chunk();
  bool complete_chunk() const;
  void set_complete_chunk(bool value);
  private:
  bool _internal_complete_chunk() const;
  void _internal_set_complete_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.DataChunkBulk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_start_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_end_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 subscription_position_;
  bool complete_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class FollowerAssignment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.FollowerAssignment) */ {
 public:
  inline FollowerAssignment() : FollowerAssignment(nullptr) {};
  virtual ~FollowerAssignment();

  FollowerAssignment(const FollowerAssignment& from);
  FollowerAssignment(FollowerAssignment&& from) noexcept
    : FollowerAssignment() {
    *this = ::std::move(from);
  }

  inline FollowerAssignment& operator=(const FollowerAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowerAssignment& operator=(FollowerAssignment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FollowerAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowerAssignment* internal_default_instance() {
    return reinterpret_cast<const FollowerAssignment*>(
               &_FollowerAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FollowerAssignment& a, FollowerAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowerAssignment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FollowerAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FollowerAssignment* New() const final {
    return CreateMaybeMessage<FollowerAssignment>(nullptr);
  }

  FollowerAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FollowerAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FollowerAssignment& from);
  void MergeFrom(const FollowerAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowerAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.FollowerAssignment";
  }
  protected:
  explicit FollowerAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kSubscriptionIdFieldNumber = 2,
  };
  // bytes leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 2;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.FollowerAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class CloneAssignment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.CloneAssignment) */ {
 public:
  inline CloneAssignment() : CloneAssignment(nullptr) {};
  virtual ~CloneAssignment();

  CloneAssignment(const CloneAssignment& from);
  CloneAssignment(CloneAssignment&& from) noexcept
    : CloneAssignment() {
    *this = ::std::move(from);
  }

  inline CloneAssignment& operator=(const CloneAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloneAssignment& operator=(CloneAssignment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloneAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloneAssignment* internal_default_instance() {
    return reinterpret_cast<const CloneAssignment*>(
               &_CloneAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CloneAssignment& a, CloneAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(CloneAssignment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloneAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloneAssignment* New() const final {
    return CreateMaybeMessage<CloneAssignment>(nullptr);
  }

  CloneAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloneAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloneAssignment& from);
  void MergeFrom(const CloneAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloneAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.CloneAssignment";
  }
  protected:
  explicit CloneAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kSubscriptionIdFieldNumber = 2,
  };
  // bytes leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 2;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.CloneAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// -------------------------------------------------------------------

class DropSubscription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.cluster.DropSubscription) */ {
 public:
  inline DropSubscription() : DropSubscription(nullptr) {};
  virtual ~DropSubscription();

  DropSubscription(const DropSubscription& from);
  DropSubscription(DropSubscription&& from) noexcept
    : DropSubscription() {
    *this = ::std::move(from);
  }

  inline DropSubscription& operator=(const DropSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropSubscription& operator=(DropSubscription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DropSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropSubscription* internal_default_instance() {
    return reinterpret_cast<const DropSubscription*>(
               &_DropSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DropSubscription& a, DropSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(DropSubscription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropSubscription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DropSubscription* New() const final {
    return CreateMaybeMessage<DropSubscription>(nullptr);
  }

  DropSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DropSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DropSubscription& from);
  void MergeFrom(const DropSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.cluster.DropSubscription";
  }
  protected:
  explicit DropSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cluster_2eproto);
    return ::descriptor_table_cluster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
    kSubscriptionIdFieldNumber = 2,
  };
  // bytes leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const void* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // bytes subscription_id = 2;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const void* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // @@protoc_insertion_point(class_scope:event_store.cluster.DropSubscription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cluster_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GossipRequest

// .event_store.cluster.ClusterInfo info = 1;
inline bool GossipRequest::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GossipRequest::has_info() const {
  return _internal_has_info();
}
inline void GossipRequest::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::event_store::cluster::ClusterInfo& GossipRequest::_internal_info() const {
  const ::event_store::cluster::ClusterInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::ClusterInfo*>(
      &::event_store::cluster::_ClusterInfo_default_instance_);
}
inline const ::event_store::cluster::ClusterInfo& GossipRequest::info() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.GossipRequest.info)
  return _internal_info();
}
inline void GossipRequest::unsafe_arena_set_allocated_info(
    ::event_store::cluster::ClusterInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.GossipRequest.info)
}
inline ::event_store::cluster::ClusterInfo* GossipRequest::release_info() {
  auto temp = unsafe_arena_release_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::ClusterInfo* GossipRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:event_store.cluster.GossipRequest.info)
  
  ::event_store::cluster::ClusterInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::event_store::cluster::ClusterInfo* GossipRequest::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::ClusterInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::event_store::cluster::ClusterInfo* GossipRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.GossipRequest.info)
  return _internal_mutable_info();
}
inline void GossipRequest::set_allocated_info(::event_store::cluster::ClusterInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.GossipRequest.info)
}

// .event_store.cluster.EndPoint server = 2;
inline bool GossipRequest::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool GossipRequest::has_server() const {
  return _internal_has_server();
}
inline void GossipRequest::clear_server() {
  if (GetArena() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& GossipRequest::_internal_server() const {
  const ::event_store::cluster::EndPoint* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& GossipRequest::server() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.GossipRequest.server)
  return _internal_server();
}
inline void GossipRequest::unsafe_arena_set_allocated_server(
    ::event_store::cluster::EndPoint* server) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  server_ = server;
  if (server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.GossipRequest.server)
}
inline ::event_store::cluster::EndPoint* GossipRequest::release_server() {
  auto temp = unsafe_arena_release_server();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* GossipRequest::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_release:event_store.cluster.GossipRequest.server)
  
  ::event_store::cluster::EndPoint* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* GossipRequest::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    server_ = p;
  }
  return server_;
}
inline ::event_store::cluster::EndPoint* GossipRequest::mutable_server() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.GossipRequest.server)
  return _internal_mutable_server();
}
inline void GossipRequest::set_allocated_server(::event_store::cluster::EndPoint* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server);
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.GossipRequest.server)
}

// -------------------------------------------------------------------

// ViewChangeRequest

// .event_store.client.UUID server_id = 1;
inline bool ViewChangeRequest::_internal_has_server_id() const {
  return this != internal_default_instance() && server_id_ != nullptr;
}
inline bool ViewChangeRequest::has_server_id() const {
  return _internal_has_server_id();
}
inline const ::event_store::client::UUID& ViewChangeRequest::_internal_server_id() const {
  const ::event_store::client::UUID* p = server_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& ViewChangeRequest::server_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ViewChangeRequest.server_id)
  return _internal_server_id();
}
inline void ViewChangeRequest::unsafe_arena_set_allocated_server_id(
    ::event_store::client::UUID* server_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  server_id_ = server_id;
  if (server_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ViewChangeRequest.server_id)
}
inline ::event_store::client::UUID* ViewChangeRequest::release_server_id() {
  auto temp = unsafe_arena_release_server_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* ViewChangeRequest::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ViewChangeRequest.server_id)
  
  ::event_store::client::UUID* temp = server_id_;
  server_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* ViewChangeRequest::_internal_mutable_server_id() {
  
  if (server_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    server_id_ = p;
  }
  return server_id_;
}
inline ::event_store::client::UUID* ViewChangeRequest::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ViewChangeRequest.server_id)
  return _internal_mutable_server_id();
}
inline void ViewChangeRequest::set_allocated_server_id(::event_store::client::UUID* server_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  if (server_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id)->GetArena();
    if (message_arena != submessage_arena) {
      server_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_id, submessage_arena);
    }
    
  } else {
    
  }
  server_id_ = server_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ViewChangeRequest.server_id)
}

// .event_store.cluster.EndPoint server_http = 2;
inline bool ViewChangeRequest::_internal_has_server_http() const {
  return this != internal_default_instance() && server_http_ != nullptr;
}
inline bool ViewChangeRequest::has_server_http() const {
  return _internal_has_server_http();
}
inline void ViewChangeRequest::clear_server_http() {
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& ViewChangeRequest::_internal_server_http() const {
  const ::event_store::cluster::EndPoint* p = server_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& ViewChangeRequest::server_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ViewChangeRequest.server_http)
  return _internal_server_http();
}
inline void ViewChangeRequest::unsafe_arena_set_allocated_server_http(
    ::event_store::cluster::EndPoint* server_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_http_);
  }
  server_http_ = server_http;
  if (server_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ViewChangeRequest.server_http)
}
inline ::event_store::cluster::EndPoint* ViewChangeRequest::release_server_http() {
  auto temp = unsafe_arena_release_server_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* ViewChangeRequest::unsafe_arena_release_server_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ViewChangeRequest.server_http)
  
  ::event_store::cluster::EndPoint* temp = server_http_;
  server_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* ViewChangeRequest::_internal_mutable_server_http() {
  
  if (server_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    server_http_ = p;
  }
  return server_http_;
}
inline ::event_store::cluster::EndPoint* ViewChangeRequest::mutable_server_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ViewChangeRequest.server_http)
  return _internal_mutable_server_http();
}
inline void ViewChangeRequest::set_allocated_server_http(::event_store::cluster::EndPoint* server_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_http_;
  }
  if (server_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_http);
    if (message_arena != submessage_arena) {
      server_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_http, submessage_arena);
    }
    
  } else {
    
  }
  server_http_ = server_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ViewChangeRequest.server_http)
}

// int32 attempted_view = 3;
inline void ViewChangeRequest::clear_attempted_view() {
  attempted_view_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewChangeRequest::_internal_attempted_view() const {
  return attempted_view_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewChangeRequest::attempted_view() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ViewChangeRequest.attempted_view)
  return _internal_attempted_view();
}
inline void ViewChangeRequest::_internal_set_attempted_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attempted_view_ = value;
}
inline void ViewChangeRequest::set_attempted_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attempted_view(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ViewChangeRequest.attempted_view)
}

// -------------------------------------------------------------------

// ViewChangeProofRequest

// .event_store.client.UUID server_id = 1;
inline bool ViewChangeProofRequest::_internal_has_server_id() const {
  return this != internal_default_instance() && server_id_ != nullptr;
}
inline bool ViewChangeProofRequest::has_server_id() const {
  return _internal_has_server_id();
}
inline const ::event_store::client::UUID& ViewChangeProofRequest::_internal_server_id() const {
  const ::event_store::client::UUID* p = server_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& ViewChangeProofRequest::server_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ViewChangeProofRequest.server_id)
  return _internal_server_id();
}
inline void ViewChangeProofRequest::unsafe_arena_set_allocated_server_id(
    ::event_store::client::UUID* server_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  server_id_ = server_id;
  if (server_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ViewChangeProofRequest.server_id)
}
inline ::event_store::client::UUID* ViewChangeProofRequest::release_server_id() {
  auto temp = unsafe_arena_release_server_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* ViewChangeProofRequest::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ViewChangeProofRequest.server_id)
  
  ::event_store::client::UUID* temp = server_id_;
  server_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* ViewChangeProofRequest::_internal_mutable_server_id() {
  
  if (server_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    server_id_ = p;
  }
  return server_id_;
}
inline ::event_store::client::UUID* ViewChangeProofRequest::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ViewChangeProofRequest.server_id)
  return _internal_mutable_server_id();
}
inline void ViewChangeProofRequest::set_allocated_server_id(::event_store::client::UUID* server_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  if (server_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id)->GetArena();
    if (message_arena != submessage_arena) {
      server_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_id, submessage_arena);
    }
    
  } else {
    
  }
  server_id_ = server_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ViewChangeProofRequest.server_id)
}

// .event_store.cluster.EndPoint server_http = 2;
inline bool ViewChangeProofRequest::_internal_has_server_http() const {
  return this != internal_default_instance() && server_http_ != nullptr;
}
inline bool ViewChangeProofRequest::has_server_http() const {
  return _internal_has_server_http();
}
inline void ViewChangeProofRequest::clear_server_http() {
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& ViewChangeProofRequest::_internal_server_http() const {
  const ::event_store::cluster::EndPoint* p = server_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& ViewChangeProofRequest::server_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ViewChangeProofRequest.server_http)
  return _internal_server_http();
}
inline void ViewChangeProofRequest::unsafe_arena_set_allocated_server_http(
    ::event_store::cluster::EndPoint* server_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_http_);
  }
  server_http_ = server_http;
  if (server_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ViewChangeProofRequest.server_http)
}
inline ::event_store::cluster::EndPoint* ViewChangeProofRequest::release_server_http() {
  auto temp = unsafe_arena_release_server_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* ViewChangeProofRequest::unsafe_arena_release_server_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ViewChangeProofRequest.server_http)
  
  ::event_store::cluster::EndPoint* temp = server_http_;
  server_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* ViewChangeProofRequest::_internal_mutable_server_http() {
  
  if (server_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    server_http_ = p;
  }
  return server_http_;
}
inline ::event_store::cluster::EndPoint* ViewChangeProofRequest::mutable_server_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ViewChangeProofRequest.server_http)
  return _internal_mutable_server_http();
}
inline void ViewChangeProofRequest::set_allocated_server_http(::event_store::cluster::EndPoint* server_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_http_;
  }
  if (server_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_http);
    if (message_arena != submessage_arena) {
      server_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_http, submessage_arena);
    }
    
  } else {
    
  }
  server_http_ = server_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ViewChangeProofRequest.server_http)
}

// int32 installed_view = 3;
inline void ViewChangeProofRequest::clear_installed_view() {
  installed_view_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewChangeProofRequest::_internal_installed_view() const {
  return installed_view_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewChangeProofRequest::installed_view() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ViewChangeProofRequest.installed_view)
  return _internal_installed_view();
}
inline void ViewChangeProofRequest::_internal_set_installed_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  installed_view_ = value;
}
inline void ViewChangeProofRequest::set_installed_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_installed_view(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ViewChangeProofRequest.installed_view)
}

// -------------------------------------------------------------------

// PrepareRequest

// .event_store.client.UUID server_id = 1;
inline bool PrepareRequest::_internal_has_server_id() const {
  return this != internal_default_instance() && server_id_ != nullptr;
}
inline bool PrepareRequest::has_server_id() const {
  return _internal_has_server_id();
}
inline const ::event_store::client::UUID& PrepareRequest::_internal_server_id() const {
  const ::event_store::client::UUID* p = server_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& PrepareRequest::server_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareRequest.server_id)
  return _internal_server_id();
}
inline void PrepareRequest::unsafe_arena_set_allocated_server_id(
    ::event_store::client::UUID* server_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  server_id_ = server_id;
  if (server_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.PrepareRequest.server_id)
}
inline ::event_store::client::UUID* PrepareRequest::release_server_id() {
  auto temp = unsafe_arena_release_server_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* PrepareRequest::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.PrepareRequest.server_id)
  
  ::event_store::client::UUID* temp = server_id_;
  server_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* PrepareRequest::_internal_mutable_server_id() {
  
  if (server_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    server_id_ = p;
  }
  return server_id_;
}
inline ::event_store::client::UUID* PrepareRequest::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.PrepareRequest.server_id)
  return _internal_mutable_server_id();
}
inline void PrepareRequest::set_allocated_server_id(::event_store::client::UUID* server_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  if (server_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id)->GetArena();
    if (message_arena != submessage_arena) {
      server_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_id, submessage_arena);
    }
    
  } else {
    
  }
  server_id_ = server_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.PrepareRequest.server_id)
}

// .event_store.cluster.EndPoint server_http = 2;
inline bool PrepareRequest::_internal_has_server_http() const {
  return this != internal_default_instance() && server_http_ != nullptr;
}
inline bool PrepareRequest::has_server_http() const {
  return _internal_has_server_http();
}
inline void PrepareRequest::clear_server_http() {
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& PrepareRequest::_internal_server_http() const {
  const ::event_store::cluster::EndPoint* p = server_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& PrepareRequest::server_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareRequest.server_http)
  return _internal_server_http();
}
inline void PrepareRequest::unsafe_arena_set_allocated_server_http(
    ::event_store::cluster::EndPoint* server_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_http_);
  }
  server_http_ = server_http;
  if (server_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.PrepareRequest.server_http)
}
inline ::event_store::cluster::EndPoint* PrepareRequest::release_server_http() {
  auto temp = unsafe_arena_release_server_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* PrepareRequest::unsafe_arena_release_server_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.PrepareRequest.server_http)
  
  ::event_store::cluster::EndPoint* temp = server_http_;
  server_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* PrepareRequest::_internal_mutable_server_http() {
  
  if (server_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    server_http_ = p;
  }
  return server_http_;
}
inline ::event_store::cluster::EndPoint* PrepareRequest::mutable_server_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.PrepareRequest.server_http)
  return _internal_mutable_server_http();
}
inline void PrepareRequest::set_allocated_server_http(::event_store::cluster::EndPoint* server_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_http_;
  }
  if (server_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_http);
    if (message_arena != submessage_arena) {
      server_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_http, submessage_arena);
    }
    
  } else {
    
  }
  server_http_ = server_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.PrepareRequest.server_http)
}

// int32 view = 3;
inline void PrepareRequest::clear_view() {
  view_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepareRequest::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepareRequest::view() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareRequest.view)
  return _internal_view();
}
inline void PrepareRequest::_internal_set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_ = value;
}
inline void PrepareRequest::set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.PrepareRequest.view)
}

// -------------------------------------------------------------------

// PrepareOkRequest

// int32 view = 1;
inline void PrepareOkRequest::clear_view() {
  view_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepareOkRequest::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepareOkRequest::view() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.view)
  return _internal_view();
}
inline void PrepareOkRequest::_internal_set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_ = value;
}
inline void PrepareOkRequest::set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.PrepareOkRequest.view)
}

// .event_store.client.UUID server_id = 2;
inline bool PrepareOkRequest::_internal_has_server_id() const {
  return this != internal_default_instance() && server_id_ != nullptr;
}
inline bool PrepareOkRequest::has_server_id() const {
  return _internal_has_server_id();
}
inline const ::event_store::client::UUID& PrepareOkRequest::_internal_server_id() const {
  const ::event_store::client::UUID* p = server_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& PrepareOkRequest::server_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.server_id)
  return _internal_server_id();
}
inline void PrepareOkRequest::unsafe_arena_set_allocated_server_id(
    ::event_store::client::UUID* server_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  server_id_ = server_id;
  if (server_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.PrepareOkRequest.server_id)
}
inline ::event_store::client::UUID* PrepareOkRequest::release_server_id() {
  auto temp = unsafe_arena_release_server_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* PrepareOkRequest::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.PrepareOkRequest.server_id)
  
  ::event_store::client::UUID* temp = server_id_;
  server_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* PrepareOkRequest::_internal_mutable_server_id() {
  
  if (server_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    server_id_ = p;
  }
  return server_id_;
}
inline ::event_store::client::UUID* PrepareOkRequest::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.PrepareOkRequest.server_id)
  return _internal_mutable_server_id();
}
inline void PrepareOkRequest::set_allocated_server_id(::event_store::client::UUID* server_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  if (server_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id)->GetArena();
    if (message_arena != submessage_arena) {
      server_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_id, submessage_arena);
    }
    
  } else {
    
  }
  server_id_ = server_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.PrepareOkRequest.server_id)
}

// .event_store.cluster.EndPoint server_http = 3;
inline bool PrepareOkRequest::_internal_has_server_http() const {
  return this != internal_default_instance() && server_http_ != nullptr;
}
inline bool PrepareOkRequest::has_server_http() const {
  return _internal_has_server_http();
}
inline void PrepareOkRequest::clear_server_http() {
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& PrepareOkRequest::_internal_server_http() const {
  const ::event_store::cluster::EndPoint* p = server_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& PrepareOkRequest::server_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.server_http)
  return _internal_server_http();
}
inline void PrepareOkRequest::unsafe_arena_set_allocated_server_http(
    ::event_store::cluster::EndPoint* server_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_http_);
  }
  server_http_ = server_http;
  if (server_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.PrepareOkRequest.server_http)
}
inline ::event_store::cluster::EndPoint* PrepareOkRequest::release_server_http() {
  auto temp = unsafe_arena_release_server_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* PrepareOkRequest::unsafe_arena_release_server_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.PrepareOkRequest.server_http)
  
  ::event_store::cluster::EndPoint* temp = server_http_;
  server_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* PrepareOkRequest::_internal_mutable_server_http() {
  
  if (server_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    server_http_ = p;
  }
  return server_http_;
}
inline ::event_store::cluster::EndPoint* PrepareOkRequest::mutable_server_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.PrepareOkRequest.server_http)
  return _internal_mutable_server_http();
}
inline void PrepareOkRequest::set_allocated_server_http(::event_store::cluster::EndPoint* server_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_http_;
  }
  if (server_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_http);
    if (message_arena != submessage_arena) {
      server_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_http, submessage_arena);
    }
    
  } else {
    
  }
  server_http_ = server_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.PrepareOkRequest.server_http)
}

// int32 epoch_number = 4;
inline void PrepareOkRequest::clear_epoch_number() {
  epoch_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepareOkRequest::_internal_epoch_number() const {
  return epoch_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepareOkRequest::epoch_number() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.epoch_number)
  return _internal_epoch_number();
}
inline void PrepareOkRequest::_internal_set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  epoch_number_ = value;
}
inline void PrepareOkRequest::set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epoch_number(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.PrepareOkRequest.epoch_number)
}

// int64 epoch_position = 5;
inline void PrepareOkRequest::clear_epoch_position() {
  epoch_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrepareOkRequest::_internal_epoch_position() const {
  return epoch_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrepareOkRequest::epoch_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.epoch_position)
  return _internal_epoch_position();
}
inline void PrepareOkRequest::_internal_set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  epoch_position_ = value;
}
inline void PrepareOkRequest::set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_epoch_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.PrepareOkRequest.epoch_position)
}

// .event_store.client.UUID epoch_id = 6;
inline bool PrepareOkRequest::_internal_has_epoch_id() const {
  return this != internal_default_instance() && epoch_id_ != nullptr;
}
inline bool PrepareOkRequest::has_epoch_id() const {
  return _internal_has_epoch_id();
}
inline const ::event_store::client::UUID& PrepareOkRequest::_internal_epoch_id() const {
  const ::event_store::client::UUID* p = epoch_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& PrepareOkRequest::epoch_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.epoch_id)
  return _internal_epoch_id();
}
inline void PrepareOkRequest::unsafe_arena_set_allocated_epoch_id(
    ::event_store::client::UUID* epoch_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id_);
  }
  epoch_id_ = epoch_id;
  if (epoch_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.PrepareOkRequest.epoch_id)
}
inline ::event_store::client::UUID* PrepareOkRequest::release_epoch_id() {
  auto temp = unsafe_arena_release_epoch_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* PrepareOkRequest::unsafe_arena_release_epoch_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.PrepareOkRequest.epoch_id)
  
  ::event_store::client::UUID* temp = epoch_id_;
  epoch_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* PrepareOkRequest::_internal_mutable_epoch_id() {
  
  if (epoch_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    epoch_id_ = p;
  }
  return epoch_id_;
}
inline ::event_store::client::UUID* PrepareOkRequest::mutable_epoch_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.PrepareOkRequest.epoch_id)
  return _internal_mutable_epoch_id();
}
inline void PrepareOkRequest::set_allocated_epoch_id(::event_store::client::UUID* epoch_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id_);
  }
  if (epoch_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id)->GetArena();
    if (message_arena != submessage_arena) {
      epoch_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_id, submessage_arena);
    }
    
  } else {
    
  }
  epoch_id_ = epoch_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.PrepareOkRequest.epoch_id)
}

// .event_store.client.UUID epoch_leader_instance_id = 7;
inline bool PrepareOkRequest::_internal_has_epoch_leader_instance_id() const {
  return this != internal_default_instance() && epoch_leader_instance_id_ != nullptr;
}
inline bool PrepareOkRequest::has_epoch_leader_instance_id() const {
  return _internal_has_epoch_leader_instance_id();
}
inline const ::event_store::client::UUID& PrepareOkRequest::_internal_epoch_leader_instance_id() const {
  const ::event_store::client::UUID* p = epoch_leader_instance_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& PrepareOkRequest::epoch_leader_instance_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.epoch_leader_instance_id)
  return _internal_epoch_leader_instance_id();
}
inline void PrepareOkRequest::unsafe_arena_set_allocated_epoch_leader_instance_id(
    ::event_store::client::UUID* epoch_leader_instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_leader_instance_id_);
  }
  epoch_leader_instance_id_ = epoch_leader_instance_id;
  if (epoch_leader_instance_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.PrepareOkRequest.epoch_leader_instance_id)
}
inline ::event_store::client::UUID* PrepareOkRequest::release_epoch_leader_instance_id() {
  auto temp = unsafe_arena_release_epoch_leader_instance_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* PrepareOkRequest::unsafe_arena_release_epoch_leader_instance_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.PrepareOkRequest.epoch_leader_instance_id)
  
  ::event_store::client::UUID* temp = epoch_leader_instance_id_;
  epoch_leader_instance_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* PrepareOkRequest::_internal_mutable_epoch_leader_instance_id() {
  
  if (epoch_leader_instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    epoch_leader_instance_id_ = p;
  }
  return epoch_leader_instance_id_;
}
inline ::event_store::client::UUID* PrepareOkRequest::mutable_epoch_leader_instance_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.PrepareOkRequest.epoch_leader_instance_id)
  return _internal_mutable_epoch_leader_instance_id();
}
inline void PrepareOkRequest::set_allocated_epoch_leader_instance_id(::event_store::client::UUID* epoch_leader_instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_leader_instance_id_);
  }
  if (epoch_leader_instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_leader_instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      epoch_leader_instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_leader_instance_id, submessage_arena);
    }
    
  } else {
    
  }
  epoch_leader_instance_id_ = epoch_leader_instance_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.PrepareOkRequest.epoch_leader_instance_id)
}

// int64 last_commit_position = 8;
inline void PrepareOkRequest::clear_last_commit_position() {
  last_commit_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrepareOkRequest::_internal_last_commit_position() const {
  return last_commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrepareOkRequest::last_commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.last_commit_position)
  return _internal_last_commit_position();
}
inline void PrepareOkRequest::_internal_set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_commit_position_ = value;
}
inline void PrepareOkRequest::set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.PrepareOkRequest.last_commit_position)
}

// int64 writer_checkpoint = 9;
inline void PrepareOkRequest::clear_writer_checkpoint() {
  writer_checkpoint_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrepareOkRequest::_internal_writer_checkpoint() const {
  return writer_checkpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrepareOkRequest::writer_checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.writer_checkpoint)
  return _internal_writer_checkpoint();
}
inline void PrepareOkRequest::_internal_set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  writer_checkpoint_ = value;
}
inline void PrepareOkRequest::set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_writer_checkpoint(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.PrepareOkRequest.writer_checkpoint)
}

// int64 chaser_checkpoint = 10;
inline void PrepareOkRequest::clear_chaser_checkpoint() {
  chaser_checkpoint_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrepareOkRequest::_internal_chaser_checkpoint() const {
  return chaser_checkpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrepareOkRequest::chaser_checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.chaser_checkpoint)
  return _internal_chaser_checkpoint();
}
inline void PrepareOkRequest::_internal_set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  chaser_checkpoint_ = value;
}
inline void PrepareOkRequest::set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_chaser_checkpoint(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.PrepareOkRequest.chaser_checkpoint)
}

// int32 node_priority = 11;
inline void PrepareOkRequest::clear_node_priority() {
  node_priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepareOkRequest::_internal_node_priority() const {
  return node_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrepareOkRequest::node_priority() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.node_priority)
  return _internal_node_priority();
}
inline void PrepareOkRequest::_internal_set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_priority_ = value;
}
inline void PrepareOkRequest::set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_priority(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.PrepareOkRequest.node_priority)
}

// .event_store.cluster.ClusterInfo cluster_info = 12;
inline bool PrepareOkRequest::_internal_has_cluster_info() const {
  return this != internal_default_instance() && cluster_info_ != nullptr;
}
inline bool PrepareOkRequest::has_cluster_info() const {
  return _internal_has_cluster_info();
}
inline void PrepareOkRequest::clear_cluster_info() {
  if (GetArena() == nullptr && cluster_info_ != nullptr) {
    delete cluster_info_;
  }
  cluster_info_ = nullptr;
}
inline const ::event_store::cluster::ClusterInfo& PrepareOkRequest::_internal_cluster_info() const {
  const ::event_store::cluster::ClusterInfo* p = cluster_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::ClusterInfo*>(
      &::event_store::cluster::_ClusterInfo_default_instance_);
}
inline const ::event_store::cluster::ClusterInfo& PrepareOkRequest::cluster_info() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.PrepareOkRequest.cluster_info)
  return _internal_cluster_info();
}
inline void PrepareOkRequest::unsafe_arena_set_allocated_cluster_info(
    ::event_store::cluster::ClusterInfo* cluster_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cluster_info_);
  }
  cluster_info_ = cluster_info;
  if (cluster_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.PrepareOkRequest.cluster_info)
}
inline ::event_store::cluster::ClusterInfo* PrepareOkRequest::release_cluster_info() {
  auto temp = unsafe_arena_release_cluster_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::ClusterInfo* PrepareOkRequest::unsafe_arena_release_cluster_info() {
  // @@protoc_insertion_point(field_release:event_store.cluster.PrepareOkRequest.cluster_info)
  
  ::event_store::cluster::ClusterInfo* temp = cluster_info_;
  cluster_info_ = nullptr;
  return temp;
}
inline ::event_store::cluster::ClusterInfo* PrepareOkRequest::_internal_mutable_cluster_info() {
  
  if (cluster_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::ClusterInfo>(GetArena());
    cluster_info_ = p;
  }
  return cluster_info_;
}
inline ::event_store::cluster::ClusterInfo* PrepareOkRequest::mutable_cluster_info() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.PrepareOkRequest.cluster_info)
  return _internal_mutable_cluster_info();
}
inline void PrepareOkRequest::set_allocated_cluster_info(::event_store::cluster::ClusterInfo* cluster_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cluster_info_;
  }
  if (cluster_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cluster_info);
    if (message_arena != submessage_arena) {
      cluster_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_info, submessage_arena);
    }
    
  } else {
    
  }
  cluster_info_ = cluster_info;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.PrepareOkRequest.cluster_info)
}

// -------------------------------------------------------------------

// ProposalRequest

// .event_store.client.UUID server_id = 1;
inline bool ProposalRequest::_internal_has_server_id() const {
  return this != internal_default_instance() && server_id_ != nullptr;
}
inline bool ProposalRequest::has_server_id() const {
  return _internal_has_server_id();
}
inline const ::event_store::client::UUID& ProposalRequest::_internal_server_id() const {
  const ::event_store::client::UUID* p = server_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& ProposalRequest::server_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.server_id)
  return _internal_server_id();
}
inline void ProposalRequest::unsafe_arena_set_allocated_server_id(
    ::event_store::client::UUID* server_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  server_id_ = server_id;
  if (server_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ProposalRequest.server_id)
}
inline ::event_store::client::UUID* ProposalRequest::release_server_id() {
  auto temp = unsafe_arena_release_server_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* ProposalRequest::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ProposalRequest.server_id)
  
  ::event_store::client::UUID* temp = server_id_;
  server_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* ProposalRequest::_internal_mutable_server_id() {
  
  if (server_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    server_id_ = p;
  }
  return server_id_;
}
inline ::event_store::client::UUID* ProposalRequest::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ProposalRequest.server_id)
  return _internal_mutable_server_id();
}
inline void ProposalRequest::set_allocated_server_id(::event_store::client::UUID* server_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  if (server_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id)->GetArena();
    if (message_arena != submessage_arena) {
      server_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_id, submessage_arena);
    }
    
  } else {
    
  }
  server_id_ = server_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ProposalRequest.server_id)
}

// .event_store.cluster.EndPoint server_http = 2;
inline bool ProposalRequest::_internal_has_server_http() const {
  return this != internal_default_instance() && server_http_ != nullptr;
}
inline bool ProposalRequest::has_server_http() const {
  return _internal_has_server_http();
}
inline void ProposalRequest::clear_server_http() {
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& ProposalRequest::_internal_server_http() const {
  const ::event_store::cluster::EndPoint* p = server_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& ProposalRequest::server_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.server_http)
  return _internal_server_http();
}
inline void ProposalRequest::unsafe_arena_set_allocated_server_http(
    ::event_store::cluster::EndPoint* server_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_http_);
  }
  server_http_ = server_http;
  if (server_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ProposalRequest.server_http)
}
inline ::event_store::cluster::EndPoint* ProposalRequest::release_server_http() {
  auto temp = unsafe_arena_release_server_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* ProposalRequest::unsafe_arena_release_server_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ProposalRequest.server_http)
  
  ::event_store::cluster::EndPoint* temp = server_http_;
  server_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* ProposalRequest::_internal_mutable_server_http() {
  
  if (server_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    server_http_ = p;
  }
  return server_http_;
}
inline ::event_store::cluster::EndPoint* ProposalRequest::mutable_server_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ProposalRequest.server_http)
  return _internal_mutable_server_http();
}
inline void ProposalRequest::set_allocated_server_http(::event_store::cluster::EndPoint* server_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_http_;
  }
  if (server_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_http);
    if (message_arena != submessage_arena) {
      server_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_http, submessage_arena);
    }
    
  } else {
    
  }
  server_http_ = server_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ProposalRequest.server_http)
}

// .event_store.client.UUID leader_id = 3;
inline bool ProposalRequest::_internal_has_leader_id() const {
  return this != internal_default_instance() && leader_id_ != nullptr;
}
inline bool ProposalRequest::has_leader_id() const {
  return _internal_has_leader_id();
}
inline const ::event_store::client::UUID& ProposalRequest::_internal_leader_id() const {
  const ::event_store::client::UUID* p = leader_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& ProposalRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.leader_id)
  return _internal_leader_id();
}
inline void ProposalRequest::unsafe_arena_set_allocated_leader_id(
    ::event_store::client::UUID* leader_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id_);
  }
  leader_id_ = leader_id;
  if (leader_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ProposalRequest.leader_id)
}
inline ::event_store::client::UUID* ProposalRequest::release_leader_id() {
  auto temp = unsafe_arena_release_leader_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* ProposalRequest::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ProposalRequest.leader_id)
  
  ::event_store::client::UUID* temp = leader_id_;
  leader_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* ProposalRequest::_internal_mutable_leader_id() {
  
  if (leader_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    leader_id_ = p;
  }
  return leader_id_;
}
inline ::event_store::client::UUID* ProposalRequest::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ProposalRequest.leader_id)
  return _internal_mutable_leader_id();
}
inline void ProposalRequest::set_allocated_leader_id(::event_store::client::UUID* leader_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id_);
  }
  if (leader_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id)->GetArena();
    if (message_arena != submessage_arena) {
      leader_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_id, submessage_arena);
    }
    
  } else {
    
  }
  leader_id_ = leader_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ProposalRequest.leader_id)
}

// .event_store.cluster.EndPoint leader_http = 4;
inline bool ProposalRequest::_internal_has_leader_http() const {
  return this != internal_default_instance() && leader_http_ != nullptr;
}
inline bool ProposalRequest::has_leader_http() const {
  return _internal_has_leader_http();
}
inline void ProposalRequest::clear_leader_http() {
  if (GetArena() == nullptr && leader_http_ != nullptr) {
    delete leader_http_;
  }
  leader_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& ProposalRequest::_internal_leader_http() const {
  const ::event_store::cluster::EndPoint* p = leader_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& ProposalRequest::leader_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.leader_http)
  return _internal_leader_http();
}
inline void ProposalRequest::unsafe_arena_set_allocated_leader_http(
    ::event_store::cluster::EndPoint* leader_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_http_);
  }
  leader_http_ = leader_http;
  if (leader_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ProposalRequest.leader_http)
}
inline ::event_store::cluster::EndPoint* ProposalRequest::release_leader_http() {
  auto temp = unsafe_arena_release_leader_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* ProposalRequest::unsafe_arena_release_leader_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ProposalRequest.leader_http)
  
  ::event_store::cluster::EndPoint* temp = leader_http_;
  leader_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* ProposalRequest::_internal_mutable_leader_http() {
  
  if (leader_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    leader_http_ = p;
  }
  return leader_http_;
}
inline ::event_store::cluster::EndPoint* ProposalRequest::mutable_leader_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ProposalRequest.leader_http)
  return _internal_mutable_leader_http();
}
inline void ProposalRequest::set_allocated_leader_http(::event_store::cluster::EndPoint* leader_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leader_http_;
  }
  if (leader_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leader_http);
    if (message_arena != submessage_arena) {
      leader_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_http, submessage_arena);
    }
    
  } else {
    
  }
  leader_http_ = leader_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ProposalRequest.leader_http)
}

// int32 view = 5;
inline void ProposalRequest::clear_view() {
  view_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposalRequest::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposalRequest::view() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.view)
  return _internal_view();
}
inline void ProposalRequest::_internal_set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_ = value;
}
inline void ProposalRequest::set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ProposalRequest.view)
}

// int32 epoch_number = 6;
inline void ProposalRequest::clear_epoch_number() {
  epoch_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposalRequest::_internal_epoch_number() const {
  return epoch_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposalRequest::epoch_number() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.epoch_number)
  return _internal_epoch_number();
}
inline void ProposalRequest::_internal_set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  epoch_number_ = value;
}
inline void ProposalRequest::set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epoch_number(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ProposalRequest.epoch_number)
}

// int64 epoch_position = 7;
inline void ProposalRequest::clear_epoch_position() {
  epoch_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProposalRequest::_internal_epoch_position() const {
  return epoch_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProposalRequest::epoch_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.epoch_position)
  return _internal_epoch_position();
}
inline void ProposalRequest::_internal_set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  epoch_position_ = value;
}
inline void ProposalRequest::set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_epoch_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ProposalRequest.epoch_position)
}

// .event_store.client.UUID epoch_id = 8;
inline bool ProposalRequest::_internal_has_epoch_id() const {
  return this != internal_default_instance() && epoch_id_ != nullptr;
}
inline bool ProposalRequest::has_epoch_id() const {
  return _internal_has_epoch_id();
}
inline const ::event_store::client::UUID& ProposalRequest::_internal_epoch_id() const {
  const ::event_store::client::UUID* p = epoch_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& ProposalRequest::epoch_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.epoch_id)
  return _internal_epoch_id();
}
inline void ProposalRequest::unsafe_arena_set_allocated_epoch_id(
    ::event_store::client::UUID* epoch_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id_);
  }
  epoch_id_ = epoch_id;
  if (epoch_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ProposalRequest.epoch_id)
}
inline ::event_store::client::UUID* ProposalRequest::release_epoch_id() {
  auto temp = unsafe_arena_release_epoch_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* ProposalRequest::unsafe_arena_release_epoch_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ProposalRequest.epoch_id)
  
  ::event_store::client::UUID* temp = epoch_id_;
  epoch_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* ProposalRequest::_internal_mutable_epoch_id() {
  
  if (epoch_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    epoch_id_ = p;
  }
  return epoch_id_;
}
inline ::event_store::client::UUID* ProposalRequest::mutable_epoch_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ProposalRequest.epoch_id)
  return _internal_mutable_epoch_id();
}
inline void ProposalRequest::set_allocated_epoch_id(::event_store::client::UUID* epoch_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id_);
  }
  if (epoch_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id)->GetArena();
    if (message_arena != submessage_arena) {
      epoch_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_id, submessage_arena);
    }
    
  } else {
    
  }
  epoch_id_ = epoch_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ProposalRequest.epoch_id)
}

// .event_store.client.UUID epoch_leader_instance_id = 9;
inline bool ProposalRequest::_internal_has_epoch_leader_instance_id() const {
  return this != internal_default_instance() && epoch_leader_instance_id_ != nullptr;
}
inline bool ProposalRequest::has_epoch_leader_instance_id() const {
  return _internal_has_epoch_leader_instance_id();
}
inline const ::event_store::client::UUID& ProposalRequest::_internal_epoch_leader_instance_id() const {
  const ::event_store::client::UUID* p = epoch_leader_instance_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& ProposalRequest::epoch_leader_instance_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.epoch_leader_instance_id)
  return _internal_epoch_leader_instance_id();
}
inline void ProposalRequest::unsafe_arena_set_allocated_epoch_leader_instance_id(
    ::event_store::client::UUID* epoch_leader_instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_leader_instance_id_);
  }
  epoch_leader_instance_id_ = epoch_leader_instance_id;
  if (epoch_leader_instance_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ProposalRequest.epoch_leader_instance_id)
}
inline ::event_store::client::UUID* ProposalRequest::release_epoch_leader_instance_id() {
  auto temp = unsafe_arena_release_epoch_leader_instance_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* ProposalRequest::unsafe_arena_release_epoch_leader_instance_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ProposalRequest.epoch_leader_instance_id)
  
  ::event_store::client::UUID* temp = epoch_leader_instance_id_;
  epoch_leader_instance_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* ProposalRequest::_internal_mutable_epoch_leader_instance_id() {
  
  if (epoch_leader_instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    epoch_leader_instance_id_ = p;
  }
  return epoch_leader_instance_id_;
}
inline ::event_store::client::UUID* ProposalRequest::mutable_epoch_leader_instance_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ProposalRequest.epoch_leader_instance_id)
  return _internal_mutable_epoch_leader_instance_id();
}
inline void ProposalRequest::set_allocated_epoch_leader_instance_id(::event_store::client::UUID* epoch_leader_instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_leader_instance_id_);
  }
  if (epoch_leader_instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_leader_instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      epoch_leader_instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_leader_instance_id, submessage_arena);
    }
    
  } else {
    
  }
  epoch_leader_instance_id_ = epoch_leader_instance_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ProposalRequest.epoch_leader_instance_id)
}

// int64 last_commit_position = 10;
inline void ProposalRequest::clear_last_commit_position() {
  last_commit_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProposalRequest::_internal_last_commit_position() const {
  return last_commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProposalRequest::last_commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.last_commit_position)
  return _internal_last_commit_position();
}
inline void ProposalRequest::_internal_set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_commit_position_ = value;
}
inline void ProposalRequest::set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ProposalRequest.last_commit_position)
}

// int64 writer_checkpoint = 11;
inline void ProposalRequest::clear_writer_checkpoint() {
  writer_checkpoint_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProposalRequest::_internal_writer_checkpoint() const {
  return writer_checkpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProposalRequest::writer_checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.writer_checkpoint)
  return _internal_writer_checkpoint();
}
inline void ProposalRequest::_internal_set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  writer_checkpoint_ = value;
}
inline void ProposalRequest::set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_writer_checkpoint(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ProposalRequest.writer_checkpoint)
}

// int64 chaser_checkpoint = 12;
inline void ProposalRequest::clear_chaser_checkpoint() {
  chaser_checkpoint_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProposalRequest::_internal_chaser_checkpoint() const {
  return chaser_checkpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProposalRequest::chaser_checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.chaser_checkpoint)
  return _internal_chaser_checkpoint();
}
inline void ProposalRequest::_internal_set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  chaser_checkpoint_ = value;
}
inline void ProposalRequest::set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_chaser_checkpoint(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ProposalRequest.chaser_checkpoint)
}

// int32 node_priority = 13;
inline void ProposalRequest::clear_node_priority() {
  node_priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposalRequest::_internal_node_priority() const {
  return node_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposalRequest::node_priority() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ProposalRequest.node_priority)
  return _internal_node_priority();
}
inline void ProposalRequest::_internal_set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_priority_ = value;
}
inline void ProposalRequest::set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_priority(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ProposalRequest.node_priority)
}

// -------------------------------------------------------------------

// AcceptRequest

// .event_store.client.UUID server_id = 1;
inline bool AcceptRequest::_internal_has_server_id() const {
  return this != internal_default_instance() && server_id_ != nullptr;
}
inline bool AcceptRequest::has_server_id() const {
  return _internal_has_server_id();
}
inline const ::event_store::client::UUID& AcceptRequest::_internal_server_id() const {
  const ::event_store::client::UUID* p = server_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& AcceptRequest::server_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.AcceptRequest.server_id)
  return _internal_server_id();
}
inline void AcceptRequest::unsafe_arena_set_allocated_server_id(
    ::event_store::client::UUID* server_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  server_id_ = server_id;
  if (server_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.AcceptRequest.server_id)
}
inline ::event_store::client::UUID* AcceptRequest::release_server_id() {
  auto temp = unsafe_arena_release_server_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* AcceptRequest::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.AcceptRequest.server_id)
  
  ::event_store::client::UUID* temp = server_id_;
  server_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* AcceptRequest::_internal_mutable_server_id() {
  
  if (server_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    server_id_ = p;
  }
  return server_id_;
}
inline ::event_store::client::UUID* AcceptRequest::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.AcceptRequest.server_id)
  return _internal_mutable_server_id();
}
inline void AcceptRequest::set_allocated_server_id(::event_store::client::UUID* server_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  if (server_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id)->GetArena();
    if (message_arena != submessage_arena) {
      server_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_id, submessage_arena);
    }
    
  } else {
    
  }
  server_id_ = server_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.AcceptRequest.server_id)
}

// .event_store.cluster.EndPoint server_http = 2;
inline bool AcceptRequest::_internal_has_server_http() const {
  return this != internal_default_instance() && server_http_ != nullptr;
}
inline bool AcceptRequest::has_server_http() const {
  return _internal_has_server_http();
}
inline void AcceptRequest::clear_server_http() {
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& AcceptRequest::_internal_server_http() const {
  const ::event_store::cluster::EndPoint* p = server_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& AcceptRequest::server_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.AcceptRequest.server_http)
  return _internal_server_http();
}
inline void AcceptRequest::unsafe_arena_set_allocated_server_http(
    ::event_store::cluster::EndPoint* server_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_http_);
  }
  server_http_ = server_http;
  if (server_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.AcceptRequest.server_http)
}
inline ::event_store::cluster::EndPoint* AcceptRequest::release_server_http() {
  auto temp = unsafe_arena_release_server_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* AcceptRequest::unsafe_arena_release_server_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.AcceptRequest.server_http)
  
  ::event_store::cluster::EndPoint* temp = server_http_;
  server_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* AcceptRequest::_internal_mutable_server_http() {
  
  if (server_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    server_http_ = p;
  }
  return server_http_;
}
inline ::event_store::cluster::EndPoint* AcceptRequest::mutable_server_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.AcceptRequest.server_http)
  return _internal_mutable_server_http();
}
inline void AcceptRequest::set_allocated_server_http(::event_store::cluster::EndPoint* server_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_http_;
  }
  if (server_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_http);
    if (message_arena != submessage_arena) {
      server_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_http, submessage_arena);
    }
    
  } else {
    
  }
  server_http_ = server_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.AcceptRequest.server_http)
}

// .event_store.client.UUID leader_id = 3;
inline bool AcceptRequest::_internal_has_leader_id() const {
  return this != internal_default_instance() && leader_id_ != nullptr;
}
inline bool AcceptRequest::has_leader_id() const {
  return _internal_has_leader_id();
}
inline const ::event_store::client::UUID& AcceptRequest::_internal_leader_id() const {
  const ::event_store::client::UUID* p = leader_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& AcceptRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.AcceptRequest.leader_id)
  return _internal_leader_id();
}
inline void AcceptRequest::unsafe_arena_set_allocated_leader_id(
    ::event_store::client::UUID* leader_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id_);
  }
  leader_id_ = leader_id;
  if (leader_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.AcceptRequest.leader_id)
}
inline ::event_store::client::UUID* AcceptRequest::release_leader_id() {
  auto temp = unsafe_arena_release_leader_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* AcceptRequest::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.AcceptRequest.leader_id)
  
  ::event_store::client::UUID* temp = leader_id_;
  leader_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* AcceptRequest::_internal_mutable_leader_id() {
  
  if (leader_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    leader_id_ = p;
  }
  return leader_id_;
}
inline ::event_store::client::UUID* AcceptRequest::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.AcceptRequest.leader_id)
  return _internal_mutable_leader_id();
}
inline void AcceptRequest::set_allocated_leader_id(::event_store::client::UUID* leader_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id_);
  }
  if (leader_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id)->GetArena();
    if (message_arena != submessage_arena) {
      leader_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_id, submessage_arena);
    }
    
  } else {
    
  }
  leader_id_ = leader_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.AcceptRequest.leader_id)
}

// .event_store.cluster.EndPoint leader_http = 4;
inline bool AcceptRequest::_internal_has_leader_http() const {
  return this != internal_default_instance() && leader_http_ != nullptr;
}
inline bool AcceptRequest::has_leader_http() const {
  return _internal_has_leader_http();
}
inline void AcceptRequest::clear_leader_http() {
  if (GetArena() == nullptr && leader_http_ != nullptr) {
    delete leader_http_;
  }
  leader_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& AcceptRequest::_internal_leader_http() const {
  const ::event_store::cluster::EndPoint* p = leader_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& AcceptRequest::leader_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.AcceptRequest.leader_http)
  return _internal_leader_http();
}
inline void AcceptRequest::unsafe_arena_set_allocated_leader_http(
    ::event_store::cluster::EndPoint* leader_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_http_);
  }
  leader_http_ = leader_http;
  if (leader_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.AcceptRequest.leader_http)
}
inline ::event_store::cluster::EndPoint* AcceptRequest::release_leader_http() {
  auto temp = unsafe_arena_release_leader_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* AcceptRequest::unsafe_arena_release_leader_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.AcceptRequest.leader_http)
  
  ::event_store::cluster::EndPoint* temp = leader_http_;
  leader_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* AcceptRequest::_internal_mutable_leader_http() {
  
  if (leader_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    leader_http_ = p;
  }
  return leader_http_;
}
inline ::event_store::cluster::EndPoint* AcceptRequest::mutable_leader_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.AcceptRequest.leader_http)
  return _internal_mutable_leader_http();
}
inline void AcceptRequest::set_allocated_leader_http(::event_store::cluster::EndPoint* leader_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leader_http_;
  }
  if (leader_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leader_http);
    if (message_arena != submessage_arena) {
      leader_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_http, submessage_arena);
    }
    
  } else {
    
  }
  leader_http_ = leader_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.AcceptRequest.leader_http)
}

// int32 view = 5;
inline void AcceptRequest::clear_view() {
  view_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptRequest::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptRequest::view() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.AcceptRequest.view)
  return _internal_view();
}
inline void AcceptRequest::_internal_set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_ = value;
}
inline void AcceptRequest::set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.AcceptRequest.view)
}

// -------------------------------------------------------------------

// LeaderIsResigningRequest

// .event_store.client.UUID leader_id = 1;
inline bool LeaderIsResigningRequest::_internal_has_leader_id() const {
  return this != internal_default_instance() && leader_id_ != nullptr;
}
inline bool LeaderIsResigningRequest::has_leader_id() const {
  return _internal_has_leader_id();
}
inline const ::event_store::client::UUID& LeaderIsResigningRequest::_internal_leader_id() const {
  const ::event_store::client::UUID* p = leader_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& LeaderIsResigningRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.LeaderIsResigningRequest.leader_id)
  return _internal_leader_id();
}
inline void LeaderIsResigningRequest::unsafe_arena_set_allocated_leader_id(
    ::event_store::client::UUID* leader_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id_);
  }
  leader_id_ = leader_id;
  if (leader_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.LeaderIsResigningRequest.leader_id)
}
inline ::event_store::client::UUID* LeaderIsResigningRequest::release_leader_id() {
  auto temp = unsafe_arena_release_leader_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* LeaderIsResigningRequest::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.LeaderIsResigningRequest.leader_id)
  
  ::event_store::client::UUID* temp = leader_id_;
  leader_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* LeaderIsResigningRequest::_internal_mutable_leader_id() {
  
  if (leader_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    leader_id_ = p;
  }
  return leader_id_;
}
inline ::event_store::client::UUID* LeaderIsResigningRequest::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.LeaderIsResigningRequest.leader_id)
  return _internal_mutable_leader_id();
}
inline void LeaderIsResigningRequest::set_allocated_leader_id(::event_store::client::UUID* leader_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id_);
  }
  if (leader_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id)->GetArena();
    if (message_arena != submessage_arena) {
      leader_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_id, submessage_arena);
    }
    
  } else {
    
  }
  leader_id_ = leader_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.LeaderIsResigningRequest.leader_id)
}

// .event_store.cluster.EndPoint leader_http = 2;
inline bool LeaderIsResigningRequest::_internal_has_leader_http() const {
  return this != internal_default_instance() && leader_http_ != nullptr;
}
inline bool LeaderIsResigningRequest::has_leader_http() const {
  return _internal_has_leader_http();
}
inline void LeaderIsResigningRequest::clear_leader_http() {
  if (GetArena() == nullptr && leader_http_ != nullptr) {
    delete leader_http_;
  }
  leader_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& LeaderIsResigningRequest::_internal_leader_http() const {
  const ::event_store::cluster::EndPoint* p = leader_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& LeaderIsResigningRequest::leader_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.LeaderIsResigningRequest.leader_http)
  return _internal_leader_http();
}
inline void LeaderIsResigningRequest::unsafe_arena_set_allocated_leader_http(
    ::event_store::cluster::EndPoint* leader_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_http_);
  }
  leader_http_ = leader_http;
  if (leader_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.LeaderIsResigningRequest.leader_http)
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningRequest::release_leader_http() {
  auto temp = unsafe_arena_release_leader_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningRequest::unsafe_arena_release_leader_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.LeaderIsResigningRequest.leader_http)
  
  ::event_store::cluster::EndPoint* temp = leader_http_;
  leader_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningRequest::_internal_mutable_leader_http() {
  
  if (leader_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    leader_http_ = p;
  }
  return leader_http_;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningRequest::mutable_leader_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.LeaderIsResigningRequest.leader_http)
  return _internal_mutable_leader_http();
}
inline void LeaderIsResigningRequest::set_allocated_leader_http(::event_store::cluster::EndPoint* leader_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leader_http_;
  }
  if (leader_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leader_http);
    if (message_arena != submessage_arena) {
      leader_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_http, submessage_arena);
    }
    
  } else {
    
  }
  leader_http_ = leader_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.LeaderIsResigningRequest.leader_http)
}

// -------------------------------------------------------------------

// LeaderIsResigningOkRequest

// .event_store.client.UUID leader_id = 1;
inline bool LeaderIsResigningOkRequest::_internal_has_leader_id() const {
  return this != internal_default_instance() && leader_id_ != nullptr;
}
inline bool LeaderIsResigningOkRequest::has_leader_id() const {
  return _internal_has_leader_id();
}
inline const ::event_store::client::UUID& LeaderIsResigningOkRequest::_internal_leader_id() const {
  const ::event_store::client::UUID* p = leader_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& LeaderIsResigningOkRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.LeaderIsResigningOkRequest.leader_id)
  return _internal_leader_id();
}
inline void LeaderIsResigningOkRequest::unsafe_arena_set_allocated_leader_id(
    ::event_store::client::UUID* leader_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id_);
  }
  leader_id_ = leader_id;
  if (leader_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.LeaderIsResigningOkRequest.leader_id)
}
inline ::event_store::client::UUID* LeaderIsResigningOkRequest::release_leader_id() {
  auto temp = unsafe_arena_release_leader_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* LeaderIsResigningOkRequest::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.LeaderIsResigningOkRequest.leader_id)
  
  ::event_store::client::UUID* temp = leader_id_;
  leader_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* LeaderIsResigningOkRequest::_internal_mutable_leader_id() {
  
  if (leader_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    leader_id_ = p;
  }
  return leader_id_;
}
inline ::event_store::client::UUID* LeaderIsResigningOkRequest::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.LeaderIsResigningOkRequest.leader_id)
  return _internal_mutable_leader_id();
}
inline void LeaderIsResigningOkRequest::set_allocated_leader_id(::event_store::client::UUID* leader_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id_);
  }
  if (leader_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_id)->GetArena();
    if (message_arena != submessage_arena) {
      leader_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_id, submessage_arena);
    }
    
  } else {
    
  }
  leader_id_ = leader_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.LeaderIsResigningOkRequest.leader_id)
}

// .event_store.cluster.EndPoint leader_http = 2;
inline bool LeaderIsResigningOkRequest::_internal_has_leader_http() const {
  return this != internal_default_instance() && leader_http_ != nullptr;
}
inline bool LeaderIsResigningOkRequest::has_leader_http() const {
  return _internal_has_leader_http();
}
inline void LeaderIsResigningOkRequest::clear_leader_http() {
  if (GetArena() == nullptr && leader_http_ != nullptr) {
    delete leader_http_;
  }
  leader_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& LeaderIsResigningOkRequest::_internal_leader_http() const {
  const ::event_store::cluster::EndPoint* p = leader_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& LeaderIsResigningOkRequest::leader_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.LeaderIsResigningOkRequest.leader_http)
  return _internal_leader_http();
}
inline void LeaderIsResigningOkRequest::unsafe_arena_set_allocated_leader_http(
    ::event_store::cluster::EndPoint* leader_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_http_);
  }
  leader_http_ = leader_http;
  if (leader_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.LeaderIsResigningOkRequest.leader_http)
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningOkRequest::release_leader_http() {
  auto temp = unsafe_arena_release_leader_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningOkRequest::unsafe_arena_release_leader_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.LeaderIsResigningOkRequest.leader_http)
  
  ::event_store::cluster::EndPoint* temp = leader_http_;
  leader_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningOkRequest::_internal_mutable_leader_http() {
  
  if (leader_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    leader_http_ = p;
  }
  return leader_http_;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningOkRequest::mutable_leader_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.LeaderIsResigningOkRequest.leader_http)
  return _internal_mutable_leader_http();
}
inline void LeaderIsResigningOkRequest::set_allocated_leader_http(::event_store::cluster::EndPoint* leader_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leader_http_;
  }
  if (leader_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leader_http);
    if (message_arena != submessage_arena) {
      leader_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_http, submessage_arena);
    }
    
  } else {
    
  }
  leader_http_ = leader_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.LeaderIsResigningOkRequest.leader_http)
}

// .event_store.client.UUID server_id = 3;
inline bool LeaderIsResigningOkRequest::_internal_has_server_id() const {
  return this != internal_default_instance() && server_id_ != nullptr;
}
inline bool LeaderIsResigningOkRequest::has_server_id() const {
  return _internal_has_server_id();
}
inline const ::event_store::client::UUID& LeaderIsResigningOkRequest::_internal_server_id() const {
  const ::event_store::client::UUID* p = server_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& LeaderIsResigningOkRequest::server_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.LeaderIsResigningOkRequest.server_id)
  return _internal_server_id();
}
inline void LeaderIsResigningOkRequest::unsafe_arena_set_allocated_server_id(
    ::event_store::client::UUID* server_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  server_id_ = server_id;
  if (server_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.LeaderIsResigningOkRequest.server_id)
}
inline ::event_store::client::UUID* LeaderIsResigningOkRequest::release_server_id() {
  auto temp = unsafe_arena_release_server_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* LeaderIsResigningOkRequest::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.LeaderIsResigningOkRequest.server_id)
  
  ::event_store::client::UUID* temp = server_id_;
  server_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* LeaderIsResigningOkRequest::_internal_mutable_server_id() {
  
  if (server_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    server_id_ = p;
  }
  return server_id_;
}
inline ::event_store::client::UUID* LeaderIsResigningOkRequest::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.LeaderIsResigningOkRequest.server_id)
  return _internal_mutable_server_id();
}
inline void LeaderIsResigningOkRequest::set_allocated_server_id(::event_store::client::UUID* server_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id_);
  }
  if (server_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_id)->GetArena();
    if (message_arena != submessage_arena) {
      server_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_id, submessage_arena);
    }
    
  } else {
    
  }
  server_id_ = server_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.LeaderIsResigningOkRequest.server_id)
}

// .event_store.cluster.EndPoint server_http = 4;
inline bool LeaderIsResigningOkRequest::_internal_has_server_http() const {
  return this != internal_default_instance() && server_http_ != nullptr;
}
inline bool LeaderIsResigningOkRequest::has_server_http() const {
  return _internal_has_server_http();
}
inline void LeaderIsResigningOkRequest::clear_server_http() {
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& LeaderIsResigningOkRequest::_internal_server_http() const {
  const ::event_store::cluster::EndPoint* p = server_http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& LeaderIsResigningOkRequest::server_http() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.LeaderIsResigningOkRequest.server_http)
  return _internal_server_http();
}
inline void LeaderIsResigningOkRequest::unsafe_arena_set_allocated_server_http(
    ::event_store::cluster::EndPoint* server_http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_http_);
  }
  server_http_ = server_http;
  if (server_http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.LeaderIsResigningOkRequest.server_http)
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningOkRequest::release_server_http() {
  auto temp = unsafe_arena_release_server_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningOkRequest::unsafe_arena_release_server_http() {
  // @@protoc_insertion_point(field_release:event_store.cluster.LeaderIsResigningOkRequest.server_http)
  
  ::event_store::cluster::EndPoint* temp = server_http_;
  server_http_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningOkRequest::_internal_mutable_server_http() {
  
  if (server_http_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    server_http_ = p;
  }
  return server_http_;
}
inline ::event_store::cluster::EndPoint* LeaderIsResigningOkRequest::mutable_server_http() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.LeaderIsResigningOkRequest.server_http)
  return _internal_mutable_server_http();
}
inline void LeaderIsResigningOkRequest::set_allocated_server_http(::event_store::cluster::EndPoint* server_http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_http_;
  }
  if (server_http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_http);
    if (message_arena != submessage_arena) {
      server_http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_http, submessage_arena);
    }
    
  } else {
    
  }
  server_http_ = server_http;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.LeaderIsResigningOkRequest.server_http)
}

// -------------------------------------------------------------------

// ClusterInfo

// repeated .event_store.cluster.MemberInfo members = 1;
inline int ClusterInfo::_internal_members_size() const {
  return members_.size();
}
inline int ClusterInfo::members_size() const {
  return _internal_members_size();
}
inline void ClusterInfo::clear_members() {
  members_.Clear();
}
inline ::event_store::cluster::MemberInfo* ClusterInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ClusterInfo.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::MemberInfo >*
ClusterInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:event_store.cluster.ClusterInfo.members)
  return &members_;
}
inline const ::event_store::cluster::MemberInfo& ClusterInfo::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::event_store::cluster::MemberInfo& ClusterInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ClusterInfo.members)
  return _internal_members(index);
}
inline ::event_store::cluster::MemberInfo* ClusterInfo::_internal_add_members() {
  return members_.Add();
}
inline ::event_store::cluster::MemberInfo* ClusterInfo::add_members() {
  // @@protoc_insertion_point(field_add:event_store.cluster.ClusterInfo.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::MemberInfo >&
ClusterInfo::members() const {
  // @@protoc_insertion_point(field_list:event_store.cluster.ClusterInfo.members)
  return members_;
}

// -------------------------------------------------------------------

// EndPoint

// string address = 1;
inline void EndPoint::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndPoint::address() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.EndPoint.address)
  return _internal_address();
}
inline void EndPoint::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.EndPoint.address)
}
inline std::string* EndPoint::mutable_address() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.EndPoint.address)
  return _internal_mutable_address();
}
inline const std::string& EndPoint::_internal_address() const {
  return address_.Get();
}
inline void EndPoint::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndPoint::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.EndPoint.address)
}
inline void EndPoint::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.EndPoint.address)
}
inline void EndPoint::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.EndPoint.address)
}
inline std::string* EndPoint::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndPoint::release_address() {
  // @@protoc_insertion_point(field_release:event_store.cluster.EndPoint.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndPoint::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.EndPoint.address)
}
inline std::string* EndPoint::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.EndPoint.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndPoint::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.EndPoint.address)
}

// uint32 port = 2;
inline void EndPoint::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPoint::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPoint::port() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.EndPoint.port)
  return _internal_port();
}
inline void EndPoint::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void EndPoint::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.EndPoint.port)
}

// -------------------------------------------------------------------

// MemberInfo

// .event_store.client.UUID instance_id = 1;
inline bool MemberInfo::_internal_has_instance_id() const {
  return this != internal_default_instance() && instance_id_ != nullptr;
}
inline bool MemberInfo::has_instance_id() const {
  return _internal_has_instance_id();
}
inline const ::event_store::client::UUID& MemberInfo::_internal_instance_id() const {
  const ::event_store::client::UUID* p = instance_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& MemberInfo::instance_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.instance_id)
  return _internal_instance_id();
}
inline void MemberInfo::unsafe_arena_set_allocated_instance_id(
    ::event_store::client::UUID* instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_id_);
  }
  instance_id_ = instance_id;
  if (instance_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.MemberInfo.instance_id)
}
inline ::event_store::client::UUID* MemberInfo::release_instance_id() {
  auto temp = unsafe_arena_release_instance_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* MemberInfo::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.MemberInfo.instance_id)
  
  ::event_store::client::UUID* temp = instance_id_;
  instance_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* MemberInfo::_internal_mutable_instance_id() {
  
  if (instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    instance_id_ = p;
  }
  return instance_id_;
}
inline ::event_store::client::UUID* MemberInfo::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.MemberInfo.instance_id)
  return _internal_mutable_instance_id();
}
inline void MemberInfo::set_allocated_instance_id(::event_store::client::UUID* instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_id_);
  }
  if (instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_id, submessage_arena);
    }
    
  } else {
    
  }
  instance_id_ = instance_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.MemberInfo.instance_id)
}

// int64 time_stamp = 2;
inline void MemberInfo::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.time_stamp)
  return _internal_time_stamp();
}
inline void MemberInfo::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_stamp_ = value;
}
inline void MemberInfo::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.time_stamp)
}

// .event_store.cluster.MemberInfo.VNodeState state = 3;
inline void MemberInfo::clear_state() {
  state_ = 0;
}
inline ::event_store::cluster::MemberInfo_VNodeState MemberInfo::_internal_state() const {
  return static_cast< ::event_store::cluster::MemberInfo_VNodeState >(state_);
}
inline ::event_store::cluster::MemberInfo_VNodeState MemberInfo::state() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.state)
  return _internal_state();
}
inline void MemberInfo::_internal_set_state(::event_store::cluster::MemberInfo_VNodeState value) {
  
  state_ = value;
}
inline void MemberInfo::set_state(::event_store::cluster::MemberInfo_VNodeState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.state)
}

// bool is_alive = 4;
inline void MemberInfo::clear_is_alive() {
  is_alive_ = false;
}
inline bool MemberInfo::_internal_is_alive() const {
  return is_alive_;
}
inline bool MemberInfo::is_alive() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.is_alive)
  return _internal_is_alive();
}
inline void MemberInfo::_internal_set_is_alive(bool value) {
  
  is_alive_ = value;
}
inline void MemberInfo::set_is_alive(bool value) {
  _internal_set_is_alive(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.is_alive)
}

// .event_store.cluster.EndPoint http_end_point = 5;
inline bool MemberInfo::_internal_has_http_end_point() const {
  return this != internal_default_instance() && http_end_point_ != nullptr;
}
inline bool MemberInfo::has_http_end_point() const {
  return _internal_has_http_end_point();
}
inline void MemberInfo::clear_http_end_point() {
  if (GetArena() == nullptr && http_end_point_ != nullptr) {
    delete http_end_point_;
  }
  http_end_point_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& MemberInfo::_internal_http_end_point() const {
  const ::event_store::cluster::EndPoint* p = http_end_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& MemberInfo::http_end_point() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.http_end_point)
  return _internal_http_end_point();
}
inline void MemberInfo::unsafe_arena_set_allocated_http_end_point(
    ::event_store::cluster::EndPoint* http_end_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_end_point_);
  }
  http_end_point_ = http_end_point;
  if (http_end_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.MemberInfo.http_end_point)
}
inline ::event_store::cluster::EndPoint* MemberInfo::release_http_end_point() {
  auto temp = unsafe_arena_release_http_end_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* MemberInfo::unsafe_arena_release_http_end_point() {
  // @@protoc_insertion_point(field_release:event_store.cluster.MemberInfo.http_end_point)
  
  ::event_store::cluster::EndPoint* temp = http_end_point_;
  http_end_point_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* MemberInfo::_internal_mutable_http_end_point() {
  
  if (http_end_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    http_end_point_ = p;
  }
  return http_end_point_;
}
inline ::event_store::cluster::EndPoint* MemberInfo::mutable_http_end_point() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.MemberInfo.http_end_point)
  return _internal_mutable_http_end_point();
}
inline void MemberInfo::set_allocated_http_end_point(::event_store::cluster::EndPoint* http_end_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete http_end_point_;
  }
  if (http_end_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(http_end_point);
    if (message_arena != submessage_arena) {
      http_end_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http_end_point, submessage_arena);
    }
    
  } else {
    
  }
  http_end_point_ = http_end_point;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.MemberInfo.http_end_point)
}

// .event_store.cluster.EndPoint internal_tcp = 6;
inline bool MemberInfo::_internal_has_internal_tcp() const {
  return this != internal_default_instance() && internal_tcp_ != nullptr;
}
inline bool MemberInfo::has_internal_tcp() const {
  return _internal_has_internal_tcp();
}
inline void MemberInfo::clear_internal_tcp() {
  if (GetArena() == nullptr && internal_tcp_ != nullptr) {
    delete internal_tcp_;
  }
  internal_tcp_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& MemberInfo::_internal_internal_tcp() const {
  const ::event_store::cluster::EndPoint* p = internal_tcp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& MemberInfo::internal_tcp() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.internal_tcp)
  return _internal_internal_tcp();
}
inline void MemberInfo::unsafe_arena_set_allocated_internal_tcp(
    ::event_store::cluster::EndPoint* internal_tcp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_tcp_);
  }
  internal_tcp_ = internal_tcp;
  if (internal_tcp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.MemberInfo.internal_tcp)
}
inline ::event_store::cluster::EndPoint* MemberInfo::release_internal_tcp() {
  auto temp = unsafe_arena_release_internal_tcp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* MemberInfo::unsafe_arena_release_internal_tcp() {
  // @@protoc_insertion_point(field_release:event_store.cluster.MemberInfo.internal_tcp)
  
  ::event_store::cluster::EndPoint* temp = internal_tcp_;
  internal_tcp_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* MemberInfo::_internal_mutable_internal_tcp() {
  
  if (internal_tcp_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    internal_tcp_ = p;
  }
  return internal_tcp_;
}
inline ::event_store::cluster::EndPoint* MemberInfo::mutable_internal_tcp() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.MemberInfo.internal_tcp)
  return _internal_mutable_internal_tcp();
}
inline void MemberInfo::set_allocated_internal_tcp(::event_store::cluster::EndPoint* internal_tcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete internal_tcp_;
  }
  if (internal_tcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(internal_tcp);
    if (message_arena != submessage_arena) {
      internal_tcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_tcp, submessage_arena);
    }
    
  } else {
    
  }
  internal_tcp_ = internal_tcp;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.MemberInfo.internal_tcp)
}

// .event_store.cluster.EndPoint external_tcp = 7;
inline bool MemberInfo::_internal_has_external_tcp() const {
  return this != internal_default_instance() && external_tcp_ != nullptr;
}
inline bool MemberInfo::has_external_tcp() const {
  return _internal_has_external_tcp();
}
inline void MemberInfo::clear_external_tcp() {
  if (GetArena() == nullptr && external_tcp_ != nullptr) {
    delete external_tcp_;
  }
  external_tcp_ = nullptr;
}
inline const ::event_store::cluster::EndPoint& MemberInfo::_internal_external_tcp() const {
  const ::event_store::cluster::EndPoint* p = external_tcp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::cluster::EndPoint*>(
      &::event_store::cluster::_EndPoint_default_instance_);
}
inline const ::event_store::cluster::EndPoint& MemberInfo::external_tcp() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.external_tcp)
  return _internal_external_tcp();
}
inline void MemberInfo::unsafe_arena_set_allocated_external_tcp(
    ::event_store::cluster::EndPoint* external_tcp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_tcp_);
  }
  external_tcp_ = external_tcp;
  if (external_tcp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.MemberInfo.external_tcp)
}
inline ::event_store::cluster::EndPoint* MemberInfo::release_external_tcp() {
  auto temp = unsafe_arena_release_external_tcp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::cluster::EndPoint* MemberInfo::unsafe_arena_release_external_tcp() {
  // @@protoc_insertion_point(field_release:event_store.cluster.MemberInfo.external_tcp)
  
  ::event_store::cluster::EndPoint* temp = external_tcp_;
  external_tcp_ = nullptr;
  return temp;
}
inline ::event_store::cluster::EndPoint* MemberInfo::_internal_mutable_external_tcp() {
  
  if (external_tcp_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::cluster::EndPoint>(GetArena());
    external_tcp_ = p;
  }
  return external_tcp_;
}
inline ::event_store::cluster::EndPoint* MemberInfo::mutable_external_tcp() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.MemberInfo.external_tcp)
  return _internal_mutable_external_tcp();
}
inline void MemberInfo::set_allocated_external_tcp(::event_store::cluster::EndPoint* external_tcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete external_tcp_;
  }
  if (external_tcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(external_tcp);
    if (message_arena != submessage_arena) {
      external_tcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_tcp, submessage_arena);
    }
    
  } else {
    
  }
  external_tcp_ = external_tcp;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.MemberInfo.external_tcp)
}

// bool internal_tcp_uses_tls = 8;
inline void MemberInfo::clear_internal_tcp_uses_tls() {
  internal_tcp_uses_tls_ = false;
}
inline bool MemberInfo::_internal_internal_tcp_uses_tls() const {
  return internal_tcp_uses_tls_;
}
inline bool MemberInfo::internal_tcp_uses_tls() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.internal_tcp_uses_tls)
  return _internal_internal_tcp_uses_tls();
}
inline void MemberInfo::_internal_set_internal_tcp_uses_tls(bool value) {
  
  internal_tcp_uses_tls_ = value;
}
inline void MemberInfo::set_internal_tcp_uses_tls(bool value) {
  _internal_set_internal_tcp_uses_tls(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.internal_tcp_uses_tls)
}

// bool external_tcp_uses_tls = 9;
inline void MemberInfo::clear_external_tcp_uses_tls() {
  external_tcp_uses_tls_ = false;
}
inline bool MemberInfo::_internal_external_tcp_uses_tls() const {
  return external_tcp_uses_tls_;
}
inline bool MemberInfo::external_tcp_uses_tls() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.external_tcp_uses_tls)
  return _internal_external_tcp_uses_tls();
}
inline void MemberInfo::_internal_set_external_tcp_uses_tls(bool value) {
  
  external_tcp_uses_tls_ = value;
}
inline void MemberInfo::set_external_tcp_uses_tls(bool value) {
  _internal_set_external_tcp_uses_tls(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.external_tcp_uses_tls)
}

// int64 last_commit_position = 10;
inline void MemberInfo::clear_last_commit_position() {
  last_commit_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::_internal_last_commit_position() const {
  return last_commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::last_commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.last_commit_position)
  return _internal_last_commit_position();
}
inline void MemberInfo::_internal_set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_commit_position_ = value;
}
inline void MemberInfo::set_last_commit_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.last_commit_position)
}

// int64 writer_checkpoint = 11;
inline void MemberInfo::clear_writer_checkpoint() {
  writer_checkpoint_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::_internal_writer_checkpoint() const {
  return writer_checkpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::writer_checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.writer_checkpoint)
  return _internal_writer_checkpoint();
}
inline void MemberInfo::_internal_set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  writer_checkpoint_ = value;
}
inline void MemberInfo::set_writer_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_writer_checkpoint(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.writer_checkpoint)
}

// int64 chaser_checkpoint = 12;
inline void MemberInfo::clear_chaser_checkpoint() {
  chaser_checkpoint_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::_internal_chaser_checkpoint() const {
  return chaser_checkpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::chaser_checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.chaser_checkpoint)
  return _internal_chaser_checkpoint();
}
inline void MemberInfo::_internal_set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  chaser_checkpoint_ = value;
}
inline void MemberInfo::set_chaser_checkpoint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_chaser_checkpoint(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.chaser_checkpoint)
}

// int64 epoch_position = 13;
inline void MemberInfo::clear_epoch_position() {
  epoch_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::_internal_epoch_position() const {
  return epoch_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::epoch_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.epoch_position)
  return _internal_epoch_position();
}
inline void MemberInfo::_internal_set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  epoch_position_ = value;
}
inline void MemberInfo::set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_epoch_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.epoch_position)
}

// int32 epoch_number = 14;
inline void MemberInfo::clear_epoch_number() {
  epoch_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemberInfo::_internal_epoch_number() const {
  return epoch_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemberInfo::epoch_number() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.epoch_number)
  return _internal_epoch_number();
}
inline void MemberInfo::_internal_set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  epoch_number_ = value;
}
inline void MemberInfo::set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epoch_number(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.epoch_number)
}

// .event_store.client.UUID epoch_id = 15;
inline bool MemberInfo::_internal_has_epoch_id() const {
  return this != internal_default_instance() && epoch_id_ != nullptr;
}
inline bool MemberInfo::has_epoch_id() const {
  return _internal_has_epoch_id();
}
inline const ::event_store::client::UUID& MemberInfo::_internal_epoch_id() const {
  const ::event_store::client::UUID* p = epoch_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& MemberInfo::epoch_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.epoch_id)
  return _internal_epoch_id();
}
inline void MemberInfo::unsafe_arena_set_allocated_epoch_id(
    ::event_store::client::UUID* epoch_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id_);
  }
  epoch_id_ = epoch_id;
  if (epoch_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.MemberInfo.epoch_id)
}
inline ::event_store::client::UUID* MemberInfo::release_epoch_id() {
  auto temp = unsafe_arena_release_epoch_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* MemberInfo::unsafe_arena_release_epoch_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.MemberInfo.epoch_id)
  
  ::event_store::client::UUID* temp = epoch_id_;
  epoch_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* MemberInfo::_internal_mutable_epoch_id() {
  
  if (epoch_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    epoch_id_ = p;
  }
  return epoch_id_;
}
inline ::event_store::client::UUID* MemberInfo::mutable_epoch_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.MemberInfo.epoch_id)
  return _internal_mutable_epoch_id();
}
inline void MemberInfo::set_allocated_epoch_id(::event_store::client::UUID* epoch_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id_);
  }
  if (epoch_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_id)->GetArena();
    if (message_arena != submessage_arena) {
      epoch_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_id, submessage_arena);
    }
    
  } else {
    
  }
  epoch_id_ = epoch_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.MemberInfo.epoch_id)
}

// int32 node_priority = 16;
inline void MemberInfo::clear_node_priority() {
  node_priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemberInfo::_internal_node_priority() const {
  return node_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemberInfo::node_priority() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.node_priority)
  return _internal_node_priority();
}
inline void MemberInfo::_internal_set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_priority_ = value;
}
inline void MemberInfo::set_node_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_priority(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.node_priority)
}

// bool is_read_only_replica = 17;
inline void MemberInfo::clear_is_read_only_replica() {
  is_read_only_replica_ = false;
}
inline bool MemberInfo::_internal_is_read_only_replica() const {
  return is_read_only_replica_;
}
inline bool MemberInfo::is_read_only_replica() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.is_read_only_replica)
  return _internal_is_read_only_replica();
}
inline void MemberInfo::_internal_set_is_read_only_replica(bool value) {
  
  is_read_only_replica_ = value;
}
inline void MemberInfo::set_is_read_only_replica(bool value) {
  _internal_set_is_read_only_replica(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.is_read_only_replica)
}

// string advertise_host_to_client_as = 18;
inline void MemberInfo::clear_advertise_host_to_client_as() {
  advertise_host_to_client_as_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MemberInfo::advertise_host_to_client_as() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.advertise_host_to_client_as)
  return _internal_advertise_host_to_client_as();
}
inline void MemberInfo::set_advertise_host_to_client_as(const std::string& value) {
  _internal_set_advertise_host_to_client_as(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.advertise_host_to_client_as)
}
inline std::string* MemberInfo::mutable_advertise_host_to_client_as() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.MemberInfo.advertise_host_to_client_as)
  return _internal_mutable_advertise_host_to_client_as();
}
inline const std::string& MemberInfo::_internal_advertise_host_to_client_as() const {
  return advertise_host_to_client_as_.Get();
}
inline void MemberInfo::_internal_set_advertise_host_to_client_as(const std::string& value) {
  
  advertise_host_to_client_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MemberInfo::set_advertise_host_to_client_as(std::string&& value) {
  
  advertise_host_to_client_as_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.MemberInfo.advertise_host_to_client_as)
}
inline void MemberInfo::set_advertise_host_to_client_as(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  advertise_host_to_client_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.MemberInfo.advertise_host_to_client_as)
}
inline void MemberInfo::set_advertise_host_to_client_as(const char* value,
    size_t size) {
  
  advertise_host_to_client_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.MemberInfo.advertise_host_to_client_as)
}
inline std::string* MemberInfo::_internal_mutable_advertise_host_to_client_as() {
  
  return advertise_host_to_client_as_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MemberInfo::release_advertise_host_to_client_as() {
  // @@protoc_insertion_point(field_release:event_store.cluster.MemberInfo.advertise_host_to_client_as)
  return advertise_host_to_client_as_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MemberInfo::set_allocated_advertise_host_to_client_as(std::string* advertise_host_to_client_as) {
  if (advertise_host_to_client_as != nullptr) {
    
  } else {
    
  }
  advertise_host_to_client_as_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), advertise_host_to_client_as,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.MemberInfo.advertise_host_to_client_as)
}
inline std::string* MemberInfo::unsafe_arena_release_advertise_host_to_client_as() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.MemberInfo.advertise_host_to_client_as)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return advertise_host_to_client_as_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MemberInfo::unsafe_arena_set_allocated_advertise_host_to_client_as(
    std::string* advertise_host_to_client_as) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (advertise_host_to_client_as != nullptr) {
    
  } else {
    
  }
  advertise_host_to_client_as_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      advertise_host_to_client_as, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.MemberInfo.advertise_host_to_client_as)
}

// uint32 advertise_http_port_to_client_as = 19;
inline void MemberInfo::clear_advertise_http_port_to_client_as() {
  advertise_http_port_to_client_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberInfo::_internal_advertise_http_port_to_client_as() const {
  return advertise_http_port_to_client_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberInfo::advertise_http_port_to_client_as() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.advertise_http_port_to_client_as)
  return _internal_advertise_http_port_to_client_as();
}
inline void MemberInfo::_internal_set_advertise_http_port_to_client_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  advertise_http_port_to_client_as_ = value;
}
inline void MemberInfo::set_advertise_http_port_to_client_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_advertise_http_port_to_client_as(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.advertise_http_port_to_client_as)
}

// uint32 advertise_tcp_port_to_client_as = 20;
inline void MemberInfo::clear_advertise_tcp_port_to_client_as() {
  advertise_tcp_port_to_client_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberInfo::_internal_advertise_tcp_port_to_client_as() const {
  return advertise_tcp_port_to_client_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberInfo::advertise_tcp_port_to_client_as() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.MemberInfo.advertise_tcp_port_to_client_as)
  return _internal_advertise_tcp_port_to_client_as();
}
inline void MemberInfo::_internal_set_advertise_tcp_port_to_client_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  advertise_tcp_port_to_client_as_ = value;
}
inline void MemberInfo::set_advertise_tcp_port_to_client_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_advertise_tcp_port_to_client_as(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.MemberInfo.advertise_tcp_port_to_client_as)
}

// -------------------------------------------------------------------

// ReplicaLogWrite

// int64 log_position = 1;
inline void ReplicaLogWrite::clear_log_position() {
  log_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaLogWrite::_internal_log_position() const {
  return log_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaLogWrite::log_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaLogWrite.log_position)
  return _internal_log_position();
}
inline void ReplicaLogWrite::_internal_set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  log_position_ = value;
}
inline void ReplicaLogWrite::set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_log_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaLogWrite.log_position)
}

// bytes replica_id = 2;
inline void ReplicaLogWrite::clear_replica_id() {
  replica_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReplicaLogWrite::replica_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaLogWrite.replica_id)
  return _internal_replica_id();
}
inline void ReplicaLogWrite::set_replica_id(const std::string& value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaLogWrite.replica_id)
}
inline std::string* ReplicaLogWrite::mutable_replica_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ReplicaLogWrite.replica_id)
  return _internal_mutable_replica_id();
}
inline const std::string& ReplicaLogWrite::_internal_replica_id() const {
  return replica_id_.Get();
}
inline void ReplicaLogWrite::_internal_set_replica_id(const std::string& value) {
  
  replica_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReplicaLogWrite::set_replica_id(std::string&& value) {
  
  replica_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.ReplicaLogWrite.replica_id)
}
inline void ReplicaLogWrite::set_replica_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  replica_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.ReplicaLogWrite.replica_id)
}
inline void ReplicaLogWrite::set_replica_id(const void* value,
    size_t size) {
  
  replica_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.ReplicaLogWrite.replica_id)
}
inline std::string* ReplicaLogWrite::_internal_mutable_replica_id() {
  
  return replica_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReplicaLogWrite::release_replica_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ReplicaLogWrite.replica_id)
  return replica_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplicaLogWrite::set_allocated_replica_id(std::string* replica_id) {
  if (replica_id != nullptr) {
    
  } else {
    
  }
  replica_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replica_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ReplicaLogWrite.replica_id)
}
inline std::string* ReplicaLogWrite::unsafe_arena_release_replica_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.ReplicaLogWrite.replica_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return replica_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReplicaLogWrite::unsafe_arena_set_allocated_replica_id(
    std::string* replica_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (replica_id != nullptr) {
    
  } else {
    
  }
  replica_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      replica_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ReplicaLogWrite.replica_id)
}

// -------------------------------------------------------------------

// ReplicatedTo

// int64 log_position = 1;
inline void ReplicatedTo::clear_log_position() {
  log_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicatedTo::_internal_log_position() const {
  return log_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicatedTo::log_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicatedTo.log_position)
  return _internal_log_position();
}
inline void ReplicatedTo::_internal_set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  log_position_ = value;
}
inline void ReplicatedTo::set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_log_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicatedTo.log_position)
}

// -------------------------------------------------------------------

// Epoch

// int64 epoch_position = 1;
inline void Epoch::clear_epoch_position() {
  epoch_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Epoch::_internal_epoch_position() const {
  return epoch_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Epoch::epoch_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.Epoch.epoch_position)
  return _internal_epoch_position();
}
inline void Epoch::_internal_set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  epoch_position_ = value;
}
inline void Epoch::set_epoch_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_epoch_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.Epoch.epoch_position)
}

// int32 epoch_number = 2;
inline void Epoch::clear_epoch_number() {
  epoch_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epoch::_internal_epoch_number() const {
  return epoch_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epoch::epoch_number() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.Epoch.epoch_number)
  return _internal_epoch_number();
}
inline void Epoch::_internal_set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  epoch_number_ = value;
}
inline void Epoch::set_epoch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epoch_number(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.Epoch.epoch_number)
}

// bytes epoch_id = 3;
inline void Epoch::clear_epoch_id() {
  epoch_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Epoch::epoch_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.Epoch.epoch_id)
  return _internal_epoch_id();
}
inline void Epoch::set_epoch_id(const std::string& value) {
  _internal_set_epoch_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.Epoch.epoch_id)
}
inline std::string* Epoch::mutable_epoch_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.Epoch.epoch_id)
  return _internal_mutable_epoch_id();
}
inline const std::string& Epoch::_internal_epoch_id() const {
  return epoch_id_.Get();
}
inline void Epoch::_internal_set_epoch_id(const std::string& value) {
  
  epoch_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Epoch::set_epoch_id(std::string&& value) {
  
  epoch_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.Epoch.epoch_id)
}
inline void Epoch::set_epoch_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  epoch_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.Epoch.epoch_id)
}
inline void Epoch::set_epoch_id(const void* value,
    size_t size) {
  
  epoch_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.Epoch.epoch_id)
}
inline std::string* Epoch::_internal_mutable_epoch_id() {
  
  return epoch_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Epoch::release_epoch_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.Epoch.epoch_id)
  return epoch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Epoch::set_allocated_epoch_id(std::string* epoch_id) {
  if (epoch_id != nullptr) {
    
  } else {
    
  }
  epoch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), epoch_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.Epoch.epoch_id)
}
inline std::string* Epoch::unsafe_arena_release_epoch_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.Epoch.epoch_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return epoch_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Epoch::unsafe_arena_set_allocated_epoch_id(
    std::string* epoch_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (epoch_id != nullptr) {
    
  } else {
    
  }
  epoch_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      epoch_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.Epoch.epoch_id)
}

// -------------------------------------------------------------------

// SubscribeReplica

// int64 log_position = 1;
inline void SubscribeReplica::clear_log_position() {
  log_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscribeReplica::_internal_log_position() const {
  return log_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscribeReplica::log_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.SubscribeReplica.log_position)
  return _internal_log_position();
}
inline void SubscribeReplica::_internal_set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  log_position_ = value;
}
inline void SubscribeReplica::set_log_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_log_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.SubscribeReplica.log_position)
}

// bytes chunk_id = 2;
inline void SubscribeReplica::clear_chunk_id() {
  chunk_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeReplica::chunk_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.SubscribeReplica.chunk_id)
  return _internal_chunk_id();
}
inline void SubscribeReplica::set_chunk_id(const std::string& value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.SubscribeReplica.chunk_id)
}
inline std::string* SubscribeReplica::mutable_chunk_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.SubscribeReplica.chunk_id)
  return _internal_mutable_chunk_id();
}
inline const std::string& SubscribeReplica::_internal_chunk_id() const {
  return chunk_id_.Get();
}
inline void SubscribeReplica::_internal_set_chunk_id(const std::string& value) {
  
  chunk_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeReplica::set_chunk_id(std::string&& value) {
  
  chunk_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.SubscribeReplica.chunk_id)
}
inline void SubscribeReplica::set_chunk_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chunk_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.SubscribeReplica.chunk_id)
}
inline void SubscribeReplica::set_chunk_id(const void* value,
    size_t size) {
  
  chunk_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.SubscribeReplica.chunk_id)
}
inline std::string* SubscribeReplica::_internal_mutable_chunk_id() {
  
  return chunk_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeReplica::release_chunk_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.SubscribeReplica.chunk_id)
  return chunk_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeReplica::set_allocated_chunk_id(std::string* chunk_id) {
  if (chunk_id != nullptr) {
    
  } else {
    
  }
  chunk_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.SubscribeReplica.chunk_id)
}
inline std::string* SubscribeReplica::unsafe_arena_release_chunk_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.SubscribeReplica.chunk_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return chunk_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeReplica::unsafe_arena_set_allocated_chunk_id(
    std::string* chunk_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (chunk_id != nullptr) {
    
  } else {
    
  }
  chunk_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      chunk_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.SubscribeReplica.chunk_id)
}

// repeated .event_store.cluster.Epoch LastEpochs = 3;
inline int SubscribeReplica::_internal_lastepochs_size() const {
  return lastepochs_.size();
}
inline int SubscribeReplica::lastepochs_size() const {
  return _internal_lastepochs_size();
}
inline void SubscribeReplica::clear_lastepochs() {
  lastepochs_.Clear();
}
inline ::event_store::cluster::Epoch* SubscribeReplica::mutable_lastepochs(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.SubscribeReplica.LastEpochs)
  return lastepochs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::Epoch >*
SubscribeReplica::mutable_lastepochs() {
  // @@protoc_insertion_point(field_mutable_list:event_store.cluster.SubscribeReplica.LastEpochs)
  return &lastepochs_;
}
inline const ::event_store::cluster::Epoch& SubscribeReplica::_internal_lastepochs(int index) const {
  return lastepochs_.Get(index);
}
inline const ::event_store::cluster::Epoch& SubscribeReplica::lastepochs(int index) const {
  // @@protoc_insertion_point(field_get:event_store.cluster.SubscribeReplica.LastEpochs)
  return _internal_lastepochs(index);
}
inline ::event_store::cluster::Epoch* SubscribeReplica::_internal_add_lastepochs() {
  return lastepochs_.Add();
}
inline ::event_store::cluster::Epoch* SubscribeReplica::add_lastepochs() {
  // @@protoc_insertion_point(field_add:event_store.cluster.SubscribeReplica.LastEpochs)
  return _internal_add_lastepochs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::cluster::Epoch >&
SubscribeReplica::lastepochs() const {
  // @@protoc_insertion_point(field_list:event_store.cluster.SubscribeReplica.LastEpochs)
  return lastepochs_;
}

// bytes ip = 4;
inline void SubscribeReplica::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeReplica::ip() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.SubscribeReplica.ip)
  return _internal_ip();
}
inline void SubscribeReplica::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.SubscribeReplica.ip)
}
inline std::string* SubscribeReplica::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.SubscribeReplica.ip)
  return _internal_mutable_ip();
}
inline const std::string& SubscribeReplica::_internal_ip() const {
  return ip_.Get();
}
inline void SubscribeReplica::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeReplica::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.SubscribeReplica.ip)
}
inline void SubscribeReplica::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.SubscribeReplica.ip)
}
inline void SubscribeReplica::set_ip(const void* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.SubscribeReplica.ip)
}
inline std::string* SubscribeReplica::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeReplica::release_ip() {
  // @@protoc_insertion_point(field_release:event_store.cluster.SubscribeReplica.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeReplica::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.SubscribeReplica.ip)
}
inline std::string* SubscribeReplica::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.SubscribeReplica.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeReplica::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.SubscribeReplica.ip)
}

// int32 port = 5;
inline void SubscribeReplica::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeReplica::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscribeReplica::port() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.SubscribeReplica.port)
  return _internal_port();
}
inline void SubscribeReplica::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void SubscribeReplica::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.SubscribeReplica.port)
}

// bytes leader_id = 6;
inline void SubscribeReplica::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeReplica::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.SubscribeReplica.leader_id)
  return _internal_leader_id();
}
inline void SubscribeReplica::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.SubscribeReplica.leader_id)
}
inline std::string* SubscribeReplica::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.SubscribeReplica.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& SubscribeReplica::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void SubscribeReplica::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeReplica::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.SubscribeReplica.leader_id)
}
inline void SubscribeReplica::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.SubscribeReplica.leader_id)
}
inline void SubscribeReplica::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.SubscribeReplica.leader_id)
}
inline std::string* SubscribeReplica::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeReplica::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.SubscribeReplica.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeReplica::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.SubscribeReplica.leader_id)
}
inline std::string* SubscribeReplica::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.SubscribeReplica.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeReplica::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.SubscribeReplica.leader_id)
}

// bytes subscription_id = 7;
inline void SubscribeReplica::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeReplica::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.SubscribeReplica.subscription_id)
  return _internal_subscription_id();
}
inline void SubscribeReplica::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.SubscribeReplica.subscription_id)
}
inline std::string* SubscribeReplica::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.SubscribeReplica.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& SubscribeReplica::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void SubscribeReplica::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeReplica::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.SubscribeReplica.subscription_id)
}
inline void SubscribeReplica::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.SubscribeReplica.subscription_id)
}
inline void SubscribeReplica::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.SubscribeReplica.subscription_id)
}
inline std::string* SubscribeReplica::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeReplica::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.SubscribeReplica.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeReplica::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.SubscribeReplica.subscription_id)
}
inline std::string* SubscribeReplica::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.SubscribeReplica.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeReplica::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.SubscribeReplica.subscription_id)
}

// bool is_promotable = 8;
inline void SubscribeReplica::clear_is_promotable() {
  is_promotable_ = false;
}
inline bool SubscribeReplica::_internal_is_promotable() const {
  return is_promotable_;
}
inline bool SubscribeReplica::is_promotable() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.SubscribeReplica.is_promotable)
  return _internal_is_promotable();
}
inline void SubscribeReplica::_internal_set_is_promotable(bool value) {
  
  is_promotable_ = value;
}
inline void SubscribeReplica::set_is_promotable(bool value) {
  _internal_set_is_promotable(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.SubscribeReplica.is_promotable)
}

// -------------------------------------------------------------------

// ReplicaSubscriptionRetry

// bytes leader_id = 1;
inline void ReplicaSubscriptionRetry::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReplicaSubscriptionRetry::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
  return _internal_leader_id();
}
inline void ReplicaSubscriptionRetry::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
}
inline std::string* ReplicaSubscriptionRetry::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& ReplicaSubscriptionRetry::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void ReplicaSubscriptionRetry::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReplicaSubscriptionRetry::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
}
inline void ReplicaSubscriptionRetry::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
}
inline void ReplicaSubscriptionRetry::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
}
inline std::string* ReplicaSubscriptionRetry::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReplicaSubscriptionRetry::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplicaSubscriptionRetry::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
}
inline std::string* ReplicaSubscriptionRetry::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReplicaSubscriptionRetry::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ReplicaSubscriptionRetry.leader_id)
}

// bytes subscription_id = 2;
inline void ReplicaSubscriptionRetry::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReplicaSubscriptionRetry::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
  return _internal_subscription_id();
}
inline void ReplicaSubscriptionRetry::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
}
inline std::string* ReplicaSubscriptionRetry::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& ReplicaSubscriptionRetry::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void ReplicaSubscriptionRetry::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReplicaSubscriptionRetry::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
}
inline void ReplicaSubscriptionRetry::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
}
inline void ReplicaSubscriptionRetry::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
}
inline std::string* ReplicaSubscriptionRetry::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReplicaSubscriptionRetry::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplicaSubscriptionRetry::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
}
inline std::string* ReplicaSubscriptionRetry::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReplicaSubscriptionRetry::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ReplicaSubscriptionRetry.subscription_id)
}

// -------------------------------------------------------------------

// ReplicaSubscribed

// bytes leader_id = 1;
inline void ReplicaSubscribed::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReplicaSubscribed::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaSubscribed.leader_id)
  return _internal_leader_id();
}
inline void ReplicaSubscribed::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaSubscribed.leader_id)
}
inline std::string* ReplicaSubscribed::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ReplicaSubscribed.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& ReplicaSubscribed::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void ReplicaSubscribed::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReplicaSubscribed::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.ReplicaSubscribed.leader_id)
}
inline void ReplicaSubscribed::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.ReplicaSubscribed.leader_id)
}
inline void ReplicaSubscribed::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.ReplicaSubscribed.leader_id)
}
inline std::string* ReplicaSubscribed::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReplicaSubscribed::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ReplicaSubscribed.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplicaSubscribed::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ReplicaSubscribed.leader_id)
}
inline std::string* ReplicaSubscribed::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.ReplicaSubscribed.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReplicaSubscribed::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ReplicaSubscribed.leader_id)
}

// bytes subscription_id = 2;
inline void ReplicaSubscribed::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReplicaSubscribed::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaSubscribed.subscription_id)
  return _internal_subscription_id();
}
inline void ReplicaSubscribed::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaSubscribed.subscription_id)
}
inline std::string* ReplicaSubscribed::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ReplicaSubscribed.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& ReplicaSubscribed::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void ReplicaSubscribed::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReplicaSubscribed::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.ReplicaSubscribed.subscription_id)
}
inline void ReplicaSubscribed::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.ReplicaSubscribed.subscription_id)
}
inline void ReplicaSubscribed::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.ReplicaSubscribed.subscription_id)
}
inline std::string* ReplicaSubscribed::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReplicaSubscribed::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ReplicaSubscribed.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplicaSubscribed::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ReplicaSubscribed.subscription_id)
}
inline std::string* ReplicaSubscribed::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.ReplicaSubscribed.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReplicaSubscribed::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ReplicaSubscribed.subscription_id)
}

// int64 subscription_position = 3;
inline void ReplicaSubscribed::clear_subscription_position() {
  subscription_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaSubscribed::_internal_subscription_position() const {
  return subscription_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaSubscribed::subscription_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaSubscribed.subscription_position)
  return _internal_subscription_position();
}
inline void ReplicaSubscribed::_internal_set_subscription_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  subscription_position_ = value;
}
inline void ReplicaSubscribed::set_subscription_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_subscription_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaSubscribed.subscription_position)
}

// -------------------------------------------------------------------

// ReplicaLogPositionAck

// bytes subscription_id = 1;
inline void ReplicaLogPositionAck::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReplicaLogPositionAck::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaLogPositionAck.subscription_id)
  return _internal_subscription_id();
}
inline void ReplicaLogPositionAck::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaLogPositionAck.subscription_id)
}
inline std::string* ReplicaLogPositionAck::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.ReplicaLogPositionAck.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& ReplicaLogPositionAck::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void ReplicaLogPositionAck::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReplicaLogPositionAck::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.ReplicaLogPositionAck.subscription_id)
}
inline void ReplicaLogPositionAck::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.ReplicaLogPositionAck.subscription_id)
}
inline void ReplicaLogPositionAck::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.ReplicaLogPositionAck.subscription_id)
}
inline std::string* ReplicaLogPositionAck::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReplicaLogPositionAck::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.ReplicaLogPositionAck.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplicaLogPositionAck::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.ReplicaLogPositionAck.subscription_id)
}
inline std::string* ReplicaLogPositionAck::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.ReplicaLogPositionAck.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReplicaLogPositionAck::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.ReplicaLogPositionAck.subscription_id)
}

// int64 replication_log_position = 2;
inline void ReplicaLogPositionAck::clear_replication_log_position() {
  replication_log_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaLogPositionAck::_internal_replication_log_position() const {
  return replication_log_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaLogPositionAck::replication_log_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.ReplicaLogPositionAck.replication_log_position)
  return _internal_replication_log_position();
}
inline void ReplicaLogPositionAck::_internal_set_replication_log_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  replication_log_position_ = value;
}
inline void ReplicaLogPositionAck::set_replication_log_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_replication_log_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.ReplicaLogPositionAck.replication_log_position)
}

// -------------------------------------------------------------------

// CreateChunk

// bytes leader_id = 1;
inline void CreateChunk::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateChunk::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.CreateChunk.leader_id)
  return _internal_leader_id();
}
inline void CreateChunk::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.CreateChunk.leader_id)
}
inline std::string* CreateChunk::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.CreateChunk.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& CreateChunk::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void CreateChunk::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateChunk::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.CreateChunk.leader_id)
}
inline void CreateChunk::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.CreateChunk.leader_id)
}
inline void CreateChunk::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.CreateChunk.leader_id)
}
inline std::string* CreateChunk::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateChunk::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.CreateChunk.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateChunk::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.CreateChunk.leader_id)
}
inline std::string* CreateChunk::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.CreateChunk.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateChunk::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.CreateChunk.leader_id)
}

// bytes subscription_id = 2;
inline void CreateChunk::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateChunk::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.CreateChunk.subscription_id)
  return _internal_subscription_id();
}
inline void CreateChunk::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.CreateChunk.subscription_id)
}
inline std::string* CreateChunk::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.CreateChunk.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& CreateChunk::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void CreateChunk::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateChunk::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.CreateChunk.subscription_id)
}
inline void CreateChunk::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.CreateChunk.subscription_id)
}
inline void CreateChunk::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.CreateChunk.subscription_id)
}
inline std::string* CreateChunk::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateChunk::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.CreateChunk.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateChunk::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.CreateChunk.subscription_id)
}
inline std::string* CreateChunk::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.CreateChunk.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateChunk::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.CreateChunk.subscription_id)
}

// bytes chunk_header_bytes = 3;
inline void CreateChunk::clear_chunk_header_bytes() {
  chunk_header_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateChunk::chunk_header_bytes() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.CreateChunk.chunk_header_bytes)
  return _internal_chunk_header_bytes();
}
inline void CreateChunk::set_chunk_header_bytes(const std::string& value) {
  _internal_set_chunk_header_bytes(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.CreateChunk.chunk_header_bytes)
}
inline std::string* CreateChunk::mutable_chunk_header_bytes() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.CreateChunk.chunk_header_bytes)
  return _internal_mutable_chunk_header_bytes();
}
inline const std::string& CreateChunk::_internal_chunk_header_bytes() const {
  return chunk_header_bytes_.Get();
}
inline void CreateChunk::_internal_set_chunk_header_bytes(const std::string& value) {
  
  chunk_header_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateChunk::set_chunk_header_bytes(std::string&& value) {
  
  chunk_header_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.CreateChunk.chunk_header_bytes)
}
inline void CreateChunk::set_chunk_header_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chunk_header_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.CreateChunk.chunk_header_bytes)
}
inline void CreateChunk::set_chunk_header_bytes(const void* value,
    size_t size) {
  
  chunk_header_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.CreateChunk.chunk_header_bytes)
}
inline std::string* CreateChunk::_internal_mutable_chunk_header_bytes() {
  
  return chunk_header_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateChunk::release_chunk_header_bytes() {
  // @@protoc_insertion_point(field_release:event_store.cluster.CreateChunk.chunk_header_bytes)
  return chunk_header_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateChunk::set_allocated_chunk_header_bytes(std::string* chunk_header_bytes) {
  if (chunk_header_bytes != nullptr) {
    
  } else {
    
  }
  chunk_header_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk_header_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.CreateChunk.chunk_header_bytes)
}
inline std::string* CreateChunk::unsafe_arena_release_chunk_header_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.CreateChunk.chunk_header_bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return chunk_header_bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateChunk::unsafe_arena_set_allocated_chunk_header_bytes(
    std::string* chunk_header_bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (chunk_header_bytes != nullptr) {
    
  } else {
    
  }
  chunk_header_bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      chunk_header_bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.CreateChunk.chunk_header_bytes)
}

// int32 file_size = 4;
inline void CreateChunk::clear_file_size() {
  file_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateChunk::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateChunk::file_size() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.CreateChunk.file_size)
  return _internal_file_size();
}
inline void CreateChunk::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_size_ = value;
}
inline void CreateChunk::set_file_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.CreateChunk.file_size)
}

// bool is_completed_chunk = 5;
inline void CreateChunk::clear_is_completed_chunk() {
  is_completed_chunk_ = false;
}
inline bool CreateChunk::_internal_is_completed_chunk() const {
  return is_completed_chunk_;
}
inline bool CreateChunk::is_completed_chunk() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.CreateChunk.is_completed_chunk)
  return _internal_is_completed_chunk();
}
inline void CreateChunk::_internal_set_is_completed_chunk(bool value) {
  
  is_completed_chunk_ = value;
}
inline void CreateChunk::set_is_completed_chunk(bool value) {
  _internal_set_is_completed_chunk(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.CreateChunk.is_completed_chunk)
}

// -------------------------------------------------------------------

// RawChunkBulk

// bytes leader_id = 1;
inline void RawChunkBulk::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RawChunkBulk::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.RawChunkBulk.leader_id)
  return _internal_leader_id();
}
inline void RawChunkBulk::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.RawChunkBulk.leader_id)
}
inline std::string* RawChunkBulk::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.RawChunkBulk.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& RawChunkBulk::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void RawChunkBulk::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RawChunkBulk::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.RawChunkBulk.leader_id)
}
inline void RawChunkBulk::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.RawChunkBulk.leader_id)
}
inline void RawChunkBulk::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.RawChunkBulk.leader_id)
}
inline std::string* RawChunkBulk::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RawChunkBulk::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.RawChunkBulk.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawChunkBulk::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.RawChunkBulk.leader_id)
}
inline std::string* RawChunkBulk::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.RawChunkBulk.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RawChunkBulk::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.RawChunkBulk.leader_id)
}

// bytes subscription_id = 2;
inline void RawChunkBulk::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RawChunkBulk::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.RawChunkBulk.subscription_id)
  return _internal_subscription_id();
}
inline void RawChunkBulk::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.RawChunkBulk.subscription_id)
}
inline std::string* RawChunkBulk::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.RawChunkBulk.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& RawChunkBulk::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void RawChunkBulk::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RawChunkBulk::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.RawChunkBulk.subscription_id)
}
inline void RawChunkBulk::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.RawChunkBulk.subscription_id)
}
inline void RawChunkBulk::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.RawChunkBulk.subscription_id)
}
inline std::string* RawChunkBulk::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RawChunkBulk::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.RawChunkBulk.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawChunkBulk::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.RawChunkBulk.subscription_id)
}
inline std::string* RawChunkBulk::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.RawChunkBulk.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RawChunkBulk::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.RawChunkBulk.subscription_id)
}

// int32 chunk_start_number = 3;
inline void RawChunkBulk::clear_chunk_start_number() {
  chunk_start_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawChunkBulk::_internal_chunk_start_number() const {
  return chunk_start_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawChunkBulk::chunk_start_number() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.RawChunkBulk.chunk_start_number)
  return _internal_chunk_start_number();
}
inline void RawChunkBulk::_internal_set_chunk_start_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunk_start_number_ = value;
}
inline void RawChunkBulk::set_chunk_start_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunk_start_number(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.RawChunkBulk.chunk_start_number)
}

// int32 chunk_end_number = 4;
inline void RawChunkBulk::clear_chunk_end_number() {
  chunk_end_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawChunkBulk::_internal_chunk_end_number() const {
  return chunk_end_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawChunkBulk::chunk_end_number() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.RawChunkBulk.chunk_end_number)
  return _internal_chunk_end_number();
}
inline void RawChunkBulk::_internal_set_chunk_end_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunk_end_number_ = value;
}
inline void RawChunkBulk::set_chunk_end_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunk_end_number(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.RawChunkBulk.chunk_end_number)
}

// int32 raw_position = 5;
inline void RawChunkBulk::clear_raw_position() {
  raw_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawChunkBulk::_internal_raw_position() const {
  return raw_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawChunkBulk::raw_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.RawChunkBulk.raw_position)
  return _internal_raw_position();
}
inline void RawChunkBulk::_internal_set_raw_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  raw_position_ = value;
}
inline void RawChunkBulk::set_raw_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raw_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.RawChunkBulk.raw_position)
}

// bytes raw_bytes = 6;
inline void RawChunkBulk::clear_raw_bytes() {
  raw_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RawChunkBulk::raw_bytes() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.RawChunkBulk.raw_bytes)
  return _internal_raw_bytes();
}
inline void RawChunkBulk::set_raw_bytes(const std::string& value) {
  _internal_set_raw_bytes(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.RawChunkBulk.raw_bytes)
}
inline std::string* RawChunkBulk::mutable_raw_bytes() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.RawChunkBulk.raw_bytes)
  return _internal_mutable_raw_bytes();
}
inline const std::string& RawChunkBulk::_internal_raw_bytes() const {
  return raw_bytes_.Get();
}
inline void RawChunkBulk::_internal_set_raw_bytes(const std::string& value) {
  
  raw_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RawChunkBulk::set_raw_bytes(std::string&& value) {
  
  raw_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.RawChunkBulk.raw_bytes)
}
inline void RawChunkBulk::set_raw_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.RawChunkBulk.raw_bytes)
}
inline void RawChunkBulk::set_raw_bytes(const void* value,
    size_t size) {
  
  raw_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.RawChunkBulk.raw_bytes)
}
inline std::string* RawChunkBulk::_internal_mutable_raw_bytes() {
  
  return raw_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RawChunkBulk::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:event_store.cluster.RawChunkBulk.raw_bytes)
  return raw_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawChunkBulk::set_allocated_raw_bytes(std::string* raw_bytes) {
  if (raw_bytes != nullptr) {
    
  } else {
    
  }
  raw_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.RawChunkBulk.raw_bytes)
}
inline std::string* RawChunkBulk::unsafe_arena_release_raw_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.RawChunkBulk.raw_bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return raw_bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RawChunkBulk::unsafe_arena_set_allocated_raw_bytes(
    std::string* raw_bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (raw_bytes != nullptr) {
    
  } else {
    
  }
  raw_bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      raw_bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.RawChunkBulk.raw_bytes)
}

// bool complete_chunk = 7;
inline void RawChunkBulk::clear_complete_chunk() {
  complete_chunk_ = false;
}
inline bool RawChunkBulk::_internal_complete_chunk() const {
  return complete_chunk_;
}
inline bool RawChunkBulk::complete_chunk() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.RawChunkBulk.complete_chunk)
  return _internal_complete_chunk();
}
inline void RawChunkBulk::_internal_set_complete_chunk(bool value) {
  
  complete_chunk_ = value;
}
inline void RawChunkBulk::set_complete_chunk(bool value) {
  _internal_set_complete_chunk(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.RawChunkBulk.complete_chunk)
}

// -------------------------------------------------------------------

// DataChunkBulk

// bytes leader_id = 1;
inline void DataChunkBulk::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataChunkBulk::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DataChunkBulk.leader_id)
  return _internal_leader_id();
}
inline void DataChunkBulk::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DataChunkBulk.leader_id)
}
inline std::string* DataChunkBulk::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.DataChunkBulk.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& DataChunkBulk::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void DataChunkBulk::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataChunkBulk::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.DataChunkBulk.leader_id)
}
inline void DataChunkBulk::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.DataChunkBulk.leader_id)
}
inline void DataChunkBulk::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.DataChunkBulk.leader_id)
}
inline std::string* DataChunkBulk::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataChunkBulk::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.DataChunkBulk.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataChunkBulk::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.DataChunkBulk.leader_id)
}
inline std::string* DataChunkBulk::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.DataChunkBulk.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataChunkBulk::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.DataChunkBulk.leader_id)
}

// bytes subscription_id = 2;
inline void DataChunkBulk::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataChunkBulk::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DataChunkBulk.subscription_id)
  return _internal_subscription_id();
}
inline void DataChunkBulk::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DataChunkBulk.subscription_id)
}
inline std::string* DataChunkBulk::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.DataChunkBulk.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& DataChunkBulk::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void DataChunkBulk::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataChunkBulk::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.DataChunkBulk.subscription_id)
}
inline void DataChunkBulk::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.DataChunkBulk.subscription_id)
}
inline void DataChunkBulk::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.DataChunkBulk.subscription_id)
}
inline std::string* DataChunkBulk::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataChunkBulk::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.DataChunkBulk.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataChunkBulk::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.DataChunkBulk.subscription_id)
}
inline std::string* DataChunkBulk::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.DataChunkBulk.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataChunkBulk::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.DataChunkBulk.subscription_id)
}

// int32 chunk_start_number = 3;
inline void DataChunkBulk::clear_chunk_start_number() {
  chunk_start_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataChunkBulk::_internal_chunk_start_number() const {
  return chunk_start_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataChunkBulk::chunk_start_number() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DataChunkBulk.chunk_start_number)
  return _internal_chunk_start_number();
}
inline void DataChunkBulk::_internal_set_chunk_start_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunk_start_number_ = value;
}
inline void DataChunkBulk::set_chunk_start_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunk_start_number(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DataChunkBulk.chunk_start_number)
}

// int32 chunk_end_number = 4;
inline void DataChunkBulk::clear_chunk_end_number() {
  chunk_end_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataChunkBulk::_internal_chunk_end_number() const {
  return chunk_end_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataChunkBulk::chunk_end_number() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DataChunkBulk.chunk_end_number)
  return _internal_chunk_end_number();
}
inline void DataChunkBulk::_internal_set_chunk_end_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunk_end_number_ = value;
}
inline void DataChunkBulk::set_chunk_end_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunk_end_number(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DataChunkBulk.chunk_end_number)
}

// int64 subscription_position = 5;
inline void DataChunkBulk::clear_subscription_position() {
  subscription_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataChunkBulk::_internal_subscription_position() const {
  return subscription_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DataChunkBulk::subscription_position() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DataChunkBulk.subscription_position)
  return _internal_subscription_position();
}
inline void DataChunkBulk::_internal_set_subscription_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  subscription_position_ = value;
}
inline void DataChunkBulk::set_subscription_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_subscription_position(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DataChunkBulk.subscription_position)
}

// bytes data_bytes = 6;
inline void DataChunkBulk::clear_data_bytes() {
  data_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataChunkBulk::data_bytes() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DataChunkBulk.data_bytes)
  return _internal_data_bytes();
}
inline void DataChunkBulk::set_data_bytes(const std::string& value) {
  _internal_set_data_bytes(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DataChunkBulk.data_bytes)
}
inline std::string* DataChunkBulk::mutable_data_bytes() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.DataChunkBulk.data_bytes)
  return _internal_mutable_data_bytes();
}
inline const std::string& DataChunkBulk::_internal_data_bytes() const {
  return data_bytes_.Get();
}
inline void DataChunkBulk::_internal_set_data_bytes(const std::string& value) {
  
  data_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataChunkBulk::set_data_bytes(std::string&& value) {
  
  data_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.DataChunkBulk.data_bytes)
}
inline void DataChunkBulk::set_data_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.DataChunkBulk.data_bytes)
}
inline void DataChunkBulk::set_data_bytes(const void* value,
    size_t size) {
  
  data_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.DataChunkBulk.data_bytes)
}
inline std::string* DataChunkBulk::_internal_mutable_data_bytes() {
  
  return data_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataChunkBulk::release_data_bytes() {
  // @@protoc_insertion_point(field_release:event_store.cluster.DataChunkBulk.data_bytes)
  return data_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataChunkBulk::set_allocated_data_bytes(std::string* data_bytes) {
  if (data_bytes != nullptr) {
    
  } else {
    
  }
  data_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.DataChunkBulk.data_bytes)
}
inline std::string* DataChunkBulk::unsafe_arena_release_data_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.DataChunkBulk.data_bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataChunkBulk::unsafe_arena_set_allocated_data_bytes(
    std::string* data_bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data_bytes != nullptr) {
    
  } else {
    
  }
  data_bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data_bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.DataChunkBulk.data_bytes)
}

// bool complete_chunk = 7;
inline void DataChunkBulk::clear_complete_chunk() {
  complete_chunk_ = false;
}
inline bool DataChunkBulk::_internal_complete_chunk() const {
  return complete_chunk_;
}
inline bool DataChunkBulk::complete_chunk() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DataChunkBulk.complete_chunk)
  return _internal_complete_chunk();
}
inline void DataChunkBulk::_internal_set_complete_chunk(bool value) {
  
  complete_chunk_ = value;
}
inline void DataChunkBulk::set_complete_chunk(bool value) {
  _internal_set_complete_chunk(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DataChunkBulk.complete_chunk)
}

// -------------------------------------------------------------------

// FollowerAssignment

// bytes leader_id = 1;
inline void FollowerAssignment::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FollowerAssignment::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.FollowerAssignment.leader_id)
  return _internal_leader_id();
}
inline void FollowerAssignment::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.FollowerAssignment.leader_id)
}
inline std::string* FollowerAssignment::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.FollowerAssignment.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& FollowerAssignment::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void FollowerAssignment::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FollowerAssignment::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.FollowerAssignment.leader_id)
}
inline void FollowerAssignment::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.FollowerAssignment.leader_id)
}
inline void FollowerAssignment::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.FollowerAssignment.leader_id)
}
inline std::string* FollowerAssignment::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FollowerAssignment::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.FollowerAssignment.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FollowerAssignment::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.FollowerAssignment.leader_id)
}
inline std::string* FollowerAssignment::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.FollowerAssignment.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FollowerAssignment::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.FollowerAssignment.leader_id)
}

// bytes subscription_id = 2;
inline void FollowerAssignment::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FollowerAssignment::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.FollowerAssignment.subscription_id)
  return _internal_subscription_id();
}
inline void FollowerAssignment::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.FollowerAssignment.subscription_id)
}
inline std::string* FollowerAssignment::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.FollowerAssignment.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& FollowerAssignment::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void FollowerAssignment::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FollowerAssignment::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.FollowerAssignment.subscription_id)
}
inline void FollowerAssignment::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.FollowerAssignment.subscription_id)
}
inline void FollowerAssignment::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.FollowerAssignment.subscription_id)
}
inline std::string* FollowerAssignment::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FollowerAssignment::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.FollowerAssignment.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FollowerAssignment::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.FollowerAssignment.subscription_id)
}
inline std::string* FollowerAssignment::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.FollowerAssignment.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FollowerAssignment::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.FollowerAssignment.subscription_id)
}

// -------------------------------------------------------------------

// CloneAssignment

// bytes leader_id = 1;
inline void CloneAssignment::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloneAssignment::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.CloneAssignment.leader_id)
  return _internal_leader_id();
}
inline void CloneAssignment::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.CloneAssignment.leader_id)
}
inline std::string* CloneAssignment::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.CloneAssignment.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& CloneAssignment::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void CloneAssignment::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloneAssignment::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.CloneAssignment.leader_id)
}
inline void CloneAssignment::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.CloneAssignment.leader_id)
}
inline void CloneAssignment::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.CloneAssignment.leader_id)
}
inline std::string* CloneAssignment::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloneAssignment::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.CloneAssignment.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloneAssignment::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.CloneAssignment.leader_id)
}
inline std::string* CloneAssignment::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.CloneAssignment.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CloneAssignment::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.CloneAssignment.leader_id)
}

// bytes subscription_id = 2;
inline void CloneAssignment::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloneAssignment::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.CloneAssignment.subscription_id)
  return _internal_subscription_id();
}
inline void CloneAssignment::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.CloneAssignment.subscription_id)
}
inline std::string* CloneAssignment::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.CloneAssignment.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& CloneAssignment::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void CloneAssignment::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloneAssignment::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.CloneAssignment.subscription_id)
}
inline void CloneAssignment::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.CloneAssignment.subscription_id)
}
inline void CloneAssignment::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.CloneAssignment.subscription_id)
}
inline std::string* CloneAssignment::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloneAssignment::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.CloneAssignment.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloneAssignment::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.CloneAssignment.subscription_id)
}
inline std::string* CloneAssignment::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.CloneAssignment.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CloneAssignment::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.CloneAssignment.subscription_id)
}

// -------------------------------------------------------------------

// DropSubscription

// bytes leader_id = 1;
inline void DropSubscription::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DropSubscription::leader_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DropSubscription.leader_id)
  return _internal_leader_id();
}
inline void DropSubscription::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DropSubscription.leader_id)
}
inline std::string* DropSubscription::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.DropSubscription.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& DropSubscription::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void DropSubscription::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DropSubscription::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.DropSubscription.leader_id)
}
inline void DropSubscription::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.DropSubscription.leader_id)
}
inline void DropSubscription::set_leader_id(const void* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.DropSubscription.leader_id)
}
inline std::string* DropSubscription::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DropSubscription::release_leader_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.DropSubscription.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropSubscription::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.DropSubscription.leader_id)
}
inline std::string* DropSubscription::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.DropSubscription.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DropSubscription::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.DropSubscription.leader_id)
}

// bytes subscription_id = 2;
inline void DropSubscription::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DropSubscription::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.cluster.DropSubscription.subscription_id)
  return _internal_subscription_id();
}
inline void DropSubscription::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.cluster.DropSubscription.subscription_id)
}
inline std::string* DropSubscription::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.cluster.DropSubscription.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& DropSubscription::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void DropSubscription::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DropSubscription::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.cluster.DropSubscription.subscription_id)
}
inline void DropSubscription::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.cluster.DropSubscription.subscription_id)
}
inline void DropSubscription::set_subscription_id(const void* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.cluster.DropSubscription.subscription_id)
}
inline std::string* DropSubscription::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DropSubscription::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.cluster.DropSubscription.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DropSubscription::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.cluster.DropSubscription.subscription_id)
}
inline std::string* DropSubscription::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.cluster.DropSubscription.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DropSubscription::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.cluster.DropSubscription.subscription_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cluster
}  // namespace event_store

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::event_store::cluster::MemberInfo_VNodeState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event_store::cluster::MemberInfo_VNodeState>() {
  return ::event_store::cluster::MemberInfo_VNodeState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cluster_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: persistent.proto

#include "persistent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamIdentifier_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UUID_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateReq_AllOptions_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateReq_AllOptions_FilterOptions_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateReq_AllOptions_FilterOptions_Expression_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CreateReq_Options_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateReq_Position_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateReq_Settings_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateReq_StreamOptions_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteReq_Options_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetInfoReq_Options_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListReq_Options_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListReq_StreamOption_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_Ack_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_Nack_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReadReq_Options_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_Options_UUIDOption_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadResp_ReadEvent_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReadResp_ReadEvent_RecordedEvent_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_SubscriptionConfirmation_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplayParkedReq_Options_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriptionInfo_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriptionInfo_ConnectionInfo_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionInfo_Measurement_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateReq_AllOptions_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UpdateReq_Options_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateReq_Position_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateReq_Settings_persistent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_persistent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateReq_StreamOptions_persistent_2eproto;
namespace event_store {
namespace client {
namespace persistent_subscriptions {
class ReadReq_Options_UUIDOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_UUIDOption> _instance;
  const ::event_store::client::Empty* structured_;
  const ::event_store::client::Empty* string_;
} _ReadReq_Options_UUIDOption_default_instance_;
class ReadReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options> _instance;
  const ::event_store::client::StreamIdentifier* stream_identifier_;
  const ::event_store::client::Empty* all_;
} _ReadReq_Options_default_instance_;
class ReadReq_AckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Ack> _instance;
} _ReadReq_Ack_default_instance_;
class ReadReq_NackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Nack> _instance;
} _ReadReq_Nack_default_instance_;
class ReadReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq> _instance;
  const ::event_store::client::persistent_subscriptions::ReadReq_Options* options_;
  const ::event_store::client::persistent_subscriptions::ReadReq_Ack* ack_;
  const ::event_store::client::persistent_subscriptions::ReadReq_Nack* nack_;
} _ReadReq_default_instance_;
class ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse> _instance;
} _ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_;
class ReadResp_ReadEvent_RecordedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_ReadEvent_RecordedEvent> _instance;
} _ReadResp_ReadEvent_RecordedEvent_default_instance_;
class ReadResp_ReadEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_ReadEvent> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  const ::event_store::client::Empty* no_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 retry_count_;
  const ::event_store::client::Empty* no_retry_count_;
} _ReadResp_ReadEvent_default_instance_;
class ReadResp_SubscriptionConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_SubscriptionConfirmation> _instance;
} _ReadResp_SubscriptionConfirmation_default_instance_;
class ReadRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp> _instance;
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* event_;
  const ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* subscription_confirmation_;
} _ReadResp_default_instance_;
class CreateReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReq_Options> _instance;
  const ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* stream_;
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* all_;
} _CreateReq_Options_default_instance_;
class CreateReq_StreamOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReq_StreamOptions> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
  const ::event_store::client::Empty* start_;
  const ::event_store::client::Empty* end_;
} _CreateReq_StreamOptions_default_instance_;
class CreateReq_AllOptions_FilterOptions_ExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReq_AllOptions_FilterOptions_Expression> _instance;
} _CreateReq_AllOptions_FilterOptions_Expression_default_instance_;
class CreateReq_AllOptions_FilterOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReq_AllOptions_FilterOptions> _instance;
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* stream_identifier_;
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* event_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_;
  const ::event_store::client::Empty* count_;
} _CreateReq_AllOptions_FilterOptions_default_instance_;
class CreateReq_AllOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReq_AllOptions> _instance;
  const ::event_store::client::persistent_subscriptions::CreateReq_Position* position_;
  const ::event_store::client::Empty* start_;
  const ::event_store::client::Empty* end_;
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* filter_;
  const ::event_store::client::Empty* no_filter_;
} _CreateReq_AllOptions_default_instance_;
class CreateReq_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReq_Position> _instance;
} _CreateReq_Position_default_instance_;
class CreateReq_SettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReq_Settings> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 message_timeout_ticks_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 checkpoint_after_ticks_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_ms_;
} _CreateReq_Settings_default_instance_;
class CreateReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateReq> _instance;
} _CreateReq_default_instance_;
class CreateRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateResp> _instance;
} _CreateResp_default_instance_;
class UpdateReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReq_Options> _instance;
  const ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* stream_;
  const ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* all_;
} _UpdateReq_Options_default_instance_;
class UpdateReq_StreamOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReq_StreamOptions> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
  const ::event_store::client::Empty* start_;
  const ::event_store::client::Empty* end_;
} _UpdateReq_StreamOptions_default_instance_;
class UpdateReq_AllOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReq_AllOptions> _instance;
  const ::event_store::client::persistent_subscriptions::UpdateReq_Position* position_;
  const ::event_store::client::Empty* start_;
  const ::event_store::client::Empty* end_;
} _UpdateReq_AllOptions_default_instance_;
class UpdateReq_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReq_Position> _instance;
} _UpdateReq_Position_default_instance_;
class UpdateReq_SettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReq_Settings> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 message_timeout_ticks_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 checkpoint_after_ticks_;
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_ms_;
} _UpdateReq_Settings_default_instance_;
class UpdateReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateReq> _instance;
} _UpdateReq_default_instance_;
class UpdateRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateResp> _instance;
} _UpdateResp_default_instance_;
class DeleteReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteReq_Options> _instance;
  const ::event_store::client::StreamIdentifier* stream_identifier_;
  const ::event_store::client::Empty* all_;
} _DeleteReq_Options_default_instance_;
class DeleteReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteReq> _instance;
} _DeleteReq_default_instance_;
class DeleteRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResp> _instance;
} _DeleteResp_default_instance_;
class GetInfoReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoReq_Options> _instance;
  const ::event_store::client::StreamIdentifier* stream_identifier_;
  const ::event_store::client::Empty* all_;
} _GetInfoReq_Options_default_instance_;
class GetInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoReq> _instance;
} _GetInfoReq_default_instance_;
class GetInfoRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoResp> _instance;
} _GetInfoResp_default_instance_;
class SubscriptionInfo_ConnectionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionInfo_ConnectionInfo> _instance;
} _SubscriptionInfo_ConnectionInfo_default_instance_;
class SubscriptionInfo_MeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionInfo_Measurement> _instance;
} _SubscriptionInfo_Measurement_default_instance_;
class SubscriptionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionInfo> _instance;
} _SubscriptionInfo_default_instance_;
class ReplayParkedReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayParkedReq_Options> _instance;
  const ::event_store::client::StreamIdentifier* stream_identifier_;
  const ::event_store::client::Empty* all_;
  ::PROTOBUF_NAMESPACE_ID::int64 stop_at_;
  const ::event_store::client::Empty* no_limit_;
} _ReplayParkedReq_Options_default_instance_;
class ReplayParkedReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayParkedReq> _instance;
} _ReplayParkedReq_default_instance_;
class ReplayParkedRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayParkedResp> _instance;
} _ReplayParkedResp_default_instance_;
class ListReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListReq_Options> _instance;
  const ::event_store::client::Empty* list_all_subscriptions_;
  const ::event_store::client::persistent_subscriptions::ListReq_StreamOption* list_for_stream_;
} _ListReq_Options_default_instance_;
class ListReq_StreamOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListReq_StreamOption> _instance;
  const ::event_store::client::StreamIdentifier* stream_;
  const ::event_store::client::Empty* all_;
} _ListReq_StreamOption_default_instance_;
class ListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListReq> _instance;
} _ListReq_default_instance_;
class ListRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListResp> _instance;
} _ListResp_default_instance_;
}  // namespace persistent_subscriptions
}  // namespace client
}  // namespace event_store
static void InitDefaultsscc_info_CreateReq_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateReq_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateReq_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateReq_persistent_2eproto}, {
      &scc_info_CreateReq_Options_persistent_2eproto.base,}};

static void InitDefaultsscc_info_CreateReq_AllOptions_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateReq_AllOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateReq_AllOptions_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CreateReq_AllOptions_persistent_2eproto}, {
      &scc_info_CreateReq_Position_persistent_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,
      &scc_info_CreateReq_AllOptions_FilterOptions_persistent_2eproto.base,}};

static void InitDefaultsscc_info_CreateReq_AllOptions_FilterOptions_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateReq_AllOptions_FilterOptions_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateReq_AllOptions_FilterOptions_persistent_2eproto}, {
      &scc_info_CreateReq_AllOptions_FilterOptions_Expression_persistent_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_CreateReq_AllOptions_FilterOptions_Expression_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_Expression_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateReq_AllOptions_FilterOptions_Expression_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateReq_AllOptions_FilterOptions_Expression_persistent_2eproto}, {}};

static void InitDefaultsscc_info_CreateReq_Options_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateReq_Options_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CreateReq_Options_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CreateReq_Options_persistent_2eproto}, {
      &scc_info_CreateReq_StreamOptions_persistent_2eproto.base,
      &scc_info_CreateReq_AllOptions_persistent_2eproto.base,
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_CreateReq_Settings_persistent_2eproto.base,}};

static void InitDefaultsscc_info_CreateReq_Position_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateReq_Position_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateReq_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateReq_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateReq_Position_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateReq_Position_persistent_2eproto}, {}};

static void InitDefaultsscc_info_CreateReq_Settings_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateReq_Settings_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateReq_Settings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateReq_Settings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateReq_Settings_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateReq_Settings_persistent_2eproto}, {}};

static void InitDefaultsscc_info_CreateReq_StreamOptions_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateReq_StreamOptions_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateReq_StreamOptions_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateReq_StreamOptions_persistent_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_CreateResp_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_CreateResp_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::CreateResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::CreateResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateResp_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateResp_persistent_2eproto}, {}};

static void InitDefaultsscc_info_DeleteReq_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_DeleteReq_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::DeleteReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::DeleteReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteReq_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteReq_persistent_2eproto}, {
      &scc_info_DeleteReq_Options_persistent_2eproto.base,}};

static void InitDefaultsscc_info_DeleteReq_Options_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_DeleteReq_Options_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::DeleteReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::DeleteReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteReq_Options_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteReq_Options_persistent_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_DeleteResp_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_DeleteResp_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::DeleteResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::DeleteResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResp_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteResp_persistent_2eproto}, {}};

static void InitDefaultsscc_info_GetInfoReq_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_GetInfoReq_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::GetInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::GetInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInfoReq_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInfoReq_persistent_2eproto}, {
      &scc_info_GetInfoReq_Options_persistent_2eproto.base,}};

static void InitDefaultsscc_info_GetInfoReq_Options_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_GetInfoReq_Options_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::GetInfoReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::GetInfoReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetInfoReq_Options_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetInfoReq_Options_persistent_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_GetInfoResp_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_GetInfoResp_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::GetInfoResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::GetInfoResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInfoResp_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInfoResp_persistent_2eproto}, {
      &scc_info_SubscriptionInfo_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ListReq_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ListReq_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListReq_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListReq_persistent_2eproto}, {
      &scc_info_ListReq_Options_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ListReq_Options_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ListReq_Options_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ListReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ListReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListReq_Options_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListReq_Options_persistent_2eproto}, {
      &scc_info_Empty_shared_2eproto.base,
      &scc_info_ListReq_StreamOption_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ListReq_StreamOption_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ListReq_StreamOption_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ListReq_StreamOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ListReq_StreamOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListReq_StreamOption_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListReq_StreamOption_persistent_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ListResp_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ListResp_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ListResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ListResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListResp_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListResp_persistent_2eproto}, {
      &scc_info_SubscriptionInfo_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadReq_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReadReq_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReadReq_persistent_2eproto}, {
      &scc_info_ReadReq_Options_persistent_2eproto.base,
      &scc_info_ReadReq_Ack_persistent_2eproto.base,
      &scc_info_ReadReq_Nack_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Ack_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadReq_Ack_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadReq_Ack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadReq_Ack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_Ack_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadReq_Ack_persistent_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Nack_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadReq_Nack_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadReq_Nack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadReq_Nack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_Nack_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadReq_Nack_persistent_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Options_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadReq_Options_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReadReq_Options_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReadReq_Options_persistent_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,
      &scc_info_ReadReq_Options_UUIDOption_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Options_UUIDOption_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadReq_Options_UUIDOption_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_Options_UUIDOption_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadReq_Options_UUIDOption_persistent_2eproto}, {
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadResp_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadResp_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReadResp_persistent_2eproto}, {
      &scc_info_ReadResp_ReadEvent_persistent_2eproto.base,
      &scc_info_ReadResp_SubscriptionConfirmation_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_ReadEvent_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadResp_ReadEvent_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReadResp_ReadEvent_persistent_2eproto}, {
      &scc_info_ReadResp_ReadEvent_RecordedEvent_persistent_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_ReadEvent_RecordedEvent_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_RecordedEvent_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReadResp_ReadEvent_RecordedEvent_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReadResp_ReadEvent_RecordedEvent_persistent_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse();
  }
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_persistent_2eproto}, {}};

static void InitDefaultsscc_info_ReadResp_SubscriptionConfirmation_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReadResp_SubscriptionConfirmation_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_SubscriptionConfirmation_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadResp_SubscriptionConfirmation_persistent_2eproto}, {}};

static void InitDefaultsscc_info_ReplayParkedReq_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReplayParkedReq_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReplayParkedReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReplayParkedReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplayParkedReq_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplayParkedReq_persistent_2eproto}, {
      &scc_info_ReplayParkedReq_Options_persistent_2eproto.base,}};

static void InitDefaultsscc_info_ReplayParkedReq_Options_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReplayParkedReq_Options_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplayParkedReq_Options_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReplayParkedReq_Options_persistent_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReplayParkedResp_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_ReplayParkedResp_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::ReplayParkedResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::ReplayParkedResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplayParkedResp_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplayParkedResp_persistent_2eproto}, {}};

static void InitDefaultsscc_info_SubscriptionInfo_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_SubscriptionInfo_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::SubscriptionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::SubscriptionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriptionInfo_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscriptionInfo_persistent_2eproto}, {
      &scc_info_SubscriptionInfo_ConnectionInfo_persistent_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionInfo_ConnectionInfo_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_SubscriptionInfo_ConnectionInfo_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscriptionInfo_ConnectionInfo_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscriptionInfo_ConnectionInfo_persistent_2eproto}, {
      &scc_info_SubscriptionInfo_Measurement_persistent_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionInfo_Measurement_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_SubscriptionInfo_Measurement_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionInfo_Measurement_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscriptionInfo_Measurement_persistent_2eproto}, {}};

static void InitDefaultsscc_info_UpdateReq_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_UpdateReq_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::UpdateReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::UpdateReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateReq_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateReq_persistent_2eproto}, {
      &scc_info_UpdateReq_Options_persistent_2eproto.base,}};

static void InitDefaultsscc_info_UpdateReq_AllOptions_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_UpdateReq_AllOptions_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateReq_AllOptions_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateReq_AllOptions_persistent_2eproto}, {
      &scc_info_UpdateReq_Position_persistent_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_UpdateReq_Options_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_UpdateReq_Options_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::UpdateReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::UpdateReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UpdateReq_Options_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_UpdateReq_Options_persistent_2eproto}, {
      &scc_info_UpdateReq_StreamOptions_persistent_2eproto.base,
      &scc_info_UpdateReq_AllOptions_persistent_2eproto.base,
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_UpdateReq_Settings_persistent_2eproto.base,}};

static void InitDefaultsscc_info_UpdateReq_Position_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_UpdateReq_Position_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::UpdateReq_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::UpdateReq_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateReq_Position_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateReq_Position_persistent_2eproto}, {}};

static void InitDefaultsscc_info_UpdateReq_Settings_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_UpdateReq_Settings_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::UpdateReq_Settings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::UpdateReq_Settings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateReq_Settings_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateReq_Settings_persistent_2eproto}, {}};

static void InitDefaultsscc_info_UpdateReq_StreamOptions_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_UpdateReq_StreamOptions_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateReq_StreamOptions_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateReq_StreamOptions_persistent_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_UpdateResp_persistent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::persistent_subscriptions::_UpdateResp_default_instance_;
    new (ptr) ::event_store::client::persistent_subscriptions::UpdateResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::persistent_subscriptions::UpdateResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateResp_persistent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateResp_persistent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_persistent_2eproto[42];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_persistent_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_persistent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_persistent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOptionDefaultTypeInternal, structured_),
  offsetof(::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOptionDefaultTypeInternal, string_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::ReadReq_OptionsDefaultTypeInternal, stream_identifier_),
  offsetof(::event_store::client::persistent_subscriptions::ReadReq_OptionsDefaultTypeInternal, all_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options, group_name_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options, buffer_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options, uuid_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Options, stream_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Ack, id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Ack, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Nack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Nack, id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Nack, ids_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Nack, action_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq_Nack, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::ReadReqDefaultTypeInternal, options_),
  offsetof(::event_store::client::persistent_subscriptions::ReadReqDefaultTypeInternal, ack_),
  offsetof(::event_store::client::persistent_subscriptions::ReadReqDefaultTypeInternal, nack_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadReq, content_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, stream_identifier_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, stream_revision_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, prepare_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, metadata_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, custom_metadata_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent, event_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent, link_),
  offsetof(::event_store::client::persistent_subscriptions::ReadResp_ReadEventDefaultTypeInternal, commit_position_),
  offsetof(::event_store::client::persistent_subscriptions::ReadResp_ReadEventDefaultTypeInternal, no_position_),
  offsetof(::event_store::client::persistent_subscriptions::ReadResp_ReadEventDefaultTypeInternal, retry_count_),
  offsetof(::event_store::client::persistent_subscriptions::ReadResp_ReadEventDefaultTypeInternal, no_retry_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent, position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation, subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::ReadRespDefaultTypeInternal, event_),
  offsetof(::event_store::client::persistent_subscriptions::ReadRespDefaultTypeInternal, subscription_confirmation_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReadResp, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_OptionsDefaultTypeInternal, stream_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_OptionsDefaultTypeInternal, all_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Options, stream_identifier_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Options, group_name_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Options, settings_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Options, stream_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_StreamOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_StreamOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_StreamOptions, stream_identifier_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_StreamOptionsDefaultTypeInternal, revision_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_StreamOptionsDefaultTypeInternal, start_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_StreamOptionsDefaultTypeInternal, end_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_StreamOptions, revision_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression, regex_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptionsDefaultTypeInternal, stream_identifier_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptionsDefaultTypeInternal, event_type_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptionsDefaultTypeInternal, max_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptionsDefaultTypeInternal, count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions, checkpointintervalmultiplier_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions, filter_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions, window_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptionsDefaultTypeInternal, position_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptionsDefaultTypeInternal, start_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptionsDefaultTypeInternal, end_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptionsDefaultTypeInternal, filter_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_AllOptionsDefaultTypeInternal, no_filter_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions, all_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_AllOptions, filter_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Position, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Position, prepare_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, resolve_links_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, revision_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, extra_statistics_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, max_retry_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, min_checkpoint_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, max_checkpoint_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, max_subscriber_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, live_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, read_batch_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, history_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, named_consumer_strategy_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_SettingsDefaultTypeInternal, message_timeout_ticks_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_SettingsDefaultTypeInternal, message_timeout_ms_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_SettingsDefaultTypeInternal, checkpoint_after_ticks_),
  offsetof(::event_store::client::persistent_subscriptions::CreateReq_SettingsDefaultTypeInternal, checkpoint_after_ms_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, consumer_strategy_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, message_timeout_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq_Settings, checkpoint_after_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::CreateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_OptionsDefaultTypeInternal, stream_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_OptionsDefaultTypeInternal, all_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Options, stream_identifier_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Options, group_name_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Options, settings_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Options, stream_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions, stream_identifier_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptionsDefaultTypeInternal, revision_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptionsDefaultTypeInternal, start_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptionsDefaultTypeInternal, end_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions, revision_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_AllOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_AllOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_AllOptionsDefaultTypeInternal, position_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_AllOptionsDefaultTypeInternal, start_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_AllOptionsDefaultTypeInternal, end_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_AllOptions, all_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Position, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Position, prepare_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, resolve_links_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, revision_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, extra_statistics_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, max_retry_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, min_checkpoint_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, max_checkpoint_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, max_subscriber_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, live_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, read_batch_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, history_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, named_consumer_strategy_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_SettingsDefaultTypeInternal, message_timeout_ticks_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_SettingsDefaultTypeInternal, message_timeout_ms_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_SettingsDefaultTypeInternal, checkpoint_after_ticks_),
  offsetof(::event_store::client::persistent_subscriptions::UpdateReq_SettingsDefaultTypeInternal, checkpoint_after_ms_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, message_timeout_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq_Settings, checkpoint_after_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::UpdateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::DeleteReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::DeleteReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::DeleteReq_OptionsDefaultTypeInternal, stream_identifier_),
  offsetof(::event_store::client::persistent_subscriptions::DeleteReq_OptionsDefaultTypeInternal, all_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::DeleteReq_Options, group_name_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::DeleteReq_Options, stream_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::DeleteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::DeleteReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::DeleteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::GetInfoReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::GetInfoReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::GetInfoReq_OptionsDefaultTypeInternal, stream_identifier_),
  offsetof(::event_store::client::persistent_subscriptions::GetInfoReq_OptionsDefaultTypeInternal, all_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::GetInfoReq_Options, group_name_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::GetInfoReq_Options, stream_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::GetInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::GetInfoReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::GetInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::GetInfoResp, subscription_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, from_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, username_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, average_items_per_second_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, total_items_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, count_since_last_measurement_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, observed_measurements_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, available_slots_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, in_flight_messages_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo, connection_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement, key_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, event_source_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, group_name_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, status_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, connections_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, average_per_second_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, total_items_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, count_since_last_measurement_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, last_checkpointed_event_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, last_known_event_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, resolve_link_tos_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, start_from_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, message_timeout_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, extra_statistics_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, max_retry_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, live_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, buffer_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, read_batch_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, check_point_after_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, min_check_point_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, max_check_point_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, read_buffer_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, live_buffer_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, retry_buffer_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, total_in_flight_messages_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, outstanding_messages_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, named_consumer_strategy_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, max_subscriber_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::SubscriptionInfo, parked_message_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReplayParkedReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReplayParkedReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReplayParkedReq_Options, group_name_),
  offsetof(::event_store::client::persistent_subscriptions::ReplayParkedReq_OptionsDefaultTypeInternal, stream_identifier_),
  offsetof(::event_store::client::persistent_subscriptions::ReplayParkedReq_OptionsDefaultTypeInternal, all_),
  offsetof(::event_store::client::persistent_subscriptions::ReplayParkedReq_OptionsDefaultTypeInternal, stop_at_),
  offsetof(::event_store::client::persistent_subscriptions::ReplayParkedReq_OptionsDefaultTypeInternal, no_limit_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReplayParkedReq_Options, stream_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReplayParkedReq_Options, stop_at_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReplayParkedReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReplayParkedReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ReplayParkedResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::ListReq_OptionsDefaultTypeInternal, list_all_subscriptions_),
  offsetof(::event_store::client::persistent_subscriptions::ListReq_OptionsDefaultTypeInternal, list_for_stream_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListReq_Options, list_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListReq_StreamOption, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListReq_StreamOption, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::persistent_subscriptions::ListReq_StreamOptionDefaultTypeInternal, stream_),
  offsetof(::event_store::client::persistent_subscriptions::ListReq_StreamOptionDefaultTypeInternal, all_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListReq_StreamOption, stream_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::persistent_subscriptions::ListResp, subscriptions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption)},
  { 8, -1, sizeof(::event_store::client::persistent_subscriptions::ReadReq_Options)},
  { 19, -1, sizeof(::event_store::client::persistent_subscriptions::ReadReq_Ack)},
  { 26, -1, sizeof(::event_store::client::persistent_subscriptions::ReadReq_Nack)},
  { 35, -1, sizeof(::event_store::client::persistent_subscriptions::ReadReq)},
  { 44, 51, sizeof(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse)},
  { 53, -1, sizeof(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent)},
  { 66, -1, sizeof(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent)},
  { 79, -1, sizeof(::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation)},
  { 85, -1, sizeof(::event_store::client::persistent_subscriptions::ReadResp)},
  { 93, -1, sizeof(::event_store::client::persistent_subscriptions::CreateReq_Options)},
  { 104, -1, sizeof(::event_store::client::persistent_subscriptions::CreateReq_StreamOptions)},
  { 114, -1, sizeof(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression)},
  { 121, -1, sizeof(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions)},
  { 133, -1, sizeof(::event_store::client::persistent_subscriptions::CreateReq_AllOptions)},
  { 145, -1, sizeof(::event_store::client::persistent_subscriptions::CreateReq_Position)},
  { 152, -1, sizeof(::event_store::client::persistent_subscriptions::CreateReq_Settings)},
  { 175, -1, sizeof(::event_store::client::persistent_subscriptions::CreateReq)},
  { 181, -1, sizeof(::event_store::client::persistent_subscriptions::CreateResp)},
  { 186, -1, sizeof(::event_store::client::persistent_subscriptions::UpdateReq_Options)},
  { 197, -1, sizeof(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions)},
  { 207, -1, sizeof(::event_store::client::persistent_subscriptions::UpdateReq_AllOptions)},
  { 216, -1, sizeof(::event_store::client::persistent_subscriptions::UpdateReq_Position)},
  { 223, -1, sizeof(::event_store::client::persistent_subscriptions::UpdateReq_Settings)},
  { 245, -1, sizeof(::event_store::client::persistent_subscriptions::UpdateReq)},
  { 251, -1, sizeof(::event_store::client::persistent_subscriptions::UpdateResp)},
  { 256, -1, sizeof(::event_store::client::persistent_subscriptions::DeleteReq_Options)},
  { 265, -1, sizeof(::event_store::client::persistent_subscriptions::DeleteReq)},
  { 271, -1, sizeof(::event_store::client::persistent_subscriptions::DeleteResp)},
  { 276, -1, sizeof(::event_store::client::persistent_subscriptions::GetInfoReq_Options)},
  { 285, -1, sizeof(::event_store::client::persistent_subscriptions::GetInfoReq)},
  { 291, -1, sizeof(::event_store::client::persistent_subscriptions::GetInfoResp)},
  { 297, -1, sizeof(::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo)},
  { 311, -1, sizeof(::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement)},
  { 318, -1, sizeof(::event_store::client::persistent_subscriptions::SubscriptionInfo)},
  { 351, -1, sizeof(::event_store::client::persistent_subscriptions::ReplayParkedReq_Options)},
  { 363, -1, sizeof(::event_store::client::persistent_subscriptions::ReplayParkedReq)},
  { 369, -1, sizeof(::event_store::client::persistent_subscriptions::ReplayParkedResp)},
  { 374, -1, sizeof(::event_store::client::persistent_subscriptions::ListReq_Options)},
  { 382, -1, sizeof(::event_store::client::persistent_subscriptions::ListReq_StreamOption)},
  { 390, -1, sizeof(::event_store::client::persistent_subscriptions::ListReq)},
  { 396, -1, sizeof(::event_store::client::persistent_subscriptions::ListResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadReq_Options_UUIDOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadReq_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadReq_Nack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_RecordedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadResp_SubscriptionConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReadResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateReq_StreamOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_Expression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateReq_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateReq_Settings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_CreateResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_UpdateReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_UpdateReq_StreamOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_UpdateReq_AllOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_UpdateReq_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_UpdateReq_Settings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_UpdateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_UpdateResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_DeleteReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_DeleteReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_DeleteResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_GetInfoReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_GetInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_GetInfoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_SubscriptionInfo_ConnectionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_SubscriptionInfo_Measurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_SubscriptionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReplayParkedReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReplayParkedReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ReplayParkedResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ListReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ListReq_StreamOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::persistent_subscriptions::_ListResp_default_instance_),
};

const char descriptor_table_protodef_persistent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020persistent.proto\022+event_store.client.p"
  "ersistent_subscriptions\032\014shared.proto\"\231\007"
  "\n\007ReadReq\022O\n\007options\030\001 \001(\0132<.event_store"
  ".client.persistent_subscriptions.ReadReq"
  ".OptionsH\000\022G\n\003ack\030\002 \001(\01328.event_store.cl"
  "ient.persistent_subscriptions.ReadReq.Ac"
  "kH\000\022I\n\004nack\030\003 \001(\01329.event_store.client.p"
  "ersistent_subscriptions.ReadReq.NackH\000\032\205"
  "\003\n\007Options\022A\n\021stream_identifier\030\001 \001(\0132$."
  "event_store.client.StreamIdentifierH\000\022(\n"
  "\003all\030\005 \001(\0132\031.event_store.client.EmptyH\000\022"
  "\022\n\ngroup_name\030\002 \001(\t\022\023\n\013buffer_size\030\003 \001(\005"
  "\022\\\n\013uuid_option\030\004 \001(\0132G.event_store.clie"
  "nt.persistent_subscriptions.ReadReq.Opti"
  "ons.UUIDOption\032u\n\nUUIDOption\022/\n\nstructur"
  "ed\030\001 \001(\0132\031.event_store.client.EmptyH\000\022+\n"
  "\006string\030\002 \001(\0132\031.event_store.client.Empty"
  "H\000B\t\n\007contentB\017\n\rstream_option\0328\n\003Ack\022\n\n"
  "\002id\030\001 \001(\014\022%\n\003ids\030\002 \003(\0132\030.event_store.cli"
  "ent.UUID\032\333\001\n\004Nack\022\n\n\002id\030\001 \001(\014\022%\n\003ids\030\002 \003"
  "(\0132\030.event_store.client.UUID\022P\n\006action\030\003"
  " \001(\0162@.event_store.client.persistent_sub"
  "scriptions.ReadReq.Nack.Action\022\016\n\006reason"
  "\030\004 \001(\t\">\n\006Action\022\013\n\007Unknown\020\000\022\010\n\004Park\020\001\022"
  "\t\n\005Retry\020\002\022\010\n\004Skip\020\003\022\010\n\004Stop\020\004B\t\n\007conten"
  "t\"\224\010\n\010ReadResp\022P\n\005event\030\001 \001(\0132\?.event_st"
  "ore.client.persistent_subscriptions.Read"
  "Resp.ReadEventH\000\022s\n\031subscription_confirm"
  "ation\030\002 \001(\0132N.event_store.client.persist"
  "ent_subscriptions.ReadResp.SubscriptionC"
  "onfirmationH\000\032\200\006\n\tReadEvent\022\\\n\005event\030\001 \001"
  "(\0132M.event_store.client.persistent_subsc"
  "riptions.ReadResp.ReadEvent.RecordedEven"
  "t\022[\n\004link\030\002 \001(\0132M.event_store.client.per"
  "sistent_subscriptions.ReadResp.ReadEvent"
  ".RecordedEvent\022\031\n\017commit_position\030\003 \001(\004H"
  "\000\0220\n\013no_position\030\004 \001(\0132\031.event_store.cli"
  "ent.EmptyH\000\022\025\n\013retry_count\030\005 \001(\005H\001\0223\n\016no"
  "_retry_count\030\006 \001(\0132\031.event_store.client."
  "EmptyH\001\032\211\003\n\rRecordedEvent\022$\n\002id\030\001 \001(\0132\030."
  "event_store.client.UUID\022\?\n\021stream_identi"
  "fier\030\002 \001(\0132$.event_store.client.StreamId"
  "entifier\022\027\n\017stream_revision\030\003 \001(\004\022\030\n\020pre"
  "pare_position\030\004 \001(\004\022\027\n\017commit_position\030\005"
  " \001(\004\022m\n\010metadata\030\006 \003(\0132[.event_store.cli"
  "ent.persistent_subscriptions.ReadResp.Re"
  "adEvent.RecordedEvent.MetadataEntry\022\027\n\017c"
  "ustom_metadata\030\007 \001(\014\022\014\n\004data\030\010 \001(\014\032/\n\rMe"
  "tadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
  "\0028\001B\n\n\010positionB\007\n\005count\0323\n\030Subscription"
  "Confirmation\022\027\n\017subscription_id\030\001 \001(\tB\t\n"
  "\007content\"\366\020\n\tCreateReq\022O\n\007options\030\001 \001(\0132"
  ">.event_store.client.persistent_subscrip"
  "tions.CreateReq.Options\032\360\002\n\007Options\022V\n\006s"
  "tream\030\004 \001(\0132D.event_store.client.persist"
  "ent_subscriptions.CreateReq.StreamOption"
  "sH\000\022P\n\003all\030\005 \001(\0132A.event_store.client.pe"
  "rsistent_subscriptions.CreateReq.AllOpti"
  "onsH\000\022C\n\021stream_identifier\030\001 \001(\0132$.event"
  "_store.client.StreamIdentifierB\002\030\001\022\022\n\ngr"
  "oup_name\030\002 \001(\t\022Q\n\010settings\030\003 \001(\0132\?.event"
  "_store.client.persistent_subscriptions.C"
  "reateReq.SettingsB\017\n\rstream_option\032\315\001\n\rS"
  "treamOptions\022\?\n\021stream_identifier\030\001 \001(\0132"
  "$.event_store.client.StreamIdentifier\022\022\n"
  "\010revision\030\002 \001(\004H\000\022*\n\005start\030\003 \001(\0132\031.event"
  "_store.client.EmptyH\000\022(\n\003end\030\004 \001(\0132\031.eve"
  "nt_store.client.EmptyH\000B\021\n\017revision_opti"
  "on\032\210\006\n\nAllOptions\022S\n\010position\030\001 \001(\0132\?.ev"
  "ent_store.client.persistent_subscription"
  "s.CreateReq.PositionH\000\022*\n\005start\030\002 \001(\0132\031."
  "event_store.client.EmptyH\000\022(\n\003end\030\003 \001(\0132"
  "\031.event_store.client.EmptyH\000\022a\n\006filter\030\004"
  " \001(\0132O.event_store.client.persistent_sub"
  "scriptions.CreateReq.AllOptions.FilterOp"
  "tionsH\001\022.\n\tno_filter\030\005 \001(\0132\031.event_store"
  ".client.EmptyH\001\032\234\003\n\rFilterOptions\022w\n\021str"
  "eam_identifier\030\001 \001(\0132Z.event_store.clien"
  "t.persistent_subscriptions.CreateReq.All"
  "Options.FilterOptions.ExpressionH\000\022p\n\nev"
  "ent_type\030\002 \001(\0132Z.event_store.client.pers"
  "istent_subscriptions.CreateReq.AllOption"
  "s.FilterOptions.ExpressionH\000\022\r\n\003max\030\003 \001("
  "\rH\001\022*\n\005count\030\004 \001(\0132\031.event_store.client."
  "EmptyH\001\022$\n\034checkpointIntervalMultiplier\030"
  "\005 \001(\r\032+\n\nExpression\022\r\n\005regex\030\001 \001(\t\022\016\n\006pr"
  "efix\030\002 \003(\tB\010\n\006filterB\010\n\006windowB\014\n\nall_op"
  "tionB\017\n\rfilter_option\032=\n\010Position\022\027\n\017com"
  "mit_position\030\001 \001(\004\022\030\n\020prepare_position\030\002"
  " \001(\004\032\304\004\n\010Settings\022\025\n\rresolve_links\030\001 \001(\010"
  "\022\024\n\010revision\030\002 \001(\004B\002\030\001\022\030\n\020extra_statisti"
  "cs\030\003 \001(\010\022\027\n\017max_retry_count\030\005 \001(\005\022\034\n\024min"
  "_checkpoint_count\030\007 \001(\005\022\034\n\024max_checkpoin"
  "t_count\030\010 \001(\005\022\034\n\024max_subscriber_count\030\t "
  "\001(\005\022\030\n\020live_buffer_size\030\n \001(\005\022\027\n\017read_ba"
  "tch_size\030\013 \001(\005\022\033\n\023history_buffer_size\030\014 "
  "\001(\005\022l\n\027named_consumer_strategy\030\r \001(\0162G.e"
  "vent_store.client.persistent_subscriptio"
  "ns.CreateReq.ConsumerStrategyB\002\030\001\022\037\n\025mes"
  "sage_timeout_ticks\030\004 \001(\003H\000\022\034\n\022message_ti"
  "meout_ms\030\016 \001(\005H\000\022 \n\026checkpoint_after_tic"
  "ks\030\006 \001(\003H\001\022\035\n\023checkpoint_after_ms\030\017 \001(\005H"
  "\001\022\031\n\021consumer_strategy\030\020 \001(\tB\021\n\017message_"
  "timeoutB\022\n\020checkpoint_after\"D\n\020ConsumerS"
  "trategy\022\024\n\020DispatchToSingle\020\000\022\016\n\nRoundRo"
  "bin\020\001\022\n\n\006Pinned\020\002\"\014\n\nCreateResp\"\224\014\n\tUpda"
  "teReq\022O\n\007options\030\001 \001(\0132>.event_store.cli"
  "ent.persistent_subscriptions.UpdateReq.O"
  "ptions\032\360\002\n\007Options\022V\n\006stream\030\004 \001(\0132D.eve"
  "nt_store.client.persistent_subscriptions"
  ".UpdateReq.StreamOptionsH\000\022P\n\003all\030\005 \001(\0132"
  "A.event_store.client.persistent_subscrip"
  "tions.UpdateReq.AllOptionsH\000\022C\n\021stream_i"
  "dentifier\030\001 \001(\0132$.event_store.client.Str"
  "eamIdentifierB\002\030\001\022\022\n\ngroup_name\030\002 \001(\t\022Q\n"
  "\010settings\030\003 \001(\0132\?.event_store.client.per"
  "sistent_subscriptions.UpdateReq.Settings"
  "B\017\n\rstream_option\032\315\001\n\rStreamOptions\022\?\n\021s"
  "tream_identifier\030\001 \001(\0132$.event_store.cli"
  "ent.StreamIdentifier\022\022\n\010revision\030\002 \001(\004H\000"
  "\022*\n\005start\030\003 \001(\0132\031.event_store.client.Emp"
  "tyH\000\022(\n\003end\030\004 \001(\0132\031.event_store.client.E"
  "mptyH\000B\021\n\017revision_option\032\305\001\n\nAllOptions"
  "\022S\n\010position\030\001 \001(\0132\?.event_store.client."
  "persistent_subscriptions.UpdateReq.Posit"
  "ionH\000\022*\n\005start\030\002 \001(\0132\031.event_store.clien"
  "t.EmptyH\000\022(\n\003end\030\003 \001(\0132\031.event_store.cli"
  "ent.EmptyH\000B\014\n\nall_option\032=\n\010Position\022\027\n"
  "\017commit_position\030\001 \001(\004\022\030\n\020prepare_positi"
  "on\030\002 \001(\004\032\245\004\n\010Settings\022\025\n\rresolve_links\030\001"
  " \001(\010\022\024\n\010revision\030\002 \001(\004B\002\030\001\022\030\n\020extra_stat"
  "istics\030\003 \001(\010\022\027\n\017max_retry_count\030\005 \001(\005\022\034\n"
  "\024min_checkpoint_count\030\007 \001(\005\022\034\n\024max_check"
  "point_count\030\010 \001(\005\022\034\n\024max_subscriber_coun"
  "t\030\t \001(\005\022\030\n\020live_buffer_size\030\n \001(\005\022\027\n\017rea"
  "d_batch_size\030\013 \001(\005\022\033\n\023history_buffer_siz"
  "e\030\014 \001(\005\022h\n\027named_consumer_strategy\030\r \001(\016"
  "2G.event_store.client.persistent_subscri"
  "ptions.UpdateReq.ConsumerStrategy\022\037\n\025mes"
  "sage_timeout_ticks\030\004 \001(\003H\000\022\034\n\022message_ti"
  "meout_ms\030\016 \001(\005H\000\022 \n\026checkpoint_after_tic"
  "ks\030\006 \001(\003H\001\022\035\n\023checkpoint_after_ms\030\017 \001(\005H"
  "\001B\021\n\017message_timeoutB\022\n\020checkpoint_after"
  "\"D\n\020ConsumerStrategy\022\024\n\020DispatchToSingle"
  "\020\000\022\016\n\nRoundRobin\020\001\022\n\n\006Pinned\020\002\"\014\n\nUpdate"
  "Resp\"\372\001\n\tDeleteReq\022O\n\007options\030\001 \001(\0132>.ev"
  "ent_store.client.persistent_subscription"
  "s.DeleteReq.Options\032\233\001\n\007Options\022A\n\021strea"
  "m_identifier\030\001 \001(\0132$.event_store.client."
  "StreamIdentifierH\000\022(\n\003all\030\003 \001(\0132\031.event_"
  "store.client.EmptyH\000\022\022\n\ngroup_name\030\002 \001(\t"
  "B\017\n\rstream_option\"\014\n\nDeleteResp\"\374\001\n\nGetI"
  "nfoReq\022P\n\007options\030\001 \001(\0132\?.event_store.cl"
  "ient.persistent_subscriptions.GetInfoReq"
  ".Options\032\233\001\n\007Options\022A\n\021stream_identifie"
  "r\030\001 \001(\0132$.event_store.client.StreamIdent"
  "ifierH\000\022(\n\003all\030\002 \001(\0132\031.event_store.clien"
  "t.EmptyH\000\022\022\n\ngroup_name\030\003 \001(\tB\017\n\rstream_"
  "option\"g\n\013GetInfoResp\022X\n\021subscription_in"
  "fo\030\001 \001(\0132=.event_store.client.persistent"
  "_subscriptions.SubscriptionInfo\"\360\t\n\020Subs"
  "criptionInfo\022\024\n\014event_source\030\001 \001(\t\022\022\n\ngr"
  "oup_name\030\002 \001(\t\022\016\n\006status\030\003 \001(\t\022a\n\013connec"
  "tions\030\004 \003(\0132L.event_store.client.persist"
  "ent_subscriptions.SubscriptionInfo.Conne"
  "ctionInfo\022\032\n\022average_per_second\030\005 \001(\005\022\023\n"
  "\013total_items\030\006 \001(\003\022$\n\034count_since_last_m"
  "easurement\030\007 \001(\003\022(\n last_checkpointed_ev"
  "ent_position\030\010 \001(\t\022!\n\031last_known_event_p"
  "osition\030\t \001(\t\022\030\n\020resolve_link_tos\030\n \001(\010\022"
  "\022\n\nstart_from\030\013 \001(\t\022$\n\034message_timeout_m"
  "illiseconds\030\014 \001(\005\022\030\n\020extra_statistics\030\r "
  "\001(\010\022\027\n\017max_retry_count\030\016 \001(\005\022\030\n\020live_buf"
  "fer_size\030\017 \001(\005\022\023\n\013buffer_size\030\020 \001(\005\022\027\n\017r"
  "ead_batch_size\030\021 \001(\005\022&\n\036check_point_afte"
  "r_milliseconds\030\022 \001(\005\022\035\n\025min_check_point_"
  "count\030\023 \001(\005\022\035\n\025max_check_point_count\030\024 \001"
  "(\005\022\031\n\021read_buffer_count\030\025 \001(\005\022\031\n\021live_bu"
  "ffer_count\030\026 \001(\003\022\032\n\022retry_buffer_count\030\027"
  " \001(\005\022 \n\030total_in_flight_messages\030\030 \001(\005\022\""
  "\n\032outstanding_messages_count\030\031 \001(\005\022\037\n\027na"
  "med_consumer_strategy\030\032 \001(\t\022\034\n\024max_subsc"
  "riber_count\030\033 \001(\005\022\034\n\024parked_message_coun"
  "t\030\034 \001(\003\032\305\002\n\016ConnectionInfo\022\014\n\004from\030\001 \001(\t"
  "\022\020\n\010username\030\002 \001(\t\022 \n\030average_items_per_"
  "second\030\003 \001(\005\022\023\n\013total_items\030\004 \001(\003\022$\n\034cou"
  "nt_since_last_measurement\030\005 \001(\003\022h\n\025obser"
  "ved_measurements\030\006 \003(\0132I.event_store.cli"
  "ent.persistent_subscriptions.Subscriptio"
  "nInfo.Measurement\022\027\n\017available_slots\030\007 \001"
  "(\005\022\032\n\022in_flight_messages\030\010 \001(\005\022\027\n\017connec"
  "tion_name\030\t \001(\t\032)\n\013Measurement\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\003\"\332\002\n\017ReplayParkedReq\022U"
  "\n\007options\030\001 \001(\0132D.event_store.client.per"
  "sistent_subscriptions.ReplayParkedReq.Op"
  "tions\032\357\001\n\007Options\022\022\n\ngroup_name\030\001 \001(\t\022A\n"
  "\021stream_identifier\030\002 \001(\0132$.event_store.c"
  "lient.StreamIdentifierH\000\022(\n\003all\030\003 \001(\0132\031."
  "event_store.client.EmptyH\000\022\021\n\007stop_at\030\004 "
  "\001(\003H\001\022-\n\010no_limit\030\005 \001(\0132\031.event_store.cl"
  "ient.EmptyH\001B\017\n\rstream_optionB\020\n\016stop_at"
  "_option\"\022\n\020ReplayParkedResp\"\222\003\n\007ListReq\022"
  "M\n\007options\030\001 \001(\0132<.event_store.client.pe"
  "rsistent_subscriptions.ListReq.Options\032\263"
  "\001\n\007Options\022;\n\026list_all_subscriptions\030\001 \001"
  "(\0132\031.event_store.client.EmptyH\000\022\\\n\017list_"
  "for_stream\030\002 \001(\0132A.event_store.client.pe"
  "rsistent_subscriptions.ListReq.StreamOpt"
  "ionH\000B\r\n\013list_option\032\201\001\n\014StreamOption\0226\n"
  "\006stream\030\001 \001(\0132$.event_store.client.Strea"
  "mIdentifierH\000\022(\n\003all\030\002 \001(\0132\031.event_store"
  ".client.EmptyH\000B\017\n\rstream_option\"`\n\010List"
  "Resp\022T\n\rsubscriptions\030\001 \003(\0132=.event_stor"
  "e.client.persistent_subscriptions.Subscr"
  "iptionInfo2\316\007\n\027PersistentSubscriptions\022y"
  "\n\006Create\0226.event_store.client.persistent"
  "_subscriptions.CreateReq\0327.event_store.c"
  "lient.persistent_subscriptions.CreateRes"
  "p\022y\n\006Update\0226.event_store.client.persist"
  "ent_subscriptions.UpdateReq\0327.event_stor"
  "e.client.persistent_subscriptions.Update"
  "Resp\022y\n\006Delete\0226.event_store.client.pers"
  "istent_subscriptions.DeleteReq\0327.event_s"
  "tore.client.persistent_subscriptions.Del"
  "eteResp\022w\n\004Read\0224.event_store.client.per"
  "sistent_subscriptions.ReadReq\0325.event_st"
  "ore.client.persistent_subscriptions.Read"
  "Resp(\0010\001\022|\n\007GetInfo\0227.event_store.client"
  ".persistent_subscriptions.GetInfoReq\0328.e"
  "vent_store.client.persistent_subscriptio"
  "ns.GetInfoResp\022\213\001\n\014ReplayParked\022<.event_"
  "store.client.persistent_subscriptions.Re"
  "playParkedReq\032=.event_store.client.persi"
  "stent_subscriptions.ReplayParkedResp\022s\n\004"
  "List\0224.event_store.client.persistent_sub"
  "scriptions.ListReq\0325.event_store.client."
  "persistent_subscriptions.ListResp\022H\n\020Res"
  "tartSubsystem\022\031.event_store.client.Empty"
  "\032\031.event_store.client.EmptyB7\n5com.event"
  "store.dbclient.proto.persistentsubscript"
  "ionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_persistent_2eproto_deps[1] = {
  &::descriptor_table_shared_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_persistent_2eproto_sccs[42] = {
  &scc_info_CreateReq_persistent_2eproto.base,
  &scc_info_CreateReq_AllOptions_persistent_2eproto.base,
  &scc_info_CreateReq_AllOptions_FilterOptions_persistent_2eproto.base,
  &scc_info_CreateReq_AllOptions_FilterOptions_Expression_persistent_2eproto.base,
  &scc_info_CreateReq_Options_persistent_2eproto.base,
  &scc_info_CreateReq_Position_persistent_2eproto.base,
  &scc_info_CreateReq_Settings_persistent_2eproto.base,
  &scc_info_CreateReq_StreamOptions_persistent_2eproto.base,
  &scc_info_CreateResp_persistent_2eproto.base,
  &scc_info_DeleteReq_persistent_2eproto.base,
  &scc_info_DeleteReq_Options_persistent_2eproto.base,
  &scc_info_DeleteResp_persistent_2eproto.base,
  &scc_info_GetInfoReq_persistent_2eproto.base,
  &scc_info_GetInfoReq_Options_persistent_2eproto.base,
  &scc_info_GetInfoResp_persistent_2eproto.base,
  &scc_info_ListReq_persistent_2eproto.base,
  &scc_info_ListReq_Options_persistent_2eproto.base,
  &scc_info_ListReq_StreamOption_persistent_2eproto.base,
  &scc_info_ListResp_persistent_2eproto.base,
  &scc_info_ReadReq_persistent_2eproto.base,
  &scc_info_ReadReq_Ack_persistent_2eproto.base,
  &scc_info_ReadReq_Nack_persistent_2eproto.base,
  &scc_info_ReadReq_Options_persistent_2eproto.base,
  &scc_info_ReadReq_Options_UUIDOption_persistent_2eproto.base,
  &scc_info_ReadResp_persistent_2eproto.base,
  &scc_info_ReadResp_ReadEvent_persistent_2eproto.base,
  &scc_info_ReadResp_ReadEvent_RecordedEvent_persistent_2eproto.base,
  &scc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_persistent_2eproto.base,
  &scc_info_ReadResp_SubscriptionConfirmation_persistent_2eproto.base,
  &scc_info_ReplayParkedReq_persistent_2eproto.base,
  &scc_info_ReplayParkedReq_Options_persistent_2eproto.base,
  &scc_info_ReplayParkedResp_persistent_2eproto.base,
  &scc_info_SubscriptionInfo_persistent_2eproto.base,
  &scc_info_SubscriptionInfo_ConnectionInfo_persistent_2eproto.base,
  &scc_info_SubscriptionInfo_Measurement_persistent_2eproto.base,
  &scc_info_UpdateReq_persistent_2eproto.base,
  &scc_info_UpdateReq_AllOptions_persistent_2eproto.base,
  &scc_info_UpdateReq_Options_persistent_2eproto.base,
  &scc_info_UpdateReq_Position_persistent_2eproto.base,
  &scc_info_UpdateReq_Settings_persistent_2eproto.base,
  &scc_info_UpdateReq_StreamOptions_persistent_2eproto.base,
  &scc_info_UpdateResp_persistent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_persistent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_persistent_2eproto = {
  false, false, descriptor_table_protodef_persistent_2eproto, "persistent.proto", 9612,
  &descriptor_table_persistent_2eproto_once, descriptor_table_persistent_2eproto_sccs, descriptor_table_persistent_2eproto_deps, 42, 1,
  schemas, file_default_instances, TableStruct_persistent_2eproto::offsets,
  file_level_metadata_persistent_2eproto, 42, file_level_enum_descriptors_persistent_2eproto, file_level_service_descriptors_persistent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_persistent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_persistent_2eproto)), true);
namespace event_store {
namespace client {
namespace persistent_subscriptions {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadReq_Nack_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_persistent_2eproto);
  return file_level_enum_descriptors_persistent_2eproto[0];
}
bool ReadReq_Nack_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadReq_Nack_Action ReadReq_Nack::Unknown;
constexpr ReadReq_Nack_Action ReadReq_Nack::Park;
constexpr ReadReq_Nack_Action ReadReq_Nack::Retry;
constexpr ReadReq_Nack_Action ReadReq_Nack::Skip;
constexpr ReadReq_Nack_Action ReadReq_Nack::Stop;
constexpr ReadReq_Nack_Action ReadReq_Nack::Action_MIN;
constexpr ReadReq_Nack_Action ReadReq_Nack::Action_MAX;
constexpr int ReadReq_Nack::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateReq_ConsumerStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_persistent_2eproto);
  return file_level_enum_descriptors_persistent_2eproto[1];
}
bool CreateReq_ConsumerStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateReq_ConsumerStrategy CreateReq::DispatchToSingle;
constexpr CreateReq_ConsumerStrategy CreateReq::RoundRobin;
constexpr CreateReq_ConsumerStrategy CreateReq::Pinned;
constexpr CreateReq_ConsumerStrategy CreateReq::ConsumerStrategy_MIN;
constexpr CreateReq_ConsumerStrategy CreateReq::ConsumerStrategy_MAX;
constexpr int CreateReq::ConsumerStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateReq_ConsumerStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_persistent_2eproto);
  return file_level_enum_descriptors_persistent_2eproto[2];
}
bool UpdateReq_ConsumerStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateReq_ConsumerStrategy UpdateReq::DispatchToSingle;
constexpr UpdateReq_ConsumerStrategy UpdateReq::RoundRobin;
constexpr UpdateReq_ConsumerStrategy UpdateReq::Pinned;
constexpr UpdateReq_ConsumerStrategy UpdateReq::ConsumerStrategy_MIN;
constexpr UpdateReq_ConsumerStrategy UpdateReq::ConsumerStrategy_MAX;
constexpr int UpdateReq::ConsumerStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ReadReq_Options_UUIDOption::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ReadReq_Options_UUIDOption_default_instance_.structured_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadReq_Options_UUIDOption_default_instance_.string_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ReadReq_Options_UUIDOption::_Internal {
 public:
  static const ::event_store::client::Empty& structured(const ReadReq_Options_UUIDOption* msg);
  static const ::event_store::client::Empty& string(const ReadReq_Options_UUIDOption* msg);
};

const ::event_store::client::Empty&
ReadReq_Options_UUIDOption::_Internal::structured(const ReadReq_Options_UUIDOption* msg) {
  return *msg->content_.structured_;
}
const ::event_store::client::Empty&
ReadReq_Options_UUIDOption::_Internal::string(const ReadReq_Options_UUIDOption* msg) {
  return *msg->content_.string_;
}
void ReadReq_Options_UUIDOption::set_allocated_structured(::event_store::client::Empty* structured) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (structured) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structured)->GetArena();
    if (message_arena != submessage_arena) {
      structured = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structured, submessage_arena);
    }
    set_has_structured();
    content_.structured_ = structured;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.structured)
}
void ReadReq_Options_UUIDOption::clear_structured() {
  if (_internal_has_structured()) {
    if (GetArena() == nullptr) {
      delete content_.structured_;
    }
    clear_has_content();
  }
}
void ReadReq_Options_UUIDOption::set_allocated_string(::event_store::client::Empty* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string)->GetArena();
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    content_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.string)
}
void ReadReq_Options_UUIDOption::clear_string() {
  if (_internal_has_string()) {
    if (GetArena() == nullptr) {
      delete content_.string_;
    }
    clear_has_content();
  }
}
ReadReq_Options_UUIDOption::ReadReq_Options_UUIDOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
}
ReadReq_Options_UUIDOption::ReadReq_Options_UUIDOption(const ReadReq_Options_UUIDOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kStructured: {
      _internal_mutable_structured()->::event_store::client::Empty::MergeFrom(from._internal_structured());
      break;
    }
    case kString: {
      _internal_mutable_string()->::event_store::client::Empty::MergeFrom(from._internal_string());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
}

void ReadReq_Options_UUIDOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Options_UUIDOption_persistent_2eproto.base);
  clear_has_content();
}

ReadReq_Options_UUIDOption::~ReadReq_Options_UUIDOption() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_UUIDOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void ReadReq_Options_UUIDOption::ArenaDtor(void* object) {
  ReadReq_Options_UUIDOption* _this = reinterpret_cast< ReadReq_Options_UUIDOption* >(object);
  (void)_this;
}
void ReadReq_Options_UUIDOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_UUIDOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_UUIDOption& ReadReq_Options_UUIDOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_UUIDOption_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_UUIDOption::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  switch (content_case()) {
    case kStructured: {
      if (GetArena() == nullptr) {
        delete content_.structured_;
      }
      break;
    }
    case kString: {
      if (GetArena() == nullptr) {
        delete content_.string_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ReadReq_Options_UUIDOption::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_UUIDOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.Empty structured = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_structured(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_UUIDOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.Empty structured = 1;
  if (_internal_has_structured()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::structured(this), target, stream);
  }

  // .event_store.client.Empty string = 2;
  if (_internal_has_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::string(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  return target;
}

size_t ReadReq_Options_UUIDOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .event_store.client.Empty structured = 1;
    case kStructured: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.structured_);
      break;
    }
    // .event_store.client.Empty string = 2;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.string_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_UUIDOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_UUIDOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_UUIDOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
    MergeFrom(*source);
  }
}

void ReadReq_Options_UUIDOption::MergeFrom(const ReadReq_Options_UUIDOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kStructured: {
      _internal_mutable_structured()->::event_store::client::Empty::MergeFrom(from._internal_structured());
      break;
    }
    case kString: {
      _internal_mutable_string()->::event_store::client::Empty::MergeFrom(from._internal_string());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void ReadReq_Options_UUIDOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_UUIDOption::CopyFrom(const ReadReq_Options_UUIDOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_UUIDOption::IsInitialized() const {
  return true;
}

void ReadReq_Options_UUIDOption::InternalSwap(ReadReq_Options_UUIDOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_UUIDOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ReadReq_Options_default_instance_.stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadReq_Options_default_instance_.all_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadReq_Options_default_instance_._instance.get_mutable()->uuid_option_ = const_cast< ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption*>(
      ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption::internal_default_instance());
}
class ReadReq_Options::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const ReadReq_Options* msg);
  static const ::event_store::client::Empty& all(const ReadReq_Options* msg);
  static const ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption& uuid_option(const ReadReq_Options* msg);
};

const ::event_store::client::StreamIdentifier&
ReadReq_Options::_Internal::stream_identifier(const ReadReq_Options* msg) {
  return *msg->stream_option_.stream_identifier_;
}
const ::event_store::client::Empty&
ReadReq_Options::_Internal::all(const ReadReq_Options* msg) {
  return *msg->stream_option_.all_;
}
const ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption&
ReadReq_Options::_Internal::uuid_option(const ReadReq_Options* msg) {
  return *msg->uuid_option_;
}
void ReadReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.stream_identifier)
}
void ReadReq_Options::clear_stream_identifier() {
  if (_internal_has_stream_identifier()) {
    if (GetArena() == nullptr) {
      delete stream_option_.stream_identifier_;
    }
    clear_has_stream_option();
  }
}
void ReadReq_Options::set_allocated_all(::event_store::client::Empty* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all)->GetArena();
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.all)
}
void ReadReq_Options::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete stream_option_.all_;
    }
    clear_has_stream_option();
  }
}
ReadReq_Options::ReadReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadReq.Options)
}
ReadReq_Options::ReadReq_Options(const ReadReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_name(),
      GetArena());
  }
  if (from._internal_has_uuid_option()) {
    uuid_option_ = new ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption(*from.uuid_option_);
  } else {
    uuid_option_ = nullptr;
  }
  buffer_size_ = from.buffer_size_;
  clear_has_stream_option();
  switch (from.stream_option_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadReq.Options)
}

void ReadReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Options_persistent_2eproto.base);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_size_) -
      reinterpret_cast<char*>(&uuid_option_)) + sizeof(buffer_size_));
  clear_has_stream_option();
}

ReadReq_Options::~ReadReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uuid_option_;
  if (has_stream_option()) {
    clear_stream_option();
  }
}

void ReadReq_Options::ArenaDtor(void* object) {
  ReadReq_Options* _this = reinterpret_cast< ReadReq_Options* >(object);
  (void)_this;
}
void ReadReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options& ReadReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options::clear_stream_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ReadReq.Options)
  switch (stream_option_case()) {
    case kStreamIdentifier: {
      if (GetArena() == nullptr) {
        delete stream_option_.stream_identifier_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete stream_option_.all_;
      }
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}


void ReadReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && uuid_option_ != nullptr) {
    delete uuid_option_;
  }
  uuid_option_ = nullptr;
  buffer_size_ = 0;
  clear_stream_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.ReadReq.Options.group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buffer_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption uuid_option = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid_option(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (_internal_has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.ReadReq.Options.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // int32 buffer_size = 3;
  if (this->buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_buffer_size(), target);
  }

  // .event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption uuid_option = 4;
  if (this->has_uuid_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::uuid_option(this), target, stream);
  }

  // .event_store.client.Empty all = 5;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::all(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadReq.Options)
  return target;
}

size_t ReadReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // .event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption uuid_option = 4;
  if (this->has_uuid_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_option_);
  }

  // int32 buffer_size = 3;
  if (this->buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffer_size());
  }

  switch (stream_option_case()) {
    // .event_store.client.StreamIdentifier stream_identifier = 1;
    case kStreamIdentifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.stream_identifier_);
      break;
    }
    // .event_store.client.Empty all = 5;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.all_);
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadReq.Options)
    MergeFrom(*source);
  }
}

void ReadReq_Options::MergeFrom(const ReadReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_name().size() > 0) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (from.has_uuid_option()) {
    _internal_mutable_uuid_option()->::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption::MergeFrom(from._internal_uuid_option());
  }
  if (from.buffer_size() != 0) {
    _internal_set_buffer_size(from._internal_buffer_size());
  }
  switch (from.stream_option_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
}

void ReadReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options::CopyFrom(const ReadReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options::IsInitialized() const {
  return true;
}

void ReadReq_Options::InternalSwap(ReadReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadReq_Options, buffer_size_)
      + sizeof(ReadReq_Options::buffer_size_)
      - PROTOBUF_FIELD_OFFSET(ReadReq_Options, uuid_option_)>(
          reinterpret_cast<char*>(&uuid_option_),
          reinterpret_cast<char*>(&other->uuid_option_));
  swap(stream_option_, other->stream_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Ack::InitAsDefaultInstance() {
}
class ReadReq_Ack::_Internal {
 public:
};

void ReadReq_Ack::clear_ids() {
  ids_.Clear();
}
ReadReq_Ack::ReadReq_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadReq.Ack)
}
ReadReq_Ack::ReadReq_Ack(const ReadReq_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadReq.Ack)
}

void ReadReq_Ack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Ack_persistent_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadReq_Ack::~ReadReq_Ack() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadReq.Ack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadReq_Ack::ArenaDtor(void* object) {
  ReadReq_Ack* _this = reinterpret_cast< ReadReq_Ack* >(object);
  (void)_this;
}
void ReadReq_Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Ack& ReadReq_Ack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Ack_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadReq.Ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event_store.client.UUID ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadReq.Ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .event_store.client.UUID ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadReq.Ack)
  return target;
}

size_t ReadReq_Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadReq.Ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.client.UUID ids = 2;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Ack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadReq.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Ack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadReq.Ack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadReq.Ack)
    MergeFrom(*source);
  }
}

void ReadReq_Ack::MergeFrom(const ReadReq_Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadReq.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void ReadReq_Ack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadReq.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Ack::CopyFrom(const ReadReq_Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadReq.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Ack::IsInitialized() const {
  return true;
}

void ReadReq_Ack::InternalSwap(ReadReq_Ack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Ack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Nack::InitAsDefaultInstance() {
}
class ReadReq_Nack::_Internal {
 public:
};

void ReadReq_Nack::clear_ids() {
  ids_.Clear();
}
ReadReq_Nack::ReadReq_Nack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadReq.Nack)
}
ReadReq_Nack::ReadReq_Nack(const ReadReq_Nack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadReq.Nack)
}

void ReadReq_Nack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Nack_persistent_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
}

ReadReq_Nack::~ReadReq_Nack() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadReq.Nack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Nack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadReq_Nack::ArenaDtor(void* object) {
  ReadReq_Nack* _this = reinterpret_cast< ReadReq_Nack* >(object);
  (void)_this;
}
void ReadReq_Nack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Nack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Nack& ReadReq_Nack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Nack_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Nack::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadReq.Nack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Nack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event_store.client.UUID ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.ReadReq.Nack.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::event_store::client::persistent_subscriptions::ReadReq_Nack_Action>(val));
        } else goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.ReadReq.Nack.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Nack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadReq.Nack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .event_store.client.UUID ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ids(i), target, stream);
  }

  // .event_store.client.persistent_subscriptions.ReadReq.Nack.Action action = 3;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.ReadReq.Nack.reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadReq.Nack)
  return target;
}

size_t ReadReq_Nack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadReq.Nack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.client.UUID ids = 2;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .event_store.client.persistent_subscriptions.ReadReq.Nack.Action action = 3;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Nack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadReq.Nack)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Nack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Nack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadReq.Nack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadReq.Nack)
    MergeFrom(*source);
  }
}

void ReadReq_Nack::MergeFrom(const ReadReq_Nack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadReq.Nack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void ReadReq_Nack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadReq.Nack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Nack::CopyFrom(const ReadReq_Nack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadReq.Nack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Nack::IsInitialized() const {
  return true;
}

void ReadReq_Nack::InternalSwap(ReadReq_Nack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Nack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ReadReq_default_instance_.options_ = const_cast< ::event_store::client::persistent_subscriptions::ReadReq_Options*>(
      ::event_store::client::persistent_subscriptions::ReadReq_Options::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadReq_default_instance_.ack_ = const_cast< ::event_store::client::persistent_subscriptions::ReadReq_Ack*>(
      ::event_store::client::persistent_subscriptions::ReadReq_Ack::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadReq_default_instance_.nack_ = const_cast< ::event_store::client::persistent_subscriptions::ReadReq_Nack*>(
      ::event_store::client::persistent_subscriptions::ReadReq_Nack::internal_default_instance());
}
class ReadReq::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::ReadReq_Options& options(const ReadReq* msg);
  static const ::event_store::client::persistent_subscriptions::ReadReq_Ack& ack(const ReadReq* msg);
  static const ::event_store::client::persistent_subscriptions::ReadReq_Nack& nack(const ReadReq* msg);
};

const ::event_store::client::persistent_subscriptions::ReadReq_Options&
ReadReq::_Internal::options(const ReadReq* msg) {
  return *msg->content_.options_;
}
const ::event_store::client::persistent_subscriptions::ReadReq_Ack&
ReadReq::_Internal::ack(const ReadReq* msg) {
  return *msg->content_.ack_;
}
const ::event_store::client::persistent_subscriptions::ReadReq_Nack&
ReadReq::_Internal::nack(const ReadReq* msg) {
  return *msg->content_.nack_;
}
void ReadReq::set_allocated_options(::event_store::client::persistent_subscriptions::ReadReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    set_has_options();
    content_.options_ = options;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.options)
}
void ReadReq::set_allocated_ack(::event_store::client::persistent_subscriptions::ReadReq_Ack* ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ack);
    if (message_arena != submessage_arena) {
      ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack, submessage_arena);
    }
    set_has_ack();
    content_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.ack)
}
void ReadReq::set_allocated_nack(::event_store::client::persistent_subscriptions::ReadReq_Nack* nack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (nack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nack);
    if (message_arena != submessage_arena) {
      nack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nack, submessage_arena);
    }
    set_has_nack();
    content_.nack_ = nack;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.nack)
}
ReadReq::ReadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadReq)
}
ReadReq::ReadReq(const ReadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kOptions: {
      _internal_mutable_options()->::event_store::client::persistent_subscriptions::ReadReq_Options::MergeFrom(from._internal_options());
      break;
    }
    case kAck: {
      _internal_mutable_ack()->::event_store::client::persistent_subscriptions::ReadReq_Ack::MergeFrom(from._internal_ack());
      break;
    }
    case kNack: {
      _internal_mutable_nack()->::event_store::client::persistent_subscriptions::ReadReq_Nack::MergeFrom(from._internal_nack());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadReq)
}

void ReadReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_persistent_2eproto.base);
  clear_has_content();
}

ReadReq::~ReadReq() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void ReadReq::ArenaDtor(void* object) {
  ReadReq* _this = reinterpret_cast< ReadReq* >(object);
  (void)_this;
}
void ReadReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq& ReadReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadReq::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ReadReq)
  switch (content_case()) {
    case kOptions: {
      if (GetArena() == nullptr) {
        delete content_.options_;
      }
      break;
    }
    case kAck: {
      if (GetArena() == nullptr) {
        delete content_.ack_;
      }
      break;
    }
    case kNack: {
      if (GetArena() == nullptr) {
        delete content_.nack_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ReadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.ReadReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.ReadReq.Ack ack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.ReadReq.Nack nack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.ReadReq.Options options = 1;
  if (_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.ReadReq.Ack ack = 2;
  if (_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ack(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.ReadReq.Nack nack = 3;
  if (_internal_has_nack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadReq)
  return target;
}

size_t ReadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .event_store.client.persistent_subscriptions.ReadReq.Options options = 1;
    case kOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.options_);
      break;
    }
    // .event_store.client.persistent_subscriptions.ReadReq.Ack ack = 2;
    case kAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.ack_);
      break;
    }
    // .event_store.client.persistent_subscriptions.ReadReq.Nack nack = 3;
    case kNack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.nack_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadReq)
    MergeFrom(*source);
  }
}

void ReadReq::MergeFrom(const ReadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kOptions: {
      _internal_mutable_options()->::event_store::client::persistent_subscriptions::ReadReq_Options::MergeFrom(from._internal_options());
      break;
    }
    case kAck: {
      _internal_mutable_ack()->::event_store::client::persistent_subscriptions::ReadReq_Ack::MergeFrom(from._internal_ack());
      break;
    }
    case kNack: {
      _internal_mutable_nack()->::event_store::client::persistent_subscriptions::ReadReq_Nack::MergeFrom(from._internal_nack());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void ReadReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq::CopyFrom(const ReadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq::IsInitialized() const {
  return true;
}

void ReadReq::InternalSwap(ReadReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse() {}
ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::MergeFrom(const ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ReadResp_ReadEvent_RecordedEvent::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_RecordedEvent_default_instance_._instance.get_mutable()->id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_RecordedEvent_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
}
class ReadResp_ReadEvent_RecordedEvent::_Internal {
 public:
  static const ::event_store::client::UUID& id(const ReadResp_ReadEvent_RecordedEvent* msg);
  static const ::event_store::client::StreamIdentifier& stream_identifier(const ReadResp_ReadEvent_RecordedEvent* msg);
};

const ::event_store::client::UUID&
ReadResp_ReadEvent_RecordedEvent::_Internal::id(const ReadResp_ReadEvent_RecordedEvent* msg) {
  return *msg->id_;
}
const ::event_store::client::StreamIdentifier&
ReadResp_ReadEvent_RecordedEvent::_Internal::stream_identifier(const ReadResp_ReadEvent_RecordedEvent* msg) {
  return *msg->stream_identifier_;
}
void ReadResp_ReadEvent_RecordedEvent::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void ReadResp_ReadEvent_RecordedEvent::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
ReadResp_ReadEvent_RecordedEvent::ReadResp_ReadEvent_RecordedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
}
ReadResp_ReadEvent_RecordedEvent::ReadResp_ReadEvent_RecordedEvent(const ReadResp_ReadEvent_RecordedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_metadata().empty()) {
    custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_metadata(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::event_store::client::UUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  ::memcpy(&stream_revision_, &from.stream_revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_position_) -
    reinterpret_cast<char*>(&stream_revision_)) + sizeof(commit_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
}

void ReadResp_ReadEvent_RecordedEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_ReadEvent_RecordedEvent_persistent_2eproto.base);
  custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_position_) -
      reinterpret_cast<char*>(&id_)) + sizeof(commit_position_));
}

ReadResp_ReadEvent_RecordedEvent::~ReadResp_ReadEvent_RecordedEvent() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp_ReadEvent_RecordedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  custom_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete stream_identifier_;
}

void ReadResp_ReadEvent_RecordedEvent::ArenaDtor(void* object) {
  ReadResp_ReadEvent_RecordedEvent* _this = reinterpret_cast< ReadResp_ReadEvent_RecordedEvent* >(object);
  (void)_this;
}
void ReadResp_ReadEvent_RecordedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp_ReadEvent_RecordedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent_RecordedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_ReadEvent_RecordedEvent_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadResp_ReadEvent_RecordedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  custom_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  ::memset(&stream_revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_position_) -
      reinterpret_cast<char*>(&stream_revision_)) + sizeof(commit_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp_ReadEvent_RecordedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.StreamIdentifier stream_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stream_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stream_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes custom_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_custom_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp_ReadEvent_RecordedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .event_store.client.StreamIdentifier stream_identifier = 2;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 stream_revision = 3;
  if (this->stream_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_revision(), target);
  }

  // uint64 prepare_position = 4;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_prepare_position(), target);
  }

  // uint64 commit_position = 5;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_commit_position(), target);
  }

  // map<string, string> metadata = 6;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes custom_metadata = 7;
  if (this->custom_metadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_custom_metadata(), target);
  }

  // bytes data = 8;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  return target;
}

size_t ReadResp_ReadEvent_RecordedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes custom_metadata = 7;
  if (this->custom_metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_custom_metadata());
  }

  // bytes data = 8;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .event_store.client.UUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .event_store.client.StreamIdentifier stream_identifier = 2;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  // uint64 stream_revision = 3;
  if (this->stream_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stream_revision());
  }

  // uint64 prepare_position = 4;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  // uint64 commit_position = 5;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp_ReadEvent_RecordedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp_ReadEvent_RecordedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp_ReadEvent_RecordedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
    MergeFrom(*source);
  }
}

void ReadResp_ReadEvent_RecordedEvent::MergeFrom(const ReadResp_ReadEvent_RecordedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.custom_metadata().size() > 0) {
    _internal_set_custom_metadata(from._internal_custom_metadata());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::event_store::client::UUID::MergeFrom(from._internal_id());
  }
  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  if (from.stream_revision() != 0) {
    _internal_set_stream_revision(from._internal_stream_revision());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
}

void ReadResp_ReadEvent_RecordedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp_ReadEvent_RecordedEvent::CopyFrom(const ReadResp_ReadEvent_RecordedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp_ReadEvent_RecordedEvent::IsInitialized() const {
  return true;
}

void ReadResp_ReadEvent_RecordedEvent::InternalSwap(ReadResp_ReadEvent_RecordedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  custom_metadata_.Swap(&other->custom_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadResp_ReadEvent_RecordedEvent, commit_position_)
      + sizeof(ReadResp_ReadEvent_RecordedEvent::commit_position_)
      - PROTOBUF_FIELD_OFFSET(ReadResp_ReadEvent_RecordedEvent, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_ReadEvent_RecordedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResp_ReadEvent::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_._instance.get_mutable()->event_ = const_cast< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent*>(
      ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_._instance.get_mutable()->link_ = const_cast< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent*>(
      ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_.commit_position_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_.no_position_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_.retry_count_ = 0;
  ::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_.no_retry_count_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ReadResp_ReadEvent::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& event(const ReadResp_ReadEvent* msg);
  static const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& link(const ReadResp_ReadEvent* msg);
  static const ::event_store::client::Empty& no_position(const ReadResp_ReadEvent* msg);
  static const ::event_store::client::Empty& no_retry_count(const ReadResp_ReadEvent* msg);
};

const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent&
ReadResp_ReadEvent::_Internal::event(const ReadResp_ReadEvent* msg) {
  return *msg->event_;
}
const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent&
ReadResp_ReadEvent::_Internal::link(const ReadResp_ReadEvent* msg) {
  return *msg->link_;
}
const ::event_store::client::Empty&
ReadResp_ReadEvent::_Internal::no_position(const ReadResp_ReadEvent* msg) {
  return *msg->position_.no_position_;
}
const ::event_store::client::Empty&
ReadResp_ReadEvent::_Internal::no_retry_count(const ReadResp_ReadEvent* msg) {
  return *msg->count_.no_retry_count_;
}
void ReadResp_ReadEvent::set_allocated_no_position(::event_store::client::Empty* no_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position();
  if (no_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_position)->GetArena();
    if (message_arena != submessage_arena) {
      no_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_position, submessage_arena);
    }
    set_has_no_position();
    position_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_position)
}
void ReadResp_ReadEvent::clear_no_position() {
  if (_internal_has_no_position()) {
    if (GetArena() == nullptr) {
      delete position_.no_position_;
    }
    clear_has_position();
  }
}
void ReadResp_ReadEvent::set_allocated_no_retry_count(::event_store::client::Empty* no_retry_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_count();
  if (no_retry_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_retry_count)->GetArena();
    if (message_arena != submessage_arena) {
      no_retry_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_retry_count, submessage_arena);
    }
    set_has_no_retry_count();
    count_.no_retry_count_ = no_retry_count;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_retry_count)
}
void ReadResp_ReadEvent::clear_no_retry_count() {
  if (_internal_has_no_retry_count()) {
    if (GetArena() == nullptr) {
      delete count_.no_retry_count_;
    }
    clear_has_count();
  }
}
ReadResp_ReadEvent::ReadResp_ReadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
}
ReadResp_ReadEvent::ReadResp_ReadEvent(const ReadResp_ReadEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  if (from._internal_has_link()) {
    link_ = new ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent(*from.link_);
  } else {
    link_ = nullptr;
  }
  clear_has_position();
  switch (from.position_case()) {
    case kCommitPosition: {
      _internal_set_commit_position(from._internal_commit_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  clear_has_count();
  switch (from.count_case()) {
    case kRetryCount: {
      _internal_set_retry_count(from._internal_retry_count());
      break;
    }
    case kNoRetryCount: {
      _internal_mutable_no_retry_count()->::event_store::client::Empty::MergeFrom(from._internal_no_retry_count());
      break;
    }
    case COUNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
}

void ReadResp_ReadEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_ReadEvent_persistent_2eproto.base);
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_) -
      reinterpret_cast<char*>(&event_)) + sizeof(link_));
  clear_has_position();
  clear_has_count();
}

ReadResp_ReadEvent::~ReadResp_ReadEvent() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp_ReadEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete link_;
  if (has_position()) {
    clear_position();
  }
  if (has_count()) {
    clear_count();
  }
}

void ReadResp_ReadEvent::ArenaDtor(void* object) {
  ReadResp_ReadEvent* _this = reinterpret_cast< ReadResp_ReadEvent* >(object);
  (void)_this;
}
void ReadResp_ReadEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp_ReadEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp_ReadEvent& ReadResp_ReadEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_ReadEvent_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadResp_ReadEvent::clear_position() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  switch (position_case()) {
    case kCommitPosition: {
      // No need to clear
      break;
    }
    case kNoPosition: {
      if (GetArena() == nullptr) {
        delete position_.no_position_;
      }
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POSITION_NOT_SET;
}

void ReadResp_ReadEvent::clear_count() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  switch (count_case()) {
    case kRetryCount: {
      // No need to clear
      break;
    }
    case kNoRetryCount: {
      if (GetArena() == nullptr) {
        delete count_.no_retry_count_;
      }
      break;
    }
    case COUNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = COUNT_NOT_SET;
}


void ReadResp_ReadEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  clear_position();
  clear_count();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp_ReadEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 retry_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_retry_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_retry_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_retry_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp_ReadEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent event = 1;
  if (this->has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent link = 2;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::link(this), target, stream);
  }

  // uint64 commit_position = 3;
  if (_internal_has_commit_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_commit_position(), target);
  }

  // .event_store.client.Empty no_position = 4;
  if (_internal_has_no_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::no_position(this), target, stream);
  }

  // int32 retry_count = 5;
  if (_internal_has_retry_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_retry_count(), target);
  }

  // .event_store.client.Empty no_retry_count = 6;
  if (_internal_has_no_retry_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::no_retry_count(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  return target;
}

size_t ReadResp_ReadEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent event = 1;
  if (this->has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }

  // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent link = 2;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  switch (position_case()) {
    // uint64 commit_position = 3;
    case kCommitPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_commit_position());
      break;
    }
    // .event_store.client.Empty no_position = 4;
    case kNoPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_.no_position_);
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  switch (count_case()) {
    // int32 retry_count = 5;
    case kRetryCount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_retry_count());
      break;
    }
    // .event_store.client.Empty no_retry_count = 6;
    case kNoRetryCount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *count_.no_retry_count_);
      break;
    }
    case COUNT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp_ReadEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp_ReadEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp_ReadEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
    MergeFrom(*source);
  }
}

void ReadResp_ReadEvent::MergeFrom(const ReadResp_ReadEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event()) {
    _internal_mutable_event()->::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent::MergeFrom(from._internal_event());
  }
  if (from.has_link()) {
    _internal_mutable_link()->::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent::MergeFrom(from._internal_link());
  }
  switch (from.position_case()) {
    case kCommitPosition: {
      _internal_set_commit_position(from._internal_commit_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  switch (from.count_case()) {
    case kRetryCount: {
      _internal_set_retry_count(from._internal_retry_count());
      break;
    }
    case kNoRetryCount: {
      _internal_mutable_no_retry_count()->::event_store::client::Empty::MergeFrom(from._internal_no_retry_count());
      break;
    }
    case COUNT_NOT_SET: {
      break;
    }
  }
}

void ReadResp_ReadEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp_ReadEvent::CopyFrom(const ReadResp_ReadEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp_ReadEvent::IsInitialized() const {
  return true;
}

void ReadResp_ReadEvent::InternalSwap(ReadResp_ReadEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadResp_ReadEvent, link_)
      + sizeof(ReadResp_ReadEvent::link_)
      - PROTOBUF_FIELD_OFFSET(ReadResp_ReadEvent, event_)>(
          reinterpret_cast<char*>(&event_),
          reinterpret_cast<char*>(&other->event_));
  swap(position_, other->position_);
  swap(count_, other->count_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_ReadEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResp_SubscriptionConfirmation::InitAsDefaultInstance() {
}
class ReadResp_SubscriptionConfirmation::_Internal {
 public:
};

ReadResp_SubscriptionConfirmation::ReadResp_SubscriptionConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
}
ReadResp_SubscriptionConfirmation::ReadResp_SubscriptionConfirmation(const ReadResp_SubscriptionConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
}

void ReadResp_SubscriptionConfirmation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_SubscriptionConfirmation_persistent_2eproto.base);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadResp_SubscriptionConfirmation::~ReadResp_SubscriptionConfirmation() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp_SubscriptionConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadResp_SubscriptionConfirmation::ArenaDtor(void* object) {
  ReadResp_SubscriptionConfirmation* _this = reinterpret_cast< ReadResp_SubscriptionConfirmation* >(object);
  (void)_this;
}
void ReadResp_SubscriptionConfirmation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp_SubscriptionConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp_SubscriptionConfirmation& ReadResp_SubscriptionConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_SubscriptionConfirmation_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadResp_SubscriptionConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp_SubscriptionConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp_SubscriptionConfirmation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription_id = 1;
  if (this->subscription_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  return target;
}

size_t ReadResp_SubscriptionConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription_id = 1;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp_SubscriptionConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp_SubscriptionConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp_SubscriptionConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
    MergeFrom(*source);
  }
}

void ReadResp_SubscriptionConfirmation::MergeFrom(const ReadResp_SubscriptionConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
}

void ReadResp_SubscriptionConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp_SubscriptionConfirmation::CopyFrom(const ReadResp_SubscriptionConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp_SubscriptionConfirmation::IsInitialized() const {
  return true;
}

void ReadResp_SubscriptionConfirmation::InternalSwap(ReadResp_SubscriptionConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_SubscriptionConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResp::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ReadResp_default_instance_.event_ = const_cast< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent*>(
      ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReadResp_default_instance_.subscription_confirmation_ = const_cast< ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation*>(
      ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation::internal_default_instance());
}
class ReadResp::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent& event(const ReadResp* msg);
  static const ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation& subscription_confirmation(const ReadResp* msg);
};

const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent&
ReadResp::_Internal::event(const ReadResp* msg) {
  return *msg->content_.event_;
}
const ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation&
ReadResp::_Internal::subscription_confirmation(const ReadResp* msg) {
  return *msg->content_.subscription_confirmation_;
}
void ReadResp::set_allocated_event(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    content_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.event)
}
void ReadResp::set_allocated_subscription_confirmation(::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* subscription_confirmation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (subscription_confirmation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscription_confirmation);
    if (message_arena != submessage_arena) {
      subscription_confirmation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_confirmation, submessage_arena);
    }
    set_has_subscription_confirmation();
    content_.subscription_confirmation_ = subscription_confirmation;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.subscription_confirmation)
}
ReadResp::ReadResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReadResp)
}
ReadResp::ReadResp(const ReadResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kEvent: {
      _internal_mutable_event()->::event_store::client::persistent_subscriptions::ReadResp_ReadEvent::MergeFrom(from._internal_event());
      break;
    }
    case kSubscriptionConfirmation: {
      _internal_mutable_subscription_confirmation()->::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation::MergeFrom(from._internal_subscription_confirmation());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReadResp)
}

void ReadResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_persistent_2eproto.base);
  clear_has_content();
}

ReadResp::~ReadResp() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReadResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void ReadResp::ArenaDtor(void* object) {
  ReadResp* _this = reinterpret_cast< ReadResp* >(object);
  (void)_this;
}
void ReadResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp& ReadResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReadResp::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ReadResp)
  switch (content_case()) {
    case kEvent: {
      if (GetArena() == nullptr) {
        delete content_.event_;
      }
      break;
    }
    case kSubscriptionConfirmation: {
      if (GetArena() == nullptr) {
        delete content_.subscription_confirmation_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ReadResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReadResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation subscription_confirmation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription_confirmation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReadResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent event = 1;
  if (_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation subscription_confirmation = 2;
  if (_internal_has_subscription_confirmation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subscription_confirmation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReadResp)
  return target;
}

size_t ReadResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReadResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent event = 1;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.event_);
      break;
    }
    // .event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation subscription_confirmation = 2;
    case kSubscriptionConfirmation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.subscription_confirmation_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReadResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReadResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReadResp)
    MergeFrom(*source);
  }
}

void ReadResp::MergeFrom(const ReadResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReadResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kEvent: {
      _internal_mutable_event()->::event_store::client::persistent_subscriptions::ReadResp_ReadEvent::MergeFrom(from._internal_event());
      break;
    }
    case kSubscriptionConfirmation: {
      _internal_mutable_subscription_confirmation()->::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation::MergeFrom(from._internal_subscription_confirmation());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void ReadResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReadResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp::CopyFrom(const ReadResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReadResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp::IsInitialized() const {
  return true;
}

void ReadResp::InternalSwap(ReadResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateReq_Options::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_CreateReq_Options_default_instance_.stream_ = const_cast< ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions*>(
      ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_Options_default_instance_.all_ = const_cast< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions*>(
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_Options_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_Options_default_instance_._instance.get_mutable()->settings_ = const_cast< ::event_store::client::persistent_subscriptions::CreateReq_Settings*>(
      ::event_store::client::persistent_subscriptions::CreateReq_Settings::internal_default_instance());
}
class CreateReq_Options::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions& stream(const CreateReq_Options* msg);
  static const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions& all(const CreateReq_Options* msg);
  static const ::event_store::client::StreamIdentifier& stream_identifier(const CreateReq_Options* msg);
  static const ::event_store::client::persistent_subscriptions::CreateReq_Settings& settings(const CreateReq_Options* msg);
};

const ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions&
CreateReq_Options::_Internal::stream(const CreateReq_Options* msg) {
  return *msg->stream_option_.stream_;
}
const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions&
CreateReq_Options::_Internal::all(const CreateReq_Options* msg) {
  return *msg->stream_option_.all_;
}
const ::event_store::client::StreamIdentifier&
CreateReq_Options::_Internal::stream_identifier(const CreateReq_Options* msg) {
  return *msg->stream_identifier_;
}
const ::event_store::client::persistent_subscriptions::CreateReq_Settings&
CreateReq_Options::_Internal::settings(const CreateReq_Options* msg) {
  return *msg->settings_;
}
void CreateReq_Options::set_allocated_stream(::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    stream_option_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.stream)
}
void CreateReq_Options::set_allocated_all(::event_store::client::persistent_subscriptions::CreateReq_AllOptions* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(all);
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.all)
}
void CreateReq_Options::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
CreateReq_Options::CreateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateReq.Options)
}
CreateReq_Options::CreateReq_Options(const CreateReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_name(),
      GetArena());
  }
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  if (from._internal_has_settings()) {
    settings_ = new ::event_store::client::persistent_subscriptions::CreateReq_Settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  clear_has_stream_option();
  switch (from.stream_option_case()) {
    case kStream: {
      _internal_mutable_stream()->::event_store::client::persistent_subscriptions::CreateReq_StreamOptions::MergeFrom(from._internal_stream());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::persistent_subscriptions::CreateReq_AllOptions::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateReq.Options)
}

void CreateReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReq_Options_persistent_2eproto.base);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stream_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) -
      reinterpret_cast<char*>(&stream_identifier_)) + sizeof(settings_));
  clear_has_stream_option();
}

CreateReq_Options::~CreateReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stream_identifier_;
  if (this != internal_default_instance()) delete settings_;
  if (has_stream_option()) {
    clear_stream_option();
  }
}

void CreateReq_Options::ArenaDtor(void* object) {
  CreateReq_Options* _this = reinterpret_cast< CreateReq_Options* >(object);
  (void)_this;
}
void CreateReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReq_Options& CreateReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReq_Options_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateReq_Options::clear_stream_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.CreateReq.Options)
  switch (stream_option_case()) {
    case kStream: {
      if (GetArena() == nullptr) {
        delete stream_option_.stream_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete stream_option_.all_;
      }
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}


void CreateReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  clear_stream_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.CreateReq.Options.group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.CreateReq.Settings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.CreateReq.StreamOptions stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.CreateReq.AllOptions all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.CreateReq.Options.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // .event_store.client.persistent_subscriptions.CreateReq.Settings settings = 3;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.CreateReq.StreamOptions stream = 4;
  if (_internal_has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stream(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.CreateReq.AllOptions all = 5;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::all(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateReq.Options)
  return target;
}

size_t CreateReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  // .event_store.client.persistent_subscriptions.CreateReq.Settings settings = 3;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  switch (stream_option_case()) {
    // .event_store.client.persistent_subscriptions.CreateReq.StreamOptions stream = 4;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.stream_);
      break;
    }
    // .event_store.client.persistent_subscriptions.CreateReq.AllOptions all = 5;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.all_);
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateReq.Options)
    MergeFrom(*source);
  }
}

void CreateReq_Options::MergeFrom(const CreateReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_name().size() > 0) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::event_store::client::persistent_subscriptions::CreateReq_Settings::MergeFrom(from._internal_settings());
  }
  switch (from.stream_option_case()) {
    case kStream: {
      _internal_mutable_stream()->::event_store::client::persistent_subscriptions::CreateReq_StreamOptions::MergeFrom(from._internal_stream());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::persistent_subscriptions::CreateReq_AllOptions::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
}

void CreateReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq_Options::CopyFrom(const CreateReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq_Options::IsInitialized() const {
  return true;
}

void CreateReq_Options::InternalSwap(CreateReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateReq_Options, settings_)
      + sizeof(CreateReq_Options::settings_)
      - PROTOBUF_FIELD_OFFSET(CreateReq_Options, stream_identifier_)>(
          reinterpret_cast<char*>(&stream_identifier_),
          reinterpret_cast<char*>(&other->stream_identifier_));
  swap(stream_option_, other->stream_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateReq_StreamOptions::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_CreateReq_StreamOptions_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_StreamOptions_default_instance_.revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::persistent_subscriptions::_CreateReq_StreamOptions_default_instance_.start_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_StreamOptions_default_instance_.end_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class CreateReq_StreamOptions::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const CreateReq_StreamOptions* msg);
  static const ::event_store::client::Empty& start(const CreateReq_StreamOptions* msg);
  static const ::event_store::client::Empty& end(const CreateReq_StreamOptions* msg);
};

const ::event_store::client::StreamIdentifier&
CreateReq_StreamOptions::_Internal::stream_identifier(const CreateReq_StreamOptions* msg) {
  return *msg->stream_identifier_;
}
const ::event_store::client::Empty&
CreateReq_StreamOptions::_Internal::start(const CreateReq_StreamOptions* msg) {
  return *msg->revision_option_.start_;
}
const ::event_store::client::Empty&
CreateReq_StreamOptions::_Internal::end(const CreateReq_StreamOptions* msg) {
  return *msg->revision_option_.end_;
}
void CreateReq_StreamOptions::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
void CreateReq_StreamOptions::set_allocated_start(::event_store::client::Empty* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_revision_option();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    revision_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.start)
}
void CreateReq_StreamOptions::clear_start() {
  if (_internal_has_start()) {
    if (GetArena() == nullptr) {
      delete revision_option_.start_;
    }
    clear_has_revision_option();
  }
}
void CreateReq_StreamOptions::set_allocated_end(::event_store::client::Empty* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_revision_option();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    revision_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.end)
}
void CreateReq_StreamOptions::clear_end() {
  if (_internal_has_end()) {
    if (GetArena() == nullptr) {
      delete revision_option_.end_;
    }
    clear_has_revision_option();
  }
}
CreateReq_StreamOptions::CreateReq_StreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
}
CreateReq_StreamOptions::CreateReq_StreamOptions(const CreateReq_StreamOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  clear_has_revision_option();
  switch (from.revision_option_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
}

void CreateReq_StreamOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReq_StreamOptions_persistent_2eproto.base);
  stream_identifier_ = nullptr;
  clear_has_revision_option();
}

CreateReq_StreamOptions::~CreateReq_StreamOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReq_StreamOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_identifier_;
  if (has_revision_option()) {
    clear_revision_option();
  }
}

void CreateReq_StreamOptions::ArenaDtor(void* object) {
  CreateReq_StreamOptions* _this = reinterpret_cast< CreateReq_StreamOptions* >(object);
  (void)_this;
}
void CreateReq_StreamOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReq_StreamOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReq_StreamOptions& CreateReq_StreamOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReq_StreamOptions_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateReq_StreamOptions::clear_revision_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  switch (revision_option_case()) {
    case kRevision: {
      // No need to clear
      break;
    }
    case kStart: {
      if (GetArena() == nullptr) {
        delete revision_option_.start_;
      }
      break;
    }
    case kEnd: {
      if (GetArena() == nullptr) {
        delete revision_option_.end_;
      }
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REVISION_OPTION_NOT_SET;
}


void CreateReq_StreamOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  clear_revision_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReq_StreamOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReq_StreamOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 revision = 2;
  if (_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_revision(), target);
  }

  // .event_store.client.Empty start = 3;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start(this), target, stream);
  }

  // .event_store.client.Empty end = 4;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  return target;
}

size_t CreateReq_StreamOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  switch (revision_option_case()) {
    // uint64 revision = 2;
    case kRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_revision());
      break;
    }
    // .event_store.client.Empty start = 3;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *revision_option_.start_);
      break;
    }
    // .event_store.client.Empty end = 4;
    case kEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *revision_option_.end_);
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReq_StreamOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReq_StreamOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReq_StreamOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
    MergeFrom(*source);
  }
}

void CreateReq_StreamOptions::MergeFrom(const CreateReq_StreamOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  switch (from.revision_option_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
}

void CreateReq_StreamOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq_StreamOptions::CopyFrom(const CreateReq_StreamOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq_StreamOptions::IsInitialized() const {
  return true;
}

void CreateReq_StreamOptions::InternalSwap(CreateReq_StreamOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_identifier_, other->stream_identifier_);
  swap(revision_option_, other->revision_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReq_StreamOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateReq_AllOptions_FilterOptions_Expression::InitAsDefaultInstance() {
}
class CreateReq_AllOptions_FilterOptions_Expression::_Internal {
 public:
};

CreateReq_AllOptions_FilterOptions_Expression::CreateReq_AllOptions_FilterOptions_Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prefix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
}
CreateReq_AllOptions_FilterOptions_Expression::CreateReq_AllOptions_FilterOptions_Expression(const CreateReq_AllOptions_FilterOptions_Expression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prefix_(from.prefix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regex().empty()) {
    regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_regex(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
}

void CreateReq_AllOptions_FilterOptions_Expression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReq_AllOptions_FilterOptions_Expression_persistent_2eproto.base);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateReq_AllOptions_FilterOptions_Expression::~CreateReq_AllOptions_FilterOptions_Expression() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReq_AllOptions_FilterOptions_Expression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateReq_AllOptions_FilterOptions_Expression::ArenaDtor(void* object) {
  CreateReq_AllOptions_FilterOptions_Expression* _this = reinterpret_cast< CreateReq_AllOptions_FilterOptions_Expression* >(object);
  (void)_this;
}
void CreateReq_AllOptions_FilterOptions_Expression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReq_AllOptions_FilterOptions_Expression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReq_AllOptions_FilterOptions_Expression& CreateReq_AllOptions_FilterOptions_Expression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReq_AllOptions_FilterOptions_Expression_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateReq_AllOptions_FilterOptions_Expression::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.Clear();
  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReq_AllOptions_FilterOptions_Expression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string regex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prefix();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReq_AllOptions_FilterOptions_Expression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string regex = 1;
  if (this->regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_regex(), target);
  }

  // repeated string prefix = 2;
  for (int i = 0, n = this->_internal_prefix_size(); i < n; i++) {
    const auto& s = this->_internal_prefix(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  return target;
}

size_t CreateReq_AllOptions_FilterOptions_Expression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prefix = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prefix_.size());
  for (int i = 0, n = prefix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prefix_.Get(i));
  }

  // string regex = 1;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReq_AllOptions_FilterOptions_Expression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReq_AllOptions_FilterOptions_Expression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReq_AllOptions_FilterOptions_Expression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
    MergeFrom(*source);
  }
}

void CreateReq_AllOptions_FilterOptions_Expression::MergeFrom(const CreateReq_AllOptions_FilterOptions_Expression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prefix_.MergeFrom(from.prefix_);
  if (from.regex().size() > 0) {
    _internal_set_regex(from._internal_regex());
  }
}

void CreateReq_AllOptions_FilterOptions_Expression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq_AllOptions_FilterOptions_Expression::CopyFrom(const CreateReq_AllOptions_FilterOptions_Expression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq_AllOptions_FilterOptions_Expression::IsInitialized() const {
  return true;
}

void CreateReq_AllOptions_FilterOptions_Expression::InternalSwap(CreateReq_AllOptions_FilterOptions_Expression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.InternalSwap(&other->prefix_);
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReq_AllOptions_FilterOptions_Expression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateReq_AllOptions_FilterOptions::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_default_instance_.stream_identifier_ = const_cast< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression*>(
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_default_instance_.event_type_ = const_cast< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression*>(
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_default_instance_.max_ = 0u;
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_default_instance_.count_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class CreateReq_AllOptions_FilterOptions::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& stream_identifier(const CreateReq_AllOptions_FilterOptions* msg);
  static const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& event_type(const CreateReq_AllOptions_FilterOptions* msg);
  static const ::event_store::client::Empty& count(const CreateReq_AllOptions_FilterOptions* msg);
};

const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression&
CreateReq_AllOptions_FilterOptions::_Internal::stream_identifier(const CreateReq_AllOptions_FilterOptions* msg) {
  return *msg->filter_.stream_identifier_;
}
const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression&
CreateReq_AllOptions_FilterOptions::_Internal::event_type(const CreateReq_AllOptions_FilterOptions* msg) {
  return *msg->filter_.event_type_;
}
const ::event_store::client::Empty&
CreateReq_AllOptions_FilterOptions::_Internal::count(const CreateReq_AllOptions_FilterOptions* msg) {
  return *msg->window_.count_;
}
void CreateReq_AllOptions_FilterOptions::set_allocated_stream_identifier(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_filter();
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_identifier);
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    set_has_stream_identifier();
    filter_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.stream_identifier)
}
void CreateReq_AllOptions_FilterOptions::set_allocated_event_type(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* event_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_filter();
  if (event_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event_type);
    if (message_arena != submessage_arena) {
      event_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_type, submessage_arena);
    }
    set_has_event_type();
    filter_.event_type_ = event_type;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.event_type)
}
void CreateReq_AllOptions_FilterOptions::set_allocated_count(::event_store::client::Empty* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_window();
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(count)->GetArena();
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    set_has_count();
    window_.count_ = count;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.count)
}
void CreateReq_AllOptions_FilterOptions::clear_count() {
  if (_internal_has_count()) {
    if (GetArena() == nullptr) {
      delete window_.count_;
    }
    clear_has_window();
  }
}
CreateReq_AllOptions_FilterOptions::CreateReq_AllOptions_FilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
}
CreateReq_AllOptions_FilterOptions::CreateReq_AllOptions_FilterOptions(const CreateReq_AllOptions_FilterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkpointintervalmultiplier_ = from.checkpointintervalmultiplier_;
  clear_has_filter();
  switch (from.filter_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kEventType: {
      _internal_mutable_event_type()->::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression::MergeFrom(from._internal_event_type());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  clear_has_window();
  switch (from.window_case()) {
    case kMax: {
      _internal_set_max(from._internal_max());
      break;
    }
    case kCount: {
      _internal_mutable_count()->::event_store::client::Empty::MergeFrom(from._internal_count());
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
}

void CreateReq_AllOptions_FilterOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReq_AllOptions_FilterOptions_persistent_2eproto.base);
  checkpointintervalmultiplier_ = 0u;
  clear_has_filter();
  clear_has_window();
}

CreateReq_AllOptions_FilterOptions::~CreateReq_AllOptions_FilterOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReq_AllOptions_FilterOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_filter()) {
    clear_filter();
  }
  if (has_window()) {
    clear_window();
  }
}

void CreateReq_AllOptions_FilterOptions::ArenaDtor(void* object) {
  CreateReq_AllOptions_FilterOptions* _this = reinterpret_cast< CreateReq_AllOptions_FilterOptions* >(object);
  (void)_this;
}
void CreateReq_AllOptions_FilterOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReq_AllOptions_FilterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReq_AllOptions_FilterOptions& CreateReq_AllOptions_FilterOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReq_AllOptions_FilterOptions_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateReq_AllOptions_FilterOptions::clear_filter() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  switch (filter_case()) {
    case kStreamIdentifier: {
      if (GetArena() == nullptr) {
        delete filter_.stream_identifier_;
      }
      break;
    }
    case kEventType: {
      if (GetArena() == nullptr) {
        delete filter_.event_type_;
      }
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_NOT_SET;
}

void CreateReq_AllOptions_FilterOptions::clear_window() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  switch (window_case()) {
    case kMax: {
      // No need to clear
      break;
    }
    case kCount: {
      if (GetArena() == nullptr) {
        delete window_.count_;
      }
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = WINDOW_NOT_SET;
}


void CreateReq_AllOptions_FilterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpointintervalmultiplier_ = 0u;
  clear_filter();
  clear_window();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReq_AllOptions_FilterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 checkpointIntervalMultiplier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          checkpointintervalmultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReq_AllOptions_FilterOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression stream_identifier = 1;
  if (_internal_has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression event_type = 2;
  if (_internal_has_event_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::event_type(this), target, stream);
  }

  // uint32 max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  // .event_store.client.Empty count = 4;
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::count(this), target, stream);
  }

  // uint32 checkpointIntervalMultiplier = 5;
  if (this->checkpointintervalmultiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_checkpointintervalmultiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  return target;
}

size_t CreateReq_AllOptions_FilterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 checkpointIntervalMultiplier = 5;
  if (this->checkpointintervalmultiplier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_checkpointintervalmultiplier());
  }

  switch (filter_case()) {
    // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression stream_identifier = 1;
    case kStreamIdentifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_.stream_identifier_);
      break;
    }
    // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression event_type = 2;
    case kEventType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_.event_type_);
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  switch (window_case()) {
    // uint32 max = 3;
    case kMax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max());
      break;
    }
    // .event_store.client.Empty count = 4;
    case kCount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_.count_);
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReq_AllOptions_FilterOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReq_AllOptions_FilterOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReq_AllOptions_FilterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
    MergeFrom(*source);
  }
}

void CreateReq_AllOptions_FilterOptions::MergeFrom(const CreateReq_AllOptions_FilterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checkpointintervalmultiplier() != 0) {
    _internal_set_checkpointintervalmultiplier(from._internal_checkpointintervalmultiplier());
  }
  switch (from.filter_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kEventType: {
      _internal_mutable_event_type()->::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression::MergeFrom(from._internal_event_type());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  switch (from.window_case()) {
    case kMax: {
      _internal_set_max(from._internal_max());
      break;
    }
    case kCount: {
      _internal_mutable_count()->::event_store::client::Empty::MergeFrom(from._internal_count());
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
}

void CreateReq_AllOptions_FilterOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq_AllOptions_FilterOptions::CopyFrom(const CreateReq_AllOptions_FilterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq_AllOptions_FilterOptions::IsInitialized() const {
  return true;
}

void CreateReq_AllOptions_FilterOptions::InternalSwap(CreateReq_AllOptions_FilterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(checkpointintervalmultiplier_, other->checkpointintervalmultiplier_);
  swap(filter_, other->filter_);
  swap(window_, other->window_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReq_AllOptions_FilterOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateReq_AllOptions::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_default_instance_.position_ = const_cast< ::event_store::client::persistent_subscriptions::CreateReq_Position*>(
      ::event_store::client::persistent_subscriptions::CreateReq_Position::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_default_instance_.start_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_default_instance_.end_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_default_instance_.filter_ = const_cast< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions*>(
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_default_instance_.no_filter_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class CreateReq_AllOptions::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::CreateReq_Position& position(const CreateReq_AllOptions* msg);
  static const ::event_store::client::Empty& start(const CreateReq_AllOptions* msg);
  static const ::event_store::client::Empty& end(const CreateReq_AllOptions* msg);
  static const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions& filter(const CreateReq_AllOptions* msg);
  static const ::event_store::client::Empty& no_filter(const CreateReq_AllOptions* msg);
};

const ::event_store::client::persistent_subscriptions::CreateReq_Position&
CreateReq_AllOptions::_Internal::position(const CreateReq_AllOptions* msg) {
  return *msg->all_option_.position_;
}
const ::event_store::client::Empty&
CreateReq_AllOptions::_Internal::start(const CreateReq_AllOptions* msg) {
  return *msg->all_option_.start_;
}
const ::event_store::client::Empty&
CreateReq_AllOptions::_Internal::end(const CreateReq_AllOptions* msg) {
  return *msg->all_option_.end_;
}
const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions&
CreateReq_AllOptions::_Internal::filter(const CreateReq_AllOptions* msg) {
  return *msg->filter_option_.filter_;
}
const ::event_store::client::Empty&
CreateReq_AllOptions::_Internal::no_filter(const CreateReq_AllOptions* msg) {
  return *msg->filter_option_.no_filter_;
}
void CreateReq_AllOptions::set_allocated_position(::event_store::client::persistent_subscriptions::CreateReq_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    all_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.position)
}
void CreateReq_AllOptions::set_allocated_start(::event_store::client::Empty* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    all_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.start)
}
void CreateReq_AllOptions::clear_start() {
  if (_internal_has_start()) {
    if (GetArena() == nullptr) {
      delete all_option_.start_;
    }
    clear_has_all_option();
  }
}
void CreateReq_AllOptions::set_allocated_end(::event_store::client::Empty* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    all_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.end)
}
void CreateReq_AllOptions::clear_end() {
  if (_internal_has_end()) {
    if (GetArena() == nullptr) {
      delete all_option_.end_;
    }
    clear_has_all_option();
  }
}
void CreateReq_AllOptions::set_allocated_filter(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_filter_option();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    filter_option_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.filter)
}
void CreateReq_AllOptions::set_allocated_no_filter(::event_store::client::Empty* no_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_filter_option();
  if (no_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_filter)->GetArena();
    if (message_arena != submessage_arena) {
      no_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_filter, submessage_arena);
    }
    set_has_no_filter();
    filter_option_.no_filter_ = no_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.no_filter)
}
void CreateReq_AllOptions::clear_no_filter() {
  if (_internal_has_no_filter()) {
    if (GetArena() == nullptr) {
      delete filter_option_.no_filter_;
    }
    clear_has_filter_option();
  }
}
CreateReq_AllOptions::CreateReq_AllOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
}
CreateReq_AllOptions::CreateReq_AllOptions(const CreateReq_AllOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_all_option();
  switch (from.all_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::persistent_subscriptions::CreateReq_Position::MergeFrom(from._internal_position());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  clear_has_filter_option();
  switch (from.filter_option_case()) {
    case kFilter: {
      _internal_mutable_filter()->::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions::MergeFrom(from._internal_filter());
      break;
    }
    case kNoFilter: {
      _internal_mutable_no_filter()->::event_store::client::Empty::MergeFrom(from._internal_no_filter());
      break;
    }
    case FILTER_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
}

void CreateReq_AllOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReq_AllOptions_persistent_2eproto.base);
  clear_has_all_option();
  clear_has_filter_option();
}

CreateReq_AllOptions::~CreateReq_AllOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReq_AllOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_all_option()) {
    clear_all_option();
  }
  if (has_filter_option()) {
    clear_filter_option();
  }
}

void CreateReq_AllOptions::ArenaDtor(void* object) {
  CreateReq_AllOptions* _this = reinterpret_cast< CreateReq_AllOptions* >(object);
  (void)_this;
}
void CreateReq_AllOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReq_AllOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReq_AllOptions& CreateReq_AllOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReq_AllOptions_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateReq_AllOptions::clear_all_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  switch (all_option_case()) {
    case kPosition: {
      if (GetArena() == nullptr) {
        delete all_option_.position_;
      }
      break;
    }
    case kStart: {
      if (GetArena() == nullptr) {
        delete all_option_.start_;
      }
      break;
    }
    case kEnd: {
      if (GetArena() == nullptr) {
        delete all_option_.end_;
      }
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ALL_OPTION_NOT_SET;
}

void CreateReq_AllOptions::clear_filter_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  switch (filter_option_case()) {
    case kFilter: {
      if (GetArena() == nullptr) {
        delete filter_option_.filter_;
      }
      break;
    }
    case kNoFilter: {
      if (GetArena() == nullptr) {
        delete filter_option_.no_filter_;
      }
      break;
    }
    case FILTER_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = FILTER_OPTION_NOT_SET;
}


void CreateReq_AllOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_all_option();
  clear_filter_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReq_AllOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.CreateReq.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReq_AllOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.CreateReq.Position position = 1;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .event_store.client.Empty start = 2;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .event_store.client.Empty end = 3;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions filter = 4;
  if (_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::filter(this), target, stream);
  }

  // .event_store.client.Empty no_filter = 5;
  if (_internal_has_no_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::no_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  return target;
}

size_t CreateReq_AllOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (all_option_case()) {
    // .event_store.client.persistent_subscriptions.CreateReq.Position position = 1;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.position_);
      break;
    }
    // .event_store.client.Empty start = 2;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.start_);
      break;
    }
    // .event_store.client.Empty end = 3;
    case kEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.end_);
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  switch (filter_option_case()) {
    // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions filter = 4;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_option_.filter_);
      break;
    }
    // .event_store.client.Empty no_filter = 5;
    case kNoFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_option_.no_filter_);
      break;
    }
    case FILTER_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReq_AllOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReq_AllOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReq_AllOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
    MergeFrom(*source);
  }
}

void CreateReq_AllOptions::MergeFrom(const CreateReq_AllOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.all_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::persistent_subscriptions::CreateReq_Position::MergeFrom(from._internal_position());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  switch (from.filter_option_case()) {
    case kFilter: {
      _internal_mutable_filter()->::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions::MergeFrom(from._internal_filter());
      break;
    }
    case kNoFilter: {
      _internal_mutable_no_filter()->::event_store::client::Empty::MergeFrom(from._internal_no_filter());
      break;
    }
    case FILTER_OPTION_NOT_SET: {
      break;
    }
  }
}

void CreateReq_AllOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq_AllOptions::CopyFrom(const CreateReq_AllOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq_AllOptions::IsInitialized() const {
  return true;
}

void CreateReq_AllOptions::InternalSwap(CreateReq_AllOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(all_option_, other->all_option_);
  swap(filter_option_, other->filter_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReq_AllOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateReq_Position::InitAsDefaultInstance() {
}
class CreateReq_Position::_Internal {
 public:
};

CreateReq_Position::CreateReq_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateReq.Position)
}
CreateReq_Position::CreateReq_Position(const CreateReq_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_position_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateReq.Position)
}

void CreateReq_Position::SharedCtor() {
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
}

CreateReq_Position::~CreateReq_Position() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateReq.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReq_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateReq_Position::ArenaDtor(void* object) {
  CreateReq_Position* _this = reinterpret_cast< CreateReq_Position* >(object);
  (void)_this;
}
void CreateReq_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReq_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReq_Position& CreateReq_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReq_Position_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateReq_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateReq.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReq_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReq_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateReq.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_commit_position(), target);
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prepare_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateReq.Position)
  return target;
}

size_t CreateReq_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateReq.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReq_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReq_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReq_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateReq.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateReq.Position)
    MergeFrom(*source);
  }
}

void CreateReq_Position::MergeFrom(const CreateReq_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
}

void CreateReq_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq_Position::CopyFrom(const CreateReq_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq_Position::IsInitialized() const {
  return true;
}

void CreateReq_Position::InternalSwap(CreateReq_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateReq_Position, prepare_position_)
      + sizeof(CreateReq_Position::prepare_position_)
      - PROTOBUF_FIELD_OFFSET(CreateReq_Position, commit_position_)>(
          reinterpret_cast<char*>(&commit_position_),
          reinterpret_cast<char*>(&other->commit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReq_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateReq_Settings::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_CreateReq_Settings_default_instance_.message_timeout_ticks_ = PROTOBUF_LONGLONG(0);
  ::event_store::client::persistent_subscriptions::_CreateReq_Settings_default_instance_.message_timeout_ms_ = 0;
  ::event_store::client::persistent_subscriptions::_CreateReq_Settings_default_instance_.checkpoint_after_ticks_ = PROTOBUF_LONGLONG(0);
  ::event_store::client::persistent_subscriptions::_CreateReq_Settings_default_instance_.checkpoint_after_ms_ = 0;
}
class CreateReq_Settings::_Internal {
 public:
};

CreateReq_Settings::CreateReq_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateReq.Settings)
}
CreateReq_Settings::CreateReq_Settings(const CreateReq_Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  consumer_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consumer_strategy().empty()) {
    consumer_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_consumer_strategy(),
      GetArena());
  }
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&named_consumer_strategy_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(named_consumer_strategy_));
  clear_has_message_timeout();
  switch (from.message_timeout_case()) {
    case kMessageTimeoutTicks: {
      _internal_set_message_timeout_ticks(from._internal_message_timeout_ticks());
      break;
    }
    case kMessageTimeoutMs: {
      _internal_set_message_timeout_ms(from._internal_message_timeout_ms());
      break;
    }
    case MESSAGE_TIMEOUT_NOT_SET: {
      break;
    }
  }
  clear_has_checkpoint_after();
  switch (from.checkpoint_after_case()) {
    case kCheckpointAfterTicks: {
      _internal_set_checkpoint_after_ticks(from._internal_checkpoint_after_ticks());
      break;
    }
    case kCheckpointAfterMs: {
      _internal_set_checkpoint_after_ms(from._internal_checkpoint_after_ms());
      break;
    }
    case CHECKPOINT_AFTER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateReq.Settings)
}

void CreateReq_Settings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReq_Settings_persistent_2eproto.base);
  consumer_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&named_consumer_strategy_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(named_consumer_strategy_));
  clear_has_message_timeout();
  clear_has_checkpoint_after();
}

CreateReq_Settings::~CreateReq_Settings() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateReq.Settings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReq_Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  consumer_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_message_timeout()) {
    clear_message_timeout();
  }
  if (has_checkpoint_after()) {
    clear_checkpoint_after();
  }
}

void CreateReq_Settings::ArenaDtor(void* object) {
  CreateReq_Settings* _this = reinterpret_cast< CreateReq_Settings* >(object);
  (void)_this;
}
void CreateReq_Settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReq_Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReq_Settings& CreateReq_Settings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReq_Settings_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateReq_Settings::clear_message_timeout() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  switch (message_timeout_case()) {
    case kMessageTimeoutTicks: {
      // No need to clear
      break;
    }
    case kMessageTimeoutMs: {
      // No need to clear
      break;
    }
    case MESSAGE_TIMEOUT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_TIMEOUT_NOT_SET;
}

void CreateReq_Settings::clear_checkpoint_after() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  switch (checkpoint_after_case()) {
    case kCheckpointAfterTicks: {
      // No need to clear
      break;
    }
    case kCheckpointAfterMs: {
      // No need to clear
      break;
    }
    case CHECKPOINT_AFTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CHECKPOINT_AFTER_NOT_SET;
}


void CreateReq_Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consumer_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&named_consumer_strategy_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(named_consumer_strategy_));
  clear_message_timeout();
  clear_checkpoint_after();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReq_Settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool resolve_links = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resolve_links_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revision = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool extra_statistics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          extra_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 message_timeout_ticks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_retry_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 checkpoint_after_ticks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_checkpoint_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          min_checkpoint_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_checkpoint_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_checkpoint_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_subscriber_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_subscriber_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 live_buffer_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          live_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 read_batch_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          read_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 history_buffer_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          history_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy named_consumer_strategy = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_named_consumer_strategy(static_cast<::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy>(val));
        } else goto handle_unusual;
        continue;
      // int32 message_timeout_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 checkpoint_after_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consumer_strategy = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_consumer_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReq_Settings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool resolve_links = 1;
  if (this->resolve_links() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_resolve_links(), target);
  }

  // uint64 revision = 2 [deprecated = true];
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_revision(), target);
  }

  // bool extra_statistics = 3;
  if (this->extra_statistics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_extra_statistics(), target);
  }

  // int64 message_timeout_ticks = 4;
  if (_internal_has_message_timeout_ticks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_message_timeout_ticks(), target);
  }

  // int32 max_retry_count = 5;
  if (this->max_retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_retry_count(), target);
  }

  // int64 checkpoint_after_ticks = 6;
  if (_internal_has_checkpoint_after_ticks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_checkpoint_after_ticks(), target);
  }

  // int32 min_checkpoint_count = 7;
  if (this->min_checkpoint_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_min_checkpoint_count(), target);
  }

  // int32 max_checkpoint_count = 8;
  if (this->max_checkpoint_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_checkpoint_count(), target);
  }

  // int32 max_subscriber_count = 9;
  if (this->max_subscriber_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_subscriber_count(), target);
  }

  // int32 live_buffer_size = 10;
  if (this->live_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_live_buffer_size(), target);
  }

  // int32 read_batch_size = 11;
  if (this->read_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_read_batch_size(), target);
  }

  // int32 history_buffer_size = 12;
  if (this->history_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_history_buffer_size(), target);
  }

  // .event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy named_consumer_strategy = 13 [deprecated = true];
  if (this->named_consumer_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_named_consumer_strategy(), target);
  }

  // int32 message_timeout_ms = 14;
  if (_internal_has_message_timeout_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_message_timeout_ms(), target);
  }

  // int32 checkpoint_after_ms = 15;
  if (_internal_has_checkpoint_after_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_checkpoint_after_ms(), target);
  }

  // string consumer_strategy = 16;
  if (this->consumer_strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumer_strategy().data(), static_cast<int>(this->_internal_consumer_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_consumer_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateReq.Settings)
  return target;
}

size_t CreateReq_Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string consumer_strategy = 16;
  if (this->consumer_strategy().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumer_strategy());
  }

  // uint64 revision = 2 [deprecated = true];
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_revision());
  }

  // bool resolve_links = 1;
  if (this->resolve_links() != 0) {
    total_size += 1 + 1;
  }

  // bool extra_statistics = 3;
  if (this->extra_statistics() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_retry_count = 5;
  if (this->max_retry_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_retry_count());
  }

  // int32 min_checkpoint_count = 7;
  if (this->min_checkpoint_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_checkpoint_count());
  }

  // int32 max_checkpoint_count = 8;
  if (this->max_checkpoint_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_checkpoint_count());
  }

  // int32 max_subscriber_count = 9;
  if (this->max_subscriber_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_subscriber_count());
  }

  // int32 live_buffer_size = 10;
  if (this->live_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_live_buffer_size());
  }

  // int32 read_batch_size = 11;
  if (this->read_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_read_batch_size());
  }

  // int32 history_buffer_size = 12;
  if (this->history_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_history_buffer_size());
  }

  // .event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy named_consumer_strategy = 13 [deprecated = true];
  if (this->named_consumer_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_named_consumer_strategy());
  }

  switch (message_timeout_case()) {
    // int64 message_timeout_ticks = 4;
    case kMessageTimeoutTicks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_message_timeout_ticks());
      break;
    }
    // int32 message_timeout_ms = 14;
    case kMessageTimeoutMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_message_timeout_ms());
      break;
    }
    case MESSAGE_TIMEOUT_NOT_SET: {
      break;
    }
  }
  switch (checkpoint_after_case()) {
    // int64 checkpoint_after_ticks = 6;
    case kCheckpointAfterTicks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_checkpoint_after_ticks());
      break;
    }
    // int32 checkpoint_after_ms = 15;
    case kCheckpointAfterMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_checkpoint_after_ms());
      break;
    }
    case CHECKPOINT_AFTER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReq_Settings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReq_Settings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReq_Settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateReq.Settings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateReq.Settings)
    MergeFrom(*source);
  }
}

void CreateReq_Settings::MergeFrom(const CreateReq_Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consumer_strategy().size() > 0) {
    _internal_set_consumer_strategy(from._internal_consumer_strategy());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from.resolve_links() != 0) {
    _internal_set_resolve_links(from._internal_resolve_links());
  }
  if (from.extra_statistics() != 0) {
    _internal_set_extra_statistics(from._internal_extra_statistics());
  }
  if (from.max_retry_count() != 0) {
    _internal_set_max_retry_count(from._internal_max_retry_count());
  }
  if (from.min_checkpoint_count() != 0) {
    _internal_set_min_checkpoint_count(from._internal_min_checkpoint_count());
  }
  if (from.max_checkpoint_count() != 0) {
    _internal_set_max_checkpoint_count(from._internal_max_checkpoint_count());
  }
  if (from.max_subscriber_count() != 0) {
    _internal_set_max_subscriber_count(from._internal_max_subscriber_count());
  }
  if (from.live_buffer_size() != 0) {
    _internal_set_live_buffer_size(from._internal_live_buffer_size());
  }
  if (from.read_batch_size() != 0) {
    _internal_set_read_batch_size(from._internal_read_batch_size());
  }
  if (from.history_buffer_size() != 0) {
    _internal_set_history_buffer_size(from._internal_history_buffer_size());
  }
  if (from.named_consumer_strategy() != 0) {
    _internal_set_named_consumer_strategy(from._internal_named_consumer_strategy());
  }
  switch (from.message_timeout_case()) {
    case kMessageTimeoutTicks: {
      _internal_set_message_timeout_ticks(from._internal_message_timeout_ticks());
      break;
    }
    case kMessageTimeoutMs: {
      _internal_set_message_timeout_ms(from._internal_message_timeout_ms());
      break;
    }
    case MESSAGE_TIMEOUT_NOT_SET: {
      break;
    }
  }
  switch (from.checkpoint_after_case()) {
    case kCheckpointAfterTicks: {
      _internal_set_checkpoint_after_ticks(from._internal_checkpoint_after_ticks());
      break;
    }
    case kCheckpointAfterMs: {
      _internal_set_checkpoint_after_ms(from._internal_checkpoint_after_ms());
      break;
    }
    case CHECKPOINT_AFTER_NOT_SET: {
      break;
    }
  }
}

void CreateReq_Settings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq_Settings::CopyFrom(const CreateReq_Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateReq.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq_Settings::IsInitialized() const {
  return true;
}

void CreateReq_Settings::InternalSwap(CreateReq_Settings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  consumer_strategy_.Swap(&other->consumer_strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateReq_Settings, named_consumer_strategy_)
      + sizeof(CreateReq_Settings::named_consumer_strategy_)
      - PROTOBUF_FIELD_OFFSET(CreateReq_Settings, revision_)>(
          reinterpret_cast<char*>(&revision_),
          reinterpret_cast<char*>(&other->revision_));
  swap(message_timeout_, other->message_timeout_);
  swap(checkpoint_after_, other->checkpoint_after_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReq_Settings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateReq::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_CreateReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::persistent_subscriptions::CreateReq_Options*>(
      ::event_store::client::persistent_subscriptions::CreateReq_Options::internal_default_instance());
}
class CreateReq::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::CreateReq_Options& options(const CreateReq* msg);
};

const ::event_store::client::persistent_subscriptions::CreateReq_Options&
CreateReq::_Internal::options(const CreateReq* msg) {
  return *msg->options_;
}
CreateReq::CreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateReq)
}
CreateReq::CreateReq(const CreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::persistent_subscriptions::CreateReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateReq)
}

void CreateReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateReq_persistent_2eproto.base);
  options_ = nullptr;
}

CreateReq::~CreateReq() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void CreateReq::ArenaDtor(void* object) {
  CreateReq* _this = reinterpret_cast< CreateReq* >(object);
  (void)_this;
}
void CreateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateReq& CreateReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateReq_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.CreateReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.CreateReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateReq)
  return target;
}

size_t CreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.CreateReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateReq)
    MergeFrom(*source);
  }
}

void CreateReq::MergeFrom(const CreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::persistent_subscriptions::CreateReq_Options::MergeFrom(from._internal_options());
  }
}

void CreateReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateReq::CopyFrom(const CreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReq::IsInitialized() const {
  return true;
}

void CreateReq::InternalSwap(CreateReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateResp::InitAsDefaultInstance() {
}
class CreateResp::_Internal {
 public:
};

CreateResp::CreateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.CreateResp)
}
CreateResp::CreateResp(const CreateResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.CreateResp)
}

void CreateResp::SharedCtor() {
}

CreateResp::~CreateResp() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.CreateResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateResp::ArenaDtor(void* object) {
  CreateResp* _this = reinterpret_cast< CreateResp* >(object);
  (void)_this;
}
void CreateResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateResp& CreateResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateResp_persistent_2eproto.base);
  return *internal_default_instance();
}


void CreateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.CreateResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.CreateResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.CreateResp)
  return target;
}

size_t CreateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.CreateResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.CreateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.CreateResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.CreateResp)
    MergeFrom(*source);
  }
}

void CreateResp::MergeFrom(const CreateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.CreateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.CreateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResp::CopyFrom(const CreateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.CreateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResp::IsInitialized() const {
  return true;
}

void CreateResp::InternalSwap(CreateResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateReq_Options::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_UpdateReq_Options_default_instance_.stream_ = const_cast< ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions*>(
      ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_UpdateReq_Options_default_instance_.all_ = const_cast< ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions*>(
      ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_UpdateReq_Options_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_UpdateReq_Options_default_instance_._instance.get_mutable()->settings_ = const_cast< ::event_store::client::persistent_subscriptions::UpdateReq_Settings*>(
      ::event_store::client::persistent_subscriptions::UpdateReq_Settings::internal_default_instance());
}
class UpdateReq_Options::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions& stream(const UpdateReq_Options* msg);
  static const ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions& all(const UpdateReq_Options* msg);
  static const ::event_store::client::StreamIdentifier& stream_identifier(const UpdateReq_Options* msg);
  static const ::event_store::client::persistent_subscriptions::UpdateReq_Settings& settings(const UpdateReq_Options* msg);
};

const ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions&
UpdateReq_Options::_Internal::stream(const UpdateReq_Options* msg) {
  return *msg->stream_option_.stream_;
}
const ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions&
UpdateReq_Options::_Internal::all(const UpdateReq_Options* msg) {
  return *msg->stream_option_.all_;
}
const ::event_store::client::StreamIdentifier&
UpdateReq_Options::_Internal::stream_identifier(const UpdateReq_Options* msg) {
  return *msg->stream_identifier_;
}
const ::event_store::client::persistent_subscriptions::UpdateReq_Settings&
UpdateReq_Options::_Internal::settings(const UpdateReq_Options* msg) {
  return *msg->settings_;
}
void UpdateReq_Options::set_allocated_stream(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    stream_option_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.stream)
}
void UpdateReq_Options::set_allocated_all(::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(all);
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.all)
}
void UpdateReq_Options::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
UpdateReq_Options::UpdateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.UpdateReq.Options)
}
UpdateReq_Options::UpdateReq_Options(const UpdateReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_name(),
      GetArena());
  }
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  if (from._internal_has_settings()) {
    settings_ = new ::event_store::client::persistent_subscriptions::UpdateReq_Settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  clear_has_stream_option();
  switch (from.stream_option_case()) {
    case kStream: {
      _internal_mutable_stream()->::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions::MergeFrom(from._internal_stream());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::persistent_subscriptions::UpdateReq_AllOptions::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.UpdateReq.Options)
}

void UpdateReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateReq_Options_persistent_2eproto.base);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stream_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) -
      reinterpret_cast<char*>(&stream_identifier_)) + sizeof(settings_));
  clear_has_stream_option();
}

UpdateReq_Options::~UpdateReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.UpdateReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stream_identifier_;
  if (this != internal_default_instance()) delete settings_;
  if (has_stream_option()) {
    clear_stream_option();
  }
}

void UpdateReq_Options::ArenaDtor(void* object) {
  UpdateReq_Options* _this = reinterpret_cast< UpdateReq_Options* >(object);
  (void)_this;
}
void UpdateReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReq_Options& UpdateReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReq_Options_persistent_2eproto.base);
  return *internal_default_instance();
}


void UpdateReq_Options::clear_stream_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.UpdateReq.Options)
  switch (stream_option_case()) {
    case kStream: {
      if (GetArena() == nullptr) {
        delete stream_option_.stream_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete stream_option_.all_;
      }
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}


void UpdateReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.UpdateReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  clear_stream_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.UpdateReq.Options.group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.UpdateReq.Settings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.UpdateReq.StreamOptions stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.UpdateReq.AllOptions all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.UpdateReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.UpdateReq.Options.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // .event_store.client.persistent_subscriptions.UpdateReq.Settings settings = 3;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.UpdateReq.StreamOptions stream = 4;
  if (_internal_has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stream(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.UpdateReq.AllOptions all = 5;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::all(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.UpdateReq.Options)
  return target;
}

size_t UpdateReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.UpdateReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  // .event_store.client.persistent_subscriptions.UpdateReq.Settings settings = 3;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  switch (stream_option_case()) {
    // .event_store.client.persistent_subscriptions.UpdateReq.StreamOptions stream = 4;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.stream_);
      break;
    }
    // .event_store.client.persistent_subscriptions.UpdateReq.AllOptions all = 5;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.all_);
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.UpdateReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.UpdateReq.Options)
    MergeFrom(*source);
  }
}

void UpdateReq_Options::MergeFrom(const UpdateReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_name().size() > 0) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::event_store::client::persistent_subscriptions::UpdateReq_Settings::MergeFrom(from._internal_settings());
  }
  switch (from.stream_option_case()) {
    case kStream: {
      _internal_mutable_stream()->::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions::MergeFrom(from._internal_stream());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::persistent_subscriptions::UpdateReq_AllOptions::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
}

void UpdateReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReq_Options::CopyFrom(const UpdateReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReq_Options::IsInitialized() const {
  return true;
}

void UpdateReq_Options::InternalSwap(UpdateReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateReq_Options, settings_)
      + sizeof(UpdateReq_Options::settings_)
      - PROTOBUF_FIELD_OFFSET(UpdateReq_Options, stream_identifier_)>(
          reinterpret_cast<char*>(&stream_identifier_),
          reinterpret_cast<char*>(&other->stream_identifier_));
  swap(stream_option_, other->stream_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateReq_StreamOptions::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_UpdateReq_StreamOptions_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_UpdateReq_StreamOptions_default_instance_.revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::persistent_subscriptions::_UpdateReq_StreamOptions_default_instance_.start_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_UpdateReq_StreamOptions_default_instance_.end_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class UpdateReq_StreamOptions::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const UpdateReq_StreamOptions* msg);
  static const ::event_store::client::Empty& start(const UpdateReq_StreamOptions* msg);
  static const ::event_store::client::Empty& end(const UpdateReq_StreamOptions* msg);
};

const ::event_store::client::StreamIdentifier&
UpdateReq_StreamOptions::_Internal::stream_identifier(const UpdateReq_StreamOptions* msg) {
  return *msg->stream_identifier_;
}
const ::event_store::client::Empty&
UpdateReq_StreamOptions::_Internal::start(const UpdateReq_StreamOptions* msg) {
  return *msg->revision_option_.start_;
}
const ::event_store::client::Empty&
UpdateReq_StreamOptions::_Internal::end(const UpdateReq_StreamOptions* msg) {
  return *msg->revision_option_.end_;
}
void UpdateReq_StreamOptions::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
void UpdateReq_StreamOptions::set_allocated_start(::event_store::client::Empty* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_revision_option();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    revision_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.start)
}
void UpdateReq_StreamOptions::clear_start() {
  if (_internal_has_start()) {
    if (GetArena() == nullptr) {
      delete revision_option_.start_;
    }
    clear_has_revision_option();
  }
}
void UpdateReq_StreamOptions::set_allocated_end(::event_store::client::Empty* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_revision_option();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    revision_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.end)
}
void UpdateReq_StreamOptions::clear_end() {
  if (_internal_has_end()) {
    if (GetArena() == nullptr) {
      delete revision_option_.end_;
    }
    clear_has_revision_option();
  }
}
UpdateReq_StreamOptions::UpdateReq_StreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
}
UpdateReq_StreamOptions::UpdateReq_StreamOptions(const UpdateReq_StreamOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  clear_has_revision_option();
  switch (from.revision_option_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
}

void UpdateReq_StreamOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateReq_StreamOptions_persistent_2eproto.base);
  stream_identifier_ = nullptr;
  clear_has_revision_option();
}

UpdateReq_StreamOptions::~UpdateReq_StreamOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReq_StreamOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_identifier_;
  if (has_revision_option()) {
    clear_revision_option();
  }
}

void UpdateReq_StreamOptions::ArenaDtor(void* object) {
  UpdateReq_StreamOptions* _this = reinterpret_cast< UpdateReq_StreamOptions* >(object);
  (void)_this;
}
void UpdateReq_StreamOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReq_StreamOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReq_StreamOptions& UpdateReq_StreamOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReq_StreamOptions_persistent_2eproto.base);
  return *internal_default_instance();
}


void UpdateReq_StreamOptions::clear_revision_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  switch (revision_option_case()) {
    case kRevision: {
      // No need to clear
      break;
    }
    case kStart: {
      if (GetArena() == nullptr) {
        delete revision_option_.start_;
      }
      break;
    }
    case kEnd: {
      if (GetArena() == nullptr) {
        delete revision_option_.end_;
      }
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REVISION_OPTION_NOT_SET;
}


void UpdateReq_StreamOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  clear_revision_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReq_StreamOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReq_StreamOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 revision = 2;
  if (_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_revision(), target);
  }

  // .event_store.client.Empty start = 3;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start(this), target, stream);
  }

  // .event_store.client.Empty end = 4;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  return target;
}

size_t UpdateReq_StreamOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  switch (revision_option_case()) {
    // uint64 revision = 2;
    case kRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_revision());
      break;
    }
    // .event_store.client.Empty start = 3;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *revision_option_.start_);
      break;
    }
    // .event_store.client.Empty end = 4;
    case kEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *revision_option_.end_);
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReq_StreamOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReq_StreamOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReq_StreamOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
    MergeFrom(*source);
  }
}

void UpdateReq_StreamOptions::MergeFrom(const UpdateReq_StreamOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  switch (from.revision_option_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
}

void UpdateReq_StreamOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReq_StreamOptions::CopyFrom(const UpdateReq_StreamOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReq_StreamOptions::IsInitialized() const {
  return true;
}

void UpdateReq_StreamOptions::InternalSwap(UpdateReq_StreamOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_identifier_, other->stream_identifier_);
  swap(revision_option_, other->revision_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReq_StreamOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateReq_AllOptions::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_UpdateReq_AllOptions_default_instance_.position_ = const_cast< ::event_store::client::persistent_subscriptions::UpdateReq_Position*>(
      ::event_store::client::persistent_subscriptions::UpdateReq_Position::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_UpdateReq_AllOptions_default_instance_.start_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_UpdateReq_AllOptions_default_instance_.end_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class UpdateReq_AllOptions::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::UpdateReq_Position& position(const UpdateReq_AllOptions* msg);
  static const ::event_store::client::Empty& start(const UpdateReq_AllOptions* msg);
  static const ::event_store::client::Empty& end(const UpdateReq_AllOptions* msg);
};

const ::event_store::client::persistent_subscriptions::UpdateReq_Position&
UpdateReq_AllOptions::_Internal::position(const UpdateReq_AllOptions* msg) {
  return *msg->all_option_.position_;
}
const ::event_store::client::Empty&
UpdateReq_AllOptions::_Internal::start(const UpdateReq_AllOptions* msg) {
  return *msg->all_option_.start_;
}
const ::event_store::client::Empty&
UpdateReq_AllOptions::_Internal::end(const UpdateReq_AllOptions* msg) {
  return *msg->all_option_.end_;
}
void UpdateReq_AllOptions::set_allocated_position(::event_store::client::persistent_subscriptions::UpdateReq_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    all_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.position)
}
void UpdateReq_AllOptions::set_allocated_start(::event_store::client::Empty* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    all_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.start)
}
void UpdateReq_AllOptions::clear_start() {
  if (_internal_has_start()) {
    if (GetArena() == nullptr) {
      delete all_option_.start_;
    }
    clear_has_all_option();
  }
}
void UpdateReq_AllOptions::set_allocated_end(::event_store::client::Empty* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    all_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.end)
}
void UpdateReq_AllOptions::clear_end() {
  if (_internal_has_end()) {
    if (GetArena() == nullptr) {
      delete all_option_.end_;
    }
    clear_has_all_option();
  }
}
UpdateReq_AllOptions::UpdateReq_AllOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
}
UpdateReq_AllOptions::UpdateReq_AllOptions(const UpdateReq_AllOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_all_option();
  switch (from.all_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::persistent_subscriptions::UpdateReq_Position::MergeFrom(from._internal_position());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
}

void UpdateReq_AllOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateReq_AllOptions_persistent_2eproto.base);
  clear_has_all_option();
}

UpdateReq_AllOptions::~UpdateReq_AllOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReq_AllOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_all_option()) {
    clear_all_option();
  }
}

void UpdateReq_AllOptions::ArenaDtor(void* object) {
  UpdateReq_AllOptions* _this = reinterpret_cast< UpdateReq_AllOptions* >(object);
  (void)_this;
}
void UpdateReq_AllOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReq_AllOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReq_AllOptions& UpdateReq_AllOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReq_AllOptions_persistent_2eproto.base);
  return *internal_default_instance();
}


void UpdateReq_AllOptions::clear_all_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  switch (all_option_case()) {
    case kPosition: {
      if (GetArena() == nullptr) {
        delete all_option_.position_;
      }
      break;
    }
    case kStart: {
      if (GetArena() == nullptr) {
        delete all_option_.start_;
      }
      break;
    }
    case kEnd: {
      if (GetArena() == nullptr) {
        delete all_option_.end_;
      }
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ALL_OPTION_NOT_SET;
}


void UpdateReq_AllOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_all_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReq_AllOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.UpdateReq.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReq_AllOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.UpdateReq.Position position = 1;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .event_store.client.Empty start = 2;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .event_store.client.Empty end = 3;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  return target;
}

size_t UpdateReq_AllOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (all_option_case()) {
    // .event_store.client.persistent_subscriptions.UpdateReq.Position position = 1;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.position_);
      break;
    }
    // .event_store.client.Empty start = 2;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.start_);
      break;
    }
    // .event_store.client.Empty end = 3;
    case kEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.end_);
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReq_AllOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReq_AllOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReq_AllOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
    MergeFrom(*source);
  }
}

void UpdateReq_AllOptions::MergeFrom(const UpdateReq_AllOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.all_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::persistent_subscriptions::UpdateReq_Position::MergeFrom(from._internal_position());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
}

void UpdateReq_AllOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReq_AllOptions::CopyFrom(const UpdateReq_AllOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReq_AllOptions::IsInitialized() const {
  return true;
}

void UpdateReq_AllOptions::InternalSwap(UpdateReq_AllOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(all_option_, other->all_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReq_AllOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateReq_Position::InitAsDefaultInstance() {
}
class UpdateReq_Position::_Internal {
 public:
};

UpdateReq_Position::UpdateReq_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.UpdateReq.Position)
}
UpdateReq_Position::UpdateReq_Position(const UpdateReq_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_position_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.UpdateReq.Position)
}

void UpdateReq_Position::SharedCtor() {
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
}

UpdateReq_Position::~UpdateReq_Position() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.UpdateReq.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReq_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateReq_Position::ArenaDtor(void* object) {
  UpdateReq_Position* _this = reinterpret_cast< UpdateReq_Position* >(object);
  (void)_this;
}
void UpdateReq_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReq_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReq_Position& UpdateReq_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReq_Position_persistent_2eproto.base);
  return *internal_default_instance();
}


void UpdateReq_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.UpdateReq.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReq_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReq_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.UpdateReq.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_commit_position(), target);
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prepare_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.UpdateReq.Position)
  return target;
}

size_t UpdateReq_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.UpdateReq.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReq_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReq_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReq_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.UpdateReq.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.UpdateReq.Position)
    MergeFrom(*source);
  }
}

void UpdateReq_Position::MergeFrom(const UpdateReq_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
}

void UpdateReq_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReq_Position::CopyFrom(const UpdateReq_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReq_Position::IsInitialized() const {
  return true;
}

void UpdateReq_Position::InternalSwap(UpdateReq_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateReq_Position, prepare_position_)
      + sizeof(UpdateReq_Position::prepare_position_)
      - PROTOBUF_FIELD_OFFSET(UpdateReq_Position, commit_position_)>(
          reinterpret_cast<char*>(&commit_position_),
          reinterpret_cast<char*>(&other->commit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReq_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateReq_Settings::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_UpdateReq_Settings_default_instance_.message_timeout_ticks_ = PROTOBUF_LONGLONG(0);
  ::event_store::client::persistent_subscriptions::_UpdateReq_Settings_default_instance_.message_timeout_ms_ = 0;
  ::event_store::client::persistent_subscriptions::_UpdateReq_Settings_default_instance_.checkpoint_after_ticks_ = PROTOBUF_LONGLONG(0);
  ::event_store::client::persistent_subscriptions::_UpdateReq_Settings_default_instance_.checkpoint_after_ms_ = 0;
}
class UpdateReq_Settings::_Internal {
 public:
};

UpdateReq_Settings::UpdateReq_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.UpdateReq.Settings)
}
UpdateReq_Settings::UpdateReq_Settings(const UpdateReq_Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&named_consumer_strategy_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(named_consumer_strategy_));
  clear_has_message_timeout();
  switch (from.message_timeout_case()) {
    case kMessageTimeoutTicks: {
      _internal_set_message_timeout_ticks(from._internal_message_timeout_ticks());
      break;
    }
    case kMessageTimeoutMs: {
      _internal_set_message_timeout_ms(from._internal_message_timeout_ms());
      break;
    }
    case MESSAGE_TIMEOUT_NOT_SET: {
      break;
    }
  }
  clear_has_checkpoint_after();
  switch (from.checkpoint_after_case()) {
    case kCheckpointAfterTicks: {
      _internal_set_checkpoint_after_ticks(from._internal_checkpoint_after_ticks());
      break;
    }
    case kCheckpointAfterMs: {
      _internal_set_checkpoint_after_ms(from._internal_checkpoint_after_ms());
      break;
    }
    case CHECKPOINT_AFTER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.UpdateReq.Settings)
}

void UpdateReq_Settings::SharedCtor() {
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&named_consumer_strategy_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(named_consumer_strategy_));
  clear_has_message_timeout();
  clear_has_checkpoint_after();
}

UpdateReq_Settings::~UpdateReq_Settings() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReq_Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_message_timeout()) {
    clear_message_timeout();
  }
  if (has_checkpoint_after()) {
    clear_checkpoint_after();
  }
}

void UpdateReq_Settings::ArenaDtor(void* object) {
  UpdateReq_Settings* _this = reinterpret_cast< UpdateReq_Settings* >(object);
  (void)_this;
}
void UpdateReq_Settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReq_Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReq_Settings& UpdateReq_Settings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReq_Settings_persistent_2eproto.base);
  return *internal_default_instance();
}


void UpdateReq_Settings::clear_message_timeout() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  switch (message_timeout_case()) {
    case kMessageTimeoutTicks: {
      // No need to clear
      break;
    }
    case kMessageTimeoutMs: {
      // No need to clear
      break;
    }
    case MESSAGE_TIMEOUT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_TIMEOUT_NOT_SET;
}

void UpdateReq_Settings::clear_checkpoint_after() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  switch (checkpoint_after_case()) {
    case kCheckpointAfterTicks: {
      // No need to clear
      break;
    }
    case kCheckpointAfterMs: {
      // No need to clear
      break;
    }
    case CHECKPOINT_AFTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CHECKPOINT_AFTER_NOT_SET;
}


void UpdateReq_Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&named_consumer_strategy_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(named_consumer_strategy_));
  clear_message_timeout();
  clear_checkpoint_after();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReq_Settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool resolve_links = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resolve_links_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revision = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool extra_statistics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          extra_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 message_timeout_ticks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_retry_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 checkpoint_after_ticks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_checkpoint_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          min_checkpoint_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_checkpoint_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_checkpoint_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_subscriber_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_subscriber_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 live_buffer_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          live_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 read_batch_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          read_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 history_buffer_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          history_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy named_consumer_strategy = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_named_consumer_strategy(static_cast<::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy>(val));
        } else goto handle_unusual;
        continue;
      // int32 message_timeout_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 checkpoint_after_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReq_Settings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool resolve_links = 1;
  if (this->resolve_links() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_resolve_links(), target);
  }

  // uint64 revision = 2 [deprecated = true];
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_revision(), target);
  }

  // bool extra_statistics = 3;
  if (this->extra_statistics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_extra_statistics(), target);
  }

  // int64 message_timeout_ticks = 4;
  if (_internal_has_message_timeout_ticks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_message_timeout_ticks(), target);
  }

  // int32 max_retry_count = 5;
  if (this->max_retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_retry_count(), target);
  }

  // int64 checkpoint_after_ticks = 6;
  if (_internal_has_checkpoint_after_ticks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_checkpoint_after_ticks(), target);
  }

  // int32 min_checkpoint_count = 7;
  if (this->min_checkpoint_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_min_checkpoint_count(), target);
  }

  // int32 max_checkpoint_count = 8;
  if (this->max_checkpoint_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_checkpoint_count(), target);
  }

  // int32 max_subscriber_count = 9;
  if (this->max_subscriber_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_subscriber_count(), target);
  }

  // int32 live_buffer_size = 10;
  if (this->live_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_live_buffer_size(), target);
  }

  // int32 read_batch_size = 11;
  if (this->read_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_read_batch_size(), target);
  }

  // int32 history_buffer_size = 12;
  if (this->history_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_history_buffer_size(), target);
  }

  // .event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy named_consumer_strategy = 13;
  if (this->named_consumer_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_named_consumer_strategy(), target);
  }

  // int32 message_timeout_ms = 14;
  if (_internal_has_message_timeout_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_message_timeout_ms(), target);
  }

  // int32 checkpoint_after_ms = 15;
  if (_internal_has_checkpoint_after_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_checkpoint_after_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  return target;
}

size_t UpdateReq_Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 revision = 2 [deprecated = true];
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_revision());
  }

  // bool resolve_links = 1;
  if (this->resolve_links() != 0) {
    total_size += 1 + 1;
  }

  // bool extra_statistics = 3;
  if (this->extra_statistics() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_retry_count = 5;
  if (this->max_retry_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_retry_count());
  }

  // int32 min_checkpoint_count = 7;
  if (this->min_checkpoint_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_checkpoint_count());
  }

  // int32 max_checkpoint_count = 8;
  if (this->max_checkpoint_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_checkpoint_count());
  }

  // int32 max_subscriber_count = 9;
  if (this->max_subscriber_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_subscriber_count());
  }

  // int32 live_buffer_size = 10;
  if (this->live_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_live_buffer_size());
  }

  // int32 read_batch_size = 11;
  if (this->read_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_read_batch_size());
  }

  // int32 history_buffer_size = 12;
  if (this->history_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_history_buffer_size());
  }

  // .event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy named_consumer_strategy = 13;
  if (this->named_consumer_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_named_consumer_strategy());
  }

  switch (message_timeout_case()) {
    // int64 message_timeout_ticks = 4;
    case kMessageTimeoutTicks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_message_timeout_ticks());
      break;
    }
    // int32 message_timeout_ms = 14;
    case kMessageTimeoutMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_message_timeout_ms());
      break;
    }
    case MESSAGE_TIMEOUT_NOT_SET: {
      break;
    }
  }
  switch (checkpoint_after_case()) {
    // int64 checkpoint_after_ticks = 6;
    case kCheckpointAfterTicks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_checkpoint_after_ticks());
      break;
    }
    // int32 checkpoint_after_ms = 15;
    case kCheckpointAfterMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_checkpoint_after_ms());
      break;
    }
    case CHECKPOINT_AFTER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReq_Settings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReq_Settings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReq_Settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.UpdateReq.Settings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.UpdateReq.Settings)
    MergeFrom(*source);
  }
}

void UpdateReq_Settings::MergeFrom(const UpdateReq_Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from.resolve_links() != 0) {
    _internal_set_resolve_links(from._internal_resolve_links());
  }
  if (from.extra_statistics() != 0) {
    _internal_set_extra_statistics(from._internal_extra_statistics());
  }
  if (from.max_retry_count() != 0) {
    _internal_set_max_retry_count(from._internal_max_retry_count());
  }
  if (from.min_checkpoint_count() != 0) {
    _internal_set_min_checkpoint_count(from._internal_min_checkpoint_count());
  }
  if (from.max_checkpoint_count() != 0) {
    _internal_set_max_checkpoint_count(from._internal_max_checkpoint_count());
  }
  if (from.max_subscriber_count() != 0) {
    _internal_set_max_subscriber_count(from._internal_max_subscriber_count());
  }
  if (from.live_buffer_size() != 0) {
    _internal_set_live_buffer_size(from._internal_live_buffer_size());
  }
  if (from.read_batch_size() != 0) {
    _internal_set_read_batch_size(from._internal_read_batch_size());
  }
  if (from.history_buffer_size() != 0) {
    _internal_set_history_buffer_size(from._internal_history_buffer_size());
  }
  if (from.named_consumer_strategy() != 0) {
    _internal_set_named_consumer_strategy(from._internal_named_consumer_strategy());
  }
  switch (from.message_timeout_case()) {
    case kMessageTimeoutTicks: {
      _internal_set_message_timeout_ticks(from._internal_message_timeout_ticks());
      break;
    }
    case kMessageTimeoutMs: {
      _internal_set_message_timeout_ms(from._internal_message_timeout_ms());
      break;
    }
    case MESSAGE_TIMEOUT_NOT_SET: {
      break;
    }
  }
  switch (from.checkpoint_after_case()) {
    case kCheckpointAfterTicks: {
      _internal_set_checkpoint_after_ticks(from._internal_checkpoint_after_ticks());
      break;
    }
    case kCheckpointAfterMs: {
      _internal_set_checkpoint_after_ms(from._internal_checkpoint_after_ms());
      break;
    }
    case CHECKPOINT_AFTER_NOT_SET: {
      break;
    }
  }
}

void UpdateReq_Settings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReq_Settings::CopyFrom(const UpdateReq_Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReq_Settings::IsInitialized() const {
  return true;
}

void UpdateReq_Settings::InternalSwap(UpdateReq_Settings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateReq_Settings, named_consumer_strategy_)
      + sizeof(UpdateReq_Settings::named_consumer_strategy_)
      - PROTOBUF_FIELD_OFFSET(UpdateReq_Settings, revision_)>(
          reinterpret_cast<char*>(&revision_),
          reinterpret_cast<char*>(&other->revision_));
  swap(message_timeout_, other->message_timeout_);
  swap(checkpoint_after_, other->checkpoint_after_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReq_Settings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateReq::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_UpdateReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::persistent_subscriptions::UpdateReq_Options*>(
      ::event_store::client::persistent_subscriptions::UpdateReq_Options::internal_default_instance());
}
class UpdateReq::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::UpdateReq_Options& options(const UpdateReq* msg);
};

const ::event_store::client::persistent_subscriptions::UpdateReq_Options&
UpdateReq::_Internal::options(const UpdateReq* msg) {
  return *msg->options_;
}
UpdateReq::UpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.UpdateReq)
}
UpdateReq::UpdateReq(const UpdateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::persistent_subscriptions::UpdateReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.UpdateReq)
}

void UpdateReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateReq_persistent_2eproto.base);
  options_ = nullptr;
}

UpdateReq::~UpdateReq() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.UpdateReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void UpdateReq::ArenaDtor(void* object) {
  UpdateReq* _this = reinterpret_cast< UpdateReq* >(object);
  (void)_this;
}
void UpdateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateReq& UpdateReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateReq_persistent_2eproto.base);
  return *internal_default_instance();
}


void UpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.UpdateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.UpdateReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.UpdateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.UpdateReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.UpdateReq)
  return target;
}

size_t UpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.UpdateReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.UpdateReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.UpdateReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.UpdateReq)
    MergeFrom(*source);
  }
}

void UpdateReq::MergeFrom(const UpdateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.UpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::persistent_subscriptions::UpdateReq_Options::MergeFrom(from._internal_options());
  }
}

void UpdateReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReq::CopyFrom(const UpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.UpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReq::IsInitialized() const {
  return true;
}

void UpdateReq::InternalSwap(UpdateReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateResp::InitAsDefaultInstance() {
}
class UpdateResp::_Internal {
 public:
};

UpdateResp::UpdateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.UpdateResp)
}
UpdateResp::UpdateResp(const UpdateResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.UpdateResp)
}

void UpdateResp::SharedCtor() {
}

UpdateResp::~UpdateResp() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.UpdateResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateResp::ArenaDtor(void* object) {
  UpdateResp* _this = reinterpret_cast< UpdateResp* >(object);
  (void)_this;
}
void UpdateResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateResp& UpdateResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateResp_persistent_2eproto.base);
  return *internal_default_instance();
}


void UpdateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.UpdateResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.UpdateResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.UpdateResp)
  return target;
}

size_t UpdateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.UpdateResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.UpdateResp)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.UpdateResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.UpdateResp)
    MergeFrom(*source);
  }
}

void UpdateResp::MergeFrom(const UpdateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.UpdateResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.UpdateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResp::CopyFrom(const UpdateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.UpdateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResp::IsInitialized() const {
  return true;
}

void UpdateResp::InternalSwap(UpdateResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteReq_Options::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_DeleteReq_Options_default_instance_.stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_DeleteReq_Options_default_instance_.all_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class DeleteReq_Options::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const DeleteReq_Options* msg);
  static const ::event_store::client::Empty& all(const DeleteReq_Options* msg);
};

const ::event_store::client::StreamIdentifier&
DeleteReq_Options::_Internal::stream_identifier(const DeleteReq_Options* msg) {
  return *msg->stream_option_.stream_identifier_;
}
const ::event_store::client::Empty&
DeleteReq_Options::_Internal::all(const DeleteReq_Options* msg) {
  return *msg->stream_option_.all_;
}
void DeleteReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.DeleteReq.Options.stream_identifier)
}
void DeleteReq_Options::clear_stream_identifier() {
  if (_internal_has_stream_identifier()) {
    if (GetArena() == nullptr) {
      delete stream_option_.stream_identifier_;
    }
    clear_has_stream_option();
  }
}
void DeleteReq_Options::set_allocated_all(::event_store::client::Empty* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all)->GetArena();
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.DeleteReq.Options.all)
}
void DeleteReq_Options::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete stream_option_.all_;
    }
    clear_has_stream_option();
  }
}
DeleteReq_Options::DeleteReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.DeleteReq.Options)
}
DeleteReq_Options::DeleteReq_Options(const DeleteReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_name(),
      GetArena());
  }
  clear_has_stream_option();
  switch (from.stream_option_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.DeleteReq.Options)
}

void DeleteReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteReq_Options_persistent_2eproto.base);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_option();
}

DeleteReq_Options::~DeleteReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.DeleteReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_stream_option()) {
    clear_stream_option();
  }
}

void DeleteReq_Options::ArenaDtor(void* object) {
  DeleteReq_Options* _this = reinterpret_cast< DeleteReq_Options* >(object);
  (void)_this;
}
void DeleteReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteReq_Options& DeleteReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteReq_Options_persistent_2eproto.base);
  return *internal_default_instance();
}


void DeleteReq_Options::clear_stream_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.DeleteReq.Options)
  switch (stream_option_case()) {
    case kStreamIdentifier: {
      if (GetArena() == nullptr) {
        delete stream_option_.stream_identifier_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete stream_option_.all_;
      }
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}


void DeleteReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.DeleteReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_stream_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.DeleteReq.Options.group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.DeleteReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (_internal_has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.DeleteReq.Options.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // .event_store.client.Empty all = 3;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::all(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.DeleteReq.Options)
  return target;
}

size_t DeleteReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.DeleteReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  switch (stream_option_case()) {
    // .event_store.client.StreamIdentifier stream_identifier = 1;
    case kStreamIdentifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.stream_identifier_);
      break;
    }
    // .event_store.client.Empty all = 3;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.all_);
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.DeleteReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.DeleteReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.DeleteReq.Options)
    MergeFrom(*source);
  }
}

void DeleteReq_Options::MergeFrom(const DeleteReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.DeleteReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_name().size() > 0) {
    _internal_set_group_name(from._internal_group_name());
  }
  switch (from.stream_option_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
}

void DeleteReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.DeleteReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReq_Options::CopyFrom(const DeleteReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.DeleteReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReq_Options::IsInitialized() const {
  return true;
}

void DeleteReq_Options::InternalSwap(DeleteReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stream_option_, other->stream_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteReq::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_DeleteReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::persistent_subscriptions::DeleteReq_Options*>(
      ::event_store::client::persistent_subscriptions::DeleteReq_Options::internal_default_instance());
}
class DeleteReq::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::DeleteReq_Options& options(const DeleteReq* msg);
};

const ::event_store::client::persistent_subscriptions::DeleteReq_Options&
DeleteReq::_Internal::options(const DeleteReq* msg) {
  return *msg->options_;
}
DeleteReq::DeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.DeleteReq)
}
DeleteReq::DeleteReq(const DeleteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::persistent_subscriptions::DeleteReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.DeleteReq)
}

void DeleteReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteReq_persistent_2eproto.base);
  options_ = nullptr;
}

DeleteReq::~DeleteReq() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.DeleteReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void DeleteReq::ArenaDtor(void* object) {
  DeleteReq* _this = reinterpret_cast< DeleteReq* >(object);
  (void)_this;
}
void DeleteReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteReq& DeleteReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteReq_persistent_2eproto.base);
  return *internal_default_instance();
}


void DeleteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.DeleteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.DeleteReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.DeleteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.DeleteReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.DeleteReq)
  return target;
}

size_t DeleteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.DeleteReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.DeleteReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.DeleteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.DeleteReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.DeleteReq)
    MergeFrom(*source);
  }
}

void DeleteReq::MergeFrom(const DeleteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.DeleteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::persistent_subscriptions::DeleteReq_Options::MergeFrom(from._internal_options());
  }
}

void DeleteReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.DeleteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReq::CopyFrom(const DeleteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.DeleteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReq::IsInitialized() const {
  return true;
}

void DeleteReq::InternalSwap(DeleteReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteResp::InitAsDefaultInstance() {
}
class DeleteResp::_Internal {
 public:
};

DeleteResp::DeleteResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.DeleteResp)
}
DeleteResp::DeleteResp(const DeleteResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.DeleteResp)
}

void DeleteResp::SharedCtor() {
}

DeleteResp::~DeleteResp() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.DeleteResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteResp::ArenaDtor(void* object) {
  DeleteResp* _this = reinterpret_cast< DeleteResp* >(object);
  (void)_this;
}
void DeleteResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResp& DeleteResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResp_persistent_2eproto.base);
  return *internal_default_instance();
}


void DeleteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.DeleteResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.DeleteResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.DeleteResp)
  return target;
}

size_t DeleteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.DeleteResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.DeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.DeleteResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.DeleteResp)
    MergeFrom(*source);
  }
}

void DeleteResp::MergeFrom(const DeleteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.DeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.DeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResp::CopyFrom(const DeleteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.DeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResp::IsInitialized() const {
  return true;
}

void DeleteResp::InternalSwap(DeleteResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoReq_Options::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_GetInfoReq_Options_default_instance_.stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_GetInfoReq_Options_default_instance_.all_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class GetInfoReq_Options::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const GetInfoReq_Options* msg);
  static const ::event_store::client::Empty& all(const GetInfoReq_Options* msg);
};

const ::event_store::client::StreamIdentifier&
GetInfoReq_Options::_Internal::stream_identifier(const GetInfoReq_Options* msg) {
  return *msg->stream_option_.stream_identifier_;
}
const ::event_store::client::Empty&
GetInfoReq_Options::_Internal::all(const GetInfoReq_Options* msg) {
  return *msg->stream_option_.all_;
}
void GetInfoReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.GetInfoReq.Options.stream_identifier)
}
void GetInfoReq_Options::clear_stream_identifier() {
  if (_internal_has_stream_identifier()) {
    if (GetArena() == nullptr) {
      delete stream_option_.stream_identifier_;
    }
    clear_has_stream_option();
  }
}
void GetInfoReq_Options::set_allocated_all(::event_store::client::Empty* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all)->GetArena();
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.GetInfoReq.Options.all)
}
void GetInfoReq_Options::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete stream_option_.all_;
    }
    clear_has_stream_option();
  }
}
GetInfoReq_Options::GetInfoReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.GetInfoReq.Options)
}
GetInfoReq_Options::GetInfoReq_Options(const GetInfoReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_name(),
      GetArena());
  }
  clear_has_stream_option();
  switch (from.stream_option_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.GetInfoReq.Options)
}

void GetInfoReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInfoReq_Options_persistent_2eproto.base);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_option();
}

GetInfoReq_Options::~GetInfoReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInfoReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_stream_option()) {
    clear_stream_option();
  }
}

void GetInfoReq_Options::ArenaDtor(void* object) {
  GetInfoReq_Options* _this = reinterpret_cast< GetInfoReq_Options* >(object);
  (void)_this;
}
void GetInfoReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInfoReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoReq_Options& GetInfoReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoReq_Options_persistent_2eproto.base);
  return *internal_default_instance();
}


void GetInfoReq_Options::clear_stream_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  switch (stream_option_case()) {
    case kStreamIdentifier: {
      if (GetArena() == nullptr) {
        delete stream_option_.stream_identifier_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete stream_option_.all_;
      }
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}


void GetInfoReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_stream_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInfoReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (_internal_has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // .event_store.client.Empty all = 2;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::all(this), target, stream);
  }

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  return target;
}

size_t GetInfoReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  switch (stream_option_case()) {
    // .event_store.client.StreamIdentifier stream_identifier = 1;
    case kStreamIdentifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.stream_identifier_);
      break;
    }
    // .event_store.client.Empty all = 2;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.all_);
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.GetInfoReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.GetInfoReq.Options)
    MergeFrom(*source);
  }
}

void GetInfoReq_Options::MergeFrom(const GetInfoReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_name().size() > 0) {
    _internal_set_group_name(from._internal_group_name());
  }
  switch (from.stream_option_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
}

void GetInfoReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoReq_Options::CopyFrom(const GetInfoReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.GetInfoReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoReq_Options::IsInitialized() const {
  return true;
}

void GetInfoReq_Options::InternalSwap(GetInfoReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stream_option_, other->stream_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoReq::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_GetInfoReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::persistent_subscriptions::GetInfoReq_Options*>(
      ::event_store::client::persistent_subscriptions::GetInfoReq_Options::internal_default_instance());
}
class GetInfoReq::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::GetInfoReq_Options& options(const GetInfoReq* msg);
};

const ::event_store::client::persistent_subscriptions::GetInfoReq_Options&
GetInfoReq::_Internal::options(const GetInfoReq* msg) {
  return *msg->options_;
}
GetInfoReq::GetInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.GetInfoReq)
}
GetInfoReq::GetInfoReq(const GetInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::persistent_subscriptions::GetInfoReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.GetInfoReq)
}

void GetInfoReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInfoReq_persistent_2eproto.base);
  options_ = nullptr;
}

GetInfoReq::~GetInfoReq() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.GetInfoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void GetInfoReq::ArenaDtor(void* object) {
  GetInfoReq* _this = reinterpret_cast< GetInfoReq* >(object);
  (void)_this;
}
void GetInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoReq& GetInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoReq_persistent_2eproto.base);
  return *internal_default_instance();
}


void GetInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.GetInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.GetInfoReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.GetInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.GetInfoReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.GetInfoReq)
  return target;
}

size_t GetInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.GetInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.GetInfoReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.GetInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.GetInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.GetInfoReq)
    MergeFrom(*source);
  }
}

void GetInfoReq::MergeFrom(const GetInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.GetInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::persistent_subscriptions::GetInfoReq_Options::MergeFrom(from._internal_options());
  }
}

void GetInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.GetInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoReq::CopyFrom(const GetInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.GetInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoReq::IsInitialized() const {
  return true;
}

void GetInfoReq::InternalSwap(GetInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoResp::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_GetInfoResp_default_instance_._instance.get_mutable()->subscription_info_ = const_cast< ::event_store::client::persistent_subscriptions::SubscriptionInfo*>(
      ::event_store::client::persistent_subscriptions::SubscriptionInfo::internal_default_instance());
}
class GetInfoResp::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::SubscriptionInfo& subscription_info(const GetInfoResp* msg);
};

const ::event_store::client::persistent_subscriptions::SubscriptionInfo&
GetInfoResp::_Internal::subscription_info(const GetInfoResp* msg) {
  return *msg->subscription_info_;
}
GetInfoResp::GetInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.GetInfoResp)
}
GetInfoResp::GetInfoResp(const GetInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subscription_info()) {
    subscription_info_ = new ::event_store::client::persistent_subscriptions::SubscriptionInfo(*from.subscription_info_);
  } else {
    subscription_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.GetInfoResp)
}

void GetInfoResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInfoResp_persistent_2eproto.base);
  subscription_info_ = nullptr;
}

GetInfoResp::~GetInfoResp() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.GetInfoResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInfoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete subscription_info_;
}

void GetInfoResp::ArenaDtor(void* object) {
  GetInfoResp* _this = reinterpret_cast< GetInfoResp* >(object);
  (void)_this;
}
void GetInfoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInfoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoResp& GetInfoResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoResp_persistent_2eproto.base);
  return *internal_default_instance();
}


void GetInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.GetInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && subscription_info_ != nullptr) {
    delete subscription_info_;
  }
  subscription_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInfoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.SubscriptionInfo subscription_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.GetInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.SubscriptionInfo subscription_info = 1;
  if (this->has_subscription_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subscription_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.GetInfoResp)
  return target;
}

size_t GetInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.GetInfoResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.SubscriptionInfo subscription_info = 1;
  if (this->has_subscription_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscription_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.GetInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.GetInfoResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.GetInfoResp)
    MergeFrom(*source);
  }
}

void GetInfoResp::MergeFrom(const GetInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.GetInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscription_info()) {
    _internal_mutable_subscription_info()->::event_store::client::persistent_subscriptions::SubscriptionInfo::MergeFrom(from._internal_subscription_info());
  }
}

void GetInfoResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.GetInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResp::CopyFrom(const GetInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.GetInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResp::IsInitialized() const {
  return true;
}

void GetInfoResp::InternalSwap(GetInfoResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(subscription_info_, other->subscription_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionInfo_ConnectionInfo::InitAsDefaultInstance() {
}
class SubscriptionInfo_ConnectionInfo::_Internal {
 public:
};

SubscriptionInfo_ConnectionInfo::SubscriptionInfo_ConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  observed_measurements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
}
SubscriptionInfo_ConnectionInfo::SubscriptionInfo_ConnectionInfo(const SubscriptionInfo_ConnectionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      observed_measurements_(from.observed_measurements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  connection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connection_name().empty()) {
    connection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_connection_name(),
      GetArena());
  }
  ::memcpy(&total_items_, &from.total_items_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_flight_messages_) -
    reinterpret_cast<char*>(&total_items_)) + sizeof(in_flight_messages_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
}

void SubscriptionInfo_ConnectionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionInfo_ConnectionInfo_persistent_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_flight_messages_) -
      reinterpret_cast<char*>(&total_items_)) + sizeof(in_flight_messages_));
}

SubscriptionInfo_ConnectionInfo::~SubscriptionInfo_ConnectionInfo() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscriptionInfo_ConnectionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connection_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscriptionInfo_ConnectionInfo::ArenaDtor(void* object) {
  SubscriptionInfo_ConnectionInfo* _this = reinterpret_cast< SubscriptionInfo_ConnectionInfo* >(object);
  (void)_this;
}
void SubscriptionInfo_ConnectionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionInfo_ConnectionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionInfo_ConnectionInfo& SubscriptionInfo_ConnectionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionInfo_ConnectionInfo_persistent_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionInfo_ConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observed_measurements_.Clear();
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&total_items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_flight_messages_) -
      reinterpret_cast<char*>(&total_items_)) + sizeof(in_flight_messages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionInfo_ConnectionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 average_items_per_second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          average_items_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count_since_last_measurement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_since_last_measurement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement observed_measurements = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observed_measurements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 available_slots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          available_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 in_flight_messages = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          in_flight_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string connection_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_connection_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionInfo_ConnectionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // int32 average_items_per_second = 3;
  if (this->average_items_per_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_average_items_per_second(), target);
  }

  // int64 total_items = 4;
  if (this->total_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_items(), target);
  }

  // int64 count_since_last_measurement = 5;
  if (this->count_since_last_measurement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_count_since_last_measurement(), target);
  }

  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement observed_measurements = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_observed_measurements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_observed_measurements(i), target, stream);
  }

  // int32 available_slots = 7;
  if (this->available_slots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_available_slots(), target);
  }

  // int32 in_flight_messages = 8;
  if (this->in_flight_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_in_flight_messages(), target);
  }

  // string connection_name = 9;
  if (this->connection_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_name().data(), static_cast<int>(this->_internal_connection_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_connection_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  return target;
}

size_t SubscriptionInfo_ConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement observed_measurements = 6;
  total_size += 1UL * this->_internal_observed_measurements_size();
  for (const auto& msg : this->observed_measurements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string connection_name = 9;
  if (this->connection_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connection_name());
  }

  // int64 total_items = 4;
  if (this->total_items() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_items());
  }

  // int64 count_since_last_measurement = 5;
  if (this->count_since_last_measurement() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count_since_last_measurement());
  }

  // int32 average_items_per_second = 3;
  if (this->average_items_per_second() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_items_per_second());
  }

  // int32 available_slots = 7;
  if (this->available_slots() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_available_slots());
  }

  // int32 in_flight_messages = 8;
  if (this->in_flight_messages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_in_flight_messages());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionInfo_ConnectionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionInfo_ConnectionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionInfo_ConnectionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
    MergeFrom(*source);
  }
}

void SubscriptionInfo_ConnectionInfo::MergeFrom(const SubscriptionInfo_ConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observed_measurements_.MergeFrom(from.observed_measurements_);
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.connection_name().size() > 0) {
    _internal_set_connection_name(from._internal_connection_name());
  }
  if (from.total_items() != 0) {
    _internal_set_total_items(from._internal_total_items());
  }
  if (from.count_since_last_measurement() != 0) {
    _internal_set_count_since_last_measurement(from._internal_count_since_last_measurement());
  }
  if (from.average_items_per_second() != 0) {
    _internal_set_average_items_per_second(from._internal_average_items_per_second());
  }
  if (from.available_slots() != 0) {
    _internal_set_available_slots(from._internal_available_slots());
  }
  if (from.in_flight_messages() != 0) {
    _internal_set_in_flight_messages(from._internal_in_flight_messages());
  }
}

void SubscriptionInfo_ConnectionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionInfo_ConnectionInfo::CopyFrom(const SubscriptionInfo_ConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionInfo_ConnectionInfo::IsInitialized() const {
  return true;
}

void SubscriptionInfo_ConnectionInfo::InternalSwap(SubscriptionInfo_ConnectionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  observed_measurements_.InternalSwap(&other->observed_measurements_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connection_name_.Swap(&other->connection_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionInfo_ConnectionInfo, in_flight_messages_)
      + sizeof(SubscriptionInfo_ConnectionInfo::in_flight_messages_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionInfo_ConnectionInfo, total_items_)>(
          reinterpret_cast<char*>(&total_items_),
          reinterpret_cast<char*>(&other->total_items_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionInfo_ConnectionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionInfo_Measurement::InitAsDefaultInstance() {
}
class SubscriptionInfo_Measurement::_Internal {
 public:
};

SubscriptionInfo_Measurement::SubscriptionInfo_Measurement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
}
SubscriptionInfo_Measurement::SubscriptionInfo_Measurement(const SubscriptionInfo_Measurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
}

void SubscriptionInfo_Measurement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionInfo_Measurement_persistent_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
}

SubscriptionInfo_Measurement::~SubscriptionInfo_Measurement() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscriptionInfo_Measurement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscriptionInfo_Measurement::ArenaDtor(void* object) {
  SubscriptionInfo_Measurement* _this = reinterpret_cast< SubscriptionInfo_Measurement* >(object);
  (void)_this;
}
void SubscriptionInfo_Measurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionInfo_Measurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionInfo_Measurement& SubscriptionInfo_Measurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionInfo_Measurement_persistent_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionInfo_Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionInfo_Measurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionInfo_Measurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  return target;
}

size_t SubscriptionInfo_Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionInfo_Measurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionInfo_Measurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionInfo_Measurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
    MergeFrom(*source);
  }
}

void SubscriptionInfo_Measurement::MergeFrom(const SubscriptionInfo_Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SubscriptionInfo_Measurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionInfo_Measurement::CopyFrom(const SubscriptionInfo_Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionInfo_Measurement::IsInitialized() const {
  return true;
}

void SubscriptionInfo_Measurement::InternalSwap(SubscriptionInfo_Measurement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionInfo_Measurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscriptionInfo::InitAsDefaultInstance() {
}
class SubscriptionInfo::_Internal {
 public:
};

SubscriptionInfo::SubscriptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  connections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.SubscriptionInfo)
}
SubscriptionInfo::SubscriptionInfo(const SubscriptionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_source().empty()) {
    event_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_event_source(),
      GetArena());
  }
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_name(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  last_checkpointed_event_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_checkpointed_event_position().empty()) {
    last_checkpointed_event_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_checkpointed_event_position(),
      GetArena());
  }
  last_known_event_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_known_event_position().empty()) {
    last_known_event_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_known_event_position(),
      GetArena());
  }
  start_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_from().empty()) {
    start_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_from(),
      GetArena());
  }
  named_consumer_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_named_consumer_strategy().empty()) {
    named_consumer_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_named_consumer_strategy(),
      GetArena());
  }
  ::memcpy(&total_items_, &from.total_items_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_subscriber_count_) -
    reinterpret_cast<char*>(&total_items_)) + sizeof(max_subscriber_count_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.SubscriptionInfo)
}

void SubscriptionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionInfo_persistent_2eproto.base);
  event_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_checkpointed_event_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_known_event_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_consumer_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_subscriber_count_) -
      reinterpret_cast<char*>(&total_items_)) + sizeof(max_subscriber_count_));
}

SubscriptionInfo::~SubscriptionInfo() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.SubscriptionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscriptionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_checkpointed_event_position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_known_event_position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_consumer_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscriptionInfo::ArenaDtor(void* object) {
  SubscriptionInfo* _this = reinterpret_cast< SubscriptionInfo* >(object);
  (void)_this;
}
void SubscriptionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionInfo& SubscriptionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionInfo_persistent_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.SubscriptionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  event_source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_checkpointed_event_position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_known_event_position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  named_consumer_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&total_items_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_subscriber_count_) -
      reinterpret_cast<char*>(&total_items_)) + sizeof(max_subscriber_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string event_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.event_source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo connections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 average_per_second = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          average_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count_since_last_measurement = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          count_since_last_measurement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_checkpointed_event_position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_checkpointed_event_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_known_event_position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_last_known_event_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool resolve_link_tos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          resolve_link_tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start_from = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_start_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.start_from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 message_timeout_milliseconds = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          message_timeout_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool extra_statistics = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          extra_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_retry_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          max_retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 live_buffer_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          live_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buffer_size = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 read_batch_size = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          read_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 check_point_after_milliseconds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          check_point_after_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_check_point_count = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          min_check_point_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_check_point_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          max_check_point_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 read_buffer_count = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          read_buffer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 live_buffer_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          live_buffer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 retry_buffer_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          retry_buffer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_in_flight_messages = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          total_in_flight_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 outstanding_messages_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          outstanding_messages_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string named_consumer_strategy = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_named_consumer_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_subscriber_count = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          max_subscriber_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parked_message_count = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          parked_message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.SubscriptionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_source = 1;
  if (this->event_source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_source().data(), static_cast<int>(this->_internal_event_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.event_source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_source(), target);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo connections = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_connections(i), target, stream);
  }

  // int32 average_per_second = 5;
  if (this->average_per_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_average_per_second(), target);
  }

  // int64 total_items = 6;
  if (this->total_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_items(), target);
  }

  // int64 count_since_last_measurement = 7;
  if (this->count_since_last_measurement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_count_since_last_measurement(), target);
  }

  // string last_checkpointed_event_position = 8;
  if (this->last_checkpointed_event_position().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_checkpointed_event_position().data(), static_cast<int>(this->_internal_last_checkpointed_event_position().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_checkpointed_event_position(), target);
  }

  // string last_known_event_position = 9;
  if (this->last_known_event_position().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_known_event_position().data(), static_cast<int>(this->_internal_last_known_event_position().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_last_known_event_position(), target);
  }

  // bool resolve_link_tos = 10;
  if (this->resolve_link_tos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_resolve_link_tos(), target);
  }

  // string start_from = 11;
  if (this->start_from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_from().data(), static_cast<int>(this->_internal_start_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.start_from");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_start_from(), target);
  }

  // int32 message_timeout_milliseconds = 12;
  if (this->message_timeout_milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_message_timeout_milliseconds(), target);
  }

  // bool extra_statistics = 13;
  if (this->extra_statistics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_extra_statistics(), target);
  }

  // int32 max_retry_count = 14;
  if (this->max_retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_retry_count(), target);
  }

  // int32 live_buffer_size = 15;
  if (this->live_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_live_buffer_size(), target);
  }

  // int32 buffer_size = 16;
  if (this->buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_buffer_size(), target);
  }

  // int32 read_batch_size = 17;
  if (this->read_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_read_batch_size(), target);
  }

  // int32 check_point_after_milliseconds = 18;
  if (this->check_point_after_milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_check_point_after_milliseconds(), target);
  }

  // int32 min_check_point_count = 19;
  if (this->min_check_point_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_min_check_point_count(), target);
  }

  // int32 max_check_point_count = 20;
  if (this->max_check_point_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_max_check_point_count(), target);
  }

  // int32 read_buffer_count = 21;
  if (this->read_buffer_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_read_buffer_count(), target);
  }

  // int64 live_buffer_count = 22;
  if (this->live_buffer_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_live_buffer_count(), target);
  }

  // int32 retry_buffer_count = 23;
  if (this->retry_buffer_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_retry_buffer_count(), target);
  }

  // int32 total_in_flight_messages = 24;
  if (this->total_in_flight_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_total_in_flight_messages(), target);
  }

  // int32 outstanding_messages_count = 25;
  if (this->outstanding_messages_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_outstanding_messages_count(), target);
  }

  // string named_consumer_strategy = 26;
  if (this->named_consumer_strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_named_consumer_strategy().data(), static_cast<int>(this->_internal_named_consumer_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_named_consumer_strategy(), target);
  }

  // int32 max_subscriber_count = 27;
  if (this->max_subscriber_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_max_subscriber_count(), target);
  }

  // int64 parked_message_count = 28;
  if (this->parked_message_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(28, this->_internal_parked_message_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.SubscriptionInfo)
  return target;
}

size_t SubscriptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.SubscriptionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo connections = 4;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string event_source = 1;
  if (this->event_source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_source());
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string last_checkpointed_event_position = 8;
  if (this->last_checkpointed_event_position().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_checkpointed_event_position());
  }

  // string last_known_event_position = 9;
  if (this->last_known_event_position().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_known_event_position());
  }

  // string start_from = 11;
  if (this->start_from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_from());
  }

  // string named_consumer_strategy = 26;
  if (this->named_consumer_strategy().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_named_consumer_strategy());
  }

  // int64 total_items = 6;
  if (this->total_items() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_items());
  }

  // int64 count_since_last_measurement = 7;
  if (this->count_since_last_measurement() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count_since_last_measurement());
  }

  // int32 average_per_second = 5;
  if (this->average_per_second() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_per_second());
  }

  // bool resolve_link_tos = 10;
  if (this->resolve_link_tos() != 0) {
    total_size += 1 + 1;
  }

  // bool extra_statistics = 13;
  if (this->extra_statistics() != 0) {
    total_size += 1 + 1;
  }

  // int32 message_timeout_milliseconds = 12;
  if (this->message_timeout_milliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message_timeout_milliseconds());
  }

  // int32 max_retry_count = 14;
  if (this->max_retry_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_retry_count());
  }

  // int32 live_buffer_size = 15;
  if (this->live_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_live_buffer_size());
  }

  // int32 buffer_size = 16;
  if (this->buffer_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffer_size());
  }

  // int32 read_batch_size = 17;
  if (this->read_batch_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_read_batch_size());
  }

  // int32 check_point_after_milliseconds = 18;
  if (this->check_point_after_milliseconds() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_check_point_after_milliseconds());
  }

  // int32 min_check_point_count = 19;
  if (this->min_check_point_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_check_point_count());
  }

  // int32 max_check_point_count = 20;
  if (this->max_check_point_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_check_point_count());
  }

  // int64 live_buffer_count = 22;
  if (this->live_buffer_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_live_buffer_count());
  }

  // int32 read_buffer_count = 21;
  if (this->read_buffer_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_read_buffer_count());
  }

  // int32 retry_buffer_count = 23;
  if (this->retry_buffer_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retry_buffer_count());
  }

  // int32 total_in_flight_messages = 24;
  if (this->total_in_flight_messages() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_in_flight_messages());
  }

  // int32 outstanding_messages_count = 25;
  if (this->outstanding_messages_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outstanding_messages_count());
  }

  // int64 parked_message_count = 28;
  if (this->parked_message_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parked_message_count());
  }

  // int32 max_subscriber_count = 27;
  if (this->max_subscriber_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_subscriber_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.SubscriptionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.SubscriptionInfo)
    MergeFrom(*source);
  }
}

void SubscriptionInfo::MergeFrom(const SubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  if (from.event_source().size() > 0) {
    _internal_set_event_source(from._internal_event_source());
  }
  if (from.group_name().size() > 0) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.last_checkpointed_event_position().size() > 0) {
    _internal_set_last_checkpointed_event_position(from._internal_last_checkpointed_event_position());
  }
  if (from.last_known_event_position().size() > 0) {
    _internal_set_last_known_event_position(from._internal_last_known_event_position());
  }
  if (from.start_from().size() > 0) {
    _internal_set_start_from(from._internal_start_from());
  }
  if (from.named_consumer_strategy().size() > 0) {
    _internal_set_named_consumer_strategy(from._internal_named_consumer_strategy());
  }
  if (from.total_items() != 0) {
    _internal_set_total_items(from._internal_total_items());
  }
  if (from.count_since_last_measurement() != 0) {
    _internal_set_count_since_last_measurement(from._internal_count_since_last_measurement());
  }
  if (from.average_per_second() != 0) {
    _internal_set_average_per_second(from._internal_average_per_second());
  }
  if (from.resolve_link_tos() != 0) {
    _internal_set_resolve_link_tos(from._internal_resolve_link_tos());
  }
  if (from.extra_statistics() != 0) {
    _internal_set_extra_statistics(from._internal_extra_statistics());
  }
  if (from.message_timeout_milliseconds() != 0) {
    _internal_set_message_timeout_milliseconds(from._internal_message_timeout_milliseconds());
  }
  if (from.max_retry_count() != 0) {
    _internal_set_max_retry_count(from._internal_max_retry_count());
  }
  if (from.live_buffer_size() != 0) {
    _internal_set_live_buffer_size(from._internal_live_buffer_size());
  }
  if (from.buffer_size() != 0) {
    _internal_set_buffer_size(from._internal_buffer_size());
  }
  if (from.read_batch_size() != 0) {
    _internal_set_read_batch_size(from._internal_read_batch_size());
  }
  if (from.check_point_after_milliseconds() != 0) {
    _internal_set_check_point_after_milliseconds(from._internal_check_point_after_milliseconds());
  }
  if (from.min_check_point_count() != 0) {
    _internal_set_min_check_point_count(from._internal_min_check_point_count());
  }
  if (from.max_check_point_count() != 0) {
    _internal_set_max_check_point_count(from._internal_max_check_point_count());
  }
  if (from.live_buffer_count() != 0) {
    _internal_set_live_buffer_count(from._internal_live_buffer_count());
  }
  if (from.read_buffer_count() != 0) {
    _internal_set_read_buffer_count(from._internal_read_buffer_count());
  }
  if (from.retry_buffer_count() != 0) {
    _internal_set_retry_buffer_count(from._internal_retry_buffer_count());
  }
  if (from.total_in_flight_messages() != 0) {
    _internal_set_total_in_flight_messages(from._internal_total_in_flight_messages());
  }
  if (from.outstanding_messages_count() != 0) {
    _internal_set_outstanding_messages_count(from._internal_outstanding_messages_count());
  }
  if (from.parked_message_count() != 0) {
    _internal_set_parked_message_count(from._internal_parked_message_count());
  }
  if (from.max_subscriber_count() != 0) {
    _internal_set_max_subscriber_count(from._internal_max_subscriber_count());
  }
}

void SubscriptionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionInfo::CopyFrom(const SubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.SubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionInfo::IsInitialized() const {
  return true;
}

void SubscriptionInfo::InternalSwap(SubscriptionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  connections_.InternalSwap(&other->connections_);
  event_source_.Swap(&other->event_source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_checkpointed_event_position_.Swap(&other->last_checkpointed_event_position_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_known_event_position_.Swap(&other->last_known_event_position_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_from_.Swap(&other->start_from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  named_consumer_strategy_.Swap(&other->named_consumer_strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionInfo, max_subscriber_count_)
      + sizeof(SubscriptionInfo::max_subscriber_count_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionInfo, total_items_)>(
          reinterpret_cast<char*>(&total_items_),
          reinterpret_cast<char*>(&other->total_items_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplayParkedReq_Options::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ReplayParkedReq_Options_default_instance_.stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReplayParkedReq_Options_default_instance_.all_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ReplayParkedReq_Options_default_instance_.stop_at_ = PROTOBUF_LONGLONG(0);
  ::event_store::client::persistent_subscriptions::_ReplayParkedReq_Options_default_instance_.no_limit_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ReplayParkedReq_Options::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const ReplayParkedReq_Options* msg);
  static const ::event_store::client::Empty& all(const ReplayParkedReq_Options* msg);
  static const ::event_store::client::Empty& no_limit(const ReplayParkedReq_Options* msg);
};

const ::event_store::client::StreamIdentifier&
ReplayParkedReq_Options::_Internal::stream_identifier(const ReplayParkedReq_Options* msg) {
  return *msg->stream_option_.stream_identifier_;
}
const ::event_store::client::Empty&
ReplayParkedReq_Options::_Internal::all(const ReplayParkedReq_Options* msg) {
  return *msg->stream_option_.all_;
}
const ::event_store::client::Empty&
ReplayParkedReq_Options::_Internal::no_limit(const ReplayParkedReq_Options* msg) {
  return *msg->stop_at_option_.no_limit_;
}
void ReplayParkedReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.stream_identifier)
}
void ReplayParkedReq_Options::clear_stream_identifier() {
  if (_internal_has_stream_identifier()) {
    if (GetArena() == nullptr) {
      delete stream_option_.stream_identifier_;
    }
    clear_has_stream_option();
  }
}
void ReplayParkedReq_Options::set_allocated_all(::event_store::client::Empty* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all)->GetArena();
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.all)
}
void ReplayParkedReq_Options::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete stream_option_.all_;
    }
    clear_has_stream_option();
  }
}
void ReplayParkedReq_Options::set_allocated_no_limit(::event_store::client::Empty* no_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stop_at_option();
  if (no_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_limit)->GetArena();
    if (message_arena != submessage_arena) {
      no_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_limit, submessage_arena);
    }
    set_has_no_limit();
    stop_at_option_.no_limit_ = no_limit;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.no_limit)
}
void ReplayParkedReq_Options::clear_no_limit() {
  if (_internal_has_no_limit()) {
    if (GetArena() == nullptr) {
      delete stop_at_option_.no_limit_;
    }
    clear_has_stop_at_option();
  }
}
ReplayParkedReq_Options::ReplayParkedReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
}
ReplayParkedReq_Options::ReplayParkedReq_Options(const ReplayParkedReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_name(),
      GetArena());
  }
  clear_has_stream_option();
  switch (from.stream_option_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  clear_has_stop_at_option();
  switch (from.stop_at_option_case()) {
    case kStopAt: {
      _internal_set_stop_at(from._internal_stop_at());
      break;
    }
    case kNoLimit: {
      _internal_mutable_no_limit()->::event_store::client::Empty::MergeFrom(from._internal_no_limit());
      break;
    }
    case STOP_AT_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
}

void ReplayParkedReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayParkedReq_Options_persistent_2eproto.base);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_option();
  clear_has_stop_at_option();
}

ReplayParkedReq_Options::~ReplayParkedReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayParkedReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_stream_option()) {
    clear_stream_option();
  }
  if (has_stop_at_option()) {
    clear_stop_at_option();
  }
}

void ReplayParkedReq_Options::ArenaDtor(void* object) {
  ReplayParkedReq_Options* _this = reinterpret_cast< ReplayParkedReq_Options* >(object);
  (void)_this;
}
void ReplayParkedReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayParkedReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayParkedReq_Options& ReplayParkedReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayParkedReq_Options_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReplayParkedReq_Options::clear_stream_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  switch (stream_option_case()) {
    case kStreamIdentifier: {
      if (GetArena() == nullptr) {
        delete stream_option_.stream_identifier_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete stream_option_.all_;
      }
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}

void ReplayParkedReq_Options::clear_stop_at_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  switch (stop_at_option_case()) {
    case kStopAt: {
      // No need to clear
      break;
    }
    case kNoLimit: {
      if (GetArena() == nullptr) {
        delete stop_at_option_.no_limit_;
      }
      break;
    }
    case STOP_AT_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = STOP_AT_OPTION_NOT_SET;
}


void ReplayParkedReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_stream_option();
  clear_stop_at_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayParkedReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.StreamIdentifier stream_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 stop_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_stop_at(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayParkedReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_name = 1;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_name(), target);
  }

  // .event_store.client.StreamIdentifier stream_identifier = 2;
  if (_internal_has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream_identifier(this), target, stream);
  }

  // .event_store.client.Empty all = 3;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::all(this), target, stream);
  }

  // int64 stop_at = 4;
  if (_internal_has_stop_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_stop_at(), target);
  }

  // .event_store.client.Empty no_limit = 5;
  if (_internal_has_no_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::no_limit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  return target;
}

size_t ReplayParkedReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_name = 1;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  switch (stream_option_case()) {
    // .event_store.client.StreamIdentifier stream_identifier = 2;
    case kStreamIdentifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.stream_identifier_);
      break;
    }
    // .event_store.client.Empty all = 3;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.all_);
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  switch (stop_at_option_case()) {
    // int64 stop_at = 4;
    case kStopAt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_stop_at());
      break;
    }
    // .event_store.client.Empty no_limit = 5;
    case kNoLimit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_at_option_.no_limit_);
      break;
    }
    case STOP_AT_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayParkedReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayParkedReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayParkedReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
    MergeFrom(*source);
  }
}

void ReplayParkedReq_Options::MergeFrom(const ReplayParkedReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_name().size() > 0) {
    _internal_set_group_name(from._internal_group_name());
  }
  switch (from.stream_option_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  switch (from.stop_at_option_case()) {
    case kStopAt: {
      _internal_set_stop_at(from._internal_stop_at());
      break;
    }
    case kNoLimit: {
      _internal_mutable_no_limit()->::event_store::client::Empty::MergeFrom(from._internal_no_limit());
      break;
    }
    case STOP_AT_OPTION_NOT_SET: {
      break;
    }
  }
}

void ReplayParkedReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayParkedReq_Options::CopyFrom(const ReplayParkedReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayParkedReq_Options::IsInitialized() const {
  return true;
}

void ReplayParkedReq_Options::InternalSwap(ReplayParkedReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stream_option_, other->stream_option_);
  swap(stop_at_option_, other->stop_at_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayParkedReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplayParkedReq::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ReplayParkedReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options*>(
      ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options::internal_default_instance());
}
class ReplayParkedReq::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options& options(const ReplayParkedReq* msg);
};

const ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options&
ReplayParkedReq::_Internal::options(const ReplayParkedReq* msg) {
  return *msg->options_;
}
ReplayParkedReq::ReplayParkedReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReplayParkedReq)
}
ReplayParkedReq::ReplayParkedReq(const ReplayParkedReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReplayParkedReq)
}

void ReplayParkedReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayParkedReq_persistent_2eproto.base);
  options_ = nullptr;
}

ReplayParkedReq::~ReplayParkedReq() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReplayParkedReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayParkedReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void ReplayParkedReq::ArenaDtor(void* object) {
  ReplayParkedReq* _this = reinterpret_cast< ReplayParkedReq* >(object);
  (void)_this;
}
void ReplayParkedReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayParkedReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayParkedReq& ReplayParkedReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayParkedReq_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReplayParkedReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReplayParkedReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayParkedReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.ReplayParkedReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayParkedReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReplayParkedReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.ReplayParkedReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReplayParkedReq)
  return target;
}

size_t ReplayParkedReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReplayParkedReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.ReplayParkedReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayParkedReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReplayParkedReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayParkedReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayParkedReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReplayParkedReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReplayParkedReq)
    MergeFrom(*source);
  }
}

void ReplayParkedReq::MergeFrom(const ReplayParkedReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReplayParkedReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::persistent_subscriptions::ReplayParkedReq_Options::MergeFrom(from._internal_options());
  }
}

void ReplayParkedReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReplayParkedReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayParkedReq::CopyFrom(const ReplayParkedReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReplayParkedReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayParkedReq::IsInitialized() const {
  return true;
}

void ReplayParkedReq::InternalSwap(ReplayParkedReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayParkedReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplayParkedResp::InitAsDefaultInstance() {
}
class ReplayParkedResp::_Internal {
 public:
};

ReplayParkedResp::ReplayParkedResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ReplayParkedResp)
}
ReplayParkedResp::ReplayParkedResp(const ReplayParkedResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ReplayParkedResp)
}

void ReplayParkedResp::SharedCtor() {
}

ReplayParkedResp::~ReplayParkedResp() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ReplayParkedResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayParkedResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReplayParkedResp::ArenaDtor(void* object) {
  ReplayParkedResp* _this = reinterpret_cast< ReplayParkedResp* >(object);
  (void)_this;
}
void ReplayParkedResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayParkedResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayParkedResp& ReplayParkedResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayParkedResp_persistent_2eproto.base);
  return *internal_default_instance();
}


void ReplayParkedResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ReplayParkedResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayParkedResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayParkedResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ReplayParkedResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ReplayParkedResp)
  return target;
}

size_t ReplayParkedResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ReplayParkedResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayParkedResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ReplayParkedResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayParkedResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayParkedResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ReplayParkedResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ReplayParkedResp)
    MergeFrom(*source);
  }
}

void ReplayParkedResp::MergeFrom(const ReplayParkedResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ReplayParkedResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReplayParkedResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ReplayParkedResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayParkedResp::CopyFrom(const ReplayParkedResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ReplayParkedResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayParkedResp::IsInitialized() const {
  return true;
}

void ReplayParkedResp::InternalSwap(ReplayParkedResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayParkedResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListReq_Options::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ListReq_Options_default_instance_.list_all_subscriptions_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ListReq_Options_default_instance_.list_for_stream_ = const_cast< ::event_store::client::persistent_subscriptions::ListReq_StreamOption*>(
      ::event_store::client::persistent_subscriptions::ListReq_StreamOption::internal_default_instance());
}
class ListReq_Options::_Internal {
 public:
  static const ::event_store::client::Empty& list_all_subscriptions(const ListReq_Options* msg);
  static const ::event_store::client::persistent_subscriptions::ListReq_StreamOption& list_for_stream(const ListReq_Options* msg);
};

const ::event_store::client::Empty&
ListReq_Options::_Internal::list_all_subscriptions(const ListReq_Options* msg) {
  return *msg->list_option_.list_all_subscriptions_;
}
const ::event_store::client::persistent_subscriptions::ListReq_StreamOption&
ListReq_Options::_Internal::list_for_stream(const ListReq_Options* msg) {
  return *msg->list_option_.list_for_stream_;
}
void ListReq_Options::set_allocated_list_all_subscriptions(::event_store::client::Empty* list_all_subscriptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_list_option();
  if (list_all_subscriptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_all_subscriptions)->GetArena();
    if (message_arena != submessage_arena) {
      list_all_subscriptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_all_subscriptions, submessage_arena);
    }
    set_has_list_all_subscriptions();
    list_option_.list_all_subscriptions_ = list_all_subscriptions;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ListReq.Options.list_all_subscriptions)
}
void ListReq_Options::clear_list_all_subscriptions() {
  if (_internal_has_list_all_subscriptions()) {
    if (GetArena() == nullptr) {
      delete list_option_.list_all_subscriptions_;
    }
    clear_has_list_option();
  }
}
void ListReq_Options::set_allocated_list_for_stream(::event_store::client::persistent_subscriptions::ListReq_StreamOption* list_for_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_list_option();
  if (list_for_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_for_stream);
    if (message_arena != submessage_arena) {
      list_for_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_for_stream, submessage_arena);
    }
    set_has_list_for_stream();
    list_option_.list_for_stream_ = list_for_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ListReq.Options.list_for_stream)
}
ListReq_Options::ListReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ListReq.Options)
}
ListReq_Options::ListReq_Options(const ListReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_list_option();
  switch (from.list_option_case()) {
    case kListAllSubscriptions: {
      _internal_mutable_list_all_subscriptions()->::event_store::client::Empty::MergeFrom(from._internal_list_all_subscriptions());
      break;
    }
    case kListForStream: {
      _internal_mutable_list_for_stream()->::event_store::client::persistent_subscriptions::ListReq_StreamOption::MergeFrom(from._internal_list_for_stream());
      break;
    }
    case LIST_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ListReq.Options)
}

void ListReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListReq_Options_persistent_2eproto.base);
  clear_has_list_option();
}

ListReq_Options::~ListReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ListReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_list_option()) {
    clear_list_option();
  }
}

void ListReq_Options::ArenaDtor(void* object) {
  ListReq_Options* _this = reinterpret_cast< ListReq_Options* >(object);
  (void)_this;
}
void ListReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListReq_Options& ListReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListReq_Options_persistent_2eproto.base);
  return *internal_default_instance();
}


void ListReq_Options::clear_list_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ListReq.Options)
  switch (list_option_case()) {
    case kListAllSubscriptions: {
      if (GetArena() == nullptr) {
        delete list_option_.list_all_subscriptions_;
      }
      break;
    }
    case kListForStream: {
      if (GetArena() == nullptr) {
        delete list_option_.list_for_stream_;
      }
      break;
    }
    case LIST_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LIST_OPTION_NOT_SET;
}


void ListReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ListReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_list_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.Empty list_all_subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_all_subscriptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.persistent_subscriptions.ListReq.StreamOption list_for_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_for_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ListReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.Empty list_all_subscriptions = 1;
  if (_internal_has_list_all_subscriptions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::list_all_subscriptions(this), target, stream);
  }

  // .event_store.client.persistent_subscriptions.ListReq.StreamOption list_for_stream = 2;
  if (_internal_has_list_for_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::list_for_stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ListReq.Options)
  return target;
}

size_t ListReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ListReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (list_option_case()) {
    // .event_store.client.Empty list_all_subscriptions = 1;
    case kListAllSubscriptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_option_.list_all_subscriptions_);
      break;
    }
    // .event_store.client.persistent_subscriptions.ListReq.StreamOption list_for_stream = 2;
    case kListForStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_option_.list_for_stream_);
      break;
    }
    case LIST_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ListReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const ListReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ListReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ListReq.Options)
    MergeFrom(*source);
  }
}

void ListReq_Options::MergeFrom(const ListReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ListReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.list_option_case()) {
    case kListAllSubscriptions: {
      _internal_mutable_list_all_subscriptions()->::event_store::client::Empty::MergeFrom(from._internal_list_all_subscriptions());
      break;
    }
    case kListForStream: {
      _internal_mutable_list_for_stream()->::event_store::client::persistent_subscriptions::ListReq_StreamOption::MergeFrom(from._internal_list_for_stream());
      break;
    }
    case LIST_OPTION_NOT_SET: {
      break;
    }
  }
}

void ListReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ListReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListReq_Options::CopyFrom(const ListReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ListReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListReq_Options::IsInitialized() const {
  return true;
}

void ListReq_Options::InternalSwap(ListReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(list_option_, other->list_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListReq_StreamOption::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ListReq_StreamOption_default_instance_.stream_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::persistent_subscriptions::_ListReq_StreamOption_default_instance_.all_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ListReq_StreamOption::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream(const ListReq_StreamOption* msg);
  static const ::event_store::client::Empty& all(const ListReq_StreamOption* msg);
};

const ::event_store::client::StreamIdentifier&
ListReq_StreamOption::_Internal::stream(const ListReq_StreamOption* msg) {
  return *msg->stream_option_.stream_;
}
const ::event_store::client::Empty&
ListReq_StreamOption::_Internal::all(const ListReq_StreamOption* msg) {
  return *msg->stream_option_.all_;
}
void ListReq_StreamOption::set_allocated_stream(::event_store::client::StreamIdentifier* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream)->GetArena();
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    stream_option_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ListReq.StreamOption.stream)
}
void ListReq_StreamOption::clear_stream() {
  if (_internal_has_stream()) {
    if (GetArena() == nullptr) {
      delete stream_option_.stream_;
    }
    clear_has_stream_option();
  }
}
void ListReq_StreamOption::set_allocated_all(::event_store::client::Empty* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all)->GetArena();
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ListReq.StreamOption.all)
}
void ListReq_StreamOption::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete stream_option_.all_;
    }
    clear_has_stream_option();
  }
}
ListReq_StreamOption::ListReq_StreamOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ListReq.StreamOption)
}
ListReq_StreamOption::ListReq_StreamOption(const ListReq_StreamOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_stream_option();
  switch (from.stream_option_case()) {
    case kStream: {
      _internal_mutable_stream()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ListReq.StreamOption)
}

void ListReq_StreamOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListReq_StreamOption_persistent_2eproto.base);
  clear_has_stream_option();
}

ListReq_StreamOption::~ListReq_StreamOption() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListReq_StreamOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_stream_option()) {
    clear_stream_option();
  }
}

void ListReq_StreamOption::ArenaDtor(void* object) {
  ListReq_StreamOption* _this = reinterpret_cast< ListReq_StreamOption* >(object);
  (void)_this;
}
void ListReq_StreamOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListReq_StreamOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListReq_StreamOption& ListReq_StreamOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListReq_StreamOption_persistent_2eproto.base);
  return *internal_default_instance();
}


void ListReq_StreamOption::clear_stream_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  switch (stream_option_case()) {
    case kStream: {
      if (GetArena() == nullptr) {
        delete stream_option_.stream_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete stream_option_.all_;
      }
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}


void ListReq_StreamOption::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListReq_StreamOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListReq_StreamOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream = 1;
  if (_internal_has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream(this), target, stream);
  }

  // .event_store.client.Empty all = 2;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::all(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  return target;
}

size_t ListReq_StreamOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_option_case()) {
    // .event_store.client.StreamIdentifier stream = 1;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.stream_);
      break;
    }
    // .event_store.client.Empty all = 2;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.all_);
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListReq_StreamOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ListReq_StreamOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListReq_StreamOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ListReq.StreamOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ListReq.StreamOption)
    MergeFrom(*source);
  }
}

void ListReq_StreamOption::MergeFrom(const ListReq_StreamOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.stream_option_case()) {
    case kStream: {
      _internal_mutable_stream()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::Empty::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
}

void ListReq_StreamOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListReq_StreamOption::CopyFrom(const ListReq_StreamOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ListReq.StreamOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListReq_StreamOption::IsInitialized() const {
  return true;
}

void ListReq_StreamOption::InternalSwap(ListReq_StreamOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_option_, other->stream_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListReq_StreamOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListReq::InitAsDefaultInstance() {
  ::event_store::client::persistent_subscriptions::_ListReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::persistent_subscriptions::ListReq_Options*>(
      ::event_store::client::persistent_subscriptions::ListReq_Options::internal_default_instance());
}
class ListReq::_Internal {
 public:
  static const ::event_store::client::persistent_subscriptions::ListReq_Options& options(const ListReq* msg);
};

const ::event_store::client::persistent_subscriptions::ListReq_Options&
ListReq::_Internal::options(const ListReq* msg) {
  return *msg->options_;
}
ListReq::ListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ListReq)
}
ListReq::ListReq(const ListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::persistent_subscriptions::ListReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ListReq)
}

void ListReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListReq_persistent_2eproto.base);
  options_ = nullptr;
}

ListReq::~ListReq() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void ListReq::ArenaDtor(void* object) {
  ListReq* _this = reinterpret_cast< ListReq* >(object);
  (void)_this;
}
void ListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListReq& ListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListReq_persistent_2eproto.base);
  return *internal_default_instance();
}


void ListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.persistent_subscriptions.ListReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.ListReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ListReq)
  return target;
}

size_t ListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.persistent_subscriptions.ListReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ListReq)
    MergeFrom(*source);
  }
}

void ListReq::MergeFrom(const ListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::persistent_subscriptions::ListReq_Options::MergeFrom(from._internal_options());
  }
}

void ListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListReq::CopyFrom(const ListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListReq::IsInitialized() const {
  return true;
}

void ListReq::InternalSwap(ListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListResp::InitAsDefaultInstance() {
}
class ListResp::_Internal {
 public:
};

ListResp::ListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subscriptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.persistent_subscriptions.ListResp)
}
ListResp::ListResp(const ListResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event_store.client.persistent_subscriptions.ListResp)
}

void ListResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListResp_persistent_2eproto.base);
}

ListResp::~ListResp() {
  // @@protoc_insertion_point(destructor:event_store.client.persistent_subscriptions.ListResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListResp::ArenaDtor(void* object) {
  ListResp* _this = reinterpret_cast< ListResp* >(object);
  (void)_this;
}
void ListResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListResp& ListResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListResp_persistent_2eproto.base);
  return *internal_default_instance();
}


void ListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.persistent_subscriptions.ListResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.persistent_subscriptions.ListResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subscriptions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.persistent_subscriptions.ListResp)
  return target;
}

size_t ListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.persistent_subscriptions.ListResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo subscriptions = 1;
  total_size += 1UL * this->_internal_subscriptions_size();
  for (const auto& msg : this->subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.persistent_subscriptions.ListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ListResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.persistent_subscriptions.ListResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.persistent_subscriptions.ListResp)
    MergeFrom(*source);
  }
}

void ListResp::MergeFrom(const ListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.persistent_subscriptions.ListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
}

void ListResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.persistent_subscriptions.ListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResp::CopyFrom(const ListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.persistent_subscriptions.ListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResp::IsInitialized() const {
  return true;
}

void ListResp::InternalSwap(ListResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subscriptions_.InternalSwap(&other->subscriptions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace persistent_subscriptions
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadReq_Options* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadReq_Ack* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadReq_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadReq_Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadReq_Nack* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadReq_Nack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadReq_Nack >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadReq* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReadResp* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReadResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateReq_Options* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateReq_Position* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateReq_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateReq_Settings* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateReq_Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateReq* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::CreateResp* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::CreateResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::UpdateReq_Options* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::UpdateReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::UpdateReq_Position* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::UpdateReq_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::UpdateReq_Settings* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq_Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::UpdateReq_Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::UpdateReq* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::UpdateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::UpdateResp* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::UpdateResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::DeleteReq_Options* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::DeleteReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::DeleteReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::DeleteReq* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::DeleteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::DeleteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::DeleteResp* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::DeleteResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::DeleteResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::GetInfoReq_Options* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::GetInfoReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::GetInfoReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::GetInfoReq* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::GetInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::GetInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::GetInfoResp* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::GetInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::GetInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::SubscriptionInfo* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::SubscriptionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::SubscriptionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReplayParkedReq* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReplayParkedReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReplayParkedReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ReplayParkedResp* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReplayParkedResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ReplayParkedResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ListReq_Options* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ListReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ListReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ListReq_StreamOption* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ListReq_StreamOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ListReq_StreamOption >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ListReq* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::persistent_subscriptions::ListResp* Arena::CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ListResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::persistent_subscriptions::ListResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

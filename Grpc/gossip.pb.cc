// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gossip.proto

#include "gossip.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UUID_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gossip_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPoint_gossip_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gossip_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberInfo_gossip_2eproto;
namespace event_store {
namespace client {
namespace gossip {
class ClusterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterInfo> _instance;
} _ClusterInfo_default_instance_;
class EndPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndPoint> _instance;
} _EndPoint_default_instance_;
class MemberInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberInfo> _instance;
} _MemberInfo_default_instance_;
}  // namespace gossip
}  // namespace client
}  // namespace event_store
static void InitDefaultsscc_info_ClusterInfo_gossip_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::gossip::_ClusterInfo_default_instance_;
    new (ptr) ::event_store::client::gossip::ClusterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::gossip::ClusterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClusterInfo_gossip_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClusterInfo_gossip_2eproto}, {
      &scc_info_MemberInfo_gossip_2eproto.base,}};

static void InitDefaultsscc_info_EndPoint_gossip_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::gossip::_EndPoint_default_instance_;
    new (ptr) ::event_store::client::gossip::EndPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::gossip::EndPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPoint_gossip_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndPoint_gossip_2eproto}, {}};

static void InitDefaultsscc_info_MemberInfo_gossip_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::gossip::_MemberInfo_default_instance_;
    new (ptr) ::event_store::client::gossip::MemberInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::gossip::MemberInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberInfo_gossip_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberInfo_gossip_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_gossip_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gossip_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gossip_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gossip_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gossip_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::ClusterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::ClusterInfo, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::EndPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::EndPoint, address_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::EndPoint, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::MemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::MemberInfo, instance_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::MemberInfo, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::MemberInfo, state_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::MemberInfo, is_alive_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::gossip::MemberInfo, http_end_point_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::event_store::client::gossip::ClusterInfo)},
  { 6, -1, sizeof(::event_store::client::gossip::EndPoint)},
  { 13, -1, sizeof(::event_store::client::gossip::MemberInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::gossip::_ClusterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::gossip::_EndPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::gossip::_MemberInfo_default_instance_),
};

const char descriptor_table_protodef_gossip_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014gossip.proto\022\031event_store.client.gossi"
  "p\032\014shared.proto\"E\n\013ClusterInfo\0226\n\007member"
  "s\030\001 \003(\0132%.event_store.client.gossip.Memb"
  "erInfo\")\n\010EndPoint\022\017\n\007address\030\001 \001(\t\022\014\n\004p"
  "ort\030\002 \001(\r\"\374\003\n\nMemberInfo\022-\n\013instance_id\030"
  "\001 \001(\0132\030.event_store.client.UUID\022\022\n\ntime_"
  "stamp\030\002 \001(\003\022\?\n\005state\030\003 \001(\01620.event_store"
  ".client.gossip.MemberInfo.VNodeState\022\020\n\010"
  "is_alive\030\004 \001(\010\022;\n\016http_end_point\030\005 \001(\0132#"
  ".event_store.client.gossip.EndPoint\"\232\002\n\n"
  "VNodeState\022\020\n\014Initializing\020\000\022\022\n\016Discover"
  "Leader\020\001\022\013\n\007Unknown\020\002\022\016\n\nPreReplica\020\003\022\016\n"
  "\nCatchingUp\020\004\022\t\n\005Clone\020\005\022\014\n\010Follower\020\006\022\r"
  "\n\tPreLeader\020\007\022\n\n\006Leader\020\010\022\013\n\007Manager\020\t\022\020"
  "\n\014ShuttingDown\020\n\022\014\n\010Shutdown\020\013\022\026\n\022ReadOn"
  "lyLeaderless\020\014\022\026\n\022PreReadOnlyReplica\020\r\022\023"
  "\n\017ReadOnlyReplica\020\016\022\023\n\017ResigningLeader\020\017"
  "2S\n\006Gossip\022I\n\004Read\022\031.event_store.client."
  "Empty\032&.event_store.client.gossip.Cluste"
  "rInfoB&\n$com.eventstore.dbclient.proto.g"
  "ossipb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gossip_2eproto_deps[1] = {
  &::descriptor_table_shared_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gossip_2eproto_sccs[3] = {
  &scc_info_ClusterInfo_gossip_2eproto.base,
  &scc_info_EndPoint_gossip_2eproto.base,
  &scc_info_MemberInfo_gossip_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gossip_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gossip_2eproto = {
  false, false, descriptor_table_protodef_gossip_2eproto, "gossip.proto", 813,
  &descriptor_table_gossip_2eproto_once, descriptor_table_gossip_2eproto_sccs, descriptor_table_gossip_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_gossip_2eproto::offsets,
  file_level_metadata_gossip_2eproto, 3, file_level_enum_descriptors_gossip_2eproto, file_level_service_descriptors_gossip_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gossip_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gossip_2eproto)), true);
namespace event_store {
namespace client {
namespace gossip {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberInfo_VNodeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gossip_2eproto);
  return file_level_enum_descriptors_gossip_2eproto[0];
}
bool MemberInfo_VNodeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MemberInfo_VNodeState MemberInfo::Initializing;
constexpr MemberInfo_VNodeState MemberInfo::DiscoverLeader;
constexpr MemberInfo_VNodeState MemberInfo::Unknown;
constexpr MemberInfo_VNodeState MemberInfo::PreReplica;
constexpr MemberInfo_VNodeState MemberInfo::CatchingUp;
constexpr MemberInfo_VNodeState MemberInfo::Clone;
constexpr MemberInfo_VNodeState MemberInfo::Follower;
constexpr MemberInfo_VNodeState MemberInfo::PreLeader;
constexpr MemberInfo_VNodeState MemberInfo::Leader;
constexpr MemberInfo_VNodeState MemberInfo::Manager;
constexpr MemberInfo_VNodeState MemberInfo::ShuttingDown;
constexpr MemberInfo_VNodeState MemberInfo::Shutdown;
constexpr MemberInfo_VNodeState MemberInfo::ReadOnlyLeaderless;
constexpr MemberInfo_VNodeState MemberInfo::PreReadOnlyReplica;
constexpr MemberInfo_VNodeState MemberInfo::ReadOnlyReplica;
constexpr MemberInfo_VNodeState MemberInfo::ResigningLeader;
constexpr MemberInfo_VNodeState MemberInfo::VNodeState_MIN;
constexpr MemberInfo_VNodeState MemberInfo::VNodeState_MAX;
constexpr int MemberInfo::VNodeState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClusterInfo::InitAsDefaultInstance() {
}
class ClusterInfo::_Internal {
 public:
};

ClusterInfo::ClusterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.gossip.ClusterInfo)
}
ClusterInfo::ClusterInfo(const ClusterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event_store.client.gossip.ClusterInfo)
}

void ClusterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterInfo_gossip_2eproto.base);
}

ClusterInfo::~ClusterInfo() {
  // @@protoc_insertion_point(destructor:event_store.client.gossip.ClusterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClusterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClusterInfo::ArenaDtor(void* object) {
  ClusterInfo* _this = reinterpret_cast< ClusterInfo* >(object);
  (void)_this;
}
void ClusterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClusterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterInfo& ClusterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterInfo_gossip_2eproto.base);
  return *internal_default_instance();
}


void ClusterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.gossip.ClusterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClusterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .event_store.client.gossip.MemberInfo members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.gossip.ClusterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .event_store.client.gossip.MemberInfo members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.gossip.ClusterInfo)
  return target;
}

size_t ClusterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.gossip.ClusterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.client.gossip.MemberInfo members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.gossip.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.gossip.ClusterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.gossip.ClusterInfo)
    MergeFrom(*source);
  }
}

void ClusterInfo::MergeFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.gossip.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
}

void ClusterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.gossip.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfo::CopyFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.gossip.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfo::IsInitialized() const {
  return true;
}

void ClusterInfo::InternalSwap(ClusterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndPoint::InitAsDefaultInstance() {
}
class EndPoint::_Internal {
 public:
};

EndPoint::EndPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.gossip.EndPoint)
}
EndPoint::EndPoint(const EndPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:event_store.client.gossip.EndPoint)
}

void EndPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndPoint_gossip_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

EndPoint::~EndPoint() {
  // @@protoc_insertion_point(destructor:event_store.client.gossip.EndPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndPoint::ArenaDtor(void* object) {
  EndPoint* _this = reinterpret_cast< EndPoint* >(object);
  (void)_this;
}
void EndPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndPoint& EndPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndPoint_gossip_2eproto.base);
  return *internal_default_instance();
}


void EndPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.gossip.EndPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.gossip.EndPoint.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.gossip.EndPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.gossip.EndPoint.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.gossip.EndPoint)
  return target;
}

size_t EndPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.gossip.EndPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.gossip.EndPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const EndPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.gossip.EndPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.gossip.EndPoint)
    MergeFrom(*source);
  }
}

void EndPoint::MergeFrom(const EndPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.gossip.EndPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void EndPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.gossip.EndPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPoint::CopyFrom(const EndPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.gossip.EndPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPoint::IsInitialized() const {
  return true;
}

void EndPoint::InternalSwap(EndPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberInfo::InitAsDefaultInstance() {
  ::event_store::client::gossip::_MemberInfo_default_instance_._instance.get_mutable()->instance_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::client::gossip::_MemberInfo_default_instance_._instance.get_mutable()->http_end_point_ = const_cast< ::event_store::client::gossip::EndPoint*>(
      ::event_store::client::gossip::EndPoint::internal_default_instance());
}
class MemberInfo::_Internal {
 public:
  static const ::event_store::client::UUID& instance_id(const MemberInfo* msg);
  static const ::event_store::client::gossip::EndPoint& http_end_point(const MemberInfo* msg);
};

const ::event_store::client::UUID&
MemberInfo::_Internal::instance_id(const MemberInfo* msg) {
  return *msg->instance_id_;
}
const ::event_store::client::gossip::EndPoint&
MemberInfo::_Internal::http_end_point(const MemberInfo* msg) {
  return *msg->http_end_point_;
}
void MemberInfo::clear_instance_id() {
  if (GetArena() == nullptr && instance_id_ != nullptr) {
    delete instance_id_;
  }
  instance_id_ = nullptr;
}
MemberInfo::MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.gossip.MemberInfo)
}
MemberInfo::MemberInfo(const MemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instance_id()) {
    instance_id_ = new ::event_store::client::UUID(*from.instance_id_);
  } else {
    instance_id_ = nullptr;
  }
  if (from._internal_has_http_end_point()) {
    http_end_point_ = new ::event_store::client::gossip::EndPoint(*from.http_end_point_);
  } else {
    http_end_point_ = nullptr;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_alive_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(is_alive_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.gossip.MemberInfo)
}

void MemberInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberInfo_gossip_2eproto.base);
  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_alive_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(is_alive_));
}

MemberInfo::~MemberInfo() {
  // @@protoc_insertion_point(destructor:event_store.client.gossip.MemberInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete instance_id_;
  if (this != internal_default_instance()) delete http_end_point_;
}

void MemberInfo::ArenaDtor(void* object) {
  MemberInfo* _this = reinterpret_cast< MemberInfo* >(object);
  (void)_this;
}
void MemberInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberInfo& MemberInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberInfo_gossip_2eproto.base);
  return *internal_default_instance();
}


void MemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.gossip.MemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && instance_id_ != nullptr) {
    delete instance_id_;
  }
  instance_id_ = nullptr;
  if (GetArena() == nullptr && http_end_point_ != nullptr) {
    delete http_end_point_;
  }
  http_end_point_ = nullptr;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_alive_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(is_alive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.gossip.MemberInfo.VNodeState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::event_store::client::gossip::MemberInfo_VNodeState>(val));
        } else goto handle_unusual;
        continue;
      // bool is_alive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.gossip.EndPoint http_end_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_http_end_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.gossip.MemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID instance_id = 1;
  if (this->has_instance_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instance_id(this), target, stream);
  }

  // int64 time_stamp = 2;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_stamp(), target);
  }

  // .event_store.client.gossip.MemberInfo.VNodeState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // bool is_alive = 4;
  if (this->is_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_alive(), target);
  }

  // .event_store.client.gossip.EndPoint http_end_point = 5;
  if (this->has_http_end_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::http_end_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.gossip.MemberInfo)
  return target;
}

size_t MemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.gossip.MemberInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID instance_id = 1;
  if (this->has_instance_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instance_id_);
  }

  // .event_store.client.gossip.EndPoint http_end_point = 5;
  if (this->has_http_end_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *http_end_point_);
  }

  // int64 time_stamp = 2;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  // .event_store.client.gossip.MemberInfo.VNodeState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool is_alive = 4;
  if (this->is_alive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.gossip.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.gossip.MemberInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.gossip.MemberInfo)
    MergeFrom(*source);
  }
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.gossip.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_instance_id()) {
    _internal_mutable_instance_id()->::event_store::client::UUID::MergeFrom(from._internal_instance_id());
  }
  if (from.has_http_end_point()) {
    _internal_mutable_http_end_point()->::event_store::client::gossip::EndPoint::MergeFrom(from._internal_http_end_point());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.is_alive() != 0) {
    _internal_set_is_alive(from._internal_is_alive());
  }
}

void MemberInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.gossip.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.gossip.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  return true;
}

void MemberInfo::InternalSwap(MemberInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemberInfo, is_alive_)
      + sizeof(MemberInfo::is_alive_)
      - PROTOBUF_FIELD_OFFSET(MemberInfo, instance_id_)>(
          reinterpret_cast<char*>(&instance_id_),
          reinterpret_cast<char*>(&other->instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gossip
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::event_store::client::gossip::ClusterInfo* Arena::CreateMaybeMessage< ::event_store::client::gossip::ClusterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::gossip::ClusterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::gossip::EndPoint* Arena::CreateMaybeMessage< ::event_store::client::gossip::EndPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::gossip::EndPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::gossip::MemberInfo* Arena::CreateMaybeMessage< ::event_store::client::gossip::MemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::gossip::MemberInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

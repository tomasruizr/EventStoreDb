// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streams.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_streams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_streams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "shared.pb.h"
#include "status.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_streams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_streams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_streams_2eproto;
namespace event_store {
namespace client {
namespace streams {
class AppendReq;
class AppendReqDefaultTypeInternal;
extern AppendReqDefaultTypeInternal _AppendReq_default_instance_;
class AppendReq_Options;
class AppendReq_OptionsDefaultTypeInternal;
extern AppendReq_OptionsDefaultTypeInternal _AppendReq_Options_default_instance_;
class AppendReq_ProposedMessage;
class AppendReq_ProposedMessageDefaultTypeInternal;
extern AppendReq_ProposedMessageDefaultTypeInternal _AppendReq_ProposedMessage_default_instance_;
class AppendReq_ProposedMessage_MetadataEntry_DoNotUse;
class AppendReq_ProposedMessage_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AppendReq_ProposedMessage_MetadataEntry_DoNotUseDefaultTypeInternal _AppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_;
class AppendResp;
class AppendRespDefaultTypeInternal;
extern AppendRespDefaultTypeInternal _AppendResp_default_instance_;
class AppendResp_Position;
class AppendResp_PositionDefaultTypeInternal;
extern AppendResp_PositionDefaultTypeInternal _AppendResp_Position_default_instance_;
class AppendResp_Success;
class AppendResp_SuccessDefaultTypeInternal;
extern AppendResp_SuccessDefaultTypeInternal _AppendResp_Success_default_instance_;
class AppendResp_WrongExpectedVersion;
class AppendResp_WrongExpectedVersionDefaultTypeInternal;
extern AppendResp_WrongExpectedVersionDefaultTypeInternal _AppendResp_WrongExpectedVersion_default_instance_;
class BatchAppendReq;
class BatchAppendReqDefaultTypeInternal;
extern BatchAppendReqDefaultTypeInternal _BatchAppendReq_default_instance_;
class BatchAppendReq_Options;
class BatchAppendReq_OptionsDefaultTypeInternal;
extern BatchAppendReq_OptionsDefaultTypeInternal _BatchAppendReq_Options_default_instance_;
class BatchAppendReq_ProposedMessage;
class BatchAppendReq_ProposedMessageDefaultTypeInternal;
extern BatchAppendReq_ProposedMessageDefaultTypeInternal _BatchAppendReq_ProposedMessage_default_instance_;
class BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse;
class BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUseDefaultTypeInternal;
extern BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUseDefaultTypeInternal _BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_;
class BatchAppendResp;
class BatchAppendRespDefaultTypeInternal;
extern BatchAppendRespDefaultTypeInternal _BatchAppendResp_default_instance_;
class BatchAppendResp_Success;
class BatchAppendResp_SuccessDefaultTypeInternal;
extern BatchAppendResp_SuccessDefaultTypeInternal _BatchAppendResp_Success_default_instance_;
class DeleteReq;
class DeleteReqDefaultTypeInternal;
extern DeleteReqDefaultTypeInternal _DeleteReq_default_instance_;
class DeleteReq_Options;
class DeleteReq_OptionsDefaultTypeInternal;
extern DeleteReq_OptionsDefaultTypeInternal _DeleteReq_Options_default_instance_;
class DeleteResp;
class DeleteRespDefaultTypeInternal;
extern DeleteRespDefaultTypeInternal _DeleteResp_default_instance_;
class DeleteResp_Position;
class DeleteResp_PositionDefaultTypeInternal;
extern DeleteResp_PositionDefaultTypeInternal _DeleteResp_Position_default_instance_;
class ReadReq;
class ReadReqDefaultTypeInternal;
extern ReadReqDefaultTypeInternal _ReadReq_default_instance_;
class ReadReq_Options;
class ReadReq_OptionsDefaultTypeInternal;
extern ReadReq_OptionsDefaultTypeInternal _ReadReq_Options_default_instance_;
class ReadReq_Options_AllOptions;
class ReadReq_Options_AllOptionsDefaultTypeInternal;
extern ReadReq_Options_AllOptionsDefaultTypeInternal _ReadReq_Options_AllOptions_default_instance_;
class ReadReq_Options_ControlOption;
class ReadReq_Options_ControlOptionDefaultTypeInternal;
extern ReadReq_Options_ControlOptionDefaultTypeInternal _ReadReq_Options_ControlOption_default_instance_;
class ReadReq_Options_FilterOptions;
class ReadReq_Options_FilterOptionsDefaultTypeInternal;
extern ReadReq_Options_FilterOptionsDefaultTypeInternal _ReadReq_Options_FilterOptions_default_instance_;
class ReadReq_Options_FilterOptions_Expression;
class ReadReq_Options_FilterOptions_ExpressionDefaultTypeInternal;
extern ReadReq_Options_FilterOptions_ExpressionDefaultTypeInternal _ReadReq_Options_FilterOptions_Expression_default_instance_;
class ReadReq_Options_Position;
class ReadReq_Options_PositionDefaultTypeInternal;
extern ReadReq_Options_PositionDefaultTypeInternal _ReadReq_Options_Position_default_instance_;
class ReadReq_Options_StreamOptions;
class ReadReq_Options_StreamOptionsDefaultTypeInternal;
extern ReadReq_Options_StreamOptionsDefaultTypeInternal _ReadReq_Options_StreamOptions_default_instance_;
class ReadReq_Options_SubscriptionOptions;
class ReadReq_Options_SubscriptionOptionsDefaultTypeInternal;
extern ReadReq_Options_SubscriptionOptionsDefaultTypeInternal _ReadReq_Options_SubscriptionOptions_default_instance_;
class ReadReq_Options_UUIDOption;
class ReadReq_Options_UUIDOptionDefaultTypeInternal;
extern ReadReq_Options_UUIDOptionDefaultTypeInternal _ReadReq_Options_UUIDOption_default_instance_;
class ReadResp;
class ReadRespDefaultTypeInternal;
extern ReadRespDefaultTypeInternal _ReadResp_default_instance_;
class ReadResp_Checkpoint;
class ReadResp_CheckpointDefaultTypeInternal;
extern ReadResp_CheckpointDefaultTypeInternal _ReadResp_Checkpoint_default_instance_;
class ReadResp_ReadEvent;
class ReadResp_ReadEventDefaultTypeInternal;
extern ReadResp_ReadEventDefaultTypeInternal _ReadResp_ReadEvent_default_instance_;
class ReadResp_ReadEvent_RecordedEvent;
class ReadResp_ReadEvent_RecordedEventDefaultTypeInternal;
extern ReadResp_ReadEvent_RecordedEventDefaultTypeInternal _ReadResp_ReadEvent_RecordedEvent_default_instance_;
class ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse;
class ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUseDefaultTypeInternal _ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_;
class ReadResp_StreamNotFound;
class ReadResp_StreamNotFoundDefaultTypeInternal;
extern ReadResp_StreamNotFoundDefaultTypeInternal _ReadResp_StreamNotFound_default_instance_;
class ReadResp_SubscriptionConfirmation;
class ReadResp_SubscriptionConfirmationDefaultTypeInternal;
extern ReadResp_SubscriptionConfirmationDefaultTypeInternal _ReadResp_SubscriptionConfirmation_default_instance_;
class TombstoneReq;
class TombstoneReqDefaultTypeInternal;
extern TombstoneReqDefaultTypeInternal _TombstoneReq_default_instance_;
class TombstoneReq_Options;
class TombstoneReq_OptionsDefaultTypeInternal;
extern TombstoneReq_OptionsDefaultTypeInternal _TombstoneReq_Options_default_instance_;
class TombstoneResp;
class TombstoneRespDefaultTypeInternal;
extern TombstoneRespDefaultTypeInternal _TombstoneResp_default_instance_;
class TombstoneResp_Position;
class TombstoneResp_PositionDefaultTypeInternal;
extern TombstoneResp_PositionDefaultTypeInternal _TombstoneResp_Position_default_instance_;
}  // namespace streams
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::client::streams::AppendReq* Arena::CreateMaybeMessage<::event_store::client::streams::AppendReq>(Arena*);
template<> ::event_store::client::streams::AppendReq_Options* Arena::CreateMaybeMessage<::event_store::client::streams::AppendReq_Options>(Arena*);
template<> ::event_store::client::streams::AppendReq_ProposedMessage* Arena::CreateMaybeMessage<::event_store::client::streams::AppendReq_ProposedMessage>(Arena*);
template<> ::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse>(Arena*);
template<> ::event_store::client::streams::AppendResp* Arena::CreateMaybeMessage<::event_store::client::streams::AppendResp>(Arena*);
template<> ::event_store::client::streams::AppendResp_Position* Arena::CreateMaybeMessage<::event_store::client::streams::AppendResp_Position>(Arena*);
template<> ::event_store::client::streams::AppendResp_Success* Arena::CreateMaybeMessage<::event_store::client::streams::AppendResp_Success>(Arena*);
template<> ::event_store::client::streams::AppendResp_WrongExpectedVersion* Arena::CreateMaybeMessage<::event_store::client::streams::AppendResp_WrongExpectedVersion>(Arena*);
template<> ::event_store::client::streams::BatchAppendReq* Arena::CreateMaybeMessage<::event_store::client::streams::BatchAppendReq>(Arena*);
template<> ::event_store::client::streams::BatchAppendReq_Options* Arena::CreateMaybeMessage<::event_store::client::streams::BatchAppendReq_Options>(Arena*);
template<> ::event_store::client::streams::BatchAppendReq_ProposedMessage* Arena::CreateMaybeMessage<::event_store::client::streams::BatchAppendReq_ProposedMessage>(Arena*);
template<> ::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse>(Arena*);
template<> ::event_store::client::streams::BatchAppendResp* Arena::CreateMaybeMessage<::event_store::client::streams::BatchAppendResp>(Arena*);
template<> ::event_store::client::streams::BatchAppendResp_Success* Arena::CreateMaybeMessage<::event_store::client::streams::BatchAppendResp_Success>(Arena*);
template<> ::event_store::client::streams::DeleteReq* Arena::CreateMaybeMessage<::event_store::client::streams::DeleteReq>(Arena*);
template<> ::event_store::client::streams::DeleteReq_Options* Arena::CreateMaybeMessage<::event_store::client::streams::DeleteReq_Options>(Arena*);
template<> ::event_store::client::streams::DeleteResp* Arena::CreateMaybeMessage<::event_store::client::streams::DeleteResp>(Arena*);
template<> ::event_store::client::streams::DeleteResp_Position* Arena::CreateMaybeMessage<::event_store::client::streams::DeleteResp_Position>(Arena*);
template<> ::event_store::client::streams::ReadReq* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options_AllOptions* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_AllOptions>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options_ControlOption* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_ControlOption>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options_FilterOptions* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_FilterOptions>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_FilterOptions_Expression>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options_Position* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_Position>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options_StreamOptions* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_StreamOptions>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_SubscriptionOptions>(Arena*);
template<> ::event_store::client::streams::ReadReq_Options_UUIDOption* Arena::CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_UUIDOption>(Arena*);
template<> ::event_store::client::streams::ReadResp* Arena::CreateMaybeMessage<::event_store::client::streams::ReadResp>(Arena*);
template<> ::event_store::client::streams::ReadResp_Checkpoint* Arena::CreateMaybeMessage<::event_store::client::streams::ReadResp_Checkpoint>(Arena*);
template<> ::event_store::client::streams::ReadResp_ReadEvent* Arena::CreateMaybeMessage<::event_store::client::streams::ReadResp_ReadEvent>(Arena*);
template<> ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* Arena::CreateMaybeMessage<::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent>(Arena*);
template<> ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse>(Arena*);
template<> ::event_store::client::streams::ReadResp_StreamNotFound* Arena::CreateMaybeMessage<::event_store::client::streams::ReadResp_StreamNotFound>(Arena*);
template<> ::event_store::client::streams::ReadResp_SubscriptionConfirmation* Arena::CreateMaybeMessage<::event_store::client::streams::ReadResp_SubscriptionConfirmation>(Arena*);
template<> ::event_store::client::streams::TombstoneReq* Arena::CreateMaybeMessage<::event_store::client::streams::TombstoneReq>(Arena*);
template<> ::event_store::client::streams::TombstoneReq_Options* Arena::CreateMaybeMessage<::event_store::client::streams::TombstoneReq_Options>(Arena*);
template<> ::event_store::client::streams::TombstoneResp* Arena::CreateMaybeMessage<::event_store::client::streams::TombstoneResp>(Arena*);
template<> ::event_store::client::streams::TombstoneResp_Position* Arena::CreateMaybeMessage<::event_store::client::streams::TombstoneResp_Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace client {
namespace streams {

enum ReadReq_Options_ReadDirection : int {
  ReadReq_Options_ReadDirection_Forwards = 0,
  ReadReq_Options_ReadDirection_Backwards = 1,
  ReadReq_Options_ReadDirection_ReadReq_Options_ReadDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadReq_Options_ReadDirection_ReadReq_Options_ReadDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadReq_Options_ReadDirection_IsValid(int value);
constexpr ReadReq_Options_ReadDirection ReadReq_Options_ReadDirection_ReadDirection_MIN = ReadReq_Options_ReadDirection_Forwards;
constexpr ReadReq_Options_ReadDirection ReadReq_Options_ReadDirection_ReadDirection_MAX = ReadReq_Options_ReadDirection_Backwards;
constexpr int ReadReq_Options_ReadDirection_ReadDirection_ARRAYSIZE = ReadReq_Options_ReadDirection_ReadDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadReq_Options_ReadDirection_descriptor();
template<typename T>
inline const std::string& ReadReq_Options_ReadDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadReq_Options_ReadDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadReq_Options_ReadDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadReq_Options_ReadDirection_descriptor(), enum_t_value);
}
inline bool ReadReq_Options_ReadDirection_Parse(
    const std::string& name, ReadReq_Options_ReadDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadReq_Options_ReadDirection>(
    ReadReq_Options_ReadDirection_descriptor(), name, value);
}
// ===================================================================

class ReadReq_Options_StreamOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options.StreamOptions) */ {
 public:
  inline ReadReq_Options_StreamOptions() : ReadReq_Options_StreamOptions(nullptr) {};
  virtual ~ReadReq_Options_StreamOptions();

  ReadReq_Options_StreamOptions(const ReadReq_Options_StreamOptions& from);
  ReadReq_Options_StreamOptions(ReadReq_Options_StreamOptions&& from) noexcept
    : ReadReq_Options_StreamOptions() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_StreamOptions& operator=(const ReadReq_Options_StreamOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_StreamOptions& operator=(ReadReq_Options_StreamOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_StreamOptions& default_instance();

  enum RevisionOptionCase {
    kRevision = 2,
    kStart = 3,
    kEnd = 4,
    REVISION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_StreamOptions* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_StreamOptions*>(
               &_ReadReq_Options_StreamOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadReq_Options_StreamOptions& a, ReadReq_Options_StreamOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_StreamOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_StreamOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_StreamOptions* New() const final {
    return CreateMaybeMessage<ReadReq_Options_StreamOptions>(nullptr);
  }

  ReadReq_Options_StreamOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_StreamOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_StreamOptions& from);
  void MergeFrom(const ReadReq_Options_StreamOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_StreamOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options.StreamOptions";
  }
  protected:
  explicit ReadReq_Options_StreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
    kRevisionFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // uint64 revision = 2;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::event_store::client::Empty& start() const;
  ::event_store::client::Empty* release_start();
  ::event_store::client::Empty* mutable_start();
  void set_allocated_start(::event_store::client::Empty* start);
  private:
  const ::event_store::client::Empty& _internal_start() const;
  ::event_store::client::Empty* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::event_store::client::Empty* start);
  ::event_store::client::Empty* unsafe_arena_release_start();

  // .event_store.client.Empty end = 4;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::event_store::client::Empty& end() const;
  ::event_store::client::Empty* release_end();
  ::event_store::client::Empty* mutable_end();
  void set_allocated_end(::event_store::client::Empty* end);
  private:
  const ::event_store::client::Empty& _internal_end() const;
  ::event_store::client::Empty* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::event_store::client::Empty* end);
  ::event_store::client::Empty* unsafe_arena_release_end();

  void clear_revision_option();
  RevisionOptionCase revision_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options.StreamOptions)
 private:
  class _Internal;
  void set_has_revision();
  void set_has_start();
  void set_has_end();

  inline bool has_revision_option() const;
  inline void clear_has_revision_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  union RevisionOptionUnion {
    RevisionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
    ::event_store::client::Empty* start_;
    ::event_store::client::Empty* end_;
  } revision_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options_AllOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options.AllOptions) */ {
 public:
  inline ReadReq_Options_AllOptions() : ReadReq_Options_AllOptions(nullptr) {};
  virtual ~ReadReq_Options_AllOptions();

  ReadReq_Options_AllOptions(const ReadReq_Options_AllOptions& from);
  ReadReq_Options_AllOptions(ReadReq_Options_AllOptions&& from) noexcept
    : ReadReq_Options_AllOptions() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_AllOptions& operator=(const ReadReq_Options_AllOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_AllOptions& operator=(ReadReq_Options_AllOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_AllOptions& default_instance();

  enum AllOptionCase {
    kPosition = 1,
    kStart = 2,
    kEnd = 3,
    ALL_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_AllOptions* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_AllOptions*>(
               &_ReadReq_Options_AllOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadReq_Options_AllOptions& a, ReadReq_Options_AllOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_AllOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_AllOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_AllOptions* New() const final {
    return CreateMaybeMessage<ReadReq_Options_AllOptions>(nullptr);
  }

  ReadReq_Options_AllOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_AllOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_AllOptions& from);
  void MergeFrom(const ReadReq_Options_AllOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_AllOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options.AllOptions";
  }
  protected:
  explicit ReadReq_Options_AllOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // .event_store.client.streams.ReadReq.Options.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::event_store::client::streams::ReadReq_Options_Position& position() const;
  ::event_store::client::streams::ReadReq_Options_Position* release_position();
  ::event_store::client::streams::ReadReq_Options_Position* mutable_position();
  void set_allocated_position(::event_store::client::streams::ReadReq_Options_Position* position);
  private:
  const ::event_store::client::streams::ReadReq_Options_Position& _internal_position() const;
  ::event_store::client::streams::ReadReq_Options_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::event_store::client::streams::ReadReq_Options_Position* position);
  ::event_store::client::streams::ReadReq_Options_Position* unsafe_arena_release_position();

  // .event_store.client.Empty start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::event_store::client::Empty& start() const;
  ::event_store::client::Empty* release_start();
  ::event_store::client::Empty* mutable_start();
  void set_allocated_start(::event_store::client::Empty* start);
  private:
  const ::event_store::client::Empty& _internal_start() const;
  ::event_store::client::Empty* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::event_store::client::Empty* start);
  ::event_store::client::Empty* unsafe_arena_release_start();

  // .event_store.client.Empty end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::event_store::client::Empty& end() const;
  ::event_store::client::Empty* release_end();
  ::event_store::client::Empty* mutable_end();
  void set_allocated_end(::event_store::client::Empty* end);
  private:
  const ::event_store::client::Empty& _internal_end() const;
  ::event_store::client::Empty* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::event_store::client::Empty* end);
  ::event_store::client::Empty* unsafe_arena_release_end();

  void clear_all_option();
  AllOptionCase all_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options.AllOptions)
 private:
  class _Internal;
  void set_has_position();
  void set_has_start();
  void set_has_end();

  inline bool has_all_option() const;
  inline void clear_has_all_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AllOptionUnion {
    AllOptionUnion() {}
    ::event_store::client::streams::ReadReq_Options_Position* position_;
    ::event_store::client::Empty* start_;
    ::event_store::client::Empty* end_;
  } all_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options_SubscriptionOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options.SubscriptionOptions) */ {
 public:
  inline ReadReq_Options_SubscriptionOptions() : ReadReq_Options_SubscriptionOptions(nullptr) {};
  virtual ~ReadReq_Options_SubscriptionOptions();

  ReadReq_Options_SubscriptionOptions(const ReadReq_Options_SubscriptionOptions& from);
  ReadReq_Options_SubscriptionOptions(ReadReq_Options_SubscriptionOptions&& from) noexcept
    : ReadReq_Options_SubscriptionOptions() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_SubscriptionOptions& operator=(const ReadReq_Options_SubscriptionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_SubscriptionOptions& operator=(ReadReq_Options_SubscriptionOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_SubscriptionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_SubscriptionOptions* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_SubscriptionOptions*>(
               &_ReadReq_Options_SubscriptionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadReq_Options_SubscriptionOptions& a, ReadReq_Options_SubscriptionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_SubscriptionOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_SubscriptionOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_SubscriptionOptions* New() const final {
    return CreateMaybeMessage<ReadReq_Options_SubscriptionOptions>(nullptr);
  }

  ReadReq_Options_SubscriptionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_SubscriptionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_SubscriptionOptions& from);
  void MergeFrom(const ReadReq_Options_SubscriptionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_SubscriptionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options.SubscriptionOptions";
  }
  protected:
  explicit ReadReq_Options_SubscriptionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options.Position) */ {
 public:
  inline ReadReq_Options_Position() : ReadReq_Options_Position(nullptr) {};
  virtual ~ReadReq_Options_Position();

  ReadReq_Options_Position(const ReadReq_Options_Position& from);
  ReadReq_Options_Position(ReadReq_Options_Position&& from) noexcept
    : ReadReq_Options_Position() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_Position& operator=(const ReadReq_Options_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_Position& operator=(ReadReq_Options_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_Position* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_Position*>(
               &_ReadReq_Options_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadReq_Options_Position& a, ReadReq_Options_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_Position* New() const final {
    return CreateMaybeMessage<ReadReq_Options_Position>(nullptr);
  }

  ReadReq_Options_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_Position& from);
  void MergeFrom(const ReadReq_Options_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options.Position";
  }
  protected:
  explicit ReadReq_Options_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
  };
  // uint64 commit_position = 1;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 2;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options_FilterOptions_Expression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options.FilterOptions.Expression) */ {
 public:
  inline ReadReq_Options_FilterOptions_Expression() : ReadReq_Options_FilterOptions_Expression(nullptr) {};
  virtual ~ReadReq_Options_FilterOptions_Expression();

  ReadReq_Options_FilterOptions_Expression(const ReadReq_Options_FilterOptions_Expression& from);
  ReadReq_Options_FilterOptions_Expression(ReadReq_Options_FilterOptions_Expression&& from) noexcept
    : ReadReq_Options_FilterOptions_Expression() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_FilterOptions_Expression& operator=(const ReadReq_Options_FilterOptions_Expression& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_FilterOptions_Expression& operator=(ReadReq_Options_FilterOptions_Expression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_FilterOptions_Expression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_FilterOptions_Expression* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_FilterOptions_Expression*>(
               &_ReadReq_Options_FilterOptions_Expression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadReq_Options_FilterOptions_Expression& a, ReadReq_Options_FilterOptions_Expression& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_FilterOptions_Expression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_FilterOptions_Expression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_FilterOptions_Expression* New() const final {
    return CreateMaybeMessage<ReadReq_Options_FilterOptions_Expression>(nullptr);
  }

  ReadReq_Options_FilterOptions_Expression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_FilterOptions_Expression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_FilterOptions_Expression& from);
  void MergeFrom(const ReadReq_Options_FilterOptions_Expression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_FilterOptions_Expression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options.FilterOptions.Expression";
  }
  protected:
  explicit ReadReq_Options_FilterOptions_Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 2,
    kRegexFieldNumber = 1,
  };
  // repeated string prefix = 2;
  int prefix_size() const;
  private:
  int _internal_prefix_size() const;
  public:
  void clear_prefix();
  const std::string& prefix(int index) const;
  std::string* mutable_prefix(int index);
  void set_prefix(int index, const std::string& value);
  void set_prefix(int index, std::string&& value);
  void set_prefix(int index, const char* value);
  void set_prefix(int index, const char* value, size_t size);
  std::string* add_prefix();
  void add_prefix(const std::string& value);
  void add_prefix(std::string&& value);
  void add_prefix(const char* value);
  void add_prefix(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prefix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prefix();
  private:
  const std::string& _internal_prefix(int index) const;
  std::string* _internal_add_prefix();
  public:

  // string regex = 1;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_regex();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_regex(
      std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options_FilterOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options.FilterOptions) */ {
 public:
  inline ReadReq_Options_FilterOptions() : ReadReq_Options_FilterOptions(nullptr) {};
  virtual ~ReadReq_Options_FilterOptions();

  ReadReq_Options_FilterOptions(const ReadReq_Options_FilterOptions& from);
  ReadReq_Options_FilterOptions(ReadReq_Options_FilterOptions&& from) noexcept
    : ReadReq_Options_FilterOptions() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_FilterOptions& operator=(const ReadReq_Options_FilterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_FilterOptions& operator=(ReadReq_Options_FilterOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_FilterOptions& default_instance();

  enum FilterCase {
    kStreamIdentifier = 1,
    kEventType = 2,
    FILTER_NOT_SET = 0,
  };

  enum WindowCase {
    kMax = 3,
    kCount = 4,
    WINDOW_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_FilterOptions* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_FilterOptions*>(
               &_ReadReq_Options_FilterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadReq_Options_FilterOptions& a, ReadReq_Options_FilterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_FilterOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_FilterOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_FilterOptions* New() const final {
    return CreateMaybeMessage<ReadReq_Options_FilterOptions>(nullptr);
  }

  ReadReq_Options_FilterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_FilterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_FilterOptions& from);
  void MergeFrom(const ReadReq_Options_FilterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_FilterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options.FilterOptions";
  }
  protected:
  explicit ReadReq_Options_FilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadReq_Options_FilterOptions_Expression Expression;

  // accessors -------------------------------------------------------

  enum : int {
    kCheckpointIntervalMultiplierFieldNumber = 5,
    kStreamIdentifierFieldNumber = 1,
    kEventTypeFieldNumber = 2,
    kMaxFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // uint32 checkpointIntervalMultiplier = 5;
  void clear_checkpointintervalmultiplier();
  ::PROTOBUF_NAMESPACE_ID::uint32 checkpointintervalmultiplier() const;
  void set_checkpointintervalmultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_checkpointintervalmultiplier() const;
  void _internal_set_checkpointintervalmultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .event_store.client.streams.ReadReq.Options.FilterOptions.Expression stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& stream_identifier() const;
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* release_stream_identifier();
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* stream_identifier);
  private:
  const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& _internal_stream_identifier() const;
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* stream_identifier);
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* unsafe_arena_release_stream_identifier();

  // .event_store.client.streams.ReadReq.Options.FilterOptions.Expression event_type = 2;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& event_type() const;
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* release_event_type();
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* mutable_event_type();
  void set_allocated_event_type(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* event_type);
  private:
  const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& _internal_event_type() const;
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* _internal_mutable_event_type();
  public:
  void unsafe_arena_set_allocated_event_type(
      ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* event_type);
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* unsafe_arena_release_event_type();

  // uint32 max = 3;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .event_store.client.Empty count = 4;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::event_store::client::Empty& count() const;
  ::event_store::client::Empty* release_count();
  ::event_store::client::Empty* mutable_count();
  void set_allocated_count(::event_store::client::Empty* count);
  private:
  const ::event_store::client::Empty& _internal_count() const;
  ::event_store::client::Empty* _internal_mutable_count();
  public:
  void unsafe_arena_set_allocated_count(
      ::event_store::client::Empty* count);
  ::event_store::client::Empty* unsafe_arena_release_count();

  void clear_filter();
  FilterCase filter_case() const;
  void clear_window();
  WindowCase window_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options.FilterOptions)
 private:
  class _Internal;
  void set_has_stream_identifier();
  void set_has_event_type();
  void set_has_max();
  void set_has_count();

  inline bool has_filter() const;
  inline void clear_has_filter();

  inline bool has_window() const;
  inline void clear_has_window();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 checkpointintervalmultiplier_;
  union FilterUnion {
    FilterUnion() {}
    ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* stream_identifier_;
    ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* event_type_;
  } filter_;
  union WindowUnion {
    WindowUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 max_;
    ::event_store::client::Empty* count_;
  } window_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options_UUIDOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options.UUIDOption) */ {
 public:
  inline ReadReq_Options_UUIDOption() : ReadReq_Options_UUIDOption(nullptr) {};
  virtual ~ReadReq_Options_UUIDOption();

  ReadReq_Options_UUIDOption(const ReadReq_Options_UUIDOption& from);
  ReadReq_Options_UUIDOption(ReadReq_Options_UUIDOption&& from) noexcept
    : ReadReq_Options_UUIDOption() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_UUIDOption& operator=(const ReadReq_Options_UUIDOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_UUIDOption& operator=(ReadReq_Options_UUIDOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_UUIDOption& default_instance();

  enum ContentCase {
    kStructured = 1,
    kString = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_UUIDOption* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_UUIDOption*>(
               &_ReadReq_Options_UUIDOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadReq_Options_UUIDOption& a, ReadReq_Options_UUIDOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_UUIDOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_UUIDOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_UUIDOption* New() const final {
    return CreateMaybeMessage<ReadReq_Options_UUIDOption>(nullptr);
  }

  ReadReq_Options_UUIDOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_UUIDOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_UUIDOption& from);
  void MergeFrom(const ReadReq_Options_UUIDOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_UUIDOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options.UUIDOption";
  }
  protected:
  explicit ReadReq_Options_UUIDOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructuredFieldNumber = 1,
    kStringFieldNumber = 2,
  };
  // .event_store.client.Empty structured = 1;
  bool has_structured() const;
  private:
  bool _internal_has_structured() const;
  public:
  void clear_structured();
  const ::event_store::client::Empty& structured() const;
  ::event_store::client::Empty* release_structured();
  ::event_store::client::Empty* mutable_structured();
  void set_allocated_structured(::event_store::client::Empty* structured);
  private:
  const ::event_store::client::Empty& _internal_structured() const;
  ::event_store::client::Empty* _internal_mutable_structured();
  public:
  void unsafe_arena_set_allocated_structured(
      ::event_store::client::Empty* structured);
  ::event_store::client::Empty* unsafe_arena_release_structured();

  // .event_store.client.Empty string = 2;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::event_store::client::Empty& string() const;
  ::event_store::client::Empty* release_string();
  ::event_store::client::Empty* mutable_string();
  void set_allocated_string(::event_store::client::Empty* string);
  private:
  const ::event_store::client::Empty& _internal_string() const;
  ::event_store::client::Empty* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::event_store::client::Empty* string);
  ::event_store::client::Empty* unsafe_arena_release_string();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options.UUIDOption)
 private:
  class _Internal;
  void set_has_structured();
  void set_has_string();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentUnion {
    ContentUnion() {}
    ::event_store::client::Empty* structured_;
    ::event_store::client::Empty* string_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options_ControlOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options.ControlOption) */ {
 public:
  inline ReadReq_Options_ControlOption() : ReadReq_Options_ControlOption(nullptr) {};
  virtual ~ReadReq_Options_ControlOption();

  ReadReq_Options_ControlOption(const ReadReq_Options_ControlOption& from);
  ReadReq_Options_ControlOption(ReadReq_Options_ControlOption&& from) noexcept
    : ReadReq_Options_ControlOption() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_ControlOption& operator=(const ReadReq_Options_ControlOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_ControlOption& operator=(ReadReq_Options_ControlOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_ControlOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_ControlOption* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_ControlOption*>(
               &_ReadReq_Options_ControlOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadReq_Options_ControlOption& a, ReadReq_Options_ControlOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_ControlOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_ControlOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_ControlOption* New() const final {
    return CreateMaybeMessage<ReadReq_Options_ControlOption>(nullptr);
  }

  ReadReq_Options_ControlOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_ControlOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_ControlOption& from);
  void MergeFrom(const ReadReq_Options_ControlOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_ControlOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options.ControlOption";
  }
  protected:
  explicit ReadReq_Options_ControlOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompatibilityFieldNumber = 1,
  };
  // uint32 compatibility = 1;
  void clear_compatibility();
  ::PROTOBUF_NAMESPACE_ID::uint32 compatibility() const;
  void set_compatibility(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_compatibility() const;
  void _internal_set_compatibility(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options.ControlOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compatibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq.Options) */ {
 public:
  inline ReadReq_Options() : ReadReq_Options(nullptr) {};
  virtual ~ReadReq_Options();

  ReadReq_Options(const ReadReq_Options& from);
  ReadReq_Options(ReadReq_Options&& from) noexcept
    : ReadReq_Options() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options& operator=(const ReadReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options& operator=(ReadReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options& default_instance();

  enum StreamOptionCase {
    kStream = 1,
    kAll = 2,
    STREAM_OPTION_NOT_SET = 0,
  };

  enum CountOptionCase {
    kCount = 5,
    kSubscription = 6,
    COUNT_OPTION_NOT_SET = 0,
  };

  enum FilterOptionCase {
    kFilter = 7,
    kNoFilter = 8,
    FILTER_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options*>(
               &_ReadReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadReq_Options& a, ReadReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options* New() const final {
    return CreateMaybeMessage<ReadReq_Options>(nullptr);
  }

  ReadReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options& from);
  void MergeFrom(const ReadReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq.Options";
  }
  protected:
  explicit ReadReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadReq_Options_StreamOptions StreamOptions;
  typedef ReadReq_Options_AllOptions AllOptions;
  typedef ReadReq_Options_SubscriptionOptions SubscriptionOptions;
  typedef ReadReq_Options_Position Position;
  typedef ReadReq_Options_FilterOptions FilterOptions;
  typedef ReadReq_Options_UUIDOption UUIDOption;
  typedef ReadReq_Options_ControlOption ControlOption;

  typedef ReadReq_Options_ReadDirection ReadDirection;
  static constexpr ReadDirection Forwards =
    ReadReq_Options_ReadDirection_Forwards;
  static constexpr ReadDirection Backwards =
    ReadReq_Options_ReadDirection_Backwards;
  static inline bool ReadDirection_IsValid(int value) {
    return ReadReq_Options_ReadDirection_IsValid(value);
  }
  static constexpr ReadDirection ReadDirection_MIN =
    ReadReq_Options_ReadDirection_ReadDirection_MIN;
  static constexpr ReadDirection ReadDirection_MAX =
    ReadReq_Options_ReadDirection_ReadDirection_MAX;
  static constexpr int ReadDirection_ARRAYSIZE =
    ReadReq_Options_ReadDirection_ReadDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReadDirection_descriptor() {
    return ReadReq_Options_ReadDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& ReadDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadDirection_Name.");
    return ReadReq_Options_ReadDirection_Name(enum_t_value);
  }
  static inline bool ReadDirection_Parse(const std::string& name,
      ReadDirection* value) {
    return ReadReq_Options_ReadDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidOptionFieldNumber = 9,
    kControlOptionFieldNumber = 10,
    kReadDirectionFieldNumber = 3,
    kResolveLinksFieldNumber = 4,
    kStreamFieldNumber = 1,
    kAllFieldNumber = 2,
    kCountFieldNumber = 5,
    kSubscriptionFieldNumber = 6,
    kFilterFieldNumber = 7,
    kNoFilterFieldNumber = 8,
  };
  // .event_store.client.streams.ReadReq.Options.UUIDOption uuid_option = 9;
  bool has_uuid_option() const;
  private:
  bool _internal_has_uuid_option() const;
  public:
  void clear_uuid_option();
  const ::event_store::client::streams::ReadReq_Options_UUIDOption& uuid_option() const;
  ::event_store::client::streams::ReadReq_Options_UUIDOption* release_uuid_option();
  ::event_store::client::streams::ReadReq_Options_UUIDOption* mutable_uuid_option();
  void set_allocated_uuid_option(::event_store::client::streams::ReadReq_Options_UUIDOption* uuid_option);
  private:
  const ::event_store::client::streams::ReadReq_Options_UUIDOption& _internal_uuid_option() const;
  ::event_store::client::streams::ReadReq_Options_UUIDOption* _internal_mutable_uuid_option();
  public:
  void unsafe_arena_set_allocated_uuid_option(
      ::event_store::client::streams::ReadReq_Options_UUIDOption* uuid_option);
  ::event_store::client::streams::ReadReq_Options_UUIDOption* unsafe_arena_release_uuid_option();

  // .event_store.client.streams.ReadReq.Options.ControlOption control_option = 10;
  bool has_control_option() const;
  private:
  bool _internal_has_control_option() const;
  public:
  void clear_control_option();
  const ::event_store::client::streams::ReadReq_Options_ControlOption& control_option() const;
  ::event_store::client::streams::ReadReq_Options_ControlOption* release_control_option();
  ::event_store::client::streams::ReadReq_Options_ControlOption* mutable_control_option();
  void set_allocated_control_option(::event_store::client::streams::ReadReq_Options_ControlOption* control_option);
  private:
  const ::event_store::client::streams::ReadReq_Options_ControlOption& _internal_control_option() const;
  ::event_store::client::streams::ReadReq_Options_ControlOption* _internal_mutable_control_option();
  public:
  void unsafe_arena_set_allocated_control_option(
      ::event_store::client::streams::ReadReq_Options_ControlOption* control_option);
  ::event_store::client::streams::ReadReq_Options_ControlOption* unsafe_arena_release_control_option();

  // .event_store.client.streams.ReadReq.Options.ReadDirection read_direction = 3;
  void clear_read_direction();
  ::event_store::client::streams::ReadReq_Options_ReadDirection read_direction() const;
  void set_read_direction(::event_store::client::streams::ReadReq_Options_ReadDirection value);
  private:
  ::event_store::client::streams::ReadReq_Options_ReadDirection _internal_read_direction() const;
  void _internal_set_read_direction(::event_store::client::streams::ReadReq_Options_ReadDirection value);
  public:

  // bool resolve_links = 4;
  void clear_resolve_links();
  bool resolve_links() const;
  void set_resolve_links(bool value);
  private:
  bool _internal_resolve_links() const;
  void _internal_set_resolve_links(bool value);
  public:

  // .event_store.client.streams.ReadReq.Options.StreamOptions stream = 1;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::event_store::client::streams::ReadReq_Options_StreamOptions& stream() const;
  ::event_store::client::streams::ReadReq_Options_StreamOptions* release_stream();
  ::event_store::client::streams::ReadReq_Options_StreamOptions* mutable_stream();
  void set_allocated_stream(::event_store::client::streams::ReadReq_Options_StreamOptions* stream);
  private:
  const ::event_store::client::streams::ReadReq_Options_StreamOptions& _internal_stream() const;
  ::event_store::client::streams::ReadReq_Options_StreamOptions* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::event_store::client::streams::ReadReq_Options_StreamOptions* stream);
  ::event_store::client::streams::ReadReq_Options_StreamOptions* unsafe_arena_release_stream();

  // .event_store.client.streams.ReadReq.Options.AllOptions all = 2;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::streams::ReadReq_Options_AllOptions& all() const;
  ::event_store::client::streams::ReadReq_Options_AllOptions* release_all();
  ::event_store::client::streams::ReadReq_Options_AllOptions* mutable_all();
  void set_allocated_all(::event_store::client::streams::ReadReq_Options_AllOptions* all);
  private:
  const ::event_store::client::streams::ReadReq_Options_AllOptions& _internal_all() const;
  ::event_store::client::streams::ReadReq_Options_AllOptions* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::streams::ReadReq_Options_AllOptions* all);
  ::event_store::client::streams::ReadReq_Options_AllOptions* unsafe_arena_release_all();

  // uint64 count = 5;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.streams.ReadReq.Options.SubscriptionOptions subscription = 6;
  bool has_subscription() const;
  private:
  bool _internal_has_subscription() const;
  public:
  void clear_subscription();
  const ::event_store::client::streams::ReadReq_Options_SubscriptionOptions& subscription() const;
  ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* release_subscription();
  ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* mutable_subscription();
  void set_allocated_subscription(::event_store::client::streams::ReadReq_Options_SubscriptionOptions* subscription);
  private:
  const ::event_store::client::streams::ReadReq_Options_SubscriptionOptions& _internal_subscription() const;
  ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* _internal_mutable_subscription();
  public:
  void unsafe_arena_set_allocated_subscription(
      ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* subscription);
  ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* unsafe_arena_release_subscription();

  // .event_store.client.streams.ReadReq.Options.FilterOptions filter = 7;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::event_store::client::streams::ReadReq_Options_FilterOptions& filter() const;
  ::event_store::client::streams::ReadReq_Options_FilterOptions* release_filter();
  ::event_store::client::streams::ReadReq_Options_FilterOptions* mutable_filter();
  void set_allocated_filter(::event_store::client::streams::ReadReq_Options_FilterOptions* filter);
  private:
  const ::event_store::client::streams::ReadReq_Options_FilterOptions& _internal_filter() const;
  ::event_store::client::streams::ReadReq_Options_FilterOptions* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::event_store::client::streams::ReadReq_Options_FilterOptions* filter);
  ::event_store::client::streams::ReadReq_Options_FilterOptions* unsafe_arena_release_filter();

  // .event_store.client.Empty no_filter = 8;
  bool has_no_filter() const;
  private:
  bool _internal_has_no_filter() const;
  public:
  void clear_no_filter();
  const ::event_store::client::Empty& no_filter() const;
  ::event_store::client::Empty* release_no_filter();
  ::event_store::client::Empty* mutable_no_filter();
  void set_allocated_no_filter(::event_store::client::Empty* no_filter);
  private:
  const ::event_store::client::Empty& _internal_no_filter() const;
  ::event_store::client::Empty* _internal_mutable_no_filter();
  public:
  void unsafe_arena_set_allocated_no_filter(
      ::event_store::client::Empty* no_filter);
  ::event_store::client::Empty* unsafe_arena_release_no_filter();

  void clear_stream_option();
  StreamOptionCase stream_option_case() const;
  void clear_count_option();
  CountOptionCase count_option_case() const;
  void clear_filter_option();
  FilterOptionCase filter_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq.Options)
 private:
  class _Internal;
  void set_has_stream();
  void set_has_all();
  void set_has_count();
  void set_has_subscription();
  void set_has_filter();
  void set_has_no_filter();

  inline bool has_stream_option() const;
  inline void clear_has_stream_option();

  inline bool has_count_option() const;
  inline void clear_has_count_option();

  inline bool has_filter_option() const;
  inline void clear_has_filter_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::streams::ReadReq_Options_UUIDOption* uuid_option_;
  ::event_store::client::streams::ReadReq_Options_ControlOption* control_option_;
  int read_direction_;
  bool resolve_links_;
  union StreamOptionUnion {
    StreamOptionUnion() {}
    ::event_store::client::streams::ReadReq_Options_StreamOptions* stream_;
    ::event_store::client::streams::ReadReq_Options_AllOptions* all_;
  } stream_option_;
  union CountOptionUnion {
    CountOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 count_;
    ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* subscription_;
  } count_option_;
  union FilterOptionUnion {
    FilterOptionUnion() {}
    ::event_store::client::streams::ReadReq_Options_FilterOptions* filter_;
    ::event_store::client::Empty* no_filter_;
  } filter_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadReq) */ {
 public:
  inline ReadReq() : ReadReq(nullptr) {};
  virtual ~ReadReq();

  ReadReq(const ReadReq& from);
  ReadReq(ReadReq&& from) noexcept
    : ReadReq() {
    *this = ::std::move(from);
  }

  inline ReadReq& operator=(const ReadReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq& operator=(ReadReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq* internal_default_instance() {
    return reinterpret_cast<const ReadReq*>(
               &_ReadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadReq& a, ReadReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq* New() const final {
    return CreateMaybeMessage<ReadReq>(nullptr);
  }

  ReadReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq& from);
  void MergeFrom(const ReadReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadReq";
  }
  protected:
  explicit ReadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.streams.ReadReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::streams::ReadReq_Options& options() const;
  ::event_store::client::streams::ReadReq_Options* release_options();
  ::event_store::client::streams::ReadReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::streams::ReadReq_Options* options);
  private:
  const ::event_store::client::streams::ReadReq_Options& _internal_options() const;
  ::event_store::client::streams::ReadReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::streams::ReadReq_Options* options);
  ::event_store::client::streams::ReadReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::streams::ReadReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse();
  ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse& other);
  static const ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse*>(&_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class ReadResp_ReadEvent_RecordedEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent) */ {
 public:
  inline ReadResp_ReadEvent_RecordedEvent() : ReadResp_ReadEvent_RecordedEvent(nullptr) {};
  virtual ~ReadResp_ReadEvent_RecordedEvent();

  ReadResp_ReadEvent_RecordedEvent(const ReadResp_ReadEvent_RecordedEvent& from);
  ReadResp_ReadEvent_RecordedEvent(ReadResp_ReadEvent_RecordedEvent&& from) noexcept
    : ReadResp_ReadEvent_RecordedEvent() {
    *this = ::std::move(from);
  }

  inline ReadResp_ReadEvent_RecordedEvent& operator=(const ReadResp_ReadEvent_RecordedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp_ReadEvent_RecordedEvent& operator=(ReadResp_ReadEvent_RecordedEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp_ReadEvent_RecordedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp_ReadEvent_RecordedEvent* internal_default_instance() {
    return reinterpret_cast<const ReadResp_ReadEvent_RecordedEvent*>(
               &_ReadResp_ReadEvent_RecordedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReadResp_ReadEvent_RecordedEvent& a, ReadResp_ReadEvent_RecordedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp_ReadEvent_RecordedEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp_ReadEvent_RecordedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp_ReadEvent_RecordedEvent* New() const final {
    return CreateMaybeMessage<ReadResp_ReadEvent_RecordedEvent>(nullptr);
  }

  ReadResp_ReadEvent_RecordedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp_ReadEvent_RecordedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp_ReadEvent_RecordedEvent& from);
  void MergeFrom(const ReadResp_ReadEvent_RecordedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp_ReadEvent_RecordedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadResp.ReadEvent.RecordedEvent";
  }
  protected:
  explicit ReadResp_ReadEvent_RecordedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 6,
    kCustomMetadataFieldNumber = 7,
    kDataFieldNumber = 8,
    kIdFieldNumber = 1,
    kStreamIdentifierFieldNumber = 2,
    kStreamRevisionFieldNumber = 3,
    kPreparePositionFieldNumber = 4,
    kCommitPositionFieldNumber = 5,
  };
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // bytes custom_metadata = 7;
  void clear_custom_metadata();
  const std::string& custom_metadata() const;
  void set_custom_metadata(const std::string& value);
  void set_custom_metadata(std::string&& value);
  void set_custom_metadata(const char* value);
  void set_custom_metadata(const void* value, size_t size);
  std::string* mutable_custom_metadata();
  std::string* release_custom_metadata();
  void set_allocated_custom_metadata(std::string* custom_metadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_custom_metadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_custom_metadata(
      std::string* custom_metadata);
  private:
  const std::string& _internal_custom_metadata() const;
  void _internal_set_custom_metadata(const std::string& value);
  std::string* _internal_mutable_custom_metadata();
  public:

  // bytes data = 8;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .event_store.client.UUID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::event_store::client::UUID& id() const;
  ::event_store::client::UUID* release_id();
  ::event_store::client::UUID* mutable_id();
  void set_allocated_id(::event_store::client::UUID* id);
  private:
  const ::event_store::client::UUID& _internal_id() const;
  ::event_store::client::UUID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::event_store::client::UUID* id);
  ::event_store::client::UUID* unsafe_arena_release_id();

  // .event_store.client.StreamIdentifier stream_identifier = 2;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // uint64 stream_revision = 3;
  void clear_stream_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_revision() const;
  void set_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_revision() const;
  void _internal_set_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 4;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 commit_position = 5;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::event_store::client::UUID* id_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_revision_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadResp_ReadEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadResp.ReadEvent) */ {
 public:
  inline ReadResp_ReadEvent() : ReadResp_ReadEvent(nullptr) {};
  virtual ~ReadResp_ReadEvent();

  ReadResp_ReadEvent(const ReadResp_ReadEvent& from);
  ReadResp_ReadEvent(ReadResp_ReadEvent&& from) noexcept
    : ReadResp_ReadEvent() {
    *this = ::std::move(from);
  }

  inline ReadResp_ReadEvent& operator=(const ReadResp_ReadEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp_ReadEvent& operator=(ReadResp_ReadEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp_ReadEvent& default_instance();

  enum PositionCase {
    kCommitPosition = 3,
    kNoPosition = 4,
    POSITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp_ReadEvent* internal_default_instance() {
    return reinterpret_cast<const ReadResp_ReadEvent*>(
               &_ReadResp_ReadEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReadResp_ReadEvent& a, ReadResp_ReadEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp_ReadEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp_ReadEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp_ReadEvent* New() const final {
    return CreateMaybeMessage<ReadResp_ReadEvent>(nullptr);
  }

  ReadResp_ReadEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp_ReadEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp_ReadEvent& from);
  void MergeFrom(const ReadResp_ReadEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp_ReadEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadResp.ReadEvent";
  }
  protected:
  explicit ReadResp_ReadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadResp_ReadEvent_RecordedEvent RecordedEvent;

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kLinkFieldNumber = 2,
    kCommitPositionFieldNumber = 3,
    kNoPositionFieldNumber = 4,
  };
  // .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& event() const;
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* release_event();
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* mutable_event();
  void set_allocated_event(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* event);
  private:
  const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& _internal_event() const;
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* event);
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* unsafe_arena_release_event();

  // .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent link = 2;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& link() const;
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* release_link();
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* mutable_link();
  void set_allocated_link(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* link);
  private:
  const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& _internal_link() const;
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* link);
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* unsafe_arena_release_link();

  // uint64 commit_position = 3;
  private:
  bool _internal_has_commit_position() const;
  public:
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty no_position = 4;
  bool has_no_position() const;
  private:
  bool _internal_has_no_position() const;
  public:
  void clear_no_position();
  const ::event_store::client::Empty& no_position() const;
  ::event_store::client::Empty* release_no_position();
  ::event_store::client::Empty* mutable_no_position();
  void set_allocated_no_position(::event_store::client::Empty* no_position);
  private:
  const ::event_store::client::Empty& _internal_no_position() const;
  ::event_store::client::Empty* _internal_mutable_no_position();
  public:
  void unsafe_arena_set_allocated_no_position(
      ::event_store::client::Empty* no_position);
  ::event_store::client::Empty* unsafe_arena_release_no_position();

  void clear_position();
  PositionCase position_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadResp.ReadEvent)
 private:
  class _Internal;
  void set_has_commit_position();
  void set_has_no_position();

  inline bool has_position() const;
  inline void clear_has_position();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* event_;
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* link_;
  union PositionUnion {
    PositionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
    ::event_store::client::Empty* no_position_;
  } position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadResp_SubscriptionConfirmation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadResp.SubscriptionConfirmation) */ {
 public:
  inline ReadResp_SubscriptionConfirmation() : ReadResp_SubscriptionConfirmation(nullptr) {};
  virtual ~ReadResp_SubscriptionConfirmation();

  ReadResp_SubscriptionConfirmation(const ReadResp_SubscriptionConfirmation& from);
  ReadResp_SubscriptionConfirmation(ReadResp_SubscriptionConfirmation&& from) noexcept
    : ReadResp_SubscriptionConfirmation() {
    *this = ::std::move(from);
  }

  inline ReadResp_SubscriptionConfirmation& operator=(const ReadResp_SubscriptionConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp_SubscriptionConfirmation& operator=(ReadResp_SubscriptionConfirmation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp_SubscriptionConfirmation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp_SubscriptionConfirmation* internal_default_instance() {
    return reinterpret_cast<const ReadResp_SubscriptionConfirmation*>(
               &_ReadResp_SubscriptionConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReadResp_SubscriptionConfirmation& a, ReadResp_SubscriptionConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp_SubscriptionConfirmation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp_SubscriptionConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp_SubscriptionConfirmation* New() const final {
    return CreateMaybeMessage<ReadResp_SubscriptionConfirmation>(nullptr);
  }

  ReadResp_SubscriptionConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp_SubscriptionConfirmation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp_SubscriptionConfirmation& from);
  void MergeFrom(const ReadResp_SubscriptionConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp_SubscriptionConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadResp.SubscriptionConfirmation";
  }
  protected:
  explicit ReadResp_SubscriptionConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 1,
  };
  // string subscription_id = 1;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadResp.SubscriptionConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadResp_Checkpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadResp.Checkpoint) */ {
 public:
  inline ReadResp_Checkpoint() : ReadResp_Checkpoint(nullptr) {};
  virtual ~ReadResp_Checkpoint();

  ReadResp_Checkpoint(const ReadResp_Checkpoint& from);
  ReadResp_Checkpoint(ReadResp_Checkpoint&& from) noexcept
    : ReadResp_Checkpoint() {
    *this = ::std::move(from);
  }

  inline ReadResp_Checkpoint& operator=(const ReadResp_Checkpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp_Checkpoint& operator=(ReadResp_Checkpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp_Checkpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp_Checkpoint* internal_default_instance() {
    return reinterpret_cast<const ReadResp_Checkpoint*>(
               &_ReadResp_Checkpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReadResp_Checkpoint& a, ReadResp_Checkpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp_Checkpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp_Checkpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp_Checkpoint* New() const final {
    return CreateMaybeMessage<ReadResp_Checkpoint>(nullptr);
  }

  ReadResp_Checkpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp_Checkpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp_Checkpoint& from);
  void MergeFrom(const ReadResp_Checkpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp_Checkpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadResp.Checkpoint";
  }
  protected:
  explicit ReadResp_Checkpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
  };
  // uint64 commit_position = 1;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 2;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadResp.Checkpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadResp_StreamNotFound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadResp.StreamNotFound) */ {
 public:
  inline ReadResp_StreamNotFound() : ReadResp_StreamNotFound(nullptr) {};
  virtual ~ReadResp_StreamNotFound();

  ReadResp_StreamNotFound(const ReadResp_StreamNotFound& from);
  ReadResp_StreamNotFound(ReadResp_StreamNotFound&& from) noexcept
    : ReadResp_StreamNotFound() {
    *this = ::std::move(from);
  }

  inline ReadResp_StreamNotFound& operator=(const ReadResp_StreamNotFound& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp_StreamNotFound& operator=(ReadResp_StreamNotFound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp_StreamNotFound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp_StreamNotFound* internal_default_instance() {
    return reinterpret_cast<const ReadResp_StreamNotFound*>(
               &_ReadResp_StreamNotFound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReadResp_StreamNotFound& a, ReadResp_StreamNotFound& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp_StreamNotFound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp_StreamNotFound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp_StreamNotFound* New() const final {
    return CreateMaybeMessage<ReadResp_StreamNotFound>(nullptr);
  }

  ReadResp_StreamNotFound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp_StreamNotFound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp_StreamNotFound& from);
  void MergeFrom(const ReadResp_StreamNotFound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp_StreamNotFound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadResp.StreamNotFound";
  }
  protected:
  explicit ReadResp_StreamNotFound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadResp.StreamNotFound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class ReadResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.ReadResp) */ {
 public:
  inline ReadResp() : ReadResp(nullptr) {};
  virtual ~ReadResp();

  ReadResp(const ReadResp& from);
  ReadResp(ReadResp&& from) noexcept
    : ReadResp() {
    *this = ::std::move(from);
  }

  inline ReadResp& operator=(const ReadResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp& operator=(ReadResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp& default_instance();

  enum ContentCase {
    kEvent = 1,
    kConfirmation = 2,
    kCheckpoint = 3,
    kStreamNotFound = 4,
    kFirstStreamPosition = 5,
    kLastStreamPosition = 6,
    kLastAllStreamPosition = 7,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp* internal_default_instance() {
    return reinterpret_cast<const ReadResp*>(
               &_ReadResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReadResp& a, ReadResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp* New() const final {
    return CreateMaybeMessage<ReadResp>(nullptr);
  }

  ReadResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp& from);
  void MergeFrom(const ReadResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.ReadResp";
  }
  protected:
  explicit ReadResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadResp_ReadEvent ReadEvent;
  typedef ReadResp_SubscriptionConfirmation SubscriptionConfirmation;
  typedef ReadResp_Checkpoint Checkpoint;
  typedef ReadResp_StreamNotFound StreamNotFound;

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kConfirmationFieldNumber = 2,
    kCheckpointFieldNumber = 3,
    kStreamNotFoundFieldNumber = 4,
    kFirstStreamPositionFieldNumber = 5,
    kLastStreamPositionFieldNumber = 6,
    kLastAllStreamPositionFieldNumber = 7,
  };
  // .event_store.client.streams.ReadResp.ReadEvent event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::event_store::client::streams::ReadResp_ReadEvent& event() const;
  ::event_store::client::streams::ReadResp_ReadEvent* release_event();
  ::event_store::client::streams::ReadResp_ReadEvent* mutable_event();
  void set_allocated_event(::event_store::client::streams::ReadResp_ReadEvent* event);
  private:
  const ::event_store::client::streams::ReadResp_ReadEvent& _internal_event() const;
  ::event_store::client::streams::ReadResp_ReadEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::event_store::client::streams::ReadResp_ReadEvent* event);
  ::event_store::client::streams::ReadResp_ReadEvent* unsafe_arena_release_event();

  // .event_store.client.streams.ReadResp.SubscriptionConfirmation confirmation = 2;
  bool has_confirmation() const;
  private:
  bool _internal_has_confirmation() const;
  public:
  void clear_confirmation();
  const ::event_store::client::streams::ReadResp_SubscriptionConfirmation& confirmation() const;
  ::event_store::client::streams::ReadResp_SubscriptionConfirmation* release_confirmation();
  ::event_store::client::streams::ReadResp_SubscriptionConfirmation* mutable_confirmation();
  void set_allocated_confirmation(::event_store::client::streams::ReadResp_SubscriptionConfirmation* confirmation);
  private:
  const ::event_store::client::streams::ReadResp_SubscriptionConfirmation& _internal_confirmation() const;
  ::event_store::client::streams::ReadResp_SubscriptionConfirmation* _internal_mutable_confirmation();
  public:
  void unsafe_arena_set_allocated_confirmation(
      ::event_store::client::streams::ReadResp_SubscriptionConfirmation* confirmation);
  ::event_store::client::streams::ReadResp_SubscriptionConfirmation* unsafe_arena_release_confirmation();

  // .event_store.client.streams.ReadResp.Checkpoint checkpoint = 3;
  bool has_checkpoint() const;
  private:
  bool _internal_has_checkpoint() const;
  public:
  void clear_checkpoint();
  const ::event_store::client::streams::ReadResp_Checkpoint& checkpoint() const;
  ::event_store::client::streams::ReadResp_Checkpoint* release_checkpoint();
  ::event_store::client::streams::ReadResp_Checkpoint* mutable_checkpoint();
  void set_allocated_checkpoint(::event_store::client::streams::ReadResp_Checkpoint* checkpoint);
  private:
  const ::event_store::client::streams::ReadResp_Checkpoint& _internal_checkpoint() const;
  ::event_store::client::streams::ReadResp_Checkpoint* _internal_mutable_checkpoint();
  public:
  void unsafe_arena_set_allocated_checkpoint(
      ::event_store::client::streams::ReadResp_Checkpoint* checkpoint);
  ::event_store::client::streams::ReadResp_Checkpoint* unsafe_arena_release_checkpoint();

  // .event_store.client.streams.ReadResp.StreamNotFound stream_not_found = 4;
  bool has_stream_not_found() const;
  private:
  bool _internal_has_stream_not_found() const;
  public:
  void clear_stream_not_found();
  const ::event_store::client::streams::ReadResp_StreamNotFound& stream_not_found() const;
  ::event_store::client::streams::ReadResp_StreamNotFound* release_stream_not_found();
  ::event_store::client::streams::ReadResp_StreamNotFound* mutable_stream_not_found();
  void set_allocated_stream_not_found(::event_store::client::streams::ReadResp_StreamNotFound* stream_not_found);
  private:
  const ::event_store::client::streams::ReadResp_StreamNotFound& _internal_stream_not_found() const;
  ::event_store::client::streams::ReadResp_StreamNotFound* _internal_mutable_stream_not_found();
  public:
  void unsafe_arena_set_allocated_stream_not_found(
      ::event_store::client::streams::ReadResp_StreamNotFound* stream_not_found);
  ::event_store::client::streams::ReadResp_StreamNotFound* unsafe_arena_release_stream_not_found();

  // uint64 first_stream_position = 5;
  private:
  bool _internal_has_first_stream_position() const;
  public:
  void clear_first_stream_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_stream_position() const;
  void set_first_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_stream_position() const;
  void _internal_set_first_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_stream_position = 6;
  private:
  bool _internal_has_last_stream_position() const;
  public:
  void clear_last_stream_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_stream_position() const;
  void set_last_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_stream_position() const;
  void _internal_set_last_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.AllStreamPosition last_all_stream_position = 7;
  bool has_last_all_stream_position() const;
  private:
  bool _internal_has_last_all_stream_position() const;
  public:
  void clear_last_all_stream_position();
  const ::event_store::client::AllStreamPosition& last_all_stream_position() const;
  ::event_store::client::AllStreamPosition* release_last_all_stream_position();
  ::event_store::client::AllStreamPosition* mutable_last_all_stream_position();
  void set_allocated_last_all_stream_position(::event_store::client::AllStreamPosition* last_all_stream_position);
  private:
  const ::event_store::client::AllStreamPosition& _internal_last_all_stream_position() const;
  ::event_store::client::AllStreamPosition* _internal_mutable_last_all_stream_position();
  public:
  void unsafe_arena_set_allocated_last_all_stream_position(
      ::event_store::client::AllStreamPosition* last_all_stream_position);
  ::event_store::client::AllStreamPosition* unsafe_arena_release_last_all_stream_position();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.ReadResp)
 private:
  class _Internal;
  void set_has_event();
  void set_has_confirmation();
  void set_has_checkpoint();
  void set_has_stream_not_found();
  void set_has_first_stream_position();
  void set_has_last_stream_position();
  void set_has_last_all_stream_position();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentUnion {
    ContentUnion() {}
    ::event_store::client::streams::ReadResp_ReadEvent* event_;
    ::event_store::client::streams::ReadResp_SubscriptionConfirmation* confirmation_;
    ::event_store::client::streams::ReadResp_Checkpoint* checkpoint_;
    ::event_store::client::streams::ReadResp_StreamNotFound* stream_not_found_;
    ::PROTOBUF_NAMESPACE_ID::uint64 first_stream_position_;
    ::PROTOBUF_NAMESPACE_ID::uint64 last_stream_position_;
    ::event_store::client::AllStreamPosition* last_all_stream_position_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class AppendReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.AppendReq.Options) */ {
 public:
  inline AppendReq_Options() : AppendReq_Options(nullptr) {};
  virtual ~AppendReq_Options();

  AppendReq_Options(const AppendReq_Options& from);
  AppendReq_Options(AppendReq_Options&& from) noexcept
    : AppendReq_Options() {
    *this = ::std::move(from);
  }

  inline AppendReq_Options& operator=(const AppendReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendReq_Options& operator=(AppendReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendReq_Options& default_instance();

  enum ExpectedStreamRevisionCase {
    kRevision = 2,
    kNoStream = 3,
    kAny = 4,
    kStreamExists = 5,
    EXPECTED_STREAM_REVISION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendReq_Options* internal_default_instance() {
    return reinterpret_cast<const AppendReq_Options*>(
               &_AppendReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AppendReq_Options& a, AppendReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendReq_Options* New() const final {
    return CreateMaybeMessage<AppendReq_Options>(nullptr);
  }

  AppendReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendReq_Options& from);
  void MergeFrom(const AppendReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.AppendReq.Options";
  }
  protected:
  explicit AppendReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
    kRevisionFieldNumber = 2,
    kNoStreamFieldNumber = 3,
    kAnyFieldNumber = 4,
    kStreamExistsFieldNumber = 5,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // uint64 revision = 2;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty no_stream = 3;
  bool has_no_stream() const;
  private:
  bool _internal_has_no_stream() const;
  public:
  void clear_no_stream();
  const ::event_store::client::Empty& no_stream() const;
  ::event_store::client::Empty* release_no_stream();
  ::event_store::client::Empty* mutable_no_stream();
  void set_allocated_no_stream(::event_store::client::Empty* no_stream);
  private:
  const ::event_store::client::Empty& _internal_no_stream() const;
  ::event_store::client::Empty* _internal_mutable_no_stream();
  public:
  void unsafe_arena_set_allocated_no_stream(
      ::event_store::client::Empty* no_stream);
  ::event_store::client::Empty* unsafe_arena_release_no_stream();

  // .event_store.client.Empty any = 4;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const ::event_store::client::Empty& any() const;
  ::event_store::client::Empty* release_any();
  ::event_store::client::Empty* mutable_any();
  void set_allocated_any(::event_store::client::Empty* any);
  private:
  const ::event_store::client::Empty& _internal_any() const;
  ::event_store::client::Empty* _internal_mutable_any();
  public:
  void unsafe_arena_set_allocated_any(
      ::event_store::client::Empty* any);
  ::event_store::client::Empty* unsafe_arena_release_any();

  // .event_store.client.Empty stream_exists = 5;
  bool has_stream_exists() const;
  private:
  bool _internal_has_stream_exists() const;
  public:
  void clear_stream_exists();
  const ::event_store::client::Empty& stream_exists() const;
  ::event_store::client::Empty* release_stream_exists();
  ::event_store::client::Empty* mutable_stream_exists();
  void set_allocated_stream_exists(::event_store::client::Empty* stream_exists);
  private:
  const ::event_store::client::Empty& _internal_stream_exists() const;
  ::event_store::client::Empty* _internal_mutable_stream_exists();
  public:
  void unsafe_arena_set_allocated_stream_exists(
      ::event_store::client::Empty* stream_exists);
  ::event_store::client::Empty* unsafe_arena_release_stream_exists();

  void clear_expected_stream_revision();
  ExpectedStreamRevisionCase expected_stream_revision_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.AppendReq.Options)
 private:
  class _Internal;
  void set_has_revision();
  void set_has_no_stream();
  void set_has_any();
  void set_has_stream_exists();

  inline bool has_expected_stream_revision() const;
  inline void clear_has_expected_stream_revision();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  union ExpectedStreamRevisionUnion {
    ExpectedStreamRevisionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
    ::event_store::client::Empty* no_stream_;
    ::event_store::client::Empty* any_;
    ::event_store::client::Empty* stream_exists_;
  } expected_stream_revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class AppendReq_ProposedMessage_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppendReq_ProposedMessage_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppendReq_ProposedMessage_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AppendReq_ProposedMessage_MetadataEntry_DoNotUse();
  AppendReq_ProposedMessage_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppendReq_ProposedMessage_MetadataEntry_DoNotUse& other);
  static const AppendReq_ProposedMessage_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppendReq_ProposedMessage_MetadataEntry_DoNotUse*>(&_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "event_store.client.streams.AppendReq.ProposedMessage.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "event_store.client.streams.AppendReq.ProposedMessage.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[18];
  }

  public:
};

// -------------------------------------------------------------------

class AppendReq_ProposedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.AppendReq.ProposedMessage) */ {
 public:
  inline AppendReq_ProposedMessage() : AppendReq_ProposedMessage(nullptr) {};
  virtual ~AppendReq_ProposedMessage();

  AppendReq_ProposedMessage(const AppendReq_ProposedMessage& from);
  AppendReq_ProposedMessage(AppendReq_ProposedMessage&& from) noexcept
    : AppendReq_ProposedMessage() {
    *this = ::std::move(from);
  }

  inline AppendReq_ProposedMessage& operator=(const AppendReq_ProposedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendReq_ProposedMessage& operator=(AppendReq_ProposedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendReq_ProposedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendReq_ProposedMessage* internal_default_instance() {
    return reinterpret_cast<const AppendReq_ProposedMessage*>(
               &_AppendReq_ProposedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AppendReq_ProposedMessage& a, AppendReq_ProposedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendReq_ProposedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendReq_ProposedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendReq_ProposedMessage* New() const final {
    return CreateMaybeMessage<AppendReq_ProposedMessage>(nullptr);
  }

  AppendReq_ProposedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendReq_ProposedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendReq_ProposedMessage& from);
  void MergeFrom(const AppendReq_ProposedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendReq_ProposedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.AppendReq.ProposedMessage";
  }
  protected:
  explicit AppendReq_ProposedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kCustomMetadataFieldNumber = 3,
    kDataFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // map<string, string> metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // bytes custom_metadata = 3;
  void clear_custom_metadata();
  const std::string& custom_metadata() const;
  void set_custom_metadata(const std::string& value);
  void set_custom_metadata(std::string&& value);
  void set_custom_metadata(const char* value);
  void set_custom_metadata(const void* value, size_t size);
  std::string* mutable_custom_metadata();
  std::string* release_custom_metadata();
  void set_allocated_custom_metadata(std::string* custom_metadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_custom_metadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_custom_metadata(
      std::string* custom_metadata);
  private:
  const std::string& _internal_custom_metadata() const;
  void _internal_set_custom_metadata(const std::string& value);
  std::string* _internal_mutable_custom_metadata();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .event_store.client.UUID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::event_store::client::UUID& id() const;
  ::event_store::client::UUID* release_id();
  ::event_store::client::UUID* mutable_id();
  void set_allocated_id(::event_store::client::UUID* id);
  private:
  const ::event_store::client::UUID& _internal_id() const;
  ::event_store::client::UUID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::event_store::client::UUID* id);
  ::event_store::client::UUID* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:event_store.client.streams.AppendReq.ProposedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppendReq_ProposedMessage_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::event_store::client::UUID* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class AppendReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.AppendReq) */ {
 public:
  inline AppendReq() : AppendReq(nullptr) {};
  virtual ~AppendReq();

  AppendReq(const AppendReq& from);
  AppendReq(AppendReq&& from) noexcept
    : AppendReq() {
    *this = ::std::move(from);
  }

  inline AppendReq& operator=(const AppendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendReq& operator=(AppendReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendReq& default_instance();

  enum ContentCase {
    kOptions = 1,
    kProposedMessage = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendReq* internal_default_instance() {
    return reinterpret_cast<const AppendReq*>(
               &_AppendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AppendReq& a, AppendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendReq* New() const final {
    return CreateMaybeMessage<AppendReq>(nullptr);
  }

  AppendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendReq& from);
  void MergeFrom(const AppendReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.AppendReq";
  }
  protected:
  explicit AppendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AppendReq_Options Options;
  typedef AppendReq_ProposedMessage ProposedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
    kProposedMessageFieldNumber = 2,
  };
  // .event_store.client.streams.AppendReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::streams::AppendReq_Options& options() const;
  ::event_store::client::streams::AppendReq_Options* release_options();
  ::event_store::client::streams::AppendReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::streams::AppendReq_Options* options);
  private:
  const ::event_store::client::streams::AppendReq_Options& _internal_options() const;
  ::event_store::client::streams::AppendReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::streams::AppendReq_Options* options);
  ::event_store::client::streams::AppendReq_Options* unsafe_arena_release_options();

  // .event_store.client.streams.AppendReq.ProposedMessage proposed_message = 2;
  bool has_proposed_message() const;
  private:
  bool _internal_has_proposed_message() const;
  public:
  void clear_proposed_message();
  const ::event_store::client::streams::AppendReq_ProposedMessage& proposed_message() const;
  ::event_store::client::streams::AppendReq_ProposedMessage* release_proposed_message();
  ::event_store::client::streams::AppendReq_ProposedMessage* mutable_proposed_message();
  void set_allocated_proposed_message(::event_store::client::streams::AppendReq_ProposedMessage* proposed_message);
  private:
  const ::event_store::client::streams::AppendReq_ProposedMessage& _internal_proposed_message() const;
  ::event_store::client::streams::AppendReq_ProposedMessage* _internal_mutable_proposed_message();
  public:
  void unsafe_arena_set_allocated_proposed_message(
      ::event_store::client::streams::AppendReq_ProposedMessage* proposed_message);
  ::event_store::client::streams::AppendReq_ProposedMessage* unsafe_arena_release_proposed_message();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.AppendReq)
 private:
  class _Internal;
  void set_has_options();
  void set_has_proposed_message();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentUnion {
    ContentUnion() {}
    ::event_store::client::streams::AppendReq_Options* options_;
    ::event_store::client::streams::AppendReq_ProposedMessage* proposed_message_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class AppendResp_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.AppendResp.Position) */ {
 public:
  inline AppendResp_Position() : AppendResp_Position(nullptr) {};
  virtual ~AppendResp_Position();

  AppendResp_Position(const AppendResp_Position& from);
  AppendResp_Position(AppendResp_Position&& from) noexcept
    : AppendResp_Position() {
    *this = ::std::move(from);
  }

  inline AppendResp_Position& operator=(const AppendResp_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendResp_Position& operator=(AppendResp_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendResp_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendResp_Position* internal_default_instance() {
    return reinterpret_cast<const AppendResp_Position*>(
               &_AppendResp_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AppendResp_Position& a, AppendResp_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendResp_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendResp_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendResp_Position* New() const final {
    return CreateMaybeMessage<AppendResp_Position>(nullptr);
  }

  AppendResp_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendResp_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendResp_Position& from);
  void MergeFrom(const AppendResp_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendResp_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.AppendResp.Position";
  }
  protected:
  explicit AppendResp_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
  };
  // uint64 commit_position = 1;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 2;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.AppendResp.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class AppendResp_Success PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.AppendResp.Success) */ {
 public:
  inline AppendResp_Success() : AppendResp_Success(nullptr) {};
  virtual ~AppendResp_Success();

  AppendResp_Success(const AppendResp_Success& from);
  AppendResp_Success(AppendResp_Success&& from) noexcept
    : AppendResp_Success() {
    *this = ::std::move(from);
  }

  inline AppendResp_Success& operator=(const AppendResp_Success& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendResp_Success& operator=(AppendResp_Success&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendResp_Success& default_instance();

  enum CurrentRevisionOptionCase {
    kCurrentRevision = 1,
    kNoStream = 2,
    CURRENT_REVISION_OPTION_NOT_SET = 0,
  };

  enum PositionOptionCase {
    kPosition = 3,
    kNoPosition = 4,
    POSITION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendResp_Success* internal_default_instance() {
    return reinterpret_cast<const AppendResp_Success*>(
               &_AppendResp_Success_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AppendResp_Success& a, AppendResp_Success& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendResp_Success* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendResp_Success* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendResp_Success* New() const final {
    return CreateMaybeMessage<AppendResp_Success>(nullptr);
  }

  AppendResp_Success* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendResp_Success>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendResp_Success& from);
  void MergeFrom(const AppendResp_Success& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendResp_Success* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.AppendResp.Success";
  }
  protected:
  explicit AppendResp_Success(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentRevisionFieldNumber = 1,
    kNoStreamFieldNumber = 2,
    kPositionFieldNumber = 3,
    kNoPositionFieldNumber = 4,
  };
  // uint64 current_revision = 1;
  private:
  bool _internal_has_current_revision() const;
  public:
  void clear_current_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_revision() const;
  void set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_revision() const;
  void _internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty no_stream = 2;
  bool has_no_stream() const;
  private:
  bool _internal_has_no_stream() const;
  public:
  void clear_no_stream();
  const ::event_store::client::Empty& no_stream() const;
  ::event_store::client::Empty* release_no_stream();
  ::event_store::client::Empty* mutable_no_stream();
  void set_allocated_no_stream(::event_store::client::Empty* no_stream);
  private:
  const ::event_store::client::Empty& _internal_no_stream() const;
  ::event_store::client::Empty* _internal_mutable_no_stream();
  public:
  void unsafe_arena_set_allocated_no_stream(
      ::event_store::client::Empty* no_stream);
  ::event_store::client::Empty* unsafe_arena_release_no_stream();

  // .event_store.client.streams.AppendResp.Position position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::event_store::client::streams::AppendResp_Position& position() const;
  ::event_store::client::streams::AppendResp_Position* release_position();
  ::event_store::client::streams::AppendResp_Position* mutable_position();
  void set_allocated_position(::event_store::client::streams::AppendResp_Position* position);
  private:
  const ::event_store::client::streams::AppendResp_Position& _internal_position() const;
  ::event_store::client::streams::AppendResp_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::event_store::client::streams::AppendResp_Position* position);
  ::event_store::client::streams::AppendResp_Position* unsafe_arena_release_position();

  // .event_store.client.Empty no_position = 4;
  bool has_no_position() const;
  private:
  bool _internal_has_no_position() const;
  public:
  void clear_no_position();
  const ::event_store::client::Empty& no_position() const;
  ::event_store::client::Empty* release_no_position();
  ::event_store::client::Empty* mutable_no_position();
  void set_allocated_no_position(::event_store::client::Empty* no_position);
  private:
  const ::event_store::client::Empty& _internal_no_position() const;
  ::event_store::client::Empty* _internal_mutable_no_position();
  public:
  void unsafe_arena_set_allocated_no_position(
      ::event_store::client::Empty* no_position);
  ::event_store::client::Empty* unsafe_arena_release_no_position();

  void clear_current_revision_option();
  CurrentRevisionOptionCase current_revision_option_case() const;
  void clear_position_option();
  PositionOptionCase position_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.AppendResp.Success)
 private:
  class _Internal;
  void set_has_current_revision();
  void set_has_no_stream();
  void set_has_position();
  void set_has_no_position();

  inline bool has_current_revision_option() const;
  inline void clear_has_current_revision_option();

  inline bool has_position_option() const;
  inline void clear_has_position_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CurrentRevisionOptionUnion {
    CurrentRevisionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_;
    ::event_store::client::Empty* no_stream_;
  } current_revision_option_;
  union PositionOptionUnion {
    PositionOptionUnion() {}
    ::event_store::client::streams::AppendResp_Position* position_;
    ::event_store::client::Empty* no_position_;
  } position_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class AppendResp_WrongExpectedVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.AppendResp.WrongExpectedVersion) */ {
 public:
  inline AppendResp_WrongExpectedVersion() : AppendResp_WrongExpectedVersion(nullptr) {};
  virtual ~AppendResp_WrongExpectedVersion();

  AppendResp_WrongExpectedVersion(const AppendResp_WrongExpectedVersion& from);
  AppendResp_WrongExpectedVersion(AppendResp_WrongExpectedVersion&& from) noexcept
    : AppendResp_WrongExpectedVersion() {
    *this = ::std::move(from);
  }

  inline AppendResp_WrongExpectedVersion& operator=(const AppendResp_WrongExpectedVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendResp_WrongExpectedVersion& operator=(AppendResp_WrongExpectedVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendResp_WrongExpectedVersion& default_instance();

  enum CurrentRevisionOption2060Case {
    kCurrentRevision2060 = 1,
    kNoStream2060 = 2,
    CURRENT_REVISION_OPTION_20_6_0_NOT_SET = 0,
  };

  enum ExpectedRevisionOption2060Case {
    kExpectedRevision2060 = 3,
    kAny2060 = 4,
    kStreamExists2060 = 5,
    EXPECTED_REVISION_OPTION_20_6_0_NOT_SET = 0,
  };

  enum CurrentRevisionOptionCase {
    kCurrentRevision = 6,
    kCurrentNoStream = 7,
    CURRENT_REVISION_OPTION_NOT_SET = 0,
  };

  enum ExpectedRevisionOptionCase {
    kExpectedRevision = 8,
    kExpectedAny = 9,
    kExpectedStreamExists = 10,
    kExpectedNoStream = 11,
    EXPECTED_REVISION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendResp_WrongExpectedVersion* internal_default_instance() {
    return reinterpret_cast<const AppendResp_WrongExpectedVersion*>(
               &_AppendResp_WrongExpectedVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AppendResp_WrongExpectedVersion& a, AppendResp_WrongExpectedVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendResp_WrongExpectedVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendResp_WrongExpectedVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendResp_WrongExpectedVersion* New() const final {
    return CreateMaybeMessage<AppendResp_WrongExpectedVersion>(nullptr);
  }

  AppendResp_WrongExpectedVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendResp_WrongExpectedVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendResp_WrongExpectedVersion& from);
  void MergeFrom(const AppendResp_WrongExpectedVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendResp_WrongExpectedVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.AppendResp.WrongExpectedVersion";
  }
  protected:
  explicit AppendResp_WrongExpectedVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentRevision2060FieldNumber = 1,
    kNoStream2060FieldNumber = 2,
    kExpectedRevision2060FieldNumber = 3,
    kAny2060FieldNumber = 4,
    kStreamExists2060FieldNumber = 5,
    kCurrentRevisionFieldNumber = 6,
    kCurrentNoStreamFieldNumber = 7,
    kExpectedRevisionFieldNumber = 8,
    kExpectedAnyFieldNumber = 9,
    kExpectedStreamExistsFieldNumber = 10,
    kExpectedNoStreamFieldNumber = 11,
  };
  // uint64 current_revision_20_6_0 = 1;
  private:
  bool _internal_has_current_revision_20_6_0() const;
  public:
  void clear_current_revision_20_6_0();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_20_6_0() const;
  void set_current_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_revision_20_6_0() const;
  void _internal_set_current_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty no_stream_20_6_0 = 2;
  bool has_no_stream_20_6_0() const;
  private:
  bool _internal_has_no_stream_20_6_0() const;
  public:
  void clear_no_stream_20_6_0();
  const ::event_store::client::Empty& no_stream_20_6_0() const;
  ::event_store::client::Empty* release_no_stream_20_6_0();
  ::event_store::client::Empty* mutable_no_stream_20_6_0();
  void set_allocated_no_stream_20_6_0(::event_store::client::Empty* no_stream_20_6_0);
  private:
  const ::event_store::client::Empty& _internal_no_stream_20_6_0() const;
  ::event_store::client::Empty* _internal_mutable_no_stream_20_6_0();
  public:
  void unsafe_arena_set_allocated_no_stream_20_6_0(
      ::event_store::client::Empty* no_stream_20_6_0);
  ::event_store::client::Empty* unsafe_arena_release_no_stream_20_6_0();

  // uint64 expected_revision_20_6_0 = 3;
  private:
  bool _internal_has_expected_revision_20_6_0() const;
  public:
  void clear_expected_revision_20_6_0();
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_revision_20_6_0() const;
  void set_expected_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expected_revision_20_6_0() const;
  void _internal_set_expected_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty any_20_6_0 = 4;
  bool has_any_20_6_0() const;
  private:
  bool _internal_has_any_20_6_0() const;
  public:
  void clear_any_20_6_0();
  const ::event_store::client::Empty& any_20_6_0() const;
  ::event_store::client::Empty* release_any_20_6_0();
  ::event_store::client::Empty* mutable_any_20_6_0();
  void set_allocated_any_20_6_0(::event_store::client::Empty* any_20_6_0);
  private:
  const ::event_store::client::Empty& _internal_any_20_6_0() const;
  ::event_store::client::Empty* _internal_mutable_any_20_6_0();
  public:
  void unsafe_arena_set_allocated_any_20_6_0(
      ::event_store::client::Empty* any_20_6_0);
  ::event_store::client::Empty* unsafe_arena_release_any_20_6_0();

  // .event_store.client.Empty stream_exists_20_6_0 = 5;
  bool has_stream_exists_20_6_0() const;
  private:
  bool _internal_has_stream_exists_20_6_0() const;
  public:
  void clear_stream_exists_20_6_0();
  const ::event_store::client::Empty& stream_exists_20_6_0() const;
  ::event_store::client::Empty* release_stream_exists_20_6_0();
  ::event_store::client::Empty* mutable_stream_exists_20_6_0();
  void set_allocated_stream_exists_20_6_0(::event_store::client::Empty* stream_exists_20_6_0);
  private:
  const ::event_store::client::Empty& _internal_stream_exists_20_6_0() const;
  ::event_store::client::Empty* _internal_mutable_stream_exists_20_6_0();
  public:
  void unsafe_arena_set_allocated_stream_exists_20_6_0(
      ::event_store::client::Empty* stream_exists_20_6_0);
  ::event_store::client::Empty* unsafe_arena_release_stream_exists_20_6_0();

  // uint64 current_revision = 6;
  private:
  bool _internal_has_current_revision() const;
  public:
  void clear_current_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_revision() const;
  void set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_revision() const;
  void _internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty current_no_stream = 7;
  bool has_current_no_stream() const;
  private:
  bool _internal_has_current_no_stream() const;
  public:
  void clear_current_no_stream();
  const ::event_store::client::Empty& current_no_stream() const;
  ::event_store::client::Empty* release_current_no_stream();
  ::event_store::client::Empty* mutable_current_no_stream();
  void set_allocated_current_no_stream(::event_store::client::Empty* current_no_stream);
  private:
  const ::event_store::client::Empty& _internal_current_no_stream() const;
  ::event_store::client::Empty* _internal_mutable_current_no_stream();
  public:
  void unsafe_arena_set_allocated_current_no_stream(
      ::event_store::client::Empty* current_no_stream);
  ::event_store::client::Empty* unsafe_arena_release_current_no_stream();

  // uint64 expected_revision = 8;
  private:
  bool _internal_has_expected_revision() const;
  public:
  void clear_expected_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_revision() const;
  void set_expected_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expected_revision() const;
  void _internal_set_expected_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty expected_any = 9;
  bool has_expected_any() const;
  private:
  bool _internal_has_expected_any() const;
  public:
  void clear_expected_any();
  const ::event_store::client::Empty& expected_any() const;
  ::event_store::client::Empty* release_expected_any();
  ::event_store::client::Empty* mutable_expected_any();
  void set_allocated_expected_any(::event_store::client::Empty* expected_any);
  private:
  const ::event_store::client::Empty& _internal_expected_any() const;
  ::event_store::client::Empty* _internal_mutable_expected_any();
  public:
  void unsafe_arena_set_allocated_expected_any(
      ::event_store::client::Empty* expected_any);
  ::event_store::client::Empty* unsafe_arena_release_expected_any();

  // .event_store.client.Empty expected_stream_exists = 10;
  bool has_expected_stream_exists() const;
  private:
  bool _internal_has_expected_stream_exists() const;
  public:
  void clear_expected_stream_exists();
  const ::event_store::client::Empty& expected_stream_exists() const;
  ::event_store::client::Empty* release_expected_stream_exists();
  ::event_store::client::Empty* mutable_expected_stream_exists();
  void set_allocated_expected_stream_exists(::event_store::client::Empty* expected_stream_exists);
  private:
  const ::event_store::client::Empty& _internal_expected_stream_exists() const;
  ::event_store::client::Empty* _internal_mutable_expected_stream_exists();
  public:
  void unsafe_arena_set_allocated_expected_stream_exists(
      ::event_store::client::Empty* expected_stream_exists);
  ::event_store::client::Empty* unsafe_arena_release_expected_stream_exists();

  // .event_store.client.Empty expected_no_stream = 11;
  bool has_expected_no_stream() const;
  private:
  bool _internal_has_expected_no_stream() const;
  public:
  void clear_expected_no_stream();
  const ::event_store::client::Empty& expected_no_stream() const;
  ::event_store::client::Empty* release_expected_no_stream();
  ::event_store::client::Empty* mutable_expected_no_stream();
  void set_allocated_expected_no_stream(::event_store::client::Empty* expected_no_stream);
  private:
  const ::event_store::client::Empty& _internal_expected_no_stream() const;
  ::event_store::client::Empty* _internal_mutable_expected_no_stream();
  public:
  void unsafe_arena_set_allocated_expected_no_stream(
      ::event_store::client::Empty* expected_no_stream);
  ::event_store::client::Empty* unsafe_arena_release_expected_no_stream();

  void clear_current_revision_option_20_6_0();
  CurrentRevisionOption2060Case current_revision_option_20_6_0_case() const;
  void clear_expected_revision_option_20_6_0();
  ExpectedRevisionOption2060Case expected_revision_option_20_6_0_case() const;
  void clear_current_revision_option();
  CurrentRevisionOptionCase current_revision_option_case() const;
  void clear_expected_revision_option();
  ExpectedRevisionOptionCase expected_revision_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.AppendResp.WrongExpectedVersion)
 private:
  class _Internal;
  void set_has_current_revision_20_6_0();
  void set_has_no_stream_20_6_0();
  void set_has_expected_revision_20_6_0();
  void set_has_any_20_6_0();
  void set_has_stream_exists_20_6_0();
  void set_has_current_revision();
  void set_has_current_no_stream();
  void set_has_expected_revision();
  void set_has_expected_any();
  void set_has_expected_stream_exists();
  void set_has_expected_no_stream();

  inline bool has_current_revision_option_20_6_0() const;
  inline void clear_has_current_revision_option_20_6_0();

  inline bool has_expected_revision_option_20_6_0() const;
  inline void clear_has_expected_revision_option_20_6_0();

  inline bool has_current_revision_option() const;
  inline void clear_has_current_revision_option();

  inline bool has_expected_revision_option() const;
  inline void clear_has_expected_revision_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CurrentRevisionOption2060Union {
    CurrentRevisionOption2060Union() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_20_6_0_;
    ::event_store::client::Empty* no_stream_20_6_0_;
  } current_revision_option_20_6_0_;
  union ExpectedRevisionOption2060Union {
    ExpectedRevisionOption2060Union() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 expected_revision_20_6_0_;
    ::event_store::client::Empty* any_20_6_0_;
    ::event_store::client::Empty* stream_exists_20_6_0_;
  } expected_revision_option_20_6_0_;
  union CurrentRevisionOptionUnion {
    CurrentRevisionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_;
    ::event_store::client::Empty* current_no_stream_;
  } current_revision_option_;
  union ExpectedRevisionOptionUnion {
    ExpectedRevisionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 expected_revision_;
    ::event_store::client::Empty* expected_any_;
    ::event_store::client::Empty* expected_stream_exists_;
    ::event_store::client::Empty* expected_no_stream_;
  } expected_revision_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[4];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class AppendResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.AppendResp) */ {
 public:
  inline AppendResp() : AppendResp(nullptr) {};
  virtual ~AppendResp();

  AppendResp(const AppendResp& from);
  AppendResp(AppendResp&& from) noexcept
    : AppendResp() {
    *this = ::std::move(from);
  }

  inline AppendResp& operator=(const AppendResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendResp& operator=(AppendResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendResp& default_instance();

  enum ResultCase {
    kSuccess = 1,
    kWrongExpectedVersion = 2,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendResp* internal_default_instance() {
    return reinterpret_cast<const AppendResp*>(
               &_AppendResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(AppendResp& a, AppendResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendResp* New() const final {
    return CreateMaybeMessage<AppendResp>(nullptr);
  }

  AppendResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendResp& from);
  void MergeFrom(const AppendResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.AppendResp";
  }
  protected:
  explicit AppendResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AppendResp_Position Position;
  typedef AppendResp_Success Success;
  typedef AppendResp_WrongExpectedVersion WrongExpectedVersion;

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kWrongExpectedVersionFieldNumber = 2,
  };
  // .event_store.client.streams.AppendResp.Success success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::event_store::client::streams::AppendResp_Success& success() const;
  ::event_store::client::streams::AppendResp_Success* release_success();
  ::event_store::client::streams::AppendResp_Success* mutable_success();
  void set_allocated_success(::event_store::client::streams::AppendResp_Success* success);
  private:
  const ::event_store::client::streams::AppendResp_Success& _internal_success() const;
  ::event_store::client::streams::AppendResp_Success* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::event_store::client::streams::AppendResp_Success* success);
  ::event_store::client::streams::AppendResp_Success* unsafe_arena_release_success();

  // .event_store.client.streams.AppendResp.WrongExpectedVersion wrong_expected_version = 2;
  bool has_wrong_expected_version() const;
  private:
  bool _internal_has_wrong_expected_version() const;
  public:
  void clear_wrong_expected_version();
  const ::event_store::client::streams::AppendResp_WrongExpectedVersion& wrong_expected_version() const;
  ::event_store::client::streams::AppendResp_WrongExpectedVersion* release_wrong_expected_version();
  ::event_store::client::streams::AppendResp_WrongExpectedVersion* mutable_wrong_expected_version();
  void set_allocated_wrong_expected_version(::event_store::client::streams::AppendResp_WrongExpectedVersion* wrong_expected_version);
  private:
  const ::event_store::client::streams::AppendResp_WrongExpectedVersion& _internal_wrong_expected_version() const;
  ::event_store::client::streams::AppendResp_WrongExpectedVersion* _internal_mutable_wrong_expected_version();
  public:
  void unsafe_arena_set_allocated_wrong_expected_version(
      ::event_store::client::streams::AppendResp_WrongExpectedVersion* wrong_expected_version);
  ::event_store::client::streams::AppendResp_WrongExpectedVersion* unsafe_arena_release_wrong_expected_version();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.AppendResp)
 private:
  class _Internal;
  void set_has_success();
  void set_has_wrong_expected_version();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResultUnion {
    ResultUnion() {}
    ::event_store::client::streams::AppendResp_Success* success_;
    ::event_store::client::streams::AppendResp_WrongExpectedVersion* wrong_expected_version_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class BatchAppendReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.BatchAppendReq.Options) */ {
 public:
  inline BatchAppendReq_Options() : BatchAppendReq_Options(nullptr) {};
  virtual ~BatchAppendReq_Options();

  BatchAppendReq_Options(const BatchAppendReq_Options& from);
  BatchAppendReq_Options(BatchAppendReq_Options&& from) noexcept
    : BatchAppendReq_Options() {
    *this = ::std::move(from);
  }

  inline BatchAppendReq_Options& operator=(const BatchAppendReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchAppendReq_Options& operator=(BatchAppendReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchAppendReq_Options& default_instance();

  enum ExpectedStreamPositionCase {
    kStreamPosition = 2,
    kNoStream = 3,
    kAny = 4,
    kStreamExists = 5,
    EXPECTED_STREAM_POSITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAppendReq_Options* internal_default_instance() {
    return reinterpret_cast<const BatchAppendReq_Options*>(
               &_BatchAppendReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BatchAppendReq_Options& a, BatchAppendReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchAppendReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchAppendReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchAppendReq_Options* New() const final {
    return CreateMaybeMessage<BatchAppendReq_Options>(nullptr);
  }

  BatchAppendReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchAppendReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchAppendReq_Options& from);
  void MergeFrom(const BatchAppendReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchAppendReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.BatchAppendReq.Options";
  }
  protected:
  explicit BatchAppendReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
    kDeadlineFieldNumber = 6,
    kStreamPositionFieldNumber = 2,
    kNoStreamFieldNumber = 3,
    kAnyFieldNumber = 4,
    kStreamExistsFieldNumber = 5,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // .google.protobuf.Timestamp deadline = 6;
  bool has_deadline() const;
  private:
  bool _internal_has_deadline() const;
  public:
  void clear_deadline();
  const PROTOBUF_NAMESPACE_ID::Timestamp& deadline() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_deadline();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deadline();
  void set_allocated_deadline(PROTOBUF_NAMESPACE_ID::Timestamp* deadline);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deadline() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deadline();
  public:
  void unsafe_arena_set_allocated_deadline(
      PROTOBUF_NAMESPACE_ID::Timestamp* deadline);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deadline();

  // uint64 stream_position = 2;
  private:
  bool _internal_has_stream_position() const;
  public:
  void clear_stream_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_position() const;
  void set_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_position() const;
  void _internal_set_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .google.protobuf.Empty no_stream = 3;
  bool has_no_stream() const;
  private:
  bool _internal_has_no_stream() const;
  public:
  void clear_no_stream();
  const PROTOBUF_NAMESPACE_ID::Empty& no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_no_stream();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_no_stream();
  void set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_no_stream();
  public:
  void unsafe_arena_set_allocated_no_stream(
      PROTOBUF_NAMESPACE_ID::Empty* no_stream);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_no_stream();

  // .google.protobuf.Empty any = 4;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const PROTOBUF_NAMESPACE_ID::Empty& any() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_any();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_any();
  void set_allocated_any(PROTOBUF_NAMESPACE_ID::Empty* any);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_any() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_any();
  public:
  void unsafe_arena_set_allocated_any(
      PROTOBUF_NAMESPACE_ID::Empty* any);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_any();

  // .google.protobuf.Empty stream_exists = 5;
  bool has_stream_exists() const;
  private:
  bool _internal_has_stream_exists() const;
  public:
  void clear_stream_exists();
  const PROTOBUF_NAMESPACE_ID::Empty& stream_exists() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_stream_exists();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_stream_exists();
  void set_allocated_stream_exists(PROTOBUF_NAMESPACE_ID::Empty* stream_exists);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_stream_exists() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_stream_exists();
  public:
  void unsafe_arena_set_allocated_stream_exists(
      PROTOBUF_NAMESPACE_ID::Empty* stream_exists);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_stream_exists();

  void clear_expected_stream_position();
  ExpectedStreamPositionCase expected_stream_position_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.BatchAppendReq.Options)
 private:
  class _Internal;
  void set_has_stream_position();
  void set_has_no_stream();
  void set_has_any();
  void set_has_stream_exists();

  inline bool has_expected_stream_position() const;
  inline void clear_has_expected_stream_position();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  PROTOBUF_NAMESPACE_ID::Timestamp* deadline_;
  union ExpectedStreamPositionUnion {
    ExpectedStreamPositionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 stream_position_;
    PROTOBUF_NAMESPACE_ID::Empty* no_stream_;
    PROTOBUF_NAMESPACE_ID::Empty* any_;
    PROTOBUF_NAMESPACE_ID::Empty* stream_exists_;
  } expected_stream_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse();
  BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse& other);
  static const BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse*>(&_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "event_store.client.streams.BatchAppendReq.ProposedMessage.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "event_store.client.streams.BatchAppendReq.ProposedMessage.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[26];
  }

  public:
};

// -------------------------------------------------------------------

class BatchAppendReq_ProposedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.BatchAppendReq.ProposedMessage) */ {
 public:
  inline BatchAppendReq_ProposedMessage() : BatchAppendReq_ProposedMessage(nullptr) {};
  virtual ~BatchAppendReq_ProposedMessage();

  BatchAppendReq_ProposedMessage(const BatchAppendReq_ProposedMessage& from);
  BatchAppendReq_ProposedMessage(BatchAppendReq_ProposedMessage&& from) noexcept
    : BatchAppendReq_ProposedMessage() {
    *this = ::std::move(from);
  }

  inline BatchAppendReq_ProposedMessage& operator=(const BatchAppendReq_ProposedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchAppendReq_ProposedMessage& operator=(BatchAppendReq_ProposedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchAppendReq_ProposedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAppendReq_ProposedMessage* internal_default_instance() {
    return reinterpret_cast<const BatchAppendReq_ProposedMessage*>(
               &_BatchAppendReq_ProposedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BatchAppendReq_ProposedMessage& a, BatchAppendReq_ProposedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchAppendReq_ProposedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchAppendReq_ProposedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchAppendReq_ProposedMessage* New() const final {
    return CreateMaybeMessage<BatchAppendReq_ProposedMessage>(nullptr);
  }

  BatchAppendReq_ProposedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchAppendReq_ProposedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchAppendReq_ProposedMessage& from);
  void MergeFrom(const BatchAppendReq_ProposedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchAppendReq_ProposedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.BatchAppendReq.ProposedMessage";
  }
  protected:
  explicit BatchAppendReq_ProposedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kCustomMetadataFieldNumber = 3,
    kDataFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // map<string, string> metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // bytes custom_metadata = 3;
  void clear_custom_metadata();
  const std::string& custom_metadata() const;
  void set_custom_metadata(const std::string& value);
  void set_custom_metadata(std::string&& value);
  void set_custom_metadata(const char* value);
  void set_custom_metadata(const void* value, size_t size);
  std::string* mutable_custom_metadata();
  std::string* release_custom_metadata();
  void set_allocated_custom_metadata(std::string* custom_metadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_custom_metadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_custom_metadata(
      std::string* custom_metadata);
  private:
  const std::string& _internal_custom_metadata() const;
  void _internal_set_custom_metadata(const std::string& value);
  std::string* _internal_mutable_custom_metadata();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .event_store.client.UUID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::event_store::client::UUID& id() const;
  ::event_store::client::UUID* release_id();
  ::event_store::client::UUID* mutable_id();
  void set_allocated_id(::event_store::client::UUID* id);
  private:
  const ::event_store::client::UUID& _internal_id() const;
  ::event_store::client::UUID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::event_store::client::UUID* id);
  ::event_store::client::UUID* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:event_store.client.streams.BatchAppendReq.ProposedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::event_store::client::UUID* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class BatchAppendReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.BatchAppendReq) */ {
 public:
  inline BatchAppendReq() : BatchAppendReq(nullptr) {};
  virtual ~BatchAppendReq();

  BatchAppendReq(const BatchAppendReq& from);
  BatchAppendReq(BatchAppendReq&& from) noexcept
    : BatchAppendReq() {
    *this = ::std::move(from);
  }

  inline BatchAppendReq& operator=(const BatchAppendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchAppendReq& operator=(BatchAppendReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchAppendReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAppendReq* internal_default_instance() {
    return reinterpret_cast<const BatchAppendReq*>(
               &_BatchAppendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(BatchAppendReq& a, BatchAppendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchAppendReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchAppendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchAppendReq* New() const final {
    return CreateMaybeMessage<BatchAppendReq>(nullptr);
  }

  BatchAppendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchAppendReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchAppendReq& from);
  void MergeFrom(const BatchAppendReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchAppendReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.BatchAppendReq";
  }
  protected:
  explicit BatchAppendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatchAppendReq_Options Options;
  typedef BatchAppendReq_ProposedMessage ProposedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kProposedMessagesFieldNumber = 3,
    kCorrelationIdFieldNumber = 1,
    kOptionsFieldNumber = 2,
    kIsFinalFieldNumber = 4,
  };
  // repeated .event_store.client.streams.BatchAppendReq.ProposedMessage proposed_messages = 3;
  int proposed_messages_size() const;
  private:
  int _internal_proposed_messages_size() const;
  public:
  void clear_proposed_messages();
  ::event_store::client::streams::BatchAppendReq_ProposedMessage* mutable_proposed_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::streams::BatchAppendReq_ProposedMessage >*
      mutable_proposed_messages();
  private:
  const ::event_store::client::streams::BatchAppendReq_ProposedMessage& _internal_proposed_messages(int index) const;
  ::event_store::client::streams::BatchAppendReq_ProposedMessage* _internal_add_proposed_messages();
  public:
  const ::event_store::client::streams::BatchAppendReq_ProposedMessage& proposed_messages(int index) const;
  ::event_store::client::streams::BatchAppendReq_ProposedMessage* add_proposed_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::streams::BatchAppendReq_ProposedMessage >&
      proposed_messages() const;

  // .event_store.client.UUID correlation_id = 1;
  bool has_correlation_id() const;
  private:
  bool _internal_has_correlation_id() const;
  public:
  void clear_correlation_id();
  const ::event_store::client::UUID& correlation_id() const;
  ::event_store::client::UUID* release_correlation_id();
  ::event_store::client::UUID* mutable_correlation_id();
  void set_allocated_correlation_id(::event_store::client::UUID* correlation_id);
  private:
  const ::event_store::client::UUID& _internal_correlation_id() const;
  ::event_store::client::UUID* _internal_mutable_correlation_id();
  public:
  void unsafe_arena_set_allocated_correlation_id(
      ::event_store::client::UUID* correlation_id);
  ::event_store::client::UUID* unsafe_arena_release_correlation_id();

  // .event_store.client.streams.BatchAppendReq.Options options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::streams::BatchAppendReq_Options& options() const;
  ::event_store::client::streams::BatchAppendReq_Options* release_options();
  ::event_store::client::streams::BatchAppendReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::streams::BatchAppendReq_Options* options);
  private:
  const ::event_store::client::streams::BatchAppendReq_Options& _internal_options() const;
  ::event_store::client::streams::BatchAppendReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::streams::BatchAppendReq_Options* options);
  ::event_store::client::streams::BatchAppendReq_Options* unsafe_arena_release_options();

  // bool is_final = 4;
  void clear_is_final();
  bool is_final() const;
  void set_is_final(bool value);
  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.BatchAppendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::streams::BatchAppendReq_ProposedMessage > proposed_messages_;
  ::event_store::client::UUID* correlation_id_;
  ::event_store::client::streams::BatchAppendReq_Options* options_;
  bool is_final_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class BatchAppendResp_Success PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.BatchAppendResp.Success) */ {
 public:
  inline BatchAppendResp_Success() : BatchAppendResp_Success(nullptr) {};
  virtual ~BatchAppendResp_Success();

  BatchAppendResp_Success(const BatchAppendResp_Success& from);
  BatchAppendResp_Success(BatchAppendResp_Success&& from) noexcept
    : BatchAppendResp_Success() {
    *this = ::std::move(from);
  }

  inline BatchAppendResp_Success& operator=(const BatchAppendResp_Success& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchAppendResp_Success& operator=(BatchAppendResp_Success&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchAppendResp_Success& default_instance();

  enum CurrentRevisionOptionCase {
    kCurrentRevision = 1,
    kNoStream = 2,
    CURRENT_REVISION_OPTION_NOT_SET = 0,
  };

  enum PositionOptionCase {
    kPosition = 3,
    kNoPosition = 4,
    POSITION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAppendResp_Success* internal_default_instance() {
    return reinterpret_cast<const BatchAppendResp_Success*>(
               &_BatchAppendResp_Success_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BatchAppendResp_Success& a, BatchAppendResp_Success& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchAppendResp_Success* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchAppendResp_Success* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchAppendResp_Success* New() const final {
    return CreateMaybeMessage<BatchAppendResp_Success>(nullptr);
  }

  BatchAppendResp_Success* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchAppendResp_Success>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchAppendResp_Success& from);
  void MergeFrom(const BatchAppendResp_Success& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchAppendResp_Success* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.BatchAppendResp.Success";
  }
  protected:
  explicit BatchAppendResp_Success(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentRevisionFieldNumber = 1,
    kNoStreamFieldNumber = 2,
    kPositionFieldNumber = 3,
    kNoPositionFieldNumber = 4,
  };
  // uint64 current_revision = 1;
  private:
  bool _internal_has_current_revision() const;
  public:
  void clear_current_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_revision() const;
  void set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_revision() const;
  void _internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .google.protobuf.Empty no_stream = 2;
  bool has_no_stream() const;
  private:
  bool _internal_has_no_stream() const;
  public:
  void clear_no_stream();
  const PROTOBUF_NAMESPACE_ID::Empty& no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_no_stream();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_no_stream();
  void set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_no_stream();
  public:
  void unsafe_arena_set_allocated_no_stream(
      PROTOBUF_NAMESPACE_ID::Empty* no_stream);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_no_stream();

  // .event_store.client.AllStreamPosition position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::event_store::client::AllStreamPosition& position() const;
  ::event_store::client::AllStreamPosition* release_position();
  ::event_store::client::AllStreamPosition* mutable_position();
  void set_allocated_position(::event_store::client::AllStreamPosition* position);
  private:
  const ::event_store::client::AllStreamPosition& _internal_position() const;
  ::event_store::client::AllStreamPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::event_store::client::AllStreamPosition* position);
  ::event_store::client::AllStreamPosition* unsafe_arena_release_position();

  // .google.protobuf.Empty no_position = 4;
  bool has_no_position() const;
  private:
  bool _internal_has_no_position() const;
  public:
  void clear_no_position();
  const PROTOBUF_NAMESPACE_ID::Empty& no_position() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_no_position();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_no_position();
  void set_allocated_no_position(PROTOBUF_NAMESPACE_ID::Empty* no_position);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_no_position() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_no_position();
  public:
  void unsafe_arena_set_allocated_no_position(
      PROTOBUF_NAMESPACE_ID::Empty* no_position);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_no_position();

  void clear_current_revision_option();
  CurrentRevisionOptionCase current_revision_option_case() const;
  void clear_position_option();
  PositionOptionCase position_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.BatchAppendResp.Success)
 private:
  class _Internal;
  void set_has_current_revision();
  void set_has_no_stream();
  void set_has_position();
  void set_has_no_position();

  inline bool has_current_revision_option() const;
  inline void clear_has_current_revision_option();

  inline bool has_position_option() const;
  inline void clear_has_position_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CurrentRevisionOptionUnion {
    CurrentRevisionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_;
    PROTOBUF_NAMESPACE_ID::Empty* no_stream_;
  } current_revision_option_;
  union PositionOptionUnion {
    PositionOptionUnion() {}
    ::event_store::client::AllStreamPosition* position_;
    PROTOBUF_NAMESPACE_ID::Empty* no_position_;
  } position_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class BatchAppendResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.BatchAppendResp) */ {
 public:
  inline BatchAppendResp() : BatchAppendResp(nullptr) {};
  virtual ~BatchAppendResp();

  BatchAppendResp(const BatchAppendResp& from);
  BatchAppendResp(BatchAppendResp&& from) noexcept
    : BatchAppendResp() {
    *this = ::std::move(from);
  }

  inline BatchAppendResp& operator=(const BatchAppendResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchAppendResp& operator=(BatchAppendResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchAppendResp& default_instance();

  enum ResultCase {
    kError = 2,
    kSuccess = 3,
    RESULT_NOT_SET = 0,
  };

  enum ExpectedStreamPositionCase {
    kStreamPosition = 5,
    kNoStream = 6,
    kAny = 7,
    kStreamExists = 8,
    EXPECTED_STREAM_POSITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAppendResp* internal_default_instance() {
    return reinterpret_cast<const BatchAppendResp*>(
               &_BatchAppendResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(BatchAppendResp& a, BatchAppendResp& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchAppendResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchAppendResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchAppendResp* New() const final {
    return CreateMaybeMessage<BatchAppendResp>(nullptr);
  }

  BatchAppendResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchAppendResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchAppendResp& from);
  void MergeFrom(const BatchAppendResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchAppendResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.BatchAppendResp";
  }
  protected:
  explicit BatchAppendResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatchAppendResp_Success Success;

  // accessors -------------------------------------------------------

  enum : int {
    kCorrelationIdFieldNumber = 1,
    kStreamIdentifierFieldNumber = 4,
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 3,
    kStreamPositionFieldNumber = 5,
    kNoStreamFieldNumber = 6,
    kAnyFieldNumber = 7,
    kStreamExistsFieldNumber = 8,
  };
  // .event_store.client.UUID correlation_id = 1;
  bool has_correlation_id() const;
  private:
  bool _internal_has_correlation_id() const;
  public:
  void clear_correlation_id();
  const ::event_store::client::UUID& correlation_id() const;
  ::event_store::client::UUID* release_correlation_id();
  ::event_store::client::UUID* mutable_correlation_id();
  void set_allocated_correlation_id(::event_store::client::UUID* correlation_id);
  private:
  const ::event_store::client::UUID& _internal_correlation_id() const;
  ::event_store::client::UUID* _internal_mutable_correlation_id();
  public:
  void unsafe_arena_set_allocated_correlation_id(
      ::event_store::client::UUID* correlation_id);
  ::event_store::client::UUID* unsafe_arena_release_correlation_id();

  // .event_store.client.StreamIdentifier stream_identifier = 4;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // .google.rpc.Status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // .event_store.client.streams.BatchAppendResp.Success success = 3;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::event_store::client::streams::BatchAppendResp_Success& success() const;
  ::event_store::client::streams::BatchAppendResp_Success* release_success();
  ::event_store::client::streams::BatchAppendResp_Success* mutable_success();
  void set_allocated_success(::event_store::client::streams::BatchAppendResp_Success* success);
  private:
  const ::event_store::client::streams::BatchAppendResp_Success& _internal_success() const;
  ::event_store::client::streams::BatchAppendResp_Success* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::event_store::client::streams::BatchAppendResp_Success* success);
  ::event_store::client::streams::BatchAppendResp_Success* unsafe_arena_release_success();

  // uint64 stream_position = 5;
  private:
  bool _internal_has_stream_position() const;
  public:
  void clear_stream_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_position() const;
  void set_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_position() const;
  void _internal_set_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .google.protobuf.Empty no_stream = 6;
  bool has_no_stream() const;
  private:
  bool _internal_has_no_stream() const;
  public:
  void clear_no_stream();
  const PROTOBUF_NAMESPACE_ID::Empty& no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_no_stream();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_no_stream();
  void set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_no_stream();
  public:
  void unsafe_arena_set_allocated_no_stream(
      PROTOBUF_NAMESPACE_ID::Empty* no_stream);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_no_stream();

  // .google.protobuf.Empty any = 7;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const PROTOBUF_NAMESPACE_ID::Empty& any() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_any();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_any();
  void set_allocated_any(PROTOBUF_NAMESPACE_ID::Empty* any);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_any() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_any();
  public:
  void unsafe_arena_set_allocated_any(
      PROTOBUF_NAMESPACE_ID::Empty* any);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_any();

  // .google.protobuf.Empty stream_exists = 8;
  bool has_stream_exists() const;
  private:
  bool _internal_has_stream_exists() const;
  public:
  void clear_stream_exists();
  const PROTOBUF_NAMESPACE_ID::Empty& stream_exists() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_stream_exists();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_stream_exists();
  void set_allocated_stream_exists(PROTOBUF_NAMESPACE_ID::Empty* stream_exists);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_stream_exists() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_stream_exists();
  public:
  void unsafe_arena_set_allocated_stream_exists(
      PROTOBUF_NAMESPACE_ID::Empty* stream_exists);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_stream_exists();

  void clear_result();
  ResultCase result_case() const;
  void clear_expected_stream_position();
  ExpectedStreamPositionCase expected_stream_position_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.BatchAppendResp)
 private:
  class _Internal;
  void set_has_error();
  void set_has_success();
  void set_has_stream_position();
  void set_has_no_stream();
  void set_has_any();
  void set_has_stream_exists();

  inline bool has_result() const;
  inline void clear_has_result();

  inline bool has_expected_stream_position() const;
  inline void clear_has_expected_stream_position();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* correlation_id_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  union ResultUnion {
    ResultUnion() {}
    ::google::rpc::Status* error_;
    ::event_store::client::streams::BatchAppendResp_Success* success_;
  } result_;
  union ExpectedStreamPositionUnion {
    ExpectedStreamPositionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 stream_position_;
    PROTOBUF_NAMESPACE_ID::Empty* no_stream_;
    PROTOBUF_NAMESPACE_ID::Empty* any_;
    PROTOBUF_NAMESPACE_ID::Empty* stream_exists_;
  } expected_stream_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.DeleteReq.Options) */ {
 public:
  inline DeleteReq_Options() : DeleteReq_Options(nullptr) {};
  virtual ~DeleteReq_Options();

  DeleteReq_Options(const DeleteReq_Options& from);
  DeleteReq_Options(DeleteReq_Options&& from) noexcept
    : DeleteReq_Options() {
    *this = ::std::move(from);
  }

  inline DeleteReq_Options& operator=(const DeleteReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq_Options& operator=(DeleteReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq_Options& default_instance();

  enum ExpectedStreamRevisionCase {
    kRevision = 2,
    kNoStream = 3,
    kAny = 4,
    kStreamExists = 5,
    EXPECTED_STREAM_REVISION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReq_Options* internal_default_instance() {
    return reinterpret_cast<const DeleteReq_Options*>(
               &_DeleteReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DeleteReq_Options& a, DeleteReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq_Options* New() const final {
    return CreateMaybeMessage<DeleteReq_Options>(nullptr);
  }

  DeleteReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq_Options& from);
  void MergeFrom(const DeleteReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.DeleteReq.Options";
  }
  protected:
  explicit DeleteReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
    kRevisionFieldNumber = 2,
    kNoStreamFieldNumber = 3,
    kAnyFieldNumber = 4,
    kStreamExistsFieldNumber = 5,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // uint64 revision = 2;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty no_stream = 3;
  bool has_no_stream() const;
  private:
  bool _internal_has_no_stream() const;
  public:
  void clear_no_stream();
  const ::event_store::client::Empty& no_stream() const;
  ::event_store::client::Empty* release_no_stream();
  ::event_store::client::Empty* mutable_no_stream();
  void set_allocated_no_stream(::event_store::client::Empty* no_stream);
  private:
  const ::event_store::client::Empty& _internal_no_stream() const;
  ::event_store::client::Empty* _internal_mutable_no_stream();
  public:
  void unsafe_arena_set_allocated_no_stream(
      ::event_store::client::Empty* no_stream);
  ::event_store::client::Empty* unsafe_arena_release_no_stream();

  // .event_store.client.Empty any = 4;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const ::event_store::client::Empty& any() const;
  ::event_store::client::Empty* release_any();
  ::event_store::client::Empty* mutable_any();
  void set_allocated_any(::event_store::client::Empty* any);
  private:
  const ::event_store::client::Empty& _internal_any() const;
  ::event_store::client::Empty* _internal_mutable_any();
  public:
  void unsafe_arena_set_allocated_any(
      ::event_store::client::Empty* any);
  ::event_store::client::Empty* unsafe_arena_release_any();

  // .event_store.client.Empty stream_exists = 5;
  bool has_stream_exists() const;
  private:
  bool _internal_has_stream_exists() const;
  public:
  void clear_stream_exists();
  const ::event_store::client::Empty& stream_exists() const;
  ::event_store::client::Empty* release_stream_exists();
  ::event_store::client::Empty* mutable_stream_exists();
  void set_allocated_stream_exists(::event_store::client::Empty* stream_exists);
  private:
  const ::event_store::client::Empty& _internal_stream_exists() const;
  ::event_store::client::Empty* _internal_mutable_stream_exists();
  public:
  void unsafe_arena_set_allocated_stream_exists(
      ::event_store::client::Empty* stream_exists);
  ::event_store::client::Empty* unsafe_arena_release_stream_exists();

  void clear_expected_stream_revision();
  ExpectedStreamRevisionCase expected_stream_revision_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.DeleteReq.Options)
 private:
  class _Internal;
  void set_has_revision();
  void set_has_no_stream();
  void set_has_any();
  void set_has_stream_exists();

  inline bool has_expected_stream_revision() const;
  inline void clear_has_expected_stream_revision();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  union ExpectedStreamRevisionUnion {
    ExpectedStreamRevisionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
    ::event_store::client::Empty* no_stream_;
    ::event_store::client::Empty* any_;
    ::event_store::client::Empty* stream_exists_;
  } expected_stream_revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.DeleteReq) */ {
 public:
  inline DeleteReq() : DeleteReq(nullptr) {};
  virtual ~DeleteReq();

  DeleteReq(const DeleteReq& from);
  DeleteReq(DeleteReq&& from) noexcept
    : DeleteReq() {
    *this = ::std::move(from);
  }

  inline DeleteReq& operator=(const DeleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq& operator=(DeleteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReq* internal_default_instance() {
    return reinterpret_cast<const DeleteReq*>(
               &_DeleteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeleteReq& a, DeleteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq* New() const final {
    return CreateMaybeMessage<DeleteReq>(nullptr);
  }

  DeleteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq& from);
  void MergeFrom(const DeleteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.DeleteReq";
  }
  protected:
  explicit DeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.streams.DeleteReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::streams::DeleteReq_Options& options() const;
  ::event_store::client::streams::DeleteReq_Options* release_options();
  ::event_store::client::streams::DeleteReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::streams::DeleteReq_Options* options);
  private:
  const ::event_store::client::streams::DeleteReq_Options& _internal_options() const;
  ::event_store::client::streams::DeleteReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::streams::DeleteReq_Options* options);
  ::event_store::client::streams::DeleteReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.streams.DeleteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::streams::DeleteReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.DeleteResp.Position) */ {
 public:
  inline DeleteResp_Position() : DeleteResp_Position(nullptr) {};
  virtual ~DeleteResp_Position();

  DeleteResp_Position(const DeleteResp_Position& from);
  DeleteResp_Position(DeleteResp_Position&& from) noexcept
    : DeleteResp_Position() {
    *this = ::std::move(from);
  }

  inline DeleteResp_Position& operator=(const DeleteResp_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp_Position& operator=(DeleteResp_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp_Position* internal_default_instance() {
    return reinterpret_cast<const DeleteResp_Position*>(
               &_DeleteResp_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DeleteResp_Position& a, DeleteResp_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp_Position* New() const final {
    return CreateMaybeMessage<DeleteResp_Position>(nullptr);
  }

  DeleteResp_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp_Position& from);
  void MergeFrom(const DeleteResp_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.DeleteResp.Position";
  }
  protected:
  explicit DeleteResp_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
  };
  // uint64 commit_position = 1;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 2;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.DeleteResp.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.DeleteResp) */ {
 public:
  inline DeleteResp() : DeleteResp(nullptr) {};
  virtual ~DeleteResp();

  DeleteResp(const DeleteResp& from);
  DeleteResp(DeleteResp&& from) noexcept
    : DeleteResp() {
    *this = ::std::move(from);
  }

  inline DeleteResp& operator=(const DeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp& operator=(DeleteResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp& default_instance();

  enum PositionOptionCase {
    kPosition = 1,
    kNoPosition = 2,
    POSITION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp* internal_default_instance() {
    return reinterpret_cast<const DeleteResp*>(
               &_DeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DeleteResp& a, DeleteResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp* New() const final {
    return CreateMaybeMessage<DeleteResp>(nullptr);
  }

  DeleteResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp& from);
  void MergeFrom(const DeleteResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.DeleteResp";
  }
  protected:
  explicit DeleteResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteResp_Position Position;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kNoPositionFieldNumber = 2,
  };
  // .event_store.client.streams.DeleteResp.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::event_store::client::streams::DeleteResp_Position& position() const;
  ::event_store::client::streams::DeleteResp_Position* release_position();
  ::event_store::client::streams::DeleteResp_Position* mutable_position();
  void set_allocated_position(::event_store::client::streams::DeleteResp_Position* position);
  private:
  const ::event_store::client::streams::DeleteResp_Position& _internal_position() const;
  ::event_store::client::streams::DeleteResp_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::event_store::client::streams::DeleteResp_Position* position);
  ::event_store::client::streams::DeleteResp_Position* unsafe_arena_release_position();

  // .event_store.client.Empty no_position = 2;
  bool has_no_position() const;
  private:
  bool _internal_has_no_position() const;
  public:
  void clear_no_position();
  const ::event_store::client::Empty& no_position() const;
  ::event_store::client::Empty* release_no_position();
  ::event_store::client::Empty* mutable_no_position();
  void set_allocated_no_position(::event_store::client::Empty* no_position);
  private:
  const ::event_store::client::Empty& _internal_no_position() const;
  ::event_store::client::Empty* _internal_mutable_no_position();
  public:
  void unsafe_arena_set_allocated_no_position(
      ::event_store::client::Empty* no_position);
  ::event_store::client::Empty* unsafe_arena_release_no_position();

  void clear_position_option();
  PositionOptionCase position_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.DeleteResp)
 private:
  class _Internal;
  void set_has_position();
  void set_has_no_position();

  inline bool has_position_option() const;
  inline void clear_has_position_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PositionOptionUnion {
    PositionOptionUnion() {}
    ::event_store::client::streams::DeleteResp_Position* position_;
    ::event_store::client::Empty* no_position_;
  } position_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class TombstoneReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.TombstoneReq.Options) */ {
 public:
  inline TombstoneReq_Options() : TombstoneReq_Options(nullptr) {};
  virtual ~TombstoneReq_Options();

  TombstoneReq_Options(const TombstoneReq_Options& from);
  TombstoneReq_Options(TombstoneReq_Options&& from) noexcept
    : TombstoneReq_Options() {
    *this = ::std::move(from);
  }

  inline TombstoneReq_Options& operator=(const TombstoneReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline TombstoneReq_Options& operator=(TombstoneReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TombstoneReq_Options& default_instance();

  enum ExpectedStreamRevisionCase {
    kRevision = 2,
    kNoStream = 3,
    kAny = 4,
    kStreamExists = 5,
    EXPECTED_STREAM_REVISION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TombstoneReq_Options* internal_default_instance() {
    return reinterpret_cast<const TombstoneReq_Options*>(
               &_TombstoneReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TombstoneReq_Options& a, TombstoneReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(TombstoneReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TombstoneReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TombstoneReq_Options* New() const final {
    return CreateMaybeMessage<TombstoneReq_Options>(nullptr);
  }

  TombstoneReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TombstoneReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TombstoneReq_Options& from);
  void MergeFrom(const TombstoneReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TombstoneReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.TombstoneReq.Options";
  }
  protected:
  explicit TombstoneReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
    kRevisionFieldNumber = 2,
    kNoStreamFieldNumber = 3,
    kAnyFieldNumber = 4,
    kStreamExistsFieldNumber = 5,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // uint64 revision = 2;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty no_stream = 3;
  bool has_no_stream() const;
  private:
  bool _internal_has_no_stream() const;
  public:
  void clear_no_stream();
  const ::event_store::client::Empty& no_stream() const;
  ::event_store::client::Empty* release_no_stream();
  ::event_store::client::Empty* mutable_no_stream();
  void set_allocated_no_stream(::event_store::client::Empty* no_stream);
  private:
  const ::event_store::client::Empty& _internal_no_stream() const;
  ::event_store::client::Empty* _internal_mutable_no_stream();
  public:
  void unsafe_arena_set_allocated_no_stream(
      ::event_store::client::Empty* no_stream);
  ::event_store::client::Empty* unsafe_arena_release_no_stream();

  // .event_store.client.Empty any = 4;
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const ::event_store::client::Empty& any() const;
  ::event_store::client::Empty* release_any();
  ::event_store::client::Empty* mutable_any();
  void set_allocated_any(::event_store::client::Empty* any);
  private:
  const ::event_store::client::Empty& _internal_any() const;
  ::event_store::client::Empty* _internal_mutable_any();
  public:
  void unsafe_arena_set_allocated_any(
      ::event_store::client::Empty* any);
  ::event_store::client::Empty* unsafe_arena_release_any();

  // .event_store.client.Empty stream_exists = 5;
  bool has_stream_exists() const;
  private:
  bool _internal_has_stream_exists() const;
  public:
  void clear_stream_exists();
  const ::event_store::client::Empty& stream_exists() const;
  ::event_store::client::Empty* release_stream_exists();
  ::event_store::client::Empty* mutable_stream_exists();
  void set_allocated_stream_exists(::event_store::client::Empty* stream_exists);
  private:
  const ::event_store::client::Empty& _internal_stream_exists() const;
  ::event_store::client::Empty* _internal_mutable_stream_exists();
  public:
  void unsafe_arena_set_allocated_stream_exists(
      ::event_store::client::Empty* stream_exists);
  ::event_store::client::Empty* unsafe_arena_release_stream_exists();

  void clear_expected_stream_revision();
  ExpectedStreamRevisionCase expected_stream_revision_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.TombstoneReq.Options)
 private:
  class _Internal;
  void set_has_revision();
  void set_has_no_stream();
  void set_has_any();
  void set_has_stream_exists();

  inline bool has_expected_stream_revision() const;
  inline void clear_has_expected_stream_revision();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  union ExpectedStreamRevisionUnion {
    ExpectedStreamRevisionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
    ::event_store::client::Empty* no_stream_;
    ::event_store::client::Empty* any_;
    ::event_store::client::Empty* stream_exists_;
  } expected_stream_revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class TombstoneReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.TombstoneReq) */ {
 public:
  inline TombstoneReq() : TombstoneReq(nullptr) {};
  virtual ~TombstoneReq();

  TombstoneReq(const TombstoneReq& from);
  TombstoneReq(TombstoneReq&& from) noexcept
    : TombstoneReq() {
    *this = ::std::move(from);
  }

  inline TombstoneReq& operator=(const TombstoneReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TombstoneReq& operator=(TombstoneReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TombstoneReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TombstoneReq* internal_default_instance() {
    return reinterpret_cast<const TombstoneReq*>(
               &_TombstoneReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TombstoneReq& a, TombstoneReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TombstoneReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TombstoneReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TombstoneReq* New() const final {
    return CreateMaybeMessage<TombstoneReq>(nullptr);
  }

  TombstoneReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TombstoneReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TombstoneReq& from);
  void MergeFrom(const TombstoneReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TombstoneReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.TombstoneReq";
  }
  protected:
  explicit TombstoneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TombstoneReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.streams.TombstoneReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::streams::TombstoneReq_Options& options() const;
  ::event_store::client::streams::TombstoneReq_Options* release_options();
  ::event_store::client::streams::TombstoneReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::streams::TombstoneReq_Options* options);
  private:
  const ::event_store::client::streams::TombstoneReq_Options& _internal_options() const;
  ::event_store::client::streams::TombstoneReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::streams::TombstoneReq_Options* options);
  ::event_store::client::streams::TombstoneReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.streams.TombstoneReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::streams::TombstoneReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class TombstoneResp_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.TombstoneResp.Position) */ {
 public:
  inline TombstoneResp_Position() : TombstoneResp_Position(nullptr) {};
  virtual ~TombstoneResp_Position();

  TombstoneResp_Position(const TombstoneResp_Position& from);
  TombstoneResp_Position(TombstoneResp_Position&& from) noexcept
    : TombstoneResp_Position() {
    *this = ::std::move(from);
  }

  inline TombstoneResp_Position& operator=(const TombstoneResp_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline TombstoneResp_Position& operator=(TombstoneResp_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TombstoneResp_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TombstoneResp_Position* internal_default_instance() {
    return reinterpret_cast<const TombstoneResp_Position*>(
               &_TombstoneResp_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TombstoneResp_Position& a, TombstoneResp_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(TombstoneResp_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TombstoneResp_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TombstoneResp_Position* New() const final {
    return CreateMaybeMessage<TombstoneResp_Position>(nullptr);
  }

  TombstoneResp_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TombstoneResp_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TombstoneResp_Position& from);
  void MergeFrom(const TombstoneResp_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TombstoneResp_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.TombstoneResp.Position";
  }
  protected:
  explicit TombstoneResp_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
  };
  // uint64 commit_position = 1;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 2;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.streams.TombstoneResp.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streams_2eproto;
};
// -------------------------------------------------------------------

class TombstoneResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.streams.TombstoneResp) */ {
 public:
  inline TombstoneResp() : TombstoneResp(nullptr) {};
  virtual ~TombstoneResp();

  TombstoneResp(const TombstoneResp& from);
  TombstoneResp(TombstoneResp&& from) noexcept
    : TombstoneResp() {
    *this = ::std::move(from);
  }

  inline TombstoneResp& operator=(const TombstoneResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TombstoneResp& operator=(TombstoneResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TombstoneResp& default_instance();

  enum PositionOptionCase {
    kPosition = 1,
    kNoPosition = 2,
    POSITION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TombstoneResp* internal_default_instance() {
    return reinterpret_cast<const TombstoneResp*>(
               &_TombstoneResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TombstoneResp& a, TombstoneResp& b) {
    a.Swap(&b);
  }
  inline void Swap(TombstoneResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TombstoneResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TombstoneResp* New() const final {
    return CreateMaybeMessage<TombstoneResp>(nullptr);
  }

  TombstoneResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TombstoneResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TombstoneResp& from);
  void MergeFrom(const TombstoneResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TombstoneResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.streams.TombstoneResp";
  }
  protected:
  explicit TombstoneResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_streams_2eproto);
    return ::descriptor_table_streams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TombstoneResp_Position Position;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kNoPositionFieldNumber = 2,
  };
  // .event_store.client.streams.TombstoneResp.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::event_store::client::streams::TombstoneResp_Position& position() const;
  ::event_store::client::streams::TombstoneResp_Position* release_position();
  ::event_store::client::streams::TombstoneResp_Position* mutable_position();
  void set_allocated_position(::event_store::client::streams::TombstoneResp_Position* position);
  private:
  const ::event_store::client::streams::TombstoneResp_Position& _internal_position() const;
  ::event_store::client::streams::TombstoneResp_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::event_store::client::streams::TombstoneResp_Position* position);
  ::event_store::client::streams::TombstoneResp_Position* unsafe_arena_release_position();

  // .event_store.client.Empty no_position = 2;
  bool has_no_position() const;
  private:
  bool _internal_has_no_position() const;
  public:
  void clear_no_position();
  const ::event_store::client::Empty& no_position() const;
  ::event_store::client::Empty* release_no_position();
  ::event_store::client::Empty* mutable_no_position();
  void set_allocated_no_position(::event_store::client::Empty* no_position);
  private:
  const ::event_store::client::Empty& _internal_no_position() const;
  ::event_store::client::Empty* _internal_mutable_no_position();
  public:
  void unsafe_arena_set_allocated_no_position(
      ::event_store::client::Empty* no_position);
  ::event_store::client::Empty* unsafe_arena_release_no_position();

  void clear_position_option();
  PositionOptionCase position_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.streams.TombstoneResp)
 private:
  class _Internal;
  void set_has_position();
  void set_has_no_position();

  inline bool has_position_option() const;
  inline void clear_has_position_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PositionOptionUnion {
    PositionOptionUnion() {}
    ::event_store::client::streams::TombstoneResp_Position* position_;
    ::event_store::client::Empty* no_position_;
  } position_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_streams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadReq_Options_StreamOptions

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool ReadReq_Options_StreamOptions::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool ReadReq_Options_StreamOptions::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& ReadReq_Options_StreamOptions::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& ReadReq_Options_StreamOptions::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.StreamOptions.stream_identifier)
  return _internal_stream_identifier();
}
inline void ReadReq_Options_StreamOptions::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.StreamOptions.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* ReadReq_Options_StreamOptions::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* ReadReq_Options_StreamOptions::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.StreamOptions.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* ReadReq_Options_StreamOptions::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* ReadReq_Options_StreamOptions::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.StreamOptions.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void ReadReq_Options_StreamOptions::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.StreamOptions.stream_identifier)
}

// uint64 revision = 2;
inline bool ReadReq_Options_StreamOptions::_internal_has_revision() const {
  return revision_option_case() == kRevision;
}
inline void ReadReq_Options_StreamOptions::set_has_revision() {
  _oneof_case_[0] = kRevision;
}
inline void ReadReq_Options_StreamOptions::clear_revision() {
  if (_internal_has_revision()) {
    revision_option_.revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_revision_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReq_Options_StreamOptions::_internal_revision() const {
  if (_internal_has_revision()) {
    return revision_option_.revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void ReadReq_Options_StreamOptions::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_revision()) {
    clear_revision_option();
    set_has_revision();
  }
  revision_option_.revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReq_Options_StreamOptions::revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.StreamOptions.revision)
  return _internal_revision();
}
inline void ReadReq_Options_StreamOptions::set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.StreamOptions.revision)
}

// .event_store.client.Empty start = 3;
inline bool ReadReq_Options_StreamOptions::_internal_has_start() const {
  return revision_option_case() == kStart;
}
inline bool ReadReq_Options_StreamOptions::has_start() const {
  return _internal_has_start();
}
inline void ReadReq_Options_StreamOptions::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline ::event_store::client::Empty* ReadReq_Options_StreamOptions::release_start() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.StreamOptions.start)
  if (_internal_has_start()) {
    clear_has_revision_option();
      ::event_store::client::Empty* temp = revision_option_.start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    revision_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_StreamOptions::_internal_start() const {
  return _internal_has_start()
      ? *revision_option_.start_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_StreamOptions::start() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.StreamOptions.start)
  return _internal_start();
}
inline ::event_store::client::Empty* ReadReq_Options_StreamOptions::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.StreamOptions.start)
  if (_internal_has_start()) {
    clear_has_revision_option();
    ::event_store::client::Empty* temp = revision_option_.start_;
    revision_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_StreamOptions::unsafe_arena_set_allocated_start(::event_store::client::Empty* start) {
  clear_revision_option();
  if (start) {
    set_has_start();
    revision_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.StreamOptions.start)
}
inline ::event_store::client::Empty* ReadReq_Options_StreamOptions::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_revision_option();
    set_has_start();
    revision_option_.start_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return revision_option_.start_;
}
inline ::event_store::client::Empty* ReadReq_Options_StreamOptions::mutable_start() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.StreamOptions.start)
  return _internal_mutable_start();
}

// .event_store.client.Empty end = 4;
inline bool ReadReq_Options_StreamOptions::_internal_has_end() const {
  return revision_option_case() == kEnd;
}
inline bool ReadReq_Options_StreamOptions::has_end() const {
  return _internal_has_end();
}
inline void ReadReq_Options_StreamOptions::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline ::event_store::client::Empty* ReadReq_Options_StreamOptions::release_end() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.StreamOptions.end)
  if (_internal_has_end()) {
    clear_has_revision_option();
      ::event_store::client::Empty* temp = revision_option_.end_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    revision_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_StreamOptions::_internal_end() const {
  return _internal_has_end()
      ? *revision_option_.end_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_StreamOptions::end() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.StreamOptions.end)
  return _internal_end();
}
inline ::event_store::client::Empty* ReadReq_Options_StreamOptions::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.StreamOptions.end)
  if (_internal_has_end()) {
    clear_has_revision_option();
    ::event_store::client::Empty* temp = revision_option_.end_;
    revision_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_StreamOptions::unsafe_arena_set_allocated_end(::event_store::client::Empty* end) {
  clear_revision_option();
  if (end) {
    set_has_end();
    revision_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.StreamOptions.end)
}
inline ::event_store::client::Empty* ReadReq_Options_StreamOptions::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_revision_option();
    set_has_end();
    revision_option_.end_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return revision_option_.end_;
}
inline ::event_store::client::Empty* ReadReq_Options_StreamOptions::mutable_end() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.StreamOptions.end)
  return _internal_mutable_end();
}

inline bool ReadReq_Options_StreamOptions::has_revision_option() const {
  return revision_option_case() != REVISION_OPTION_NOT_SET;
}
inline void ReadReq_Options_StreamOptions::clear_has_revision_option() {
  _oneof_case_[0] = REVISION_OPTION_NOT_SET;
}
inline ReadReq_Options_StreamOptions::RevisionOptionCase ReadReq_Options_StreamOptions::revision_option_case() const {
  return ReadReq_Options_StreamOptions::RevisionOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadReq_Options_AllOptions

// .event_store.client.streams.ReadReq.Options.Position position = 1;
inline bool ReadReq_Options_AllOptions::_internal_has_position() const {
  return all_option_case() == kPosition;
}
inline bool ReadReq_Options_AllOptions::has_position() const {
  return _internal_has_position();
}
inline void ReadReq_Options_AllOptions::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void ReadReq_Options_AllOptions::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete all_option_.position_;
    }
    clear_has_all_option();
  }
}
inline ::event_store::client::streams::ReadReq_Options_Position* ReadReq_Options_AllOptions::release_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.AllOptions.position)
  if (_internal_has_position()) {
    clear_has_all_option();
      ::event_store::client::streams::ReadReq_Options_Position* temp = all_option_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadReq_Options_Position& ReadReq_Options_AllOptions::_internal_position() const {
  return _internal_has_position()
      ? *all_option_.position_
      : *reinterpret_cast< ::event_store::client::streams::ReadReq_Options_Position*>(&::event_store::client::streams::_ReadReq_Options_Position_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_Position& ReadReq_Options_AllOptions::position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.AllOptions.position)
  return _internal_position();
}
inline ::event_store::client::streams::ReadReq_Options_Position* ReadReq_Options_AllOptions::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.AllOptions.position)
  if (_internal_has_position()) {
    clear_has_all_option();
    ::event_store::client::streams::ReadReq_Options_Position* temp = all_option_.position_;
    all_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_AllOptions::unsafe_arena_set_allocated_position(::event_store::client::streams::ReadReq_Options_Position* position) {
  clear_all_option();
  if (position) {
    set_has_position();
    all_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.AllOptions.position)
}
inline ::event_store::client::streams::ReadReq_Options_Position* ReadReq_Options_AllOptions::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_all_option();
    set_has_position();
    all_option_.position_ = CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_Position >(GetArena());
  }
  return all_option_.position_;
}
inline ::event_store::client::streams::ReadReq_Options_Position* ReadReq_Options_AllOptions::mutable_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.AllOptions.position)
  return _internal_mutable_position();
}

// .event_store.client.Empty start = 2;
inline bool ReadReq_Options_AllOptions::_internal_has_start() const {
  return all_option_case() == kStart;
}
inline bool ReadReq_Options_AllOptions::has_start() const {
  return _internal_has_start();
}
inline void ReadReq_Options_AllOptions::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline ::event_store::client::Empty* ReadReq_Options_AllOptions::release_start() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.AllOptions.start)
  if (_internal_has_start()) {
    clear_has_all_option();
      ::event_store::client::Empty* temp = all_option_.start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_AllOptions::_internal_start() const {
  return _internal_has_start()
      ? *all_option_.start_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_AllOptions::start() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.AllOptions.start)
  return _internal_start();
}
inline ::event_store::client::Empty* ReadReq_Options_AllOptions::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.AllOptions.start)
  if (_internal_has_start()) {
    clear_has_all_option();
    ::event_store::client::Empty* temp = all_option_.start_;
    all_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_AllOptions::unsafe_arena_set_allocated_start(::event_store::client::Empty* start) {
  clear_all_option();
  if (start) {
    set_has_start();
    all_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.AllOptions.start)
}
inline ::event_store::client::Empty* ReadReq_Options_AllOptions::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_all_option();
    set_has_start();
    all_option_.start_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return all_option_.start_;
}
inline ::event_store::client::Empty* ReadReq_Options_AllOptions::mutable_start() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.AllOptions.start)
  return _internal_mutable_start();
}

// .event_store.client.Empty end = 3;
inline bool ReadReq_Options_AllOptions::_internal_has_end() const {
  return all_option_case() == kEnd;
}
inline bool ReadReq_Options_AllOptions::has_end() const {
  return _internal_has_end();
}
inline void ReadReq_Options_AllOptions::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline ::event_store::client::Empty* ReadReq_Options_AllOptions::release_end() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.AllOptions.end)
  if (_internal_has_end()) {
    clear_has_all_option();
      ::event_store::client::Empty* temp = all_option_.end_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_AllOptions::_internal_end() const {
  return _internal_has_end()
      ? *all_option_.end_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_AllOptions::end() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.AllOptions.end)
  return _internal_end();
}
inline ::event_store::client::Empty* ReadReq_Options_AllOptions::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.AllOptions.end)
  if (_internal_has_end()) {
    clear_has_all_option();
    ::event_store::client::Empty* temp = all_option_.end_;
    all_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_AllOptions::unsafe_arena_set_allocated_end(::event_store::client::Empty* end) {
  clear_all_option();
  if (end) {
    set_has_end();
    all_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.AllOptions.end)
}
inline ::event_store::client::Empty* ReadReq_Options_AllOptions::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_all_option();
    set_has_end();
    all_option_.end_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return all_option_.end_;
}
inline ::event_store::client::Empty* ReadReq_Options_AllOptions::mutable_end() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.AllOptions.end)
  return _internal_mutable_end();
}

inline bool ReadReq_Options_AllOptions::has_all_option() const {
  return all_option_case() != ALL_OPTION_NOT_SET;
}
inline void ReadReq_Options_AllOptions::clear_has_all_option() {
  _oneof_case_[0] = ALL_OPTION_NOT_SET;
}
inline ReadReq_Options_AllOptions::AllOptionCase ReadReq_Options_AllOptions::all_option_case() const {
  return ReadReq_Options_AllOptions::AllOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadReq_Options_SubscriptionOptions

// -------------------------------------------------------------------

// ReadReq_Options_Position

// uint64 commit_position = 1;
inline void ReadReq_Options_Position::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReq_Options_Position::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReq_Options_Position::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.Position.commit_position)
  return _internal_commit_position();
}
inline void ReadReq_Options_Position::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void ReadReq_Options_Position::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.Position.commit_position)
}

// uint64 prepare_position = 2;
inline void ReadReq_Options_Position::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReq_Options_Position::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReq_Options_Position::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.Position.prepare_position)
  return _internal_prepare_position();
}
inline void ReadReq_Options_Position::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void ReadReq_Options_Position::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.Position.prepare_position)
}

// -------------------------------------------------------------------

// ReadReq_Options_FilterOptions_Expression

// string regex = 1;
inline void ReadReq_Options_FilterOptions_Expression::clear_regex() {
  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadReq_Options_FilterOptions_Expression::regex() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
  return _internal_regex();
}
inline void ReadReq_Options_FilterOptions_Expression::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
}
inline std::string* ReadReq_Options_FilterOptions_Expression::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
  return _internal_mutable_regex();
}
inline const std::string& ReadReq_Options_FilterOptions_Expression::_internal_regex() const {
  return regex_.Get();
}
inline void ReadReq_Options_FilterOptions_Expression::_internal_set_regex(const std::string& value) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadReq_Options_FilterOptions_Expression::set_regex(std::string&& value) {
  
  regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
}
inline void ReadReq_Options_FilterOptions_Expression::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
}
inline void ReadReq_Options_FilterOptions_Expression::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
}
inline std::string* ReadReq_Options_FilterOptions_Expression::_internal_mutable_regex() {
  
  return regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadReq_Options_FilterOptions_Expression::release_regex() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
  return regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadReq_Options_FilterOptions_Expression::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
}
inline std::string* ReadReq_Options_FilterOptions_Expression::unsafe_arena_release_regex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return regex_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadReq_Options_FilterOptions_Expression::unsafe_arena_set_allocated_regex(
    std::string* regex) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      regex, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex)
}

// repeated string prefix = 2;
inline int ReadReq_Options_FilterOptions_Expression::_internal_prefix_size() const {
  return prefix_.size();
}
inline int ReadReq_Options_FilterOptions_Expression::prefix_size() const {
  return _internal_prefix_size();
}
inline void ReadReq_Options_FilterOptions_Expression::clear_prefix() {
  prefix_.Clear();
}
inline std::string* ReadReq_Options_FilterOptions_Expression::add_prefix() {
  // @@protoc_insertion_point(field_add_mutable:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
  return _internal_add_prefix();
}
inline const std::string& ReadReq_Options_FilterOptions_Expression::_internal_prefix(int index) const {
  return prefix_.Get(index);
}
inline const std::string& ReadReq_Options_FilterOptions_Expression::prefix(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
  return _internal_prefix(index);
}
inline std::string* ReadReq_Options_FilterOptions_Expression::mutable_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
  return prefix_.Mutable(index);
}
inline void ReadReq_Options_FilterOptions_Expression::set_prefix(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
  prefix_.Mutable(index)->assign(value);
}
inline void ReadReq_Options_FilterOptions_Expression::set_prefix(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
  prefix_.Mutable(index)->assign(std::move(value));
}
inline void ReadReq_Options_FilterOptions_Expression::set_prefix(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
}
inline void ReadReq_Options_FilterOptions_Expression::set_prefix(int index, const char* value, size_t size) {
  prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
}
inline std::string* ReadReq_Options_FilterOptions_Expression::_internal_add_prefix() {
  return prefix_.Add();
}
inline void ReadReq_Options_FilterOptions_Expression::add_prefix(const std::string& value) {
  prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
}
inline void ReadReq_Options_FilterOptions_Expression::add_prefix(std::string&& value) {
  prefix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
}
inline void ReadReq_Options_FilterOptions_Expression::add_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
}
inline void ReadReq_Options_FilterOptions_Expression::add_prefix(const char* value, size_t size) {
  prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadReq_Options_FilterOptions_Expression::prefix() const {
  // @@protoc_insertion_point(field_list:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
  return prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadReq_Options_FilterOptions_Expression::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix)
  return &prefix_;
}

// -------------------------------------------------------------------

// ReadReq_Options_FilterOptions

// .event_store.client.streams.ReadReq.Options.FilterOptions.Expression stream_identifier = 1;
inline bool ReadReq_Options_FilterOptions::_internal_has_stream_identifier() const {
  return filter_case() == kStreamIdentifier;
}
inline bool ReadReq_Options_FilterOptions::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline void ReadReq_Options_FilterOptions::set_has_stream_identifier() {
  _oneof_case_[0] = kStreamIdentifier;
}
inline void ReadReq_Options_FilterOptions::clear_stream_identifier() {
  if (_internal_has_stream_identifier()) {
    if (GetArena() == nullptr) {
      delete filter_.stream_identifier_;
    }
    clear_has_filter();
  }
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* ReadReq_Options_FilterOptions::release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.FilterOptions.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_filter();
      ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* temp = filter_.stream_identifier_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& ReadReq_Options_FilterOptions::_internal_stream_identifier() const {
  return _internal_has_stream_identifier()
      ? *filter_.stream_identifier_
      : *reinterpret_cast< ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression*>(&::event_store::client::streams::_ReadReq_Options_FilterOptions_Expression_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& ReadReq_Options_FilterOptions::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.FilterOptions.stream_identifier)
  return _internal_stream_identifier();
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* ReadReq_Options_FilterOptions::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.FilterOptions.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_filter();
    ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* temp = filter_.stream_identifier_;
    filter_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_FilterOptions::unsafe_arena_set_allocated_stream_identifier(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* stream_identifier) {
  clear_filter();
  if (stream_identifier) {
    set_has_stream_identifier();
    filter_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.FilterOptions.stream_identifier)
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* ReadReq_Options_FilterOptions::_internal_mutable_stream_identifier() {
  if (!_internal_has_stream_identifier()) {
    clear_filter();
    set_has_stream_identifier();
    filter_.stream_identifier_ = CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression >(GetArena());
  }
  return filter_.stream_identifier_;
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* ReadReq_Options_FilterOptions::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.FilterOptions.stream_identifier)
  return _internal_mutable_stream_identifier();
}

// .event_store.client.streams.ReadReq.Options.FilterOptions.Expression event_type = 2;
inline bool ReadReq_Options_FilterOptions::_internal_has_event_type() const {
  return filter_case() == kEventType;
}
inline bool ReadReq_Options_FilterOptions::has_event_type() const {
  return _internal_has_event_type();
}
inline void ReadReq_Options_FilterOptions::set_has_event_type() {
  _oneof_case_[0] = kEventType;
}
inline void ReadReq_Options_FilterOptions::clear_event_type() {
  if (_internal_has_event_type()) {
    if (GetArena() == nullptr) {
      delete filter_.event_type_;
    }
    clear_has_filter();
  }
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* ReadReq_Options_FilterOptions::release_event_type() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.FilterOptions.event_type)
  if (_internal_has_event_type()) {
    clear_has_filter();
      ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* temp = filter_.event_type_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.event_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& ReadReq_Options_FilterOptions::_internal_event_type() const {
  return _internal_has_event_type()
      ? *filter_.event_type_
      : *reinterpret_cast< ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression*>(&::event_store::client::streams::_ReadReq_Options_FilterOptions_Expression_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& ReadReq_Options_FilterOptions::event_type() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.FilterOptions.event_type)
  return _internal_event_type();
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* ReadReq_Options_FilterOptions::unsafe_arena_release_event_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.FilterOptions.event_type)
  if (_internal_has_event_type()) {
    clear_has_filter();
    ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* temp = filter_.event_type_;
    filter_.event_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_FilterOptions::unsafe_arena_set_allocated_event_type(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* event_type) {
  clear_filter();
  if (event_type) {
    set_has_event_type();
    filter_.event_type_ = event_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.FilterOptions.event_type)
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* ReadReq_Options_FilterOptions::_internal_mutable_event_type() {
  if (!_internal_has_event_type()) {
    clear_filter();
    set_has_event_type();
    filter_.event_type_ = CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression >(GetArena());
  }
  return filter_.event_type_;
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* ReadReq_Options_FilterOptions::mutable_event_type() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.FilterOptions.event_type)
  return _internal_mutable_event_type();
}

// uint32 max = 3;
inline bool ReadReq_Options_FilterOptions::_internal_has_max() const {
  return window_case() == kMax;
}
inline void ReadReq_Options_FilterOptions::set_has_max() {
  _oneof_case_[1] = kMax;
}
inline void ReadReq_Options_FilterOptions::clear_max() {
  if (_internal_has_max()) {
    window_.max_ = 0u;
    clear_has_window();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadReq_Options_FilterOptions::_internal_max() const {
  if (_internal_has_max()) {
    return window_.max_;
  }
  return 0u;
}
inline void ReadReq_Options_FilterOptions::_internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_max()) {
    clear_window();
    set_has_max();
  }
  window_.max_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadReq_Options_FilterOptions::max() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.FilterOptions.max)
  return _internal_max();
}
inline void ReadReq_Options_FilterOptions::set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.FilterOptions.max)
}

// .event_store.client.Empty count = 4;
inline bool ReadReq_Options_FilterOptions::_internal_has_count() const {
  return window_case() == kCount;
}
inline bool ReadReq_Options_FilterOptions::has_count() const {
  return _internal_has_count();
}
inline void ReadReq_Options_FilterOptions::set_has_count() {
  _oneof_case_[1] = kCount;
}
inline ::event_store::client::Empty* ReadReq_Options_FilterOptions::release_count() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.FilterOptions.count)
  if (_internal_has_count()) {
    clear_has_window();
      ::event_store::client::Empty* temp = window_.count_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    window_.count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_FilterOptions::_internal_count() const {
  return _internal_has_count()
      ? *window_.count_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_FilterOptions::count() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.FilterOptions.count)
  return _internal_count();
}
inline ::event_store::client::Empty* ReadReq_Options_FilterOptions::unsafe_arena_release_count() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.FilterOptions.count)
  if (_internal_has_count()) {
    clear_has_window();
    ::event_store::client::Empty* temp = window_.count_;
    window_.count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_FilterOptions::unsafe_arena_set_allocated_count(::event_store::client::Empty* count) {
  clear_window();
  if (count) {
    set_has_count();
    window_.count_ = count;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.FilterOptions.count)
}
inline ::event_store::client::Empty* ReadReq_Options_FilterOptions::_internal_mutable_count() {
  if (!_internal_has_count()) {
    clear_window();
    set_has_count();
    window_.count_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return window_.count_;
}
inline ::event_store::client::Empty* ReadReq_Options_FilterOptions::mutable_count() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.FilterOptions.count)
  return _internal_mutable_count();
}

// uint32 checkpointIntervalMultiplier = 5;
inline void ReadReq_Options_FilterOptions::clear_checkpointintervalmultiplier() {
  checkpointintervalmultiplier_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadReq_Options_FilterOptions::_internal_checkpointintervalmultiplier() const {
  return checkpointintervalmultiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadReq_Options_FilterOptions::checkpointintervalmultiplier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.FilterOptions.checkpointIntervalMultiplier)
  return _internal_checkpointintervalmultiplier();
}
inline void ReadReq_Options_FilterOptions::_internal_set_checkpointintervalmultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  checkpointintervalmultiplier_ = value;
}
inline void ReadReq_Options_FilterOptions::set_checkpointintervalmultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_checkpointintervalmultiplier(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.FilterOptions.checkpointIntervalMultiplier)
}

inline bool ReadReq_Options_FilterOptions::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void ReadReq_Options_FilterOptions::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
inline bool ReadReq_Options_FilterOptions::has_window() const {
  return window_case() != WINDOW_NOT_SET;
}
inline void ReadReq_Options_FilterOptions::clear_has_window() {
  _oneof_case_[1] = WINDOW_NOT_SET;
}
inline ReadReq_Options_FilterOptions::FilterCase ReadReq_Options_FilterOptions::filter_case() const {
  return ReadReq_Options_FilterOptions::FilterCase(_oneof_case_[0]);
}
inline ReadReq_Options_FilterOptions::WindowCase ReadReq_Options_FilterOptions::window_case() const {
  return ReadReq_Options_FilterOptions::WindowCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// ReadReq_Options_UUIDOption

// .event_store.client.Empty structured = 1;
inline bool ReadReq_Options_UUIDOption::_internal_has_structured() const {
  return content_case() == kStructured;
}
inline bool ReadReq_Options_UUIDOption::has_structured() const {
  return _internal_has_structured();
}
inline void ReadReq_Options_UUIDOption::set_has_structured() {
  _oneof_case_[0] = kStructured;
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::release_structured() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.UUIDOption.structured)
  if (_internal_has_structured()) {
    clear_has_content();
      ::event_store::client::Empty* temp = content_.structured_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.structured_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_UUIDOption::_internal_structured() const {
  return _internal_has_structured()
      ? *content_.structured_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_UUIDOption::structured() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.UUIDOption.structured)
  return _internal_structured();
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::unsafe_arena_release_structured() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.UUIDOption.structured)
  if (_internal_has_structured()) {
    clear_has_content();
    ::event_store::client::Empty* temp = content_.structured_;
    content_.structured_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_UUIDOption::unsafe_arena_set_allocated_structured(::event_store::client::Empty* structured) {
  clear_content();
  if (structured) {
    set_has_structured();
    content_.structured_ = structured;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.UUIDOption.structured)
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::_internal_mutable_structured() {
  if (!_internal_has_structured()) {
    clear_content();
    set_has_structured();
    content_.structured_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return content_.structured_;
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::mutable_structured() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.UUIDOption.structured)
  return _internal_mutable_structured();
}

// .event_store.client.Empty string = 2;
inline bool ReadReq_Options_UUIDOption::_internal_has_string() const {
  return content_case() == kString;
}
inline bool ReadReq_Options_UUIDOption::has_string() const {
  return _internal_has_string();
}
inline void ReadReq_Options_UUIDOption::set_has_string() {
  _oneof_case_[0] = kString;
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::release_string() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.UUIDOption.string)
  if (_internal_has_string()) {
    clear_has_content();
      ::event_store::client::Empty* temp = content_.string_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_UUIDOption::_internal_string() const {
  return _internal_has_string()
      ? *content_.string_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_UUIDOption::string() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.UUIDOption.string)
  return _internal_string();
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.UUIDOption.string)
  if (_internal_has_string()) {
    clear_has_content();
    ::event_store::client::Empty* temp = content_.string_;
    content_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_UUIDOption::unsafe_arena_set_allocated_string(::event_store::client::Empty* string) {
  clear_content();
  if (string) {
    set_has_string();
    content_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.UUIDOption.string)
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_content();
    set_has_string();
    content_.string_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return content_.string_;
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::mutable_string() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.UUIDOption.string)
  return _internal_mutable_string();
}

inline bool ReadReq_Options_UUIDOption::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ReadReq_Options_UUIDOption::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ReadReq_Options_UUIDOption::ContentCase ReadReq_Options_UUIDOption::content_case() const {
  return ReadReq_Options_UUIDOption::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadReq_Options_ControlOption

// uint32 compatibility = 1;
inline void ReadReq_Options_ControlOption::clear_compatibility() {
  compatibility_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadReq_Options_ControlOption::_internal_compatibility() const {
  return compatibility_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadReq_Options_ControlOption::compatibility() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.ControlOption.compatibility)
  return _internal_compatibility();
}
inline void ReadReq_Options_ControlOption::_internal_set_compatibility(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  compatibility_ = value;
}
inline void ReadReq_Options_ControlOption::set_compatibility(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_compatibility(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.ControlOption.compatibility)
}

// -------------------------------------------------------------------

// ReadReq_Options

// .event_store.client.streams.ReadReq.Options.StreamOptions stream = 1;
inline bool ReadReq_Options::_internal_has_stream() const {
  return stream_option_case() == kStream;
}
inline bool ReadReq_Options::has_stream() const {
  return _internal_has_stream();
}
inline void ReadReq_Options::set_has_stream() {
  _oneof_case_[0] = kStream;
}
inline void ReadReq_Options::clear_stream() {
  if (_internal_has_stream()) {
    if (GetArena() == nullptr) {
      delete stream_option_.stream_;
    }
    clear_has_stream_option();
  }
}
inline ::event_store::client::streams::ReadReq_Options_StreamOptions* ReadReq_Options::release_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.stream)
  if (_internal_has_stream()) {
    clear_has_stream_option();
      ::event_store::client::streams::ReadReq_Options_StreamOptions* temp = stream_option_.stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadReq_Options_StreamOptions& ReadReq_Options::_internal_stream() const {
  return _internal_has_stream()
      ? *stream_option_.stream_
      : *reinterpret_cast< ::event_store::client::streams::ReadReq_Options_StreamOptions*>(&::event_store::client::streams::_ReadReq_Options_StreamOptions_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_StreamOptions& ReadReq_Options::stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.stream)
  return _internal_stream();
}
inline ::event_store::client::streams::ReadReq_Options_StreamOptions* ReadReq_Options::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.stream)
  if (_internal_has_stream()) {
    clear_has_stream_option();
    ::event_store::client::streams::ReadReq_Options_StreamOptions* temp = stream_option_.stream_;
    stream_option_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options::unsafe_arena_set_allocated_stream(::event_store::client::streams::ReadReq_Options_StreamOptions* stream) {
  clear_stream_option();
  if (stream) {
    set_has_stream();
    stream_option_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.stream)
}
inline ::event_store::client::streams::ReadReq_Options_StreamOptions* ReadReq_Options::_internal_mutable_stream() {
  if (!_internal_has_stream()) {
    clear_stream_option();
    set_has_stream();
    stream_option_.stream_ = CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_StreamOptions >(GetArena());
  }
  return stream_option_.stream_;
}
inline ::event_store::client::streams::ReadReq_Options_StreamOptions* ReadReq_Options::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.stream)
  return _internal_mutable_stream();
}

// .event_store.client.streams.ReadReq.Options.AllOptions all = 2;
inline bool ReadReq_Options::_internal_has_all() const {
  return stream_option_case() == kAll;
}
inline bool ReadReq_Options::has_all() const {
  return _internal_has_all();
}
inline void ReadReq_Options::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline void ReadReq_Options::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete stream_option_.all_;
    }
    clear_has_stream_option();
  }
}
inline ::event_store::client::streams::ReadReq_Options_AllOptions* ReadReq_Options::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
      ::event_store::client::streams::ReadReq_Options_AllOptions* temp = stream_option_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadReq_Options_AllOptions& ReadReq_Options::_internal_all() const {
  return _internal_has_all()
      ? *stream_option_.all_
      : *reinterpret_cast< ::event_store::client::streams::ReadReq_Options_AllOptions*>(&::event_store::client::streams::_ReadReq_Options_AllOptions_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_AllOptions& ReadReq_Options::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.all)
  return _internal_all();
}
inline ::event_store::client::streams::ReadReq_Options_AllOptions* ReadReq_Options::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
    ::event_store::client::streams::ReadReq_Options_AllOptions* temp = stream_option_.all_;
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options::unsafe_arena_set_allocated_all(::event_store::client::streams::ReadReq_Options_AllOptions* all) {
  clear_stream_option();
  if (all) {
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.all)
}
inline ::event_store::client::streams::ReadReq_Options_AllOptions* ReadReq_Options::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_stream_option();
    set_has_all();
    stream_option_.all_ = CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_AllOptions >(GetArena());
  }
  return stream_option_.all_;
}
inline ::event_store::client::streams::ReadReq_Options_AllOptions* ReadReq_Options::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.all)
  return _internal_mutable_all();
}

// .event_store.client.streams.ReadReq.Options.ReadDirection read_direction = 3;
inline void ReadReq_Options::clear_read_direction() {
  read_direction_ = 0;
}
inline ::event_store::client::streams::ReadReq_Options_ReadDirection ReadReq_Options::_internal_read_direction() const {
  return static_cast< ::event_store::client::streams::ReadReq_Options_ReadDirection >(read_direction_);
}
inline ::event_store::client::streams::ReadReq_Options_ReadDirection ReadReq_Options::read_direction() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.read_direction)
  return _internal_read_direction();
}
inline void ReadReq_Options::_internal_set_read_direction(::event_store::client::streams::ReadReq_Options_ReadDirection value) {
  
  read_direction_ = value;
}
inline void ReadReq_Options::set_read_direction(::event_store::client::streams::ReadReq_Options_ReadDirection value) {
  _internal_set_read_direction(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.read_direction)
}

// bool resolve_links = 4;
inline void ReadReq_Options::clear_resolve_links() {
  resolve_links_ = false;
}
inline bool ReadReq_Options::_internal_resolve_links() const {
  return resolve_links_;
}
inline bool ReadReq_Options::resolve_links() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.resolve_links)
  return _internal_resolve_links();
}
inline void ReadReq_Options::_internal_set_resolve_links(bool value) {
  
  resolve_links_ = value;
}
inline void ReadReq_Options::set_resolve_links(bool value) {
  _internal_set_resolve_links(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.resolve_links)
}

// uint64 count = 5;
inline bool ReadReq_Options::_internal_has_count() const {
  return count_option_case() == kCount;
}
inline void ReadReq_Options::set_has_count() {
  _oneof_case_[1] = kCount;
}
inline void ReadReq_Options::clear_count() {
  if (_internal_has_count()) {
    count_option_.count_ = PROTOBUF_ULONGLONG(0);
    clear_has_count_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReq_Options::_internal_count() const {
  if (_internal_has_count()) {
    return count_option_.count_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void ReadReq_Options::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_count()) {
    clear_count_option();
    set_has_count();
  }
  count_option_.count_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReq_Options::count() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.count)
  return _internal_count();
}
inline void ReadReq_Options::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadReq.Options.count)
}

// .event_store.client.streams.ReadReq.Options.SubscriptionOptions subscription = 6;
inline bool ReadReq_Options::_internal_has_subscription() const {
  return count_option_case() == kSubscription;
}
inline bool ReadReq_Options::has_subscription() const {
  return _internal_has_subscription();
}
inline void ReadReq_Options::set_has_subscription() {
  _oneof_case_[1] = kSubscription;
}
inline void ReadReq_Options::clear_subscription() {
  if (_internal_has_subscription()) {
    if (GetArena() == nullptr) {
      delete count_option_.subscription_;
    }
    clear_has_count_option();
  }
}
inline ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* ReadReq_Options::release_subscription() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.subscription)
  if (_internal_has_subscription()) {
    clear_has_count_option();
      ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* temp = count_option_.subscription_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    count_option_.subscription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadReq_Options_SubscriptionOptions& ReadReq_Options::_internal_subscription() const {
  return _internal_has_subscription()
      ? *count_option_.subscription_
      : *reinterpret_cast< ::event_store::client::streams::ReadReq_Options_SubscriptionOptions*>(&::event_store::client::streams::_ReadReq_Options_SubscriptionOptions_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_SubscriptionOptions& ReadReq_Options::subscription() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.subscription)
  return _internal_subscription();
}
inline ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* ReadReq_Options::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.subscription)
  if (_internal_has_subscription()) {
    clear_has_count_option();
    ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* temp = count_option_.subscription_;
    count_option_.subscription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options::unsafe_arena_set_allocated_subscription(::event_store::client::streams::ReadReq_Options_SubscriptionOptions* subscription) {
  clear_count_option();
  if (subscription) {
    set_has_subscription();
    count_option_.subscription_ = subscription;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.subscription)
}
inline ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* ReadReq_Options::_internal_mutable_subscription() {
  if (!_internal_has_subscription()) {
    clear_count_option();
    set_has_subscription();
    count_option_.subscription_ = CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_SubscriptionOptions >(GetArena());
  }
  return count_option_.subscription_;
}
inline ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* ReadReq_Options::mutable_subscription() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.subscription)
  return _internal_mutable_subscription();
}

// .event_store.client.streams.ReadReq.Options.FilterOptions filter = 7;
inline bool ReadReq_Options::_internal_has_filter() const {
  return filter_option_case() == kFilter;
}
inline bool ReadReq_Options::has_filter() const {
  return _internal_has_filter();
}
inline void ReadReq_Options::set_has_filter() {
  _oneof_case_[2] = kFilter;
}
inline void ReadReq_Options::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArena() == nullptr) {
      delete filter_option_.filter_;
    }
    clear_has_filter_option();
  }
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions* ReadReq_Options::release_filter() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.filter)
  if (_internal_has_filter()) {
    clear_has_filter_option();
      ::event_store::client::streams::ReadReq_Options_FilterOptions* temp = filter_option_.filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_option_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadReq_Options_FilterOptions& ReadReq_Options::_internal_filter() const {
  return _internal_has_filter()
      ? *filter_option_.filter_
      : *reinterpret_cast< ::event_store::client::streams::ReadReq_Options_FilterOptions*>(&::event_store::client::streams::_ReadReq_Options_FilterOptions_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_FilterOptions& ReadReq_Options::filter() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.filter)
  return _internal_filter();
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions* ReadReq_Options::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.filter)
  if (_internal_has_filter()) {
    clear_has_filter_option();
    ::event_store::client::streams::ReadReq_Options_FilterOptions* temp = filter_option_.filter_;
    filter_option_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options::unsafe_arena_set_allocated_filter(::event_store::client::streams::ReadReq_Options_FilterOptions* filter) {
  clear_filter_option();
  if (filter) {
    set_has_filter();
    filter_option_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.filter)
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions* ReadReq_Options::_internal_mutable_filter() {
  if (!_internal_has_filter()) {
    clear_filter_option();
    set_has_filter();
    filter_option_.filter_ = CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_FilterOptions >(GetArena());
  }
  return filter_option_.filter_;
}
inline ::event_store::client::streams::ReadReq_Options_FilterOptions* ReadReq_Options::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.filter)
  return _internal_mutable_filter();
}

// .event_store.client.Empty no_filter = 8;
inline bool ReadReq_Options::_internal_has_no_filter() const {
  return filter_option_case() == kNoFilter;
}
inline bool ReadReq_Options::has_no_filter() const {
  return _internal_has_no_filter();
}
inline void ReadReq_Options::set_has_no_filter() {
  _oneof_case_[2] = kNoFilter;
}
inline ::event_store::client::Empty* ReadReq_Options::release_no_filter() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.no_filter)
  if (_internal_has_no_filter()) {
    clear_has_filter_option();
      ::event_store::client::Empty* temp = filter_option_.no_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_option_.no_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options::_internal_no_filter() const {
  return _internal_has_no_filter()
      ? *filter_option_.no_filter_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options::no_filter() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.no_filter)
  return _internal_no_filter();
}
inline ::event_store::client::Empty* ReadReq_Options::unsafe_arena_release_no_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadReq.Options.no_filter)
  if (_internal_has_no_filter()) {
    clear_has_filter_option();
    ::event_store::client::Empty* temp = filter_option_.no_filter_;
    filter_option_.no_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options::unsafe_arena_set_allocated_no_filter(::event_store::client::Empty* no_filter) {
  clear_filter_option();
  if (no_filter) {
    set_has_no_filter();
    filter_option_.no_filter_ = no_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.no_filter)
}
inline ::event_store::client::Empty* ReadReq_Options::_internal_mutable_no_filter() {
  if (!_internal_has_no_filter()) {
    clear_filter_option();
    set_has_no_filter();
    filter_option_.no_filter_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return filter_option_.no_filter_;
}
inline ::event_store::client::Empty* ReadReq_Options::mutable_no_filter() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.no_filter)
  return _internal_mutable_no_filter();
}

// .event_store.client.streams.ReadReq.Options.UUIDOption uuid_option = 9;
inline bool ReadReq_Options::_internal_has_uuid_option() const {
  return this != internal_default_instance() && uuid_option_ != nullptr;
}
inline bool ReadReq_Options::has_uuid_option() const {
  return _internal_has_uuid_option();
}
inline void ReadReq_Options::clear_uuid_option() {
  if (GetArena() == nullptr && uuid_option_ != nullptr) {
    delete uuid_option_;
  }
  uuid_option_ = nullptr;
}
inline const ::event_store::client::streams::ReadReq_Options_UUIDOption& ReadReq_Options::_internal_uuid_option() const {
  const ::event_store::client::streams::ReadReq_Options_UUIDOption* p = uuid_option_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::streams::ReadReq_Options_UUIDOption*>(
      &::event_store::client::streams::_ReadReq_Options_UUIDOption_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_UUIDOption& ReadReq_Options::uuid_option() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.uuid_option)
  return _internal_uuid_option();
}
inline void ReadReq_Options::unsafe_arena_set_allocated_uuid_option(
    ::event_store::client::streams::ReadReq_Options_UUIDOption* uuid_option) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_option_);
  }
  uuid_option_ = uuid_option;
  if (uuid_option) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.uuid_option)
}
inline ::event_store::client::streams::ReadReq_Options_UUIDOption* ReadReq_Options::release_uuid_option() {
  auto temp = unsafe_arena_release_uuid_option();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::streams::ReadReq_Options_UUIDOption* ReadReq_Options::unsafe_arena_release_uuid_option() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.uuid_option)
  
  ::event_store::client::streams::ReadReq_Options_UUIDOption* temp = uuid_option_;
  uuid_option_ = nullptr;
  return temp;
}
inline ::event_store::client::streams::ReadReq_Options_UUIDOption* ReadReq_Options::_internal_mutable_uuid_option() {
  
  if (uuid_option_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_UUIDOption>(GetArena());
    uuid_option_ = p;
  }
  return uuid_option_;
}
inline ::event_store::client::streams::ReadReq_Options_UUIDOption* ReadReq_Options::mutable_uuid_option() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.uuid_option)
  return _internal_mutable_uuid_option();
}
inline void ReadReq_Options::set_allocated_uuid_option(::event_store::client::streams::ReadReq_Options_UUIDOption* uuid_option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_option_;
  }
  if (uuid_option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid_option);
    if (message_arena != submessage_arena) {
      uuid_option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid_option, submessage_arena);
    }
    
  } else {
    
  }
  uuid_option_ = uuid_option;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.uuid_option)
}

// .event_store.client.streams.ReadReq.Options.ControlOption control_option = 10;
inline bool ReadReq_Options::_internal_has_control_option() const {
  return this != internal_default_instance() && control_option_ != nullptr;
}
inline bool ReadReq_Options::has_control_option() const {
  return _internal_has_control_option();
}
inline void ReadReq_Options::clear_control_option() {
  if (GetArena() == nullptr && control_option_ != nullptr) {
    delete control_option_;
  }
  control_option_ = nullptr;
}
inline const ::event_store::client::streams::ReadReq_Options_ControlOption& ReadReq_Options::_internal_control_option() const {
  const ::event_store::client::streams::ReadReq_Options_ControlOption* p = control_option_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::streams::ReadReq_Options_ControlOption*>(
      &::event_store::client::streams::_ReadReq_Options_ControlOption_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options_ControlOption& ReadReq_Options::control_option() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.Options.control_option)
  return _internal_control_option();
}
inline void ReadReq_Options::unsafe_arena_set_allocated_control_option(
    ::event_store::client::streams::ReadReq_Options_ControlOption* control_option) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_option_);
  }
  control_option_ = control_option;
  if (control_option) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.Options.control_option)
}
inline ::event_store::client::streams::ReadReq_Options_ControlOption* ReadReq_Options::release_control_option() {
  auto temp = unsafe_arena_release_control_option();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::streams::ReadReq_Options_ControlOption* ReadReq_Options::unsafe_arena_release_control_option() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.Options.control_option)
  
  ::event_store::client::streams::ReadReq_Options_ControlOption* temp = control_option_;
  control_option_ = nullptr;
  return temp;
}
inline ::event_store::client::streams::ReadReq_Options_ControlOption* ReadReq_Options::_internal_mutable_control_option() {
  
  if (control_option_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::streams::ReadReq_Options_ControlOption>(GetArena());
    control_option_ = p;
  }
  return control_option_;
}
inline ::event_store::client::streams::ReadReq_Options_ControlOption* ReadReq_Options::mutable_control_option() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.Options.control_option)
  return _internal_mutable_control_option();
}
inline void ReadReq_Options::set_allocated_control_option(::event_store::client::streams::ReadReq_Options_ControlOption* control_option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete control_option_;
  }
  if (control_option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control_option);
    if (message_arena != submessage_arena) {
      control_option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_option, submessage_arena);
    }
    
  } else {
    
  }
  control_option_ = control_option;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.control_option)
}

inline bool ReadReq_Options::has_stream_option() const {
  return stream_option_case() != STREAM_OPTION_NOT_SET;
}
inline void ReadReq_Options::clear_has_stream_option() {
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}
inline bool ReadReq_Options::has_count_option() const {
  return count_option_case() != COUNT_OPTION_NOT_SET;
}
inline void ReadReq_Options::clear_has_count_option() {
  _oneof_case_[1] = COUNT_OPTION_NOT_SET;
}
inline bool ReadReq_Options::has_filter_option() const {
  return filter_option_case() != FILTER_OPTION_NOT_SET;
}
inline void ReadReq_Options::clear_has_filter_option() {
  _oneof_case_[2] = FILTER_OPTION_NOT_SET;
}
inline ReadReq_Options::StreamOptionCase ReadReq_Options::stream_option_case() const {
  return ReadReq_Options::StreamOptionCase(_oneof_case_[0]);
}
inline ReadReq_Options::CountOptionCase ReadReq_Options::count_option_case() const {
  return ReadReq_Options::CountOptionCase(_oneof_case_[1]);
}
inline ReadReq_Options::FilterOptionCase ReadReq_Options::filter_option_case() const {
  return ReadReq_Options::FilterOptionCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// ReadReq

// .event_store.client.streams.ReadReq.Options options = 1;
inline bool ReadReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ReadReq::has_options() const {
  return _internal_has_options();
}
inline void ReadReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::streams::ReadReq_Options& ReadReq::_internal_options() const {
  const ::event_store::client::streams::ReadReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::streams::ReadReq_Options*>(
      &::event_store::client::streams::_ReadReq_Options_default_instance_);
}
inline const ::event_store::client::streams::ReadReq_Options& ReadReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadReq.options)
  return _internal_options();
}
inline void ReadReq::unsafe_arena_set_allocated_options(
    ::event_store::client::streams::ReadReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadReq.options)
}
inline ::event_store::client::streams::ReadReq_Options* ReadReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::streams::ReadReq_Options* ReadReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadReq.options)
  
  ::event_store::client::streams::ReadReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::streams::ReadReq_Options* ReadReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::streams::ReadReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::streams::ReadReq_Options* ReadReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadReq.options)
  return _internal_mutable_options();
}
inline void ReadReq::set_allocated_options(::event_store::client::streams::ReadReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.options)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ReadResp_ReadEvent_RecordedEvent

// .event_store.client.UUID id = 1;
inline bool ReadResp_ReadEvent_RecordedEvent::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReadResp_ReadEvent_RecordedEvent::has_id() const {
  return _internal_has_id();
}
inline const ::event_store::client::UUID& ReadResp_ReadEvent_RecordedEvent::_internal_id() const {
  const ::event_store::client::UUID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& ReadResp_ReadEvent_RecordedEvent::id() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.id)
  return _internal_id();
}
inline void ReadResp_ReadEvent_RecordedEvent::unsafe_arena_set_allocated_id(
    ::event_store::client::UUID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.id)
}
inline ::event_store::client::UUID* ReadResp_ReadEvent_RecordedEvent::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* ReadResp_ReadEvent_RecordedEvent::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.id)
  
  ::event_store::client::UUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* ReadResp_ReadEvent_RecordedEvent::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::event_store::client::UUID* ReadResp_ReadEvent_RecordedEvent::mutable_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.id)
  return _internal_mutable_id();
}
inline void ReadResp_ReadEvent_RecordedEvent::set_allocated_id(::event_store::client::UUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.id)
}

// .event_store.client.StreamIdentifier stream_identifier = 2;
inline bool ReadResp_ReadEvent_RecordedEvent::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool ReadResp_ReadEvent_RecordedEvent::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& ReadResp_ReadEvent_RecordedEvent::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& ReadResp_ReadEvent_RecordedEvent::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
  return _internal_stream_identifier();
}
inline void ReadResp_ReadEvent_RecordedEvent::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* ReadResp_ReadEvent_RecordedEvent::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* ReadResp_ReadEvent_RecordedEvent::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* ReadResp_ReadEvent_RecordedEvent::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* ReadResp_ReadEvent_RecordedEvent::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void ReadResp_ReadEvent_RecordedEvent::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
}

// uint64 stream_revision = 3;
inline void ReadResp_ReadEvent_RecordedEvent::clear_stream_revision() {
  stream_revision_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::_internal_stream_revision() const {
  return stream_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::stream_revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.stream_revision)
  return _internal_stream_revision();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stream_revision_ = value;
}
inline void ReadResp_ReadEvent_RecordedEvent::set_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.stream_revision)
}

// uint64 prepare_position = 4;
inline void ReadResp_ReadEvent_RecordedEvent::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.prepare_position)
  return _internal_prepare_position();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void ReadResp_ReadEvent_RecordedEvent::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.prepare_position)
}

// uint64 commit_position = 5;
inline void ReadResp_ReadEvent_RecordedEvent::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.commit_position)
  return _internal_commit_position();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void ReadResp_ReadEvent_RecordedEvent::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.commit_position)
}

// map<string, string> metadata = 6;
inline int ReadResp_ReadEvent_RecordedEvent::_internal_metadata_size() const {
  return metadata_.size();
}
inline int ReadResp_ReadEvent_RecordedEvent::metadata_size() const {
  return _internal_metadata_size();
}
inline void ReadResp_ReadEvent_RecordedEvent::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ReadResp_ReadEvent_RecordedEvent::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ReadResp_ReadEvent_RecordedEvent::metadata() const {
  // @@protoc_insertion_point(field_map:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ReadResp_ReadEvent_RecordedEvent::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ReadResp_ReadEvent_RecordedEvent::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.metadata)
  return _internal_mutable_metadata();
}

// bytes custom_metadata = 7;
inline void ReadResp_ReadEvent_RecordedEvent::clear_custom_metadata() {
  custom_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadResp_ReadEvent_RecordedEvent::custom_metadata() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
  return _internal_custom_metadata();
}
inline void ReadResp_ReadEvent_RecordedEvent::set_custom_metadata(const std::string& value) {
  _internal_set_custom_metadata(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::mutable_custom_metadata() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
  return _internal_mutable_custom_metadata();
}
inline const std::string& ReadResp_ReadEvent_RecordedEvent::_internal_custom_metadata() const {
  return custom_metadata_.Get();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_custom_metadata(const std::string& value) {
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::set_custom_metadata(std::string&& value) {
  
  custom_metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline void ReadResp_ReadEvent_RecordedEvent::set_custom_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline void ReadResp_ReadEvent_RecordedEvent::set_custom_metadata(const void* value,
    size_t size) {
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::_internal_mutable_custom_metadata() {
  
  return custom_metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::release_custom_metadata() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
  return custom_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::set_allocated_custom_metadata(std::string* custom_metadata) {
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::unsafe_arena_release_custom_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return custom_metadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::unsafe_arena_set_allocated_custom_metadata(
    std::string* custom_metadata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      custom_metadata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}

// bytes data = 8;
inline void ReadResp_ReadEvent_RecordedEvent::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadResp_ReadEvent_RecordedEvent::data() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
  return _internal_data();
}
inline void ReadResp_ReadEvent_RecordedEvent::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::mutable_data() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
  return _internal_mutable_data();
}
inline const std::string& ReadResp_ReadEvent_RecordedEvent::_internal_data() const {
  return data_.Get();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
}
inline void ReadResp_ReadEvent_RecordedEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
}
inline void ReadResp_ReadEvent_RecordedEvent::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::release_data() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.data)
}

// -------------------------------------------------------------------

// ReadResp_ReadEvent

// .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent event = 1;
inline bool ReadResp_ReadEvent::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool ReadResp_ReadEvent::has_event() const {
  return _internal_has_event();
}
inline void ReadResp_ReadEvent::clear_event() {
  if (GetArena() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent::_internal_event() const {
  const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* p = event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent*>(
      &::event_store::client::streams::_ReadResp_ReadEvent_RecordedEvent_default_instance_);
}
inline const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent::event() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.event)
  return _internal_event();
}
inline void ReadResp_ReadEvent::unsafe_arena_set_allocated_event(
    ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.ReadEvent.event)
}
inline ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::release_event() {
  auto temp = unsafe_arena_release_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.ReadEvent.event)
  
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent>(GetArena());
    event_ = p;
  }
  return event_;
}
inline ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::mutable_event() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.ReadEvent.event)
  return _internal_mutable_event();
}
inline void ReadResp_ReadEvent::set_allocated_event(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.ReadEvent.event)
}

// .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent link = 2;
inline bool ReadResp_ReadEvent::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool ReadResp_ReadEvent::has_link() const {
  return _internal_has_link();
}
inline void ReadResp_ReadEvent::clear_link() {
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent::_internal_link() const {
  const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent*>(
      &::event_store::client::streams::_ReadResp_ReadEvent_RecordedEvent_default_instance_);
}
inline const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent::link() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.link)
  return _internal_link();
}
inline void ReadResp_ReadEvent::unsafe_arena_set_allocated_link(
    ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.ReadEvent.link)
}
inline ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::release_link() {
  auto temp = unsafe_arena_release_link();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.ReadEvent.link)
  
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::mutable_link() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.ReadEvent.link)
  return _internal_mutable_link();
}
inline void ReadResp_ReadEvent::set_allocated_link(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.ReadEvent.link)
}

// uint64 commit_position = 3;
inline bool ReadResp_ReadEvent::_internal_has_commit_position() const {
  return position_case() == kCommitPosition;
}
inline void ReadResp_ReadEvent::set_has_commit_position() {
  _oneof_case_[0] = kCommitPosition;
}
inline void ReadResp_ReadEvent::clear_commit_position() {
  if (_internal_has_commit_position()) {
    position_.commit_position_ = PROTOBUF_ULONGLONG(0);
    clear_has_position();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent::_internal_commit_position() const {
  if (_internal_has_commit_position()) {
    return position_.commit_position_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void ReadResp_ReadEvent::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_commit_position()) {
    clear_position();
    set_has_commit_position();
  }
  position_.commit_position_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.commit_position)
  return _internal_commit_position();
}
inline void ReadResp_ReadEvent::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.ReadEvent.commit_position)
}

// .event_store.client.Empty no_position = 4;
inline bool ReadResp_ReadEvent::_internal_has_no_position() const {
  return position_case() == kNoPosition;
}
inline bool ReadResp_ReadEvent::has_no_position() const {
  return _internal_has_no_position();
}
inline void ReadResp_ReadEvent::set_has_no_position() {
  _oneof_case_[0] = kNoPosition;
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::release_no_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.ReadEvent.no_position)
  if (_internal_has_no_position()) {
    clear_has_position();
      ::event_store::client::Empty* temp = position_.no_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadResp_ReadEvent::_internal_no_position() const {
  return _internal_has_no_position()
      ? *position_.no_position_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadResp_ReadEvent::no_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.ReadEvent.no_position)
  return _internal_no_position();
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::unsafe_arena_release_no_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.ReadEvent.no_position)
  if (_internal_has_no_position()) {
    clear_has_position();
    ::event_store::client::Empty* temp = position_.no_position_;
    position_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp_ReadEvent::unsafe_arena_set_allocated_no_position(::event_store::client::Empty* no_position) {
  clear_position();
  if (no_position) {
    set_has_no_position();
    position_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.ReadEvent.no_position)
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::_internal_mutable_no_position() {
  if (!_internal_has_no_position()) {
    clear_position();
    set_has_no_position();
    position_.no_position_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return position_.no_position_;
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::mutable_no_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.ReadEvent.no_position)
  return _internal_mutable_no_position();
}

inline bool ReadResp_ReadEvent::has_position() const {
  return position_case() != POSITION_NOT_SET;
}
inline void ReadResp_ReadEvent::clear_has_position() {
  _oneof_case_[0] = POSITION_NOT_SET;
}
inline ReadResp_ReadEvent::PositionCase ReadResp_ReadEvent::position_case() const {
  return ReadResp_ReadEvent::PositionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadResp_SubscriptionConfirmation

// string subscription_id = 1;
inline void ReadResp_SubscriptionConfirmation::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadResp_SubscriptionConfirmation::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
  return _internal_subscription_id();
}
inline void ReadResp_SubscriptionConfirmation::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline std::string* ReadResp_SubscriptionConfirmation::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& ReadResp_SubscriptionConfirmation::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void ReadResp_SubscriptionConfirmation::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadResp_SubscriptionConfirmation::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline void ReadResp_SubscriptionConfirmation::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline void ReadResp_SubscriptionConfirmation::set_subscription_id(const char* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline std::string* ReadResp_SubscriptionConfirmation::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadResp_SubscriptionConfirmation::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadResp_SubscriptionConfirmation::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline std::string* ReadResp_SubscriptionConfirmation::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadResp_SubscriptionConfirmation::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id)
}

// -------------------------------------------------------------------

// ReadResp_Checkpoint

// uint64 commit_position = 1;
inline void ReadResp_Checkpoint::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_Checkpoint::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_Checkpoint::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.Checkpoint.commit_position)
  return _internal_commit_position();
}
inline void ReadResp_Checkpoint::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void ReadResp_Checkpoint::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.Checkpoint.commit_position)
}

// uint64 prepare_position = 2;
inline void ReadResp_Checkpoint::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_Checkpoint::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_Checkpoint::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.Checkpoint.prepare_position)
  return _internal_prepare_position();
}
inline void ReadResp_Checkpoint::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void ReadResp_Checkpoint::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.Checkpoint.prepare_position)
}

// -------------------------------------------------------------------

// ReadResp_StreamNotFound

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool ReadResp_StreamNotFound::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool ReadResp_StreamNotFound::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& ReadResp_StreamNotFound::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& ReadResp_StreamNotFound::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.StreamNotFound.stream_identifier)
  return _internal_stream_identifier();
}
inline void ReadResp_StreamNotFound::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.StreamNotFound.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* ReadResp_StreamNotFound::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* ReadResp_StreamNotFound::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.StreamNotFound.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* ReadResp_StreamNotFound::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* ReadResp_StreamNotFound::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.StreamNotFound.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void ReadResp_StreamNotFound::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.StreamNotFound.stream_identifier)
}

// -------------------------------------------------------------------

// ReadResp

// .event_store.client.streams.ReadResp.ReadEvent event = 1;
inline bool ReadResp::_internal_has_event() const {
  return content_case() == kEvent;
}
inline bool ReadResp::has_event() const {
  return _internal_has_event();
}
inline void ReadResp::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void ReadResp::clear_event() {
  if (_internal_has_event()) {
    if (GetArena() == nullptr) {
      delete content_.event_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::streams::ReadResp_ReadEvent* ReadResp::release_event() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.event)
  if (_internal_has_event()) {
    clear_has_content();
      ::event_store::client::streams::ReadResp_ReadEvent* temp = content_.event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadResp_ReadEvent& ReadResp::_internal_event() const {
  return _internal_has_event()
      ? *content_.event_
      : *reinterpret_cast< ::event_store::client::streams::ReadResp_ReadEvent*>(&::event_store::client::streams::_ReadResp_ReadEvent_default_instance_);
}
inline const ::event_store::client::streams::ReadResp_ReadEvent& ReadResp::event() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.event)
  return _internal_event();
}
inline ::event_store::client::streams::ReadResp_ReadEvent* ReadResp::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.event)
  if (_internal_has_event()) {
    clear_has_content();
    ::event_store::client::streams::ReadResp_ReadEvent* temp = content_.event_;
    content_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp::unsafe_arena_set_allocated_event(::event_store::client::streams::ReadResp_ReadEvent* event) {
  clear_content();
  if (event) {
    set_has_event();
    content_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.event)
}
inline ::event_store::client::streams::ReadResp_ReadEvent* ReadResp::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_content();
    set_has_event();
    content_.event_ = CreateMaybeMessage< ::event_store::client::streams::ReadResp_ReadEvent >(GetArena());
  }
  return content_.event_;
}
inline ::event_store::client::streams::ReadResp_ReadEvent* ReadResp::mutable_event() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.event)
  return _internal_mutable_event();
}

// .event_store.client.streams.ReadResp.SubscriptionConfirmation confirmation = 2;
inline bool ReadResp::_internal_has_confirmation() const {
  return content_case() == kConfirmation;
}
inline bool ReadResp::has_confirmation() const {
  return _internal_has_confirmation();
}
inline void ReadResp::set_has_confirmation() {
  _oneof_case_[0] = kConfirmation;
}
inline void ReadResp::clear_confirmation() {
  if (_internal_has_confirmation()) {
    if (GetArena() == nullptr) {
      delete content_.confirmation_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::streams::ReadResp_SubscriptionConfirmation* ReadResp::release_confirmation() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.confirmation)
  if (_internal_has_confirmation()) {
    clear_has_content();
      ::event_store::client::streams::ReadResp_SubscriptionConfirmation* temp = content_.confirmation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.confirmation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadResp_SubscriptionConfirmation& ReadResp::_internal_confirmation() const {
  return _internal_has_confirmation()
      ? *content_.confirmation_
      : *reinterpret_cast< ::event_store::client::streams::ReadResp_SubscriptionConfirmation*>(&::event_store::client::streams::_ReadResp_SubscriptionConfirmation_default_instance_);
}
inline const ::event_store::client::streams::ReadResp_SubscriptionConfirmation& ReadResp::confirmation() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.confirmation)
  return _internal_confirmation();
}
inline ::event_store::client::streams::ReadResp_SubscriptionConfirmation* ReadResp::unsafe_arena_release_confirmation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.confirmation)
  if (_internal_has_confirmation()) {
    clear_has_content();
    ::event_store::client::streams::ReadResp_SubscriptionConfirmation* temp = content_.confirmation_;
    content_.confirmation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp::unsafe_arena_set_allocated_confirmation(::event_store::client::streams::ReadResp_SubscriptionConfirmation* confirmation) {
  clear_content();
  if (confirmation) {
    set_has_confirmation();
    content_.confirmation_ = confirmation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.confirmation)
}
inline ::event_store::client::streams::ReadResp_SubscriptionConfirmation* ReadResp::_internal_mutable_confirmation() {
  if (!_internal_has_confirmation()) {
    clear_content();
    set_has_confirmation();
    content_.confirmation_ = CreateMaybeMessage< ::event_store::client::streams::ReadResp_SubscriptionConfirmation >(GetArena());
  }
  return content_.confirmation_;
}
inline ::event_store::client::streams::ReadResp_SubscriptionConfirmation* ReadResp::mutable_confirmation() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.confirmation)
  return _internal_mutable_confirmation();
}

// .event_store.client.streams.ReadResp.Checkpoint checkpoint = 3;
inline bool ReadResp::_internal_has_checkpoint() const {
  return content_case() == kCheckpoint;
}
inline bool ReadResp::has_checkpoint() const {
  return _internal_has_checkpoint();
}
inline void ReadResp::set_has_checkpoint() {
  _oneof_case_[0] = kCheckpoint;
}
inline void ReadResp::clear_checkpoint() {
  if (_internal_has_checkpoint()) {
    if (GetArena() == nullptr) {
      delete content_.checkpoint_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::streams::ReadResp_Checkpoint* ReadResp::release_checkpoint() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.checkpoint)
  if (_internal_has_checkpoint()) {
    clear_has_content();
      ::event_store::client::streams::ReadResp_Checkpoint* temp = content_.checkpoint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.checkpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadResp_Checkpoint& ReadResp::_internal_checkpoint() const {
  return _internal_has_checkpoint()
      ? *content_.checkpoint_
      : *reinterpret_cast< ::event_store::client::streams::ReadResp_Checkpoint*>(&::event_store::client::streams::_ReadResp_Checkpoint_default_instance_);
}
inline const ::event_store::client::streams::ReadResp_Checkpoint& ReadResp::checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.checkpoint)
  return _internal_checkpoint();
}
inline ::event_store::client::streams::ReadResp_Checkpoint* ReadResp::unsafe_arena_release_checkpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.checkpoint)
  if (_internal_has_checkpoint()) {
    clear_has_content();
    ::event_store::client::streams::ReadResp_Checkpoint* temp = content_.checkpoint_;
    content_.checkpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp::unsafe_arena_set_allocated_checkpoint(::event_store::client::streams::ReadResp_Checkpoint* checkpoint) {
  clear_content();
  if (checkpoint) {
    set_has_checkpoint();
    content_.checkpoint_ = checkpoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.checkpoint)
}
inline ::event_store::client::streams::ReadResp_Checkpoint* ReadResp::_internal_mutable_checkpoint() {
  if (!_internal_has_checkpoint()) {
    clear_content();
    set_has_checkpoint();
    content_.checkpoint_ = CreateMaybeMessage< ::event_store::client::streams::ReadResp_Checkpoint >(GetArena());
  }
  return content_.checkpoint_;
}
inline ::event_store::client::streams::ReadResp_Checkpoint* ReadResp::mutable_checkpoint() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.checkpoint)
  return _internal_mutable_checkpoint();
}

// .event_store.client.streams.ReadResp.StreamNotFound stream_not_found = 4;
inline bool ReadResp::_internal_has_stream_not_found() const {
  return content_case() == kStreamNotFound;
}
inline bool ReadResp::has_stream_not_found() const {
  return _internal_has_stream_not_found();
}
inline void ReadResp::set_has_stream_not_found() {
  _oneof_case_[0] = kStreamNotFound;
}
inline void ReadResp::clear_stream_not_found() {
  if (_internal_has_stream_not_found()) {
    if (GetArena() == nullptr) {
      delete content_.stream_not_found_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::streams::ReadResp_StreamNotFound* ReadResp::release_stream_not_found() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.stream_not_found)
  if (_internal_has_stream_not_found()) {
    clear_has_content();
      ::event_store::client::streams::ReadResp_StreamNotFound* temp = content_.stream_not_found_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.stream_not_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::ReadResp_StreamNotFound& ReadResp::_internal_stream_not_found() const {
  return _internal_has_stream_not_found()
      ? *content_.stream_not_found_
      : *reinterpret_cast< ::event_store::client::streams::ReadResp_StreamNotFound*>(&::event_store::client::streams::_ReadResp_StreamNotFound_default_instance_);
}
inline const ::event_store::client::streams::ReadResp_StreamNotFound& ReadResp::stream_not_found() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.stream_not_found)
  return _internal_stream_not_found();
}
inline ::event_store::client::streams::ReadResp_StreamNotFound* ReadResp::unsafe_arena_release_stream_not_found() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.stream_not_found)
  if (_internal_has_stream_not_found()) {
    clear_has_content();
    ::event_store::client::streams::ReadResp_StreamNotFound* temp = content_.stream_not_found_;
    content_.stream_not_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp::unsafe_arena_set_allocated_stream_not_found(::event_store::client::streams::ReadResp_StreamNotFound* stream_not_found) {
  clear_content();
  if (stream_not_found) {
    set_has_stream_not_found();
    content_.stream_not_found_ = stream_not_found;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.stream_not_found)
}
inline ::event_store::client::streams::ReadResp_StreamNotFound* ReadResp::_internal_mutable_stream_not_found() {
  if (!_internal_has_stream_not_found()) {
    clear_content();
    set_has_stream_not_found();
    content_.stream_not_found_ = CreateMaybeMessage< ::event_store::client::streams::ReadResp_StreamNotFound >(GetArena());
  }
  return content_.stream_not_found_;
}
inline ::event_store::client::streams::ReadResp_StreamNotFound* ReadResp::mutable_stream_not_found() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.stream_not_found)
  return _internal_mutable_stream_not_found();
}

// uint64 first_stream_position = 5;
inline bool ReadResp::_internal_has_first_stream_position() const {
  return content_case() == kFirstStreamPosition;
}
inline void ReadResp::set_has_first_stream_position() {
  _oneof_case_[0] = kFirstStreamPosition;
}
inline void ReadResp::clear_first_stream_position() {
  if (_internal_has_first_stream_position()) {
    content_.first_stream_position_ = PROTOBUF_ULONGLONG(0);
    clear_has_content();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp::_internal_first_stream_position() const {
  if (_internal_has_first_stream_position()) {
    return content_.first_stream_position_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void ReadResp::_internal_set_first_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_first_stream_position()) {
    clear_content();
    set_has_first_stream_position();
  }
  content_.first_stream_position_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp::first_stream_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.first_stream_position)
  return _internal_first_stream_position();
}
inline void ReadResp::set_first_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_stream_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.first_stream_position)
}

// uint64 last_stream_position = 6;
inline bool ReadResp::_internal_has_last_stream_position() const {
  return content_case() == kLastStreamPosition;
}
inline void ReadResp::set_has_last_stream_position() {
  _oneof_case_[0] = kLastStreamPosition;
}
inline void ReadResp::clear_last_stream_position() {
  if (_internal_has_last_stream_position()) {
    content_.last_stream_position_ = PROTOBUF_ULONGLONG(0);
    clear_has_content();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp::_internal_last_stream_position() const {
  if (_internal_has_last_stream_position()) {
    return content_.last_stream_position_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void ReadResp::_internal_set_last_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_last_stream_position()) {
    clear_content();
    set_has_last_stream_position();
  }
  content_.last_stream_position_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp::last_stream_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.last_stream_position)
  return _internal_last_stream_position();
}
inline void ReadResp::set_last_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_stream_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.ReadResp.last_stream_position)
}

// .event_store.client.AllStreamPosition last_all_stream_position = 7;
inline bool ReadResp::_internal_has_last_all_stream_position() const {
  return content_case() == kLastAllStreamPosition;
}
inline bool ReadResp::has_last_all_stream_position() const {
  return _internal_has_last_all_stream_position();
}
inline void ReadResp::set_has_last_all_stream_position() {
  _oneof_case_[0] = kLastAllStreamPosition;
}
inline ::event_store::client::AllStreamPosition* ReadResp::release_last_all_stream_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.ReadResp.last_all_stream_position)
  if (_internal_has_last_all_stream_position()) {
    clear_has_content();
      ::event_store::client::AllStreamPosition* temp = content_.last_all_stream_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.last_all_stream_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::AllStreamPosition& ReadResp::_internal_last_all_stream_position() const {
  return _internal_has_last_all_stream_position()
      ? *content_.last_all_stream_position_
      : *reinterpret_cast< ::event_store::client::AllStreamPosition*>(&::event_store::client::_AllStreamPosition_default_instance_);
}
inline const ::event_store::client::AllStreamPosition& ReadResp::last_all_stream_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.ReadResp.last_all_stream_position)
  return _internal_last_all_stream_position();
}
inline ::event_store::client::AllStreamPosition* ReadResp::unsafe_arena_release_last_all_stream_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.ReadResp.last_all_stream_position)
  if (_internal_has_last_all_stream_position()) {
    clear_has_content();
    ::event_store::client::AllStreamPosition* temp = content_.last_all_stream_position_;
    content_.last_all_stream_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp::unsafe_arena_set_allocated_last_all_stream_position(::event_store::client::AllStreamPosition* last_all_stream_position) {
  clear_content();
  if (last_all_stream_position) {
    set_has_last_all_stream_position();
    content_.last_all_stream_position_ = last_all_stream_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.ReadResp.last_all_stream_position)
}
inline ::event_store::client::AllStreamPosition* ReadResp::_internal_mutable_last_all_stream_position() {
  if (!_internal_has_last_all_stream_position()) {
    clear_content();
    set_has_last_all_stream_position();
    content_.last_all_stream_position_ = CreateMaybeMessage< ::event_store::client::AllStreamPosition >(GetArena());
  }
  return content_.last_all_stream_position_;
}
inline ::event_store::client::AllStreamPosition* ReadResp::mutable_last_all_stream_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.ReadResp.last_all_stream_position)
  return _internal_mutable_last_all_stream_position();
}

inline bool ReadResp::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ReadResp::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ReadResp::ContentCase ReadResp::content_case() const {
  return ReadResp::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AppendReq_Options

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool AppendReq_Options::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool AppendReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& AppendReq_Options::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& AppendReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline void AppendReq_Options::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* AppendReq_Options::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* AppendReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.Options.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* AppendReq_Options::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* AppendReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void AppendReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.Options.stream_identifier)
}

// uint64 revision = 2;
inline bool AppendReq_Options::_internal_has_revision() const {
  return expected_stream_revision_case() == kRevision;
}
inline void AppendReq_Options::set_has_revision() {
  _oneof_case_[0] = kRevision;
}
inline void AppendReq_Options::clear_revision() {
  if (_internal_has_revision()) {
    expected_stream_revision_.revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_expected_stream_revision();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendReq_Options::_internal_revision() const {
  if (_internal_has_revision()) {
    return expected_stream_revision_.revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void AppendReq_Options::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_revision()) {
    clear_expected_stream_revision();
    set_has_revision();
  }
  expected_stream_revision_.revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendReq_Options::revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.Options.revision)
  return _internal_revision();
}
inline void AppendReq_Options::set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendReq.Options.revision)
}

// .event_store.client.Empty no_stream = 3;
inline bool AppendReq_Options::_internal_has_no_stream() const {
  return expected_stream_revision_case() == kNoStream;
}
inline bool AppendReq_Options::has_no_stream() const {
  return _internal_has_no_stream();
}
inline void AppendReq_Options::set_has_no_stream() {
  _oneof_case_[0] = kNoStream;
}
inline ::event_store::client::Empty* AppendReq_Options::release_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.Options.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendReq_Options::_internal_no_stream() const {
  return _internal_has_no_stream()
      ? *expected_stream_revision_.no_stream_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendReq_Options::no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.Options.no_stream)
  return _internal_no_stream();
}
inline ::event_store::client::Empty* AppendReq_Options::unsafe_arena_release_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendReq.Options.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.no_stream_;
    expected_stream_revision_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendReq_Options::unsafe_arena_set_allocated_no_stream(::event_store::client::Empty* no_stream) {
  clear_expected_stream_revision();
  if (no_stream) {
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.Options.no_stream)
}
inline ::event_store::client::Empty* AppendReq_Options::_internal_mutable_no_stream() {
  if (!_internal_has_no_stream()) {
    clear_expected_stream_revision();
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.no_stream_;
}
inline ::event_store::client::Empty* AppendReq_Options::mutable_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.Options.no_stream)
  return _internal_mutable_no_stream();
}

// .event_store.client.Empty any = 4;
inline bool AppendReq_Options::_internal_has_any() const {
  return expected_stream_revision_case() == kAny;
}
inline bool AppendReq_Options::has_any() const {
  return _internal_has_any();
}
inline void AppendReq_Options::set_has_any() {
  _oneof_case_[0] = kAny;
}
inline ::event_store::client::Empty* AppendReq_Options::release_any() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.Options.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendReq_Options::_internal_any() const {
  return _internal_has_any()
      ? *expected_stream_revision_.any_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendReq_Options::any() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.Options.any)
  return _internal_any();
}
inline ::event_store::client::Empty* AppendReq_Options::unsafe_arena_release_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendReq.Options.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.any_;
    expected_stream_revision_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendReq_Options::unsafe_arena_set_allocated_any(::event_store::client::Empty* any) {
  clear_expected_stream_revision();
  if (any) {
    set_has_any();
    expected_stream_revision_.any_ = any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.Options.any)
}
inline ::event_store::client::Empty* AppendReq_Options::_internal_mutable_any() {
  if (!_internal_has_any()) {
    clear_expected_stream_revision();
    set_has_any();
    expected_stream_revision_.any_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.any_;
}
inline ::event_store::client::Empty* AppendReq_Options::mutable_any() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.Options.any)
  return _internal_mutable_any();
}

// .event_store.client.Empty stream_exists = 5;
inline bool AppendReq_Options::_internal_has_stream_exists() const {
  return expected_stream_revision_case() == kStreamExists;
}
inline bool AppendReq_Options::has_stream_exists() const {
  return _internal_has_stream_exists();
}
inline void AppendReq_Options::set_has_stream_exists() {
  _oneof_case_[0] = kStreamExists;
}
inline ::event_store::client::Empty* AppendReq_Options::release_stream_exists() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.Options.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.stream_exists_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendReq_Options::_internal_stream_exists() const {
  return _internal_has_stream_exists()
      ? *expected_stream_revision_.stream_exists_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendReq_Options::stream_exists() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.Options.stream_exists)
  return _internal_stream_exists();
}
inline ::event_store::client::Empty* AppendReq_Options::unsafe_arena_release_stream_exists() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendReq.Options.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.stream_exists_;
    expected_stream_revision_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendReq_Options::unsafe_arena_set_allocated_stream_exists(::event_store::client::Empty* stream_exists) {
  clear_expected_stream_revision();
  if (stream_exists) {
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.Options.stream_exists)
}
inline ::event_store::client::Empty* AppendReq_Options::_internal_mutable_stream_exists() {
  if (!_internal_has_stream_exists()) {
    clear_expected_stream_revision();
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.stream_exists_;
}
inline ::event_store::client::Empty* AppendReq_Options::mutable_stream_exists() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.Options.stream_exists)
  return _internal_mutable_stream_exists();
}

inline bool AppendReq_Options::has_expected_stream_revision() const {
  return expected_stream_revision_case() != EXPECTED_STREAM_REVISION_NOT_SET;
}
inline void AppendReq_Options::clear_has_expected_stream_revision() {
  _oneof_case_[0] = EXPECTED_STREAM_REVISION_NOT_SET;
}
inline AppendReq_Options::ExpectedStreamRevisionCase AppendReq_Options::expected_stream_revision_case() const {
  return AppendReq_Options::ExpectedStreamRevisionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppendReq_ProposedMessage

// .event_store.client.UUID id = 1;
inline bool AppendReq_ProposedMessage::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool AppendReq_ProposedMessage::has_id() const {
  return _internal_has_id();
}
inline const ::event_store::client::UUID& AppendReq_ProposedMessage::_internal_id() const {
  const ::event_store::client::UUID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& AppendReq_ProposedMessage::id() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.ProposedMessage.id)
  return _internal_id();
}
inline void AppendReq_ProposedMessage::unsafe_arena_set_allocated_id(
    ::event_store::client::UUID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.ProposedMessage.id)
}
inline ::event_store::client::UUID* AppendReq_ProposedMessage::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* AppendReq_ProposedMessage::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.ProposedMessage.id)
  
  ::event_store::client::UUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* AppendReq_ProposedMessage::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::event_store::client::UUID* AppendReq_ProposedMessage::mutable_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.ProposedMessage.id)
  return _internal_mutable_id();
}
inline void AppendReq_ProposedMessage::set_allocated_id(::event_store::client::UUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.ProposedMessage.id)
}

// map<string, string> metadata = 2;
inline int AppendReq_ProposedMessage::_internal_metadata_size() const {
  return metadata_.size();
}
inline int AppendReq_ProposedMessage::metadata_size() const {
  return _internal_metadata_size();
}
inline void AppendReq_ProposedMessage::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppendReq_ProposedMessage::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppendReq_ProposedMessage::metadata() const {
  // @@protoc_insertion_point(field_map:event_store.client.streams.AppendReq.ProposedMessage.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppendReq_ProposedMessage::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppendReq_ProposedMessage::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:event_store.client.streams.AppendReq.ProposedMessage.metadata)
  return _internal_mutable_metadata();
}

// bytes custom_metadata = 3;
inline void AppendReq_ProposedMessage::clear_custom_metadata() {
  custom_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppendReq_ProposedMessage::custom_metadata() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
  return _internal_custom_metadata();
}
inline void AppendReq_ProposedMessage::set_custom_metadata(const std::string& value) {
  _internal_set_custom_metadata(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
}
inline std::string* AppendReq_ProposedMessage::mutable_custom_metadata() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
  return _internal_mutable_custom_metadata();
}
inline const std::string& AppendReq_ProposedMessage::_internal_custom_metadata() const {
  return custom_metadata_.Get();
}
inline void AppendReq_ProposedMessage::_internal_set_custom_metadata(const std::string& value) {
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppendReq_ProposedMessage::set_custom_metadata(std::string&& value) {
  
  custom_metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
}
inline void AppendReq_ProposedMessage::set_custom_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
}
inline void AppendReq_ProposedMessage::set_custom_metadata(const void* value,
    size_t size) {
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
}
inline std::string* AppendReq_ProposedMessage::_internal_mutable_custom_metadata() {
  
  return custom_metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppendReq_ProposedMessage::release_custom_metadata() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
  return custom_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppendReq_ProposedMessage::set_allocated_custom_metadata(std::string* custom_metadata) {
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
}
inline std::string* AppendReq_ProposedMessage::unsafe_arena_release_custom_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return custom_metadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppendReq_ProposedMessage::unsafe_arena_set_allocated_custom_metadata(
    std::string* custom_metadata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      custom_metadata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.ProposedMessage.custom_metadata)
}

// bytes data = 4;
inline void AppendReq_ProposedMessage::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppendReq_ProposedMessage::data() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.ProposedMessage.data)
  return _internal_data();
}
inline void AppendReq_ProposedMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendReq.ProposedMessage.data)
}
inline std::string* AppendReq_ProposedMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.ProposedMessage.data)
  return _internal_mutable_data();
}
inline const std::string& AppendReq_ProposedMessage::_internal_data() const {
  return data_.Get();
}
inline void AppendReq_ProposedMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppendReq_ProposedMessage::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.streams.AppendReq.ProposedMessage.data)
}
inline void AppendReq_ProposedMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.AppendReq.ProposedMessage.data)
}
inline void AppendReq_ProposedMessage::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.AppendReq.ProposedMessage.data)
}
inline std::string* AppendReq_ProposedMessage::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppendReq_ProposedMessage::release_data() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.ProposedMessage.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppendReq_ProposedMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.ProposedMessage.data)
}
inline std::string* AppendReq_ProposedMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendReq.ProposedMessage.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppendReq_ProposedMessage::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.ProposedMessage.data)
}

// -------------------------------------------------------------------

// AppendReq

// .event_store.client.streams.AppendReq.Options options = 1;
inline bool AppendReq::_internal_has_options() const {
  return content_case() == kOptions;
}
inline bool AppendReq::has_options() const {
  return _internal_has_options();
}
inline void AppendReq::set_has_options() {
  _oneof_case_[0] = kOptions;
}
inline void AppendReq::clear_options() {
  if (_internal_has_options()) {
    if (GetArena() == nullptr) {
      delete content_.options_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::streams::AppendReq_Options* AppendReq::release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.options)
  if (_internal_has_options()) {
    clear_has_content();
      ::event_store::client::streams::AppendReq_Options* temp = content_.options_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::AppendReq_Options& AppendReq::_internal_options() const {
  return _internal_has_options()
      ? *content_.options_
      : *reinterpret_cast< ::event_store::client::streams::AppendReq_Options*>(&::event_store::client::streams::_AppendReq_Options_default_instance_);
}
inline const ::event_store::client::streams::AppendReq_Options& AppendReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.options)
  return _internal_options();
}
inline ::event_store::client::streams::AppendReq_Options* AppendReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendReq.options)
  if (_internal_has_options()) {
    clear_has_content();
    ::event_store::client::streams::AppendReq_Options* temp = content_.options_;
    content_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendReq::unsafe_arena_set_allocated_options(::event_store::client::streams::AppendReq_Options* options) {
  clear_content();
  if (options) {
    set_has_options();
    content_.options_ = options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.options)
}
inline ::event_store::client::streams::AppendReq_Options* AppendReq::_internal_mutable_options() {
  if (!_internal_has_options()) {
    clear_content();
    set_has_options();
    content_.options_ = CreateMaybeMessage< ::event_store::client::streams::AppendReq_Options >(GetArena());
  }
  return content_.options_;
}
inline ::event_store::client::streams::AppendReq_Options* AppendReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.options)
  return _internal_mutable_options();
}

// .event_store.client.streams.AppendReq.ProposedMessage proposed_message = 2;
inline bool AppendReq::_internal_has_proposed_message() const {
  return content_case() == kProposedMessage;
}
inline bool AppendReq::has_proposed_message() const {
  return _internal_has_proposed_message();
}
inline void AppendReq::set_has_proposed_message() {
  _oneof_case_[0] = kProposedMessage;
}
inline void AppendReq::clear_proposed_message() {
  if (_internal_has_proposed_message()) {
    if (GetArena() == nullptr) {
      delete content_.proposed_message_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::streams::AppendReq_ProposedMessage* AppendReq::release_proposed_message() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendReq.proposed_message)
  if (_internal_has_proposed_message()) {
    clear_has_content();
      ::event_store::client::streams::AppendReq_ProposedMessage* temp = content_.proposed_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.proposed_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::AppendReq_ProposedMessage& AppendReq::_internal_proposed_message() const {
  return _internal_has_proposed_message()
      ? *content_.proposed_message_
      : *reinterpret_cast< ::event_store::client::streams::AppendReq_ProposedMessage*>(&::event_store::client::streams::_AppendReq_ProposedMessage_default_instance_);
}
inline const ::event_store::client::streams::AppendReq_ProposedMessage& AppendReq::proposed_message() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendReq.proposed_message)
  return _internal_proposed_message();
}
inline ::event_store::client::streams::AppendReq_ProposedMessage* AppendReq::unsafe_arena_release_proposed_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendReq.proposed_message)
  if (_internal_has_proposed_message()) {
    clear_has_content();
    ::event_store::client::streams::AppendReq_ProposedMessage* temp = content_.proposed_message_;
    content_.proposed_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendReq::unsafe_arena_set_allocated_proposed_message(::event_store::client::streams::AppendReq_ProposedMessage* proposed_message) {
  clear_content();
  if (proposed_message) {
    set_has_proposed_message();
    content_.proposed_message_ = proposed_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendReq.proposed_message)
}
inline ::event_store::client::streams::AppendReq_ProposedMessage* AppendReq::_internal_mutable_proposed_message() {
  if (!_internal_has_proposed_message()) {
    clear_content();
    set_has_proposed_message();
    content_.proposed_message_ = CreateMaybeMessage< ::event_store::client::streams::AppendReq_ProposedMessage >(GetArena());
  }
  return content_.proposed_message_;
}
inline ::event_store::client::streams::AppendReq_ProposedMessage* AppendReq::mutable_proposed_message() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendReq.proposed_message)
  return _internal_mutable_proposed_message();
}

inline bool AppendReq::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void AppendReq::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline AppendReq::ContentCase AppendReq::content_case() const {
  return AppendReq::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AppendResp_Position

// uint64 commit_position = 1;
inline void AppendResp_Position::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_Position::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_Position::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.Position.commit_position)
  return _internal_commit_position();
}
inline void AppendResp_Position::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void AppendResp_Position::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendResp.Position.commit_position)
}

// uint64 prepare_position = 2;
inline void AppendResp_Position::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_Position::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_Position::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.Position.prepare_position)
  return _internal_prepare_position();
}
inline void AppendResp_Position::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void AppendResp_Position::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendResp.Position.prepare_position)
}

// -------------------------------------------------------------------

// AppendResp_Success

// uint64 current_revision = 1;
inline bool AppendResp_Success::_internal_has_current_revision() const {
  return current_revision_option_case() == kCurrentRevision;
}
inline void AppendResp_Success::set_has_current_revision() {
  _oneof_case_[0] = kCurrentRevision;
}
inline void AppendResp_Success::clear_current_revision() {
  if (_internal_has_current_revision()) {
    current_revision_option_.current_revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_current_revision_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_Success::_internal_current_revision() const {
  if (_internal_has_current_revision()) {
    return current_revision_option_.current_revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void AppendResp_Success::_internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_current_revision()) {
    clear_current_revision_option();
    set_has_current_revision();
  }
  current_revision_option_.current_revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_Success::current_revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.Success.current_revision)
  return _internal_current_revision();
}
inline void AppendResp_Success::set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendResp.Success.current_revision)
}

// .event_store.client.Empty no_stream = 2;
inline bool AppendResp_Success::_internal_has_no_stream() const {
  return current_revision_option_case() == kNoStream;
}
inline bool AppendResp_Success::has_no_stream() const {
  return _internal_has_no_stream();
}
inline void AppendResp_Success::set_has_no_stream() {
  _oneof_case_[0] = kNoStream;
}
inline ::event_store::client::Empty* AppendResp_Success::release_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.Success.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_current_revision_option();
      ::event_store::client::Empty* temp = current_revision_option_.no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    current_revision_option_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_Success::_internal_no_stream() const {
  return _internal_has_no_stream()
      ? *current_revision_option_.no_stream_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_Success::no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.Success.no_stream)
  return _internal_no_stream();
}
inline ::event_store::client::Empty* AppendResp_Success::unsafe_arena_release_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.Success.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_current_revision_option();
    ::event_store::client::Empty* temp = current_revision_option_.no_stream_;
    current_revision_option_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_Success::unsafe_arena_set_allocated_no_stream(::event_store::client::Empty* no_stream) {
  clear_current_revision_option();
  if (no_stream) {
    set_has_no_stream();
    current_revision_option_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.Success.no_stream)
}
inline ::event_store::client::Empty* AppendResp_Success::_internal_mutable_no_stream() {
  if (!_internal_has_no_stream()) {
    clear_current_revision_option();
    set_has_no_stream();
    current_revision_option_.no_stream_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return current_revision_option_.no_stream_;
}
inline ::event_store::client::Empty* AppendResp_Success::mutable_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.Success.no_stream)
  return _internal_mutable_no_stream();
}

// .event_store.client.streams.AppendResp.Position position = 3;
inline bool AppendResp_Success::_internal_has_position() const {
  return position_option_case() == kPosition;
}
inline bool AppendResp_Success::has_position() const {
  return _internal_has_position();
}
inline void AppendResp_Success::set_has_position() {
  _oneof_case_[1] = kPosition;
}
inline void AppendResp_Success::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete position_option_.position_;
    }
    clear_has_position_option();
  }
}
inline ::event_store::client::streams::AppendResp_Position* AppendResp_Success::release_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.Success.position)
  if (_internal_has_position()) {
    clear_has_position_option();
      ::event_store::client::streams::AppendResp_Position* temp = position_option_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::AppendResp_Position& AppendResp_Success::_internal_position() const {
  return _internal_has_position()
      ? *position_option_.position_
      : *reinterpret_cast< ::event_store::client::streams::AppendResp_Position*>(&::event_store::client::streams::_AppendResp_Position_default_instance_);
}
inline const ::event_store::client::streams::AppendResp_Position& AppendResp_Success::position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.Success.position)
  return _internal_position();
}
inline ::event_store::client::streams::AppendResp_Position* AppendResp_Success::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.Success.position)
  if (_internal_has_position()) {
    clear_has_position_option();
    ::event_store::client::streams::AppendResp_Position* temp = position_option_.position_;
    position_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_Success::unsafe_arena_set_allocated_position(::event_store::client::streams::AppendResp_Position* position) {
  clear_position_option();
  if (position) {
    set_has_position();
    position_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.Success.position)
}
inline ::event_store::client::streams::AppendResp_Position* AppendResp_Success::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_position_option();
    set_has_position();
    position_option_.position_ = CreateMaybeMessage< ::event_store::client::streams::AppendResp_Position >(GetArena());
  }
  return position_option_.position_;
}
inline ::event_store::client::streams::AppendResp_Position* AppendResp_Success::mutable_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.Success.position)
  return _internal_mutable_position();
}

// .event_store.client.Empty no_position = 4;
inline bool AppendResp_Success::_internal_has_no_position() const {
  return position_option_case() == kNoPosition;
}
inline bool AppendResp_Success::has_no_position() const {
  return _internal_has_no_position();
}
inline void AppendResp_Success::set_has_no_position() {
  _oneof_case_[1] = kNoPosition;
}
inline ::event_store::client::Empty* AppendResp_Success::release_no_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.Success.no_position)
  if (_internal_has_no_position()) {
    clear_has_position_option();
      ::event_store::client::Empty* temp = position_option_.no_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_option_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_Success::_internal_no_position() const {
  return _internal_has_no_position()
      ? *position_option_.no_position_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_Success::no_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.Success.no_position)
  return _internal_no_position();
}
inline ::event_store::client::Empty* AppendResp_Success::unsafe_arena_release_no_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.Success.no_position)
  if (_internal_has_no_position()) {
    clear_has_position_option();
    ::event_store::client::Empty* temp = position_option_.no_position_;
    position_option_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_Success::unsafe_arena_set_allocated_no_position(::event_store::client::Empty* no_position) {
  clear_position_option();
  if (no_position) {
    set_has_no_position();
    position_option_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.Success.no_position)
}
inline ::event_store::client::Empty* AppendResp_Success::_internal_mutable_no_position() {
  if (!_internal_has_no_position()) {
    clear_position_option();
    set_has_no_position();
    position_option_.no_position_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return position_option_.no_position_;
}
inline ::event_store::client::Empty* AppendResp_Success::mutable_no_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.Success.no_position)
  return _internal_mutable_no_position();
}

inline bool AppendResp_Success::has_current_revision_option() const {
  return current_revision_option_case() != CURRENT_REVISION_OPTION_NOT_SET;
}
inline void AppendResp_Success::clear_has_current_revision_option() {
  _oneof_case_[0] = CURRENT_REVISION_OPTION_NOT_SET;
}
inline bool AppendResp_Success::has_position_option() const {
  return position_option_case() != POSITION_OPTION_NOT_SET;
}
inline void AppendResp_Success::clear_has_position_option() {
  _oneof_case_[1] = POSITION_OPTION_NOT_SET;
}
inline AppendResp_Success::CurrentRevisionOptionCase AppendResp_Success::current_revision_option_case() const {
  return AppendResp_Success::CurrentRevisionOptionCase(_oneof_case_[0]);
}
inline AppendResp_Success::PositionOptionCase AppendResp_Success::position_option_case() const {
  return AppendResp_Success::PositionOptionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// AppendResp_WrongExpectedVersion

// uint64 current_revision_20_6_0 = 1;
inline bool AppendResp_WrongExpectedVersion::_internal_has_current_revision_20_6_0() const {
  return current_revision_option_20_6_0_case() == kCurrentRevision2060;
}
inline void AppendResp_WrongExpectedVersion::set_has_current_revision_20_6_0() {
  _oneof_case_[0] = kCurrentRevision2060;
}
inline void AppendResp_WrongExpectedVersion::clear_current_revision_20_6_0() {
  if (_internal_has_current_revision_20_6_0()) {
    current_revision_option_20_6_0_.current_revision_20_6_0_ = PROTOBUF_ULONGLONG(0);
    clear_has_current_revision_option_20_6_0();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_WrongExpectedVersion::_internal_current_revision_20_6_0() const {
  if (_internal_has_current_revision_20_6_0()) {
    return current_revision_option_20_6_0_.current_revision_20_6_0_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void AppendResp_WrongExpectedVersion::_internal_set_current_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_current_revision_20_6_0()) {
    clear_current_revision_option_20_6_0();
    set_has_current_revision_20_6_0();
  }
  current_revision_option_20_6_0_.current_revision_20_6_0_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_WrongExpectedVersion::current_revision_20_6_0() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.current_revision_20_6_0)
  return _internal_current_revision_20_6_0();
}
inline void AppendResp_WrongExpectedVersion::set_current_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_revision_20_6_0(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendResp.WrongExpectedVersion.current_revision_20_6_0)
}

// .event_store.client.Empty no_stream_20_6_0 = 2;
inline bool AppendResp_WrongExpectedVersion::_internal_has_no_stream_20_6_0() const {
  return current_revision_option_20_6_0_case() == kNoStream2060;
}
inline bool AppendResp_WrongExpectedVersion::has_no_stream_20_6_0() const {
  return _internal_has_no_stream_20_6_0();
}
inline void AppendResp_WrongExpectedVersion::set_has_no_stream_20_6_0() {
  _oneof_case_[0] = kNoStream2060;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::release_no_stream_20_6_0() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.WrongExpectedVersion.no_stream_20_6_0)
  if (_internal_has_no_stream_20_6_0()) {
    clear_has_current_revision_option_20_6_0();
      ::event_store::client::Empty* temp = current_revision_option_20_6_0_.no_stream_20_6_0_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    current_revision_option_20_6_0_.no_stream_20_6_0_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::_internal_no_stream_20_6_0() const {
  return _internal_has_no_stream_20_6_0()
      ? *current_revision_option_20_6_0_.no_stream_20_6_0_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::no_stream_20_6_0() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.no_stream_20_6_0)
  return _internal_no_stream_20_6_0();
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::unsafe_arena_release_no_stream_20_6_0() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.WrongExpectedVersion.no_stream_20_6_0)
  if (_internal_has_no_stream_20_6_0()) {
    clear_has_current_revision_option_20_6_0();
    ::event_store::client::Empty* temp = current_revision_option_20_6_0_.no_stream_20_6_0_;
    current_revision_option_20_6_0_.no_stream_20_6_0_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_WrongExpectedVersion::unsafe_arena_set_allocated_no_stream_20_6_0(::event_store::client::Empty* no_stream_20_6_0) {
  clear_current_revision_option_20_6_0();
  if (no_stream_20_6_0) {
    set_has_no_stream_20_6_0();
    current_revision_option_20_6_0_.no_stream_20_6_0_ = no_stream_20_6_0;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.no_stream_20_6_0)
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::_internal_mutable_no_stream_20_6_0() {
  if (!_internal_has_no_stream_20_6_0()) {
    clear_current_revision_option_20_6_0();
    set_has_no_stream_20_6_0();
    current_revision_option_20_6_0_.no_stream_20_6_0_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return current_revision_option_20_6_0_.no_stream_20_6_0_;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::mutable_no_stream_20_6_0() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.WrongExpectedVersion.no_stream_20_6_0)
  return _internal_mutable_no_stream_20_6_0();
}

// uint64 expected_revision_20_6_0 = 3;
inline bool AppendResp_WrongExpectedVersion::_internal_has_expected_revision_20_6_0() const {
  return expected_revision_option_20_6_0_case() == kExpectedRevision2060;
}
inline void AppendResp_WrongExpectedVersion::set_has_expected_revision_20_6_0() {
  _oneof_case_[1] = kExpectedRevision2060;
}
inline void AppendResp_WrongExpectedVersion::clear_expected_revision_20_6_0() {
  if (_internal_has_expected_revision_20_6_0()) {
    expected_revision_option_20_6_0_.expected_revision_20_6_0_ = PROTOBUF_ULONGLONG(0);
    clear_has_expected_revision_option_20_6_0();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_WrongExpectedVersion::_internal_expected_revision_20_6_0() const {
  if (_internal_has_expected_revision_20_6_0()) {
    return expected_revision_option_20_6_0_.expected_revision_20_6_0_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void AppendResp_WrongExpectedVersion::_internal_set_expected_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_expected_revision_20_6_0()) {
    clear_expected_revision_option_20_6_0();
    set_has_expected_revision_20_6_0();
  }
  expected_revision_option_20_6_0_.expected_revision_20_6_0_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_WrongExpectedVersion::expected_revision_20_6_0() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_revision_20_6_0)
  return _internal_expected_revision_20_6_0();
}
inline void AppendResp_WrongExpectedVersion::set_expected_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expected_revision_20_6_0(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_revision_20_6_0)
}

// .event_store.client.Empty any_20_6_0 = 4;
inline bool AppendResp_WrongExpectedVersion::_internal_has_any_20_6_0() const {
  return expected_revision_option_20_6_0_case() == kAny2060;
}
inline bool AppendResp_WrongExpectedVersion::has_any_20_6_0() const {
  return _internal_has_any_20_6_0();
}
inline void AppendResp_WrongExpectedVersion::set_has_any_20_6_0() {
  _oneof_case_[1] = kAny2060;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::release_any_20_6_0() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.WrongExpectedVersion.any_20_6_0)
  if (_internal_has_any_20_6_0()) {
    clear_has_expected_revision_option_20_6_0();
      ::event_store::client::Empty* temp = expected_revision_option_20_6_0_.any_20_6_0_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_revision_option_20_6_0_.any_20_6_0_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::_internal_any_20_6_0() const {
  return _internal_has_any_20_6_0()
      ? *expected_revision_option_20_6_0_.any_20_6_0_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::any_20_6_0() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.any_20_6_0)
  return _internal_any_20_6_0();
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::unsafe_arena_release_any_20_6_0() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.WrongExpectedVersion.any_20_6_0)
  if (_internal_has_any_20_6_0()) {
    clear_has_expected_revision_option_20_6_0();
    ::event_store::client::Empty* temp = expected_revision_option_20_6_0_.any_20_6_0_;
    expected_revision_option_20_6_0_.any_20_6_0_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_WrongExpectedVersion::unsafe_arena_set_allocated_any_20_6_0(::event_store::client::Empty* any_20_6_0) {
  clear_expected_revision_option_20_6_0();
  if (any_20_6_0) {
    set_has_any_20_6_0();
    expected_revision_option_20_6_0_.any_20_6_0_ = any_20_6_0;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.any_20_6_0)
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::_internal_mutable_any_20_6_0() {
  if (!_internal_has_any_20_6_0()) {
    clear_expected_revision_option_20_6_0();
    set_has_any_20_6_0();
    expected_revision_option_20_6_0_.any_20_6_0_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_revision_option_20_6_0_.any_20_6_0_;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::mutable_any_20_6_0() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.WrongExpectedVersion.any_20_6_0)
  return _internal_mutable_any_20_6_0();
}

// .event_store.client.Empty stream_exists_20_6_0 = 5;
inline bool AppendResp_WrongExpectedVersion::_internal_has_stream_exists_20_6_0() const {
  return expected_revision_option_20_6_0_case() == kStreamExists2060;
}
inline bool AppendResp_WrongExpectedVersion::has_stream_exists_20_6_0() const {
  return _internal_has_stream_exists_20_6_0();
}
inline void AppendResp_WrongExpectedVersion::set_has_stream_exists_20_6_0() {
  _oneof_case_[1] = kStreamExists2060;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::release_stream_exists_20_6_0() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.WrongExpectedVersion.stream_exists_20_6_0)
  if (_internal_has_stream_exists_20_6_0()) {
    clear_has_expected_revision_option_20_6_0();
      ::event_store::client::Empty* temp = expected_revision_option_20_6_0_.stream_exists_20_6_0_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_revision_option_20_6_0_.stream_exists_20_6_0_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::_internal_stream_exists_20_6_0() const {
  return _internal_has_stream_exists_20_6_0()
      ? *expected_revision_option_20_6_0_.stream_exists_20_6_0_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::stream_exists_20_6_0() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.stream_exists_20_6_0)
  return _internal_stream_exists_20_6_0();
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::unsafe_arena_release_stream_exists_20_6_0() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.WrongExpectedVersion.stream_exists_20_6_0)
  if (_internal_has_stream_exists_20_6_0()) {
    clear_has_expected_revision_option_20_6_0();
    ::event_store::client::Empty* temp = expected_revision_option_20_6_0_.stream_exists_20_6_0_;
    expected_revision_option_20_6_0_.stream_exists_20_6_0_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_WrongExpectedVersion::unsafe_arena_set_allocated_stream_exists_20_6_0(::event_store::client::Empty* stream_exists_20_6_0) {
  clear_expected_revision_option_20_6_0();
  if (stream_exists_20_6_0) {
    set_has_stream_exists_20_6_0();
    expected_revision_option_20_6_0_.stream_exists_20_6_0_ = stream_exists_20_6_0;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.stream_exists_20_6_0)
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::_internal_mutable_stream_exists_20_6_0() {
  if (!_internal_has_stream_exists_20_6_0()) {
    clear_expected_revision_option_20_6_0();
    set_has_stream_exists_20_6_0();
    expected_revision_option_20_6_0_.stream_exists_20_6_0_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_revision_option_20_6_0_.stream_exists_20_6_0_;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::mutable_stream_exists_20_6_0() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.WrongExpectedVersion.stream_exists_20_6_0)
  return _internal_mutable_stream_exists_20_6_0();
}

// uint64 current_revision = 6;
inline bool AppendResp_WrongExpectedVersion::_internal_has_current_revision() const {
  return current_revision_option_case() == kCurrentRevision;
}
inline void AppendResp_WrongExpectedVersion::set_has_current_revision() {
  _oneof_case_[2] = kCurrentRevision;
}
inline void AppendResp_WrongExpectedVersion::clear_current_revision() {
  if (_internal_has_current_revision()) {
    current_revision_option_.current_revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_current_revision_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_WrongExpectedVersion::_internal_current_revision() const {
  if (_internal_has_current_revision()) {
    return current_revision_option_.current_revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void AppendResp_WrongExpectedVersion::_internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_current_revision()) {
    clear_current_revision_option();
    set_has_current_revision();
  }
  current_revision_option_.current_revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_WrongExpectedVersion::current_revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.current_revision)
  return _internal_current_revision();
}
inline void AppendResp_WrongExpectedVersion::set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendResp.WrongExpectedVersion.current_revision)
}

// .event_store.client.Empty current_no_stream = 7;
inline bool AppendResp_WrongExpectedVersion::_internal_has_current_no_stream() const {
  return current_revision_option_case() == kCurrentNoStream;
}
inline bool AppendResp_WrongExpectedVersion::has_current_no_stream() const {
  return _internal_has_current_no_stream();
}
inline void AppendResp_WrongExpectedVersion::set_has_current_no_stream() {
  _oneof_case_[2] = kCurrentNoStream;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::release_current_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.WrongExpectedVersion.current_no_stream)
  if (_internal_has_current_no_stream()) {
    clear_has_current_revision_option();
      ::event_store::client::Empty* temp = current_revision_option_.current_no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    current_revision_option_.current_no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::_internal_current_no_stream() const {
  return _internal_has_current_no_stream()
      ? *current_revision_option_.current_no_stream_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::current_no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.current_no_stream)
  return _internal_current_no_stream();
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::unsafe_arena_release_current_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.WrongExpectedVersion.current_no_stream)
  if (_internal_has_current_no_stream()) {
    clear_has_current_revision_option();
    ::event_store::client::Empty* temp = current_revision_option_.current_no_stream_;
    current_revision_option_.current_no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_WrongExpectedVersion::unsafe_arena_set_allocated_current_no_stream(::event_store::client::Empty* current_no_stream) {
  clear_current_revision_option();
  if (current_no_stream) {
    set_has_current_no_stream();
    current_revision_option_.current_no_stream_ = current_no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.current_no_stream)
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::_internal_mutable_current_no_stream() {
  if (!_internal_has_current_no_stream()) {
    clear_current_revision_option();
    set_has_current_no_stream();
    current_revision_option_.current_no_stream_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return current_revision_option_.current_no_stream_;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::mutable_current_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.WrongExpectedVersion.current_no_stream)
  return _internal_mutable_current_no_stream();
}

// uint64 expected_revision = 8;
inline bool AppendResp_WrongExpectedVersion::_internal_has_expected_revision() const {
  return expected_revision_option_case() == kExpectedRevision;
}
inline void AppendResp_WrongExpectedVersion::set_has_expected_revision() {
  _oneof_case_[3] = kExpectedRevision;
}
inline void AppendResp_WrongExpectedVersion::clear_expected_revision() {
  if (_internal_has_expected_revision()) {
    expected_revision_option_.expected_revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_expected_revision_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_WrongExpectedVersion::_internal_expected_revision() const {
  if (_internal_has_expected_revision()) {
    return expected_revision_option_.expected_revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void AppendResp_WrongExpectedVersion::_internal_set_expected_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_expected_revision()) {
    clear_expected_revision_option();
    set_has_expected_revision();
  }
  expected_revision_option_.expected_revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendResp_WrongExpectedVersion::expected_revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_revision)
  return _internal_expected_revision();
}
inline void AppendResp_WrongExpectedVersion::set_expected_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expected_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_revision)
}

// .event_store.client.Empty expected_any = 9;
inline bool AppendResp_WrongExpectedVersion::_internal_has_expected_any() const {
  return expected_revision_option_case() == kExpectedAny;
}
inline bool AppendResp_WrongExpectedVersion::has_expected_any() const {
  return _internal_has_expected_any();
}
inline void AppendResp_WrongExpectedVersion::set_has_expected_any() {
  _oneof_case_[3] = kExpectedAny;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::release_expected_any() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_any)
  if (_internal_has_expected_any()) {
    clear_has_expected_revision_option();
      ::event_store::client::Empty* temp = expected_revision_option_.expected_any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_revision_option_.expected_any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::_internal_expected_any() const {
  return _internal_has_expected_any()
      ? *expected_revision_option_.expected_any_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::expected_any() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_any)
  return _internal_expected_any();
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::unsafe_arena_release_expected_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_any)
  if (_internal_has_expected_any()) {
    clear_has_expected_revision_option();
    ::event_store::client::Empty* temp = expected_revision_option_.expected_any_;
    expected_revision_option_.expected_any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_WrongExpectedVersion::unsafe_arena_set_allocated_expected_any(::event_store::client::Empty* expected_any) {
  clear_expected_revision_option();
  if (expected_any) {
    set_has_expected_any();
    expected_revision_option_.expected_any_ = expected_any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_any)
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::_internal_mutable_expected_any() {
  if (!_internal_has_expected_any()) {
    clear_expected_revision_option();
    set_has_expected_any();
    expected_revision_option_.expected_any_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_revision_option_.expected_any_;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::mutable_expected_any() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_any)
  return _internal_mutable_expected_any();
}

// .event_store.client.Empty expected_stream_exists = 10;
inline bool AppendResp_WrongExpectedVersion::_internal_has_expected_stream_exists() const {
  return expected_revision_option_case() == kExpectedStreamExists;
}
inline bool AppendResp_WrongExpectedVersion::has_expected_stream_exists() const {
  return _internal_has_expected_stream_exists();
}
inline void AppendResp_WrongExpectedVersion::set_has_expected_stream_exists() {
  _oneof_case_[3] = kExpectedStreamExists;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::release_expected_stream_exists() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_stream_exists)
  if (_internal_has_expected_stream_exists()) {
    clear_has_expected_revision_option();
      ::event_store::client::Empty* temp = expected_revision_option_.expected_stream_exists_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_revision_option_.expected_stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::_internal_expected_stream_exists() const {
  return _internal_has_expected_stream_exists()
      ? *expected_revision_option_.expected_stream_exists_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::expected_stream_exists() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_stream_exists)
  return _internal_expected_stream_exists();
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::unsafe_arena_release_expected_stream_exists() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_stream_exists)
  if (_internal_has_expected_stream_exists()) {
    clear_has_expected_revision_option();
    ::event_store::client::Empty* temp = expected_revision_option_.expected_stream_exists_;
    expected_revision_option_.expected_stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_WrongExpectedVersion::unsafe_arena_set_allocated_expected_stream_exists(::event_store::client::Empty* expected_stream_exists) {
  clear_expected_revision_option();
  if (expected_stream_exists) {
    set_has_expected_stream_exists();
    expected_revision_option_.expected_stream_exists_ = expected_stream_exists;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_stream_exists)
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::_internal_mutable_expected_stream_exists() {
  if (!_internal_has_expected_stream_exists()) {
    clear_expected_revision_option();
    set_has_expected_stream_exists();
    expected_revision_option_.expected_stream_exists_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_revision_option_.expected_stream_exists_;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::mutable_expected_stream_exists() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_stream_exists)
  return _internal_mutable_expected_stream_exists();
}

// .event_store.client.Empty expected_no_stream = 11;
inline bool AppendResp_WrongExpectedVersion::_internal_has_expected_no_stream() const {
  return expected_revision_option_case() == kExpectedNoStream;
}
inline bool AppendResp_WrongExpectedVersion::has_expected_no_stream() const {
  return _internal_has_expected_no_stream();
}
inline void AppendResp_WrongExpectedVersion::set_has_expected_no_stream() {
  _oneof_case_[3] = kExpectedNoStream;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::release_expected_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_no_stream)
  if (_internal_has_expected_no_stream()) {
    clear_has_expected_revision_option();
      ::event_store::client::Empty* temp = expected_revision_option_.expected_no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_revision_option_.expected_no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::_internal_expected_no_stream() const {
  return _internal_has_expected_no_stream()
      ? *expected_revision_option_.expected_no_stream_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& AppendResp_WrongExpectedVersion::expected_no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_no_stream)
  return _internal_expected_no_stream();
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::unsafe_arena_release_expected_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_no_stream)
  if (_internal_has_expected_no_stream()) {
    clear_has_expected_revision_option();
    ::event_store::client::Empty* temp = expected_revision_option_.expected_no_stream_;
    expected_revision_option_.expected_no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp_WrongExpectedVersion::unsafe_arena_set_allocated_expected_no_stream(::event_store::client::Empty* expected_no_stream) {
  clear_expected_revision_option();
  if (expected_no_stream) {
    set_has_expected_no_stream();
    expected_revision_option_.expected_no_stream_ = expected_no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_no_stream)
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::_internal_mutable_expected_no_stream() {
  if (!_internal_has_expected_no_stream()) {
    clear_expected_revision_option();
    set_has_expected_no_stream();
    expected_revision_option_.expected_no_stream_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_revision_option_.expected_no_stream_;
}
inline ::event_store::client::Empty* AppendResp_WrongExpectedVersion::mutable_expected_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_no_stream)
  return _internal_mutable_expected_no_stream();
}

inline bool AppendResp_WrongExpectedVersion::has_current_revision_option_20_6_0() const {
  return current_revision_option_20_6_0_case() != CURRENT_REVISION_OPTION_20_6_0_NOT_SET;
}
inline void AppendResp_WrongExpectedVersion::clear_has_current_revision_option_20_6_0() {
  _oneof_case_[0] = CURRENT_REVISION_OPTION_20_6_0_NOT_SET;
}
inline bool AppendResp_WrongExpectedVersion::has_expected_revision_option_20_6_0() const {
  return expected_revision_option_20_6_0_case() != EXPECTED_REVISION_OPTION_20_6_0_NOT_SET;
}
inline void AppendResp_WrongExpectedVersion::clear_has_expected_revision_option_20_6_0() {
  _oneof_case_[1] = EXPECTED_REVISION_OPTION_20_6_0_NOT_SET;
}
inline bool AppendResp_WrongExpectedVersion::has_current_revision_option() const {
  return current_revision_option_case() != CURRENT_REVISION_OPTION_NOT_SET;
}
inline void AppendResp_WrongExpectedVersion::clear_has_current_revision_option() {
  _oneof_case_[2] = CURRENT_REVISION_OPTION_NOT_SET;
}
inline bool AppendResp_WrongExpectedVersion::has_expected_revision_option() const {
  return expected_revision_option_case() != EXPECTED_REVISION_OPTION_NOT_SET;
}
inline void AppendResp_WrongExpectedVersion::clear_has_expected_revision_option() {
  _oneof_case_[3] = EXPECTED_REVISION_OPTION_NOT_SET;
}
inline AppendResp_WrongExpectedVersion::CurrentRevisionOption2060Case AppendResp_WrongExpectedVersion::current_revision_option_20_6_0_case() const {
  return AppendResp_WrongExpectedVersion::CurrentRevisionOption2060Case(_oneof_case_[0]);
}
inline AppendResp_WrongExpectedVersion::ExpectedRevisionOption2060Case AppendResp_WrongExpectedVersion::expected_revision_option_20_6_0_case() const {
  return AppendResp_WrongExpectedVersion::ExpectedRevisionOption2060Case(_oneof_case_[1]);
}
inline AppendResp_WrongExpectedVersion::CurrentRevisionOptionCase AppendResp_WrongExpectedVersion::current_revision_option_case() const {
  return AppendResp_WrongExpectedVersion::CurrentRevisionOptionCase(_oneof_case_[2]);
}
inline AppendResp_WrongExpectedVersion::ExpectedRevisionOptionCase AppendResp_WrongExpectedVersion::expected_revision_option_case() const {
  return AppendResp_WrongExpectedVersion::ExpectedRevisionOptionCase(_oneof_case_[3]);
}
// -------------------------------------------------------------------

// AppendResp

// .event_store.client.streams.AppendResp.Success success = 1;
inline bool AppendResp::_internal_has_success() const {
  return result_case() == kSuccess;
}
inline bool AppendResp::has_success() const {
  return _internal_has_success();
}
inline void AppendResp::set_has_success() {
  _oneof_case_[0] = kSuccess;
}
inline void AppendResp::clear_success() {
  if (_internal_has_success()) {
    if (GetArena() == nullptr) {
      delete result_.success_;
    }
    clear_has_result();
  }
}
inline ::event_store::client::streams::AppendResp_Success* AppendResp::release_success() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.success)
  if (_internal_has_success()) {
    clear_has_result();
      ::event_store::client::streams::AppendResp_Success* temp = result_.success_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::AppendResp_Success& AppendResp::_internal_success() const {
  return _internal_has_success()
      ? *result_.success_
      : *reinterpret_cast< ::event_store::client::streams::AppendResp_Success*>(&::event_store::client::streams::_AppendResp_Success_default_instance_);
}
inline const ::event_store::client::streams::AppendResp_Success& AppendResp::success() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.success)
  return _internal_success();
}
inline ::event_store::client::streams::AppendResp_Success* AppendResp::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.success)
  if (_internal_has_success()) {
    clear_has_result();
    ::event_store::client::streams::AppendResp_Success* temp = result_.success_;
    result_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp::unsafe_arena_set_allocated_success(::event_store::client::streams::AppendResp_Success* success) {
  clear_result();
  if (success) {
    set_has_success();
    result_.success_ = success;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.success)
}
inline ::event_store::client::streams::AppendResp_Success* AppendResp::_internal_mutable_success() {
  if (!_internal_has_success()) {
    clear_result();
    set_has_success();
    result_.success_ = CreateMaybeMessage< ::event_store::client::streams::AppendResp_Success >(GetArena());
  }
  return result_.success_;
}
inline ::event_store::client::streams::AppendResp_Success* AppendResp::mutable_success() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.success)
  return _internal_mutable_success();
}

// .event_store.client.streams.AppendResp.WrongExpectedVersion wrong_expected_version = 2;
inline bool AppendResp::_internal_has_wrong_expected_version() const {
  return result_case() == kWrongExpectedVersion;
}
inline bool AppendResp::has_wrong_expected_version() const {
  return _internal_has_wrong_expected_version();
}
inline void AppendResp::set_has_wrong_expected_version() {
  _oneof_case_[0] = kWrongExpectedVersion;
}
inline void AppendResp::clear_wrong_expected_version() {
  if (_internal_has_wrong_expected_version()) {
    if (GetArena() == nullptr) {
      delete result_.wrong_expected_version_;
    }
    clear_has_result();
  }
}
inline ::event_store::client::streams::AppendResp_WrongExpectedVersion* AppendResp::release_wrong_expected_version() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.AppendResp.wrong_expected_version)
  if (_internal_has_wrong_expected_version()) {
    clear_has_result();
      ::event_store::client::streams::AppendResp_WrongExpectedVersion* temp = result_.wrong_expected_version_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.wrong_expected_version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::AppendResp_WrongExpectedVersion& AppendResp::_internal_wrong_expected_version() const {
  return _internal_has_wrong_expected_version()
      ? *result_.wrong_expected_version_
      : *reinterpret_cast< ::event_store::client::streams::AppendResp_WrongExpectedVersion*>(&::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_);
}
inline const ::event_store::client::streams::AppendResp_WrongExpectedVersion& AppendResp::wrong_expected_version() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.AppendResp.wrong_expected_version)
  return _internal_wrong_expected_version();
}
inline ::event_store::client::streams::AppendResp_WrongExpectedVersion* AppendResp::unsafe_arena_release_wrong_expected_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.AppendResp.wrong_expected_version)
  if (_internal_has_wrong_expected_version()) {
    clear_has_result();
    ::event_store::client::streams::AppendResp_WrongExpectedVersion* temp = result_.wrong_expected_version_;
    result_.wrong_expected_version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppendResp::unsafe_arena_set_allocated_wrong_expected_version(::event_store::client::streams::AppendResp_WrongExpectedVersion* wrong_expected_version) {
  clear_result();
  if (wrong_expected_version) {
    set_has_wrong_expected_version();
    result_.wrong_expected_version_ = wrong_expected_version;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.AppendResp.wrong_expected_version)
}
inline ::event_store::client::streams::AppendResp_WrongExpectedVersion* AppendResp::_internal_mutable_wrong_expected_version() {
  if (!_internal_has_wrong_expected_version()) {
    clear_result();
    set_has_wrong_expected_version();
    result_.wrong_expected_version_ = CreateMaybeMessage< ::event_store::client::streams::AppendResp_WrongExpectedVersion >(GetArena());
  }
  return result_.wrong_expected_version_;
}
inline ::event_store::client::streams::AppendResp_WrongExpectedVersion* AppendResp::mutable_wrong_expected_version() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.AppendResp.wrong_expected_version)
  return _internal_mutable_wrong_expected_version();
}

inline bool AppendResp::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void AppendResp::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline AppendResp::ResultCase AppendResp::result_case() const {
  return AppendResp::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BatchAppendReq_Options

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool BatchAppendReq_Options::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool BatchAppendReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& BatchAppendReq_Options::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& BatchAppendReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline void BatchAppendReq_Options::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* BatchAppendReq_Options::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* BatchAppendReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.Options.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* BatchAppendReq_Options::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* BatchAppendReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void BatchAppendReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.Options.stream_identifier)
}

// uint64 stream_position = 2;
inline bool BatchAppendReq_Options::_internal_has_stream_position() const {
  return expected_stream_position_case() == kStreamPosition;
}
inline void BatchAppendReq_Options::set_has_stream_position() {
  _oneof_case_[0] = kStreamPosition;
}
inline void BatchAppendReq_Options::clear_stream_position() {
  if (_internal_has_stream_position()) {
    expected_stream_position_.stream_position_ = PROTOBUF_ULONGLONG(0);
    clear_has_expected_stream_position();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchAppendReq_Options::_internal_stream_position() const {
  if (_internal_has_stream_position()) {
    return expected_stream_position_.stream_position_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void BatchAppendReq_Options::_internal_set_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_stream_position()) {
    clear_expected_stream_position();
    set_has_stream_position();
  }
  expected_stream_position_.stream_position_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchAppendReq_Options::stream_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.Options.stream_position)
  return _internal_stream_position();
}
inline void BatchAppendReq_Options::set_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.BatchAppendReq.Options.stream_position)
}

// .google.protobuf.Empty no_stream = 3;
inline bool BatchAppendReq_Options::_internal_has_no_stream() const {
  return expected_stream_position_case() == kNoStream;
}
inline bool BatchAppendReq_Options::has_no_stream() const {
  return _internal_has_no_stream();
}
inline void BatchAppendReq_Options::set_has_no_stream() {
  _oneof_case_[0] = kNoStream;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::release_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.Options.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_position();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendReq_Options::_internal_no_stream() const {
  return _internal_has_no_stream()
      ? *expected_stream_position_.no_stream_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendReq_Options::no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.Options.no_stream)
  return _internal_no_stream();
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::unsafe_arena_release_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendReq.Options.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_position();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.no_stream_;
    expected_stream_position_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendReq_Options::unsafe_arena_set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream) {
  clear_expected_stream_position();
  if (no_stream) {
    set_has_no_stream();
    expected_stream_position_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.Options.no_stream)
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::_internal_mutable_no_stream() {
  if (!_internal_has_no_stream()) {
    clear_expected_stream_position();
    set_has_no_stream();
    expected_stream_position_.no_stream_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_.no_stream_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::mutable_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.Options.no_stream)
  return _internal_mutable_no_stream();
}

// .google.protobuf.Empty any = 4;
inline bool BatchAppendReq_Options::_internal_has_any() const {
  return expected_stream_position_case() == kAny;
}
inline bool BatchAppendReq_Options::has_any() const {
  return _internal_has_any();
}
inline void BatchAppendReq_Options::set_has_any() {
  _oneof_case_[0] = kAny;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::release_any() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.Options.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_position();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendReq_Options::_internal_any() const {
  return _internal_has_any()
      ? *expected_stream_position_.any_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendReq_Options::any() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.Options.any)
  return _internal_any();
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::unsafe_arena_release_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendReq.Options.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_position();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.any_;
    expected_stream_position_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendReq_Options::unsafe_arena_set_allocated_any(PROTOBUF_NAMESPACE_ID::Empty* any) {
  clear_expected_stream_position();
  if (any) {
    set_has_any();
    expected_stream_position_.any_ = any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.Options.any)
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::_internal_mutable_any() {
  if (!_internal_has_any()) {
    clear_expected_stream_position();
    set_has_any();
    expected_stream_position_.any_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_.any_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::mutable_any() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.Options.any)
  return _internal_mutable_any();
}

// .google.protobuf.Empty stream_exists = 5;
inline bool BatchAppendReq_Options::_internal_has_stream_exists() const {
  return expected_stream_position_case() == kStreamExists;
}
inline bool BatchAppendReq_Options::has_stream_exists() const {
  return _internal_has_stream_exists();
}
inline void BatchAppendReq_Options::set_has_stream_exists() {
  _oneof_case_[0] = kStreamExists;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::release_stream_exists() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.Options.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_position();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.stream_exists_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendReq_Options::_internal_stream_exists() const {
  return _internal_has_stream_exists()
      ? *expected_stream_position_.stream_exists_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendReq_Options::stream_exists() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.Options.stream_exists)
  return _internal_stream_exists();
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::unsafe_arena_release_stream_exists() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendReq.Options.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_position();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.stream_exists_;
    expected_stream_position_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendReq_Options::unsafe_arena_set_allocated_stream_exists(PROTOBUF_NAMESPACE_ID::Empty* stream_exists) {
  clear_expected_stream_position();
  if (stream_exists) {
    set_has_stream_exists();
    expected_stream_position_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.Options.stream_exists)
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::_internal_mutable_stream_exists() {
  if (!_internal_has_stream_exists()) {
    clear_expected_stream_position();
    set_has_stream_exists();
    expected_stream_position_.stream_exists_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_.stream_exists_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendReq_Options::mutable_stream_exists() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.Options.stream_exists)
  return _internal_mutable_stream_exists();
}

// .google.protobuf.Timestamp deadline = 6;
inline bool BatchAppendReq_Options::_internal_has_deadline() const {
  return this != internal_default_instance() && deadline_ != nullptr;
}
inline bool BatchAppendReq_Options::has_deadline() const {
  return _internal_has_deadline();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BatchAppendReq_Options::_internal_deadline() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = deadline_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BatchAppendReq_Options::deadline() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.Options.deadline)
  return _internal_deadline();
}
inline void BatchAppendReq_Options::unsafe_arena_set_allocated_deadline(
    PROTOBUF_NAMESPACE_ID::Timestamp* deadline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline_);
  }
  deadline_ = deadline;
  if (deadline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.Options.deadline)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BatchAppendReq_Options::release_deadline() {
  auto temp = unsafe_arena_release_deadline();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BatchAppendReq_Options::unsafe_arena_release_deadline() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.Options.deadline)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = deadline_;
  deadline_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BatchAppendReq_Options::_internal_mutable_deadline() {
  
  if (deadline_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    deadline_ = p;
  }
  return deadline_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BatchAppendReq_Options::mutable_deadline() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.Options.deadline)
  return _internal_mutable_deadline();
}
inline void BatchAppendReq_Options::set_allocated_deadline(PROTOBUF_NAMESPACE_ID::Timestamp* deadline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline_);
  }
  if (deadline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline)->GetArena();
    if (message_arena != submessage_arena) {
      deadline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deadline, submessage_arena);
    }
    
  } else {
    
  }
  deadline_ = deadline;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.Options.deadline)
}

inline bool BatchAppendReq_Options::has_expected_stream_position() const {
  return expected_stream_position_case() != EXPECTED_STREAM_POSITION_NOT_SET;
}
inline void BatchAppendReq_Options::clear_has_expected_stream_position() {
  _oneof_case_[0] = EXPECTED_STREAM_POSITION_NOT_SET;
}
inline BatchAppendReq_Options::ExpectedStreamPositionCase BatchAppendReq_Options::expected_stream_position_case() const {
  return BatchAppendReq_Options::ExpectedStreamPositionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BatchAppendReq_ProposedMessage

// .event_store.client.UUID id = 1;
inline bool BatchAppendReq_ProposedMessage::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BatchAppendReq_ProposedMessage::has_id() const {
  return _internal_has_id();
}
inline const ::event_store::client::UUID& BatchAppendReq_ProposedMessage::_internal_id() const {
  const ::event_store::client::UUID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& BatchAppendReq_ProposedMessage::id() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.ProposedMessage.id)
  return _internal_id();
}
inline void BatchAppendReq_ProposedMessage::unsafe_arena_set_allocated_id(
    ::event_store::client::UUID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.ProposedMessage.id)
}
inline ::event_store::client::UUID* BatchAppendReq_ProposedMessage::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* BatchAppendReq_ProposedMessage::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.ProposedMessage.id)
  
  ::event_store::client::UUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* BatchAppendReq_ProposedMessage::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::event_store::client::UUID* BatchAppendReq_ProposedMessage::mutable_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.ProposedMessage.id)
  return _internal_mutable_id();
}
inline void BatchAppendReq_ProposedMessage::set_allocated_id(::event_store::client::UUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.ProposedMessage.id)
}

// map<string, string> metadata = 2;
inline int BatchAppendReq_ProposedMessage::_internal_metadata_size() const {
  return metadata_.size();
}
inline int BatchAppendReq_ProposedMessage::metadata_size() const {
  return _internal_metadata_size();
}
inline void BatchAppendReq_ProposedMessage::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BatchAppendReq_ProposedMessage::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BatchAppendReq_ProposedMessage::metadata() const {
  // @@protoc_insertion_point(field_map:event_store.client.streams.BatchAppendReq.ProposedMessage.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BatchAppendReq_ProposedMessage::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BatchAppendReq_ProposedMessage::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:event_store.client.streams.BatchAppendReq.ProposedMessage.metadata)
  return _internal_mutable_metadata();
}

// bytes custom_metadata = 3;
inline void BatchAppendReq_ProposedMessage::clear_custom_metadata() {
  custom_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BatchAppendReq_ProposedMessage::custom_metadata() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
  return _internal_custom_metadata();
}
inline void BatchAppendReq_ProposedMessage::set_custom_metadata(const std::string& value) {
  _internal_set_custom_metadata(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
}
inline std::string* BatchAppendReq_ProposedMessage::mutable_custom_metadata() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
  return _internal_mutable_custom_metadata();
}
inline const std::string& BatchAppendReq_ProposedMessage::_internal_custom_metadata() const {
  return custom_metadata_.Get();
}
inline void BatchAppendReq_ProposedMessage::_internal_set_custom_metadata(const std::string& value) {
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BatchAppendReq_ProposedMessage::set_custom_metadata(std::string&& value) {
  
  custom_metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
}
inline void BatchAppendReq_ProposedMessage::set_custom_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
}
inline void BatchAppendReq_ProposedMessage::set_custom_metadata(const void* value,
    size_t size) {
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
}
inline std::string* BatchAppendReq_ProposedMessage::_internal_mutable_custom_metadata() {
  
  return custom_metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BatchAppendReq_ProposedMessage::release_custom_metadata() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
  return custom_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchAppendReq_ProposedMessage::set_allocated_custom_metadata(std::string* custom_metadata) {
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
}
inline std::string* BatchAppendReq_ProposedMessage::unsafe_arena_release_custom_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return custom_metadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BatchAppendReq_ProposedMessage::unsafe_arena_set_allocated_custom_metadata(
    std::string* custom_metadata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      custom_metadata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.ProposedMessage.custom_metadata)
}

// bytes data = 4;
inline void BatchAppendReq_ProposedMessage::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BatchAppendReq_ProposedMessage::data() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
  return _internal_data();
}
inline void BatchAppendReq_ProposedMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
}
inline std::string* BatchAppendReq_ProposedMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
  return _internal_mutable_data();
}
inline const std::string& BatchAppendReq_ProposedMessage::_internal_data() const {
  return data_.Get();
}
inline void BatchAppendReq_ProposedMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BatchAppendReq_ProposedMessage::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
}
inline void BatchAppendReq_ProposedMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
}
inline void BatchAppendReq_ProposedMessage::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
}
inline std::string* BatchAppendReq_ProposedMessage::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BatchAppendReq_ProposedMessage::release_data() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchAppendReq_ProposedMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
}
inline std::string* BatchAppendReq_ProposedMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BatchAppendReq_ProposedMessage::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.ProposedMessage.data)
}

// -------------------------------------------------------------------

// BatchAppendReq

// .event_store.client.UUID correlation_id = 1;
inline bool BatchAppendReq::_internal_has_correlation_id() const {
  return this != internal_default_instance() && correlation_id_ != nullptr;
}
inline bool BatchAppendReq::has_correlation_id() const {
  return _internal_has_correlation_id();
}
inline const ::event_store::client::UUID& BatchAppendReq::_internal_correlation_id() const {
  const ::event_store::client::UUID* p = correlation_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& BatchAppendReq::correlation_id() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.correlation_id)
  return _internal_correlation_id();
}
inline void BatchAppendReq::unsafe_arena_set_allocated_correlation_id(
    ::event_store::client::UUID* correlation_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(correlation_id_);
  }
  correlation_id_ = correlation_id;
  if (correlation_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.correlation_id)
}
inline ::event_store::client::UUID* BatchAppendReq::release_correlation_id() {
  auto temp = unsafe_arena_release_correlation_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* BatchAppendReq::unsafe_arena_release_correlation_id() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.correlation_id)
  
  ::event_store::client::UUID* temp = correlation_id_;
  correlation_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* BatchAppendReq::_internal_mutable_correlation_id() {
  
  if (correlation_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    correlation_id_ = p;
  }
  return correlation_id_;
}
inline ::event_store::client::UUID* BatchAppendReq::mutable_correlation_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.correlation_id)
  return _internal_mutable_correlation_id();
}
inline void BatchAppendReq::set_allocated_correlation_id(::event_store::client::UUID* correlation_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(correlation_id_);
  }
  if (correlation_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(correlation_id)->GetArena();
    if (message_arena != submessage_arena) {
      correlation_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, correlation_id, submessage_arena);
    }
    
  } else {
    
  }
  correlation_id_ = correlation_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.correlation_id)
}

// .event_store.client.streams.BatchAppendReq.Options options = 2;
inline bool BatchAppendReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool BatchAppendReq::has_options() const {
  return _internal_has_options();
}
inline void BatchAppendReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::streams::BatchAppendReq_Options& BatchAppendReq::_internal_options() const {
  const ::event_store::client::streams::BatchAppendReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::streams::BatchAppendReq_Options*>(
      &::event_store::client::streams::_BatchAppendReq_Options_default_instance_);
}
inline const ::event_store::client::streams::BatchAppendReq_Options& BatchAppendReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.options)
  return _internal_options();
}
inline void BatchAppendReq::unsafe_arena_set_allocated_options(
    ::event_store::client::streams::BatchAppendReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendReq.options)
}
inline ::event_store::client::streams::BatchAppendReq_Options* BatchAppendReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::streams::BatchAppendReq_Options* BatchAppendReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendReq.options)
  
  ::event_store::client::streams::BatchAppendReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::streams::BatchAppendReq_Options* BatchAppendReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::streams::BatchAppendReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::streams::BatchAppendReq_Options* BatchAppendReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.options)
  return _internal_mutable_options();
}
inline void BatchAppendReq::set_allocated_options(::event_store::client::streams::BatchAppendReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.options)
}

// repeated .event_store.client.streams.BatchAppendReq.ProposedMessage proposed_messages = 3;
inline int BatchAppendReq::_internal_proposed_messages_size() const {
  return proposed_messages_.size();
}
inline int BatchAppendReq::proposed_messages_size() const {
  return _internal_proposed_messages_size();
}
inline void BatchAppendReq::clear_proposed_messages() {
  proposed_messages_.Clear();
}
inline ::event_store::client::streams::BatchAppendReq_ProposedMessage* BatchAppendReq::mutable_proposed_messages(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendReq.proposed_messages)
  return proposed_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::streams::BatchAppendReq_ProposedMessage >*
BatchAppendReq::mutable_proposed_messages() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.streams.BatchAppendReq.proposed_messages)
  return &proposed_messages_;
}
inline const ::event_store::client::streams::BatchAppendReq_ProposedMessage& BatchAppendReq::_internal_proposed_messages(int index) const {
  return proposed_messages_.Get(index);
}
inline const ::event_store::client::streams::BatchAppendReq_ProposedMessage& BatchAppendReq::proposed_messages(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.proposed_messages)
  return _internal_proposed_messages(index);
}
inline ::event_store::client::streams::BatchAppendReq_ProposedMessage* BatchAppendReq::_internal_add_proposed_messages() {
  return proposed_messages_.Add();
}
inline ::event_store::client::streams::BatchAppendReq_ProposedMessage* BatchAppendReq::add_proposed_messages() {
  // @@protoc_insertion_point(field_add:event_store.client.streams.BatchAppendReq.proposed_messages)
  return _internal_add_proposed_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::streams::BatchAppendReq_ProposedMessage >&
BatchAppendReq::proposed_messages() const {
  // @@protoc_insertion_point(field_list:event_store.client.streams.BatchAppendReq.proposed_messages)
  return proposed_messages_;
}

// bool is_final = 4;
inline void BatchAppendReq::clear_is_final() {
  is_final_ = false;
}
inline bool BatchAppendReq::_internal_is_final() const {
  return is_final_;
}
inline bool BatchAppendReq::is_final() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendReq.is_final)
  return _internal_is_final();
}
inline void BatchAppendReq::_internal_set_is_final(bool value) {
  
  is_final_ = value;
}
inline void BatchAppendReq::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.BatchAppendReq.is_final)
}

// -------------------------------------------------------------------

// BatchAppendResp_Success

// uint64 current_revision = 1;
inline bool BatchAppendResp_Success::_internal_has_current_revision() const {
  return current_revision_option_case() == kCurrentRevision;
}
inline void BatchAppendResp_Success::set_has_current_revision() {
  _oneof_case_[0] = kCurrentRevision;
}
inline void BatchAppendResp_Success::clear_current_revision() {
  if (_internal_has_current_revision()) {
    current_revision_option_.current_revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_current_revision_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchAppendResp_Success::_internal_current_revision() const {
  if (_internal_has_current_revision()) {
    return current_revision_option_.current_revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void BatchAppendResp_Success::_internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_current_revision()) {
    clear_current_revision_option();
    set_has_current_revision();
  }
  current_revision_option_.current_revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchAppendResp_Success::current_revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.Success.current_revision)
  return _internal_current_revision();
}
inline void BatchAppendResp_Success::set_current_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.BatchAppendResp.Success.current_revision)
}

// .google.protobuf.Empty no_stream = 2;
inline bool BatchAppendResp_Success::_internal_has_no_stream() const {
  return current_revision_option_case() == kNoStream;
}
inline bool BatchAppendResp_Success::has_no_stream() const {
  return _internal_has_no_stream();
}
inline void BatchAppendResp_Success::set_has_no_stream() {
  _oneof_case_[0] = kNoStream;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp_Success::release_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.Success.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_current_revision_option();
      PROTOBUF_NAMESPACE_ID::Empty* temp = current_revision_option_.no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    current_revision_option_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp_Success::_internal_no_stream() const {
  return _internal_has_no_stream()
      ? *current_revision_option_.no_stream_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp_Success::no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.Success.no_stream)
  return _internal_no_stream();
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp_Success::unsafe_arena_release_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendResp.Success.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_current_revision_option();
    PROTOBUF_NAMESPACE_ID::Empty* temp = current_revision_option_.no_stream_;
    current_revision_option_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendResp_Success::unsafe_arena_set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream) {
  clear_current_revision_option();
  if (no_stream) {
    set_has_no_stream();
    current_revision_option_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.Success.no_stream)
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp_Success::_internal_mutable_no_stream() {
  if (!_internal_has_no_stream()) {
    clear_current_revision_option();
    set_has_no_stream();
    current_revision_option_.no_stream_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return current_revision_option_.no_stream_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp_Success::mutable_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.Success.no_stream)
  return _internal_mutable_no_stream();
}

// .event_store.client.AllStreamPosition position = 3;
inline bool BatchAppendResp_Success::_internal_has_position() const {
  return position_option_case() == kPosition;
}
inline bool BatchAppendResp_Success::has_position() const {
  return _internal_has_position();
}
inline void BatchAppendResp_Success::set_has_position() {
  _oneof_case_[1] = kPosition;
}
inline ::event_store::client::AllStreamPosition* BatchAppendResp_Success::release_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.Success.position)
  if (_internal_has_position()) {
    clear_has_position_option();
      ::event_store::client::AllStreamPosition* temp = position_option_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::AllStreamPosition& BatchAppendResp_Success::_internal_position() const {
  return _internal_has_position()
      ? *position_option_.position_
      : *reinterpret_cast< ::event_store::client::AllStreamPosition*>(&::event_store::client::_AllStreamPosition_default_instance_);
}
inline const ::event_store::client::AllStreamPosition& BatchAppendResp_Success::position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.Success.position)
  return _internal_position();
}
inline ::event_store::client::AllStreamPosition* BatchAppendResp_Success::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendResp.Success.position)
  if (_internal_has_position()) {
    clear_has_position_option();
    ::event_store::client::AllStreamPosition* temp = position_option_.position_;
    position_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendResp_Success::unsafe_arena_set_allocated_position(::event_store::client::AllStreamPosition* position) {
  clear_position_option();
  if (position) {
    set_has_position();
    position_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.Success.position)
}
inline ::event_store::client::AllStreamPosition* BatchAppendResp_Success::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_position_option();
    set_has_position();
    position_option_.position_ = CreateMaybeMessage< ::event_store::client::AllStreamPosition >(GetArena());
  }
  return position_option_.position_;
}
inline ::event_store::client::AllStreamPosition* BatchAppendResp_Success::mutable_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.Success.position)
  return _internal_mutable_position();
}

// .google.protobuf.Empty no_position = 4;
inline bool BatchAppendResp_Success::_internal_has_no_position() const {
  return position_option_case() == kNoPosition;
}
inline bool BatchAppendResp_Success::has_no_position() const {
  return _internal_has_no_position();
}
inline void BatchAppendResp_Success::set_has_no_position() {
  _oneof_case_[1] = kNoPosition;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp_Success::release_no_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.Success.no_position)
  if (_internal_has_no_position()) {
    clear_has_position_option();
      PROTOBUF_NAMESPACE_ID::Empty* temp = position_option_.no_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_option_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp_Success::_internal_no_position() const {
  return _internal_has_no_position()
      ? *position_option_.no_position_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp_Success::no_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.Success.no_position)
  return _internal_no_position();
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp_Success::unsafe_arena_release_no_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendResp.Success.no_position)
  if (_internal_has_no_position()) {
    clear_has_position_option();
    PROTOBUF_NAMESPACE_ID::Empty* temp = position_option_.no_position_;
    position_option_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendResp_Success::unsafe_arena_set_allocated_no_position(PROTOBUF_NAMESPACE_ID::Empty* no_position) {
  clear_position_option();
  if (no_position) {
    set_has_no_position();
    position_option_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.Success.no_position)
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp_Success::_internal_mutable_no_position() {
  if (!_internal_has_no_position()) {
    clear_position_option();
    set_has_no_position();
    position_option_.no_position_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return position_option_.no_position_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp_Success::mutable_no_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.Success.no_position)
  return _internal_mutable_no_position();
}

inline bool BatchAppendResp_Success::has_current_revision_option() const {
  return current_revision_option_case() != CURRENT_REVISION_OPTION_NOT_SET;
}
inline void BatchAppendResp_Success::clear_has_current_revision_option() {
  _oneof_case_[0] = CURRENT_REVISION_OPTION_NOT_SET;
}
inline bool BatchAppendResp_Success::has_position_option() const {
  return position_option_case() != POSITION_OPTION_NOT_SET;
}
inline void BatchAppendResp_Success::clear_has_position_option() {
  _oneof_case_[1] = POSITION_OPTION_NOT_SET;
}
inline BatchAppendResp_Success::CurrentRevisionOptionCase BatchAppendResp_Success::current_revision_option_case() const {
  return BatchAppendResp_Success::CurrentRevisionOptionCase(_oneof_case_[0]);
}
inline BatchAppendResp_Success::PositionOptionCase BatchAppendResp_Success::position_option_case() const {
  return BatchAppendResp_Success::PositionOptionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// BatchAppendResp

// .event_store.client.UUID correlation_id = 1;
inline bool BatchAppendResp::_internal_has_correlation_id() const {
  return this != internal_default_instance() && correlation_id_ != nullptr;
}
inline bool BatchAppendResp::has_correlation_id() const {
  return _internal_has_correlation_id();
}
inline const ::event_store::client::UUID& BatchAppendResp::_internal_correlation_id() const {
  const ::event_store::client::UUID* p = correlation_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& BatchAppendResp::correlation_id() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.correlation_id)
  return _internal_correlation_id();
}
inline void BatchAppendResp::unsafe_arena_set_allocated_correlation_id(
    ::event_store::client::UUID* correlation_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(correlation_id_);
  }
  correlation_id_ = correlation_id;
  if (correlation_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.correlation_id)
}
inline ::event_store::client::UUID* BatchAppendResp::release_correlation_id() {
  auto temp = unsafe_arena_release_correlation_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* BatchAppendResp::unsafe_arena_release_correlation_id() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.correlation_id)
  
  ::event_store::client::UUID* temp = correlation_id_;
  correlation_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* BatchAppendResp::_internal_mutable_correlation_id() {
  
  if (correlation_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    correlation_id_ = p;
  }
  return correlation_id_;
}
inline ::event_store::client::UUID* BatchAppendResp::mutable_correlation_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.correlation_id)
  return _internal_mutable_correlation_id();
}
inline void BatchAppendResp::set_allocated_correlation_id(::event_store::client::UUID* correlation_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(correlation_id_);
  }
  if (correlation_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(correlation_id)->GetArena();
    if (message_arena != submessage_arena) {
      correlation_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, correlation_id, submessage_arena);
    }
    
  } else {
    
  }
  correlation_id_ = correlation_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.correlation_id)
}

// .google.rpc.Status error = 2;
inline bool BatchAppendResp::_internal_has_error() const {
  return result_case() == kError;
}
inline bool BatchAppendResp::has_error() const {
  return _internal_has_error();
}
inline void BatchAppendResp::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::google::rpc::Status* BatchAppendResp::release_error() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.error)
  if (_internal_has_error()) {
    clear_has_result();
      ::google::rpc::Status* temp = result_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::rpc::Status& BatchAppendResp::_internal_error() const {
  return _internal_has_error()
      ? *result_.error_
      : *reinterpret_cast< ::google::rpc::Status*>(&::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& BatchAppendResp::error() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.error)
  return _internal_error();
}
inline ::google::rpc::Status* BatchAppendResp::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendResp.error)
  if (_internal_has_error()) {
    clear_has_result();
    ::google::rpc::Status* temp = result_.error_;
    result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendResp::unsafe_arena_set_allocated_error(::google::rpc::Status* error) {
  clear_result();
  if (error) {
    set_has_error();
    result_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.error)
}
inline ::google::rpc::Status* BatchAppendResp::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_result();
    set_has_error();
    result_.error_ = CreateMaybeMessage< ::google::rpc::Status >(GetArena());
  }
  return result_.error_;
}
inline ::google::rpc::Status* BatchAppendResp::mutable_error() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.error)
  return _internal_mutable_error();
}

// .event_store.client.streams.BatchAppendResp.Success success = 3;
inline bool BatchAppendResp::_internal_has_success() const {
  return result_case() == kSuccess;
}
inline bool BatchAppendResp::has_success() const {
  return _internal_has_success();
}
inline void BatchAppendResp::set_has_success() {
  _oneof_case_[0] = kSuccess;
}
inline void BatchAppendResp::clear_success() {
  if (_internal_has_success()) {
    if (GetArena() == nullptr) {
      delete result_.success_;
    }
    clear_has_result();
  }
}
inline ::event_store::client::streams::BatchAppendResp_Success* BatchAppendResp::release_success() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.success)
  if (_internal_has_success()) {
    clear_has_result();
      ::event_store::client::streams::BatchAppendResp_Success* temp = result_.success_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::BatchAppendResp_Success& BatchAppendResp::_internal_success() const {
  return _internal_has_success()
      ? *result_.success_
      : *reinterpret_cast< ::event_store::client::streams::BatchAppendResp_Success*>(&::event_store::client::streams::_BatchAppendResp_Success_default_instance_);
}
inline const ::event_store::client::streams::BatchAppendResp_Success& BatchAppendResp::success() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.success)
  return _internal_success();
}
inline ::event_store::client::streams::BatchAppendResp_Success* BatchAppendResp::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendResp.success)
  if (_internal_has_success()) {
    clear_has_result();
    ::event_store::client::streams::BatchAppendResp_Success* temp = result_.success_;
    result_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendResp::unsafe_arena_set_allocated_success(::event_store::client::streams::BatchAppendResp_Success* success) {
  clear_result();
  if (success) {
    set_has_success();
    result_.success_ = success;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.success)
}
inline ::event_store::client::streams::BatchAppendResp_Success* BatchAppendResp::_internal_mutable_success() {
  if (!_internal_has_success()) {
    clear_result();
    set_has_success();
    result_.success_ = CreateMaybeMessage< ::event_store::client::streams::BatchAppendResp_Success >(GetArena());
  }
  return result_.success_;
}
inline ::event_store::client::streams::BatchAppendResp_Success* BatchAppendResp::mutable_success() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.success)
  return _internal_mutable_success();
}

// .event_store.client.StreamIdentifier stream_identifier = 4;
inline bool BatchAppendResp::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool BatchAppendResp::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& BatchAppendResp::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& BatchAppendResp::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.stream_identifier)
  return _internal_stream_identifier();
}
inline void BatchAppendResp::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* BatchAppendResp::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* BatchAppendResp::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* BatchAppendResp::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* BatchAppendResp::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void BatchAppendResp::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.stream_identifier)
}

// uint64 stream_position = 5;
inline bool BatchAppendResp::_internal_has_stream_position() const {
  return expected_stream_position_case() == kStreamPosition;
}
inline void BatchAppendResp::set_has_stream_position() {
  _oneof_case_[1] = kStreamPosition;
}
inline void BatchAppendResp::clear_stream_position() {
  if (_internal_has_stream_position()) {
    expected_stream_position_.stream_position_ = PROTOBUF_ULONGLONG(0);
    clear_has_expected_stream_position();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchAppendResp::_internal_stream_position() const {
  if (_internal_has_stream_position()) {
    return expected_stream_position_.stream_position_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void BatchAppendResp::_internal_set_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_stream_position()) {
    clear_expected_stream_position();
    set_has_stream_position();
  }
  expected_stream_position_.stream_position_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchAppendResp::stream_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.stream_position)
  return _internal_stream_position();
}
inline void BatchAppendResp::set_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.BatchAppendResp.stream_position)
}

// .google.protobuf.Empty no_stream = 6;
inline bool BatchAppendResp::_internal_has_no_stream() const {
  return expected_stream_position_case() == kNoStream;
}
inline bool BatchAppendResp::has_no_stream() const {
  return _internal_has_no_stream();
}
inline void BatchAppendResp::set_has_no_stream() {
  _oneof_case_[1] = kNoStream;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::release_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_position();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp::_internal_no_stream() const {
  return _internal_has_no_stream()
      ? *expected_stream_position_.no_stream_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp::no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.no_stream)
  return _internal_no_stream();
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::unsafe_arena_release_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendResp.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_position();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.no_stream_;
    expected_stream_position_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendResp::unsafe_arena_set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream) {
  clear_expected_stream_position();
  if (no_stream) {
    set_has_no_stream();
    expected_stream_position_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.no_stream)
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::_internal_mutable_no_stream() {
  if (!_internal_has_no_stream()) {
    clear_expected_stream_position();
    set_has_no_stream();
    expected_stream_position_.no_stream_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_.no_stream_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::mutable_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.no_stream)
  return _internal_mutable_no_stream();
}

// .google.protobuf.Empty any = 7;
inline bool BatchAppendResp::_internal_has_any() const {
  return expected_stream_position_case() == kAny;
}
inline bool BatchAppendResp::has_any() const {
  return _internal_has_any();
}
inline void BatchAppendResp::set_has_any() {
  _oneof_case_[1] = kAny;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::release_any() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_position();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp::_internal_any() const {
  return _internal_has_any()
      ? *expected_stream_position_.any_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp::any() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.any)
  return _internal_any();
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::unsafe_arena_release_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendResp.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_position();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.any_;
    expected_stream_position_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendResp::unsafe_arena_set_allocated_any(PROTOBUF_NAMESPACE_ID::Empty* any) {
  clear_expected_stream_position();
  if (any) {
    set_has_any();
    expected_stream_position_.any_ = any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.any)
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::_internal_mutable_any() {
  if (!_internal_has_any()) {
    clear_expected_stream_position();
    set_has_any();
    expected_stream_position_.any_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_.any_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::mutable_any() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.any)
  return _internal_mutable_any();
}

// .google.protobuf.Empty stream_exists = 8;
inline bool BatchAppendResp::_internal_has_stream_exists() const {
  return expected_stream_position_case() == kStreamExists;
}
inline bool BatchAppendResp::has_stream_exists() const {
  return _internal_has_stream_exists();
}
inline void BatchAppendResp::set_has_stream_exists() {
  _oneof_case_[1] = kStreamExists;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::release_stream_exists() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.BatchAppendResp.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_position();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.stream_exists_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp::_internal_stream_exists() const {
  return _internal_has_stream_exists()
      ? *expected_stream_position_.stream_exists_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& BatchAppendResp::stream_exists() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.BatchAppendResp.stream_exists)
  return _internal_stream_exists();
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::unsafe_arena_release_stream_exists() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.BatchAppendResp.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_position();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_.stream_exists_;
    expected_stream_position_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatchAppendResp::unsafe_arena_set_allocated_stream_exists(PROTOBUF_NAMESPACE_ID::Empty* stream_exists) {
  clear_expected_stream_position();
  if (stream_exists) {
    set_has_stream_exists();
    expected_stream_position_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.BatchAppendResp.stream_exists)
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::_internal_mutable_stream_exists() {
  if (!_internal_has_stream_exists()) {
    clear_expected_stream_position();
    set_has_stream_exists();
    expected_stream_position_.stream_exists_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_.stream_exists_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* BatchAppendResp::mutable_stream_exists() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.BatchAppendResp.stream_exists)
  return _internal_mutable_stream_exists();
}

inline bool BatchAppendResp::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void BatchAppendResp::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline bool BatchAppendResp::has_expected_stream_position() const {
  return expected_stream_position_case() != EXPECTED_STREAM_POSITION_NOT_SET;
}
inline void BatchAppendResp::clear_has_expected_stream_position() {
  _oneof_case_[1] = EXPECTED_STREAM_POSITION_NOT_SET;
}
inline BatchAppendResp::ResultCase BatchAppendResp::result_case() const {
  return BatchAppendResp::ResultCase(_oneof_case_[0]);
}
inline BatchAppendResp::ExpectedStreamPositionCase BatchAppendResp::expected_stream_position_case() const {
  return BatchAppendResp::ExpectedStreamPositionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// DeleteReq_Options

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool DeleteReq_Options::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool DeleteReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& DeleteReq_Options::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& DeleteReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.DeleteReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* DeleteReq_Options::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* DeleteReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.DeleteReq.Options.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* DeleteReq_Options::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* DeleteReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.DeleteReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void DeleteReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.DeleteReq.Options.stream_identifier)
}

// uint64 revision = 2;
inline bool DeleteReq_Options::_internal_has_revision() const {
  return expected_stream_revision_case() == kRevision;
}
inline void DeleteReq_Options::set_has_revision() {
  _oneof_case_[0] = kRevision;
}
inline void DeleteReq_Options::clear_revision() {
  if (_internal_has_revision()) {
    expected_stream_revision_.revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_expected_stream_revision();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteReq_Options::_internal_revision() const {
  if (_internal_has_revision()) {
    return expected_stream_revision_.revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void DeleteReq_Options::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_revision()) {
    clear_expected_stream_revision();
    set_has_revision();
  }
  expected_stream_revision_.revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteReq_Options::revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteReq.Options.revision)
  return _internal_revision();
}
inline void DeleteReq_Options::set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.DeleteReq.Options.revision)
}

// .event_store.client.Empty no_stream = 3;
inline bool DeleteReq_Options::_internal_has_no_stream() const {
  return expected_stream_revision_case() == kNoStream;
}
inline bool DeleteReq_Options::has_no_stream() const {
  return _internal_has_no_stream();
}
inline void DeleteReq_Options::set_has_no_stream() {
  _oneof_case_[0] = kNoStream;
}
inline ::event_store::client::Empty* DeleteReq_Options::release_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.DeleteReq.Options.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& DeleteReq_Options::_internal_no_stream() const {
  return _internal_has_no_stream()
      ? *expected_stream_revision_.no_stream_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& DeleteReq_Options::no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteReq.Options.no_stream)
  return _internal_no_stream();
}
inline ::event_store::client::Empty* DeleteReq_Options::unsafe_arena_release_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.DeleteReq.Options.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.no_stream_;
    expected_stream_revision_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_no_stream(::event_store::client::Empty* no_stream) {
  clear_expected_stream_revision();
  if (no_stream) {
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.DeleteReq.Options.no_stream)
}
inline ::event_store::client::Empty* DeleteReq_Options::_internal_mutable_no_stream() {
  if (!_internal_has_no_stream()) {
    clear_expected_stream_revision();
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.no_stream_;
}
inline ::event_store::client::Empty* DeleteReq_Options::mutable_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.DeleteReq.Options.no_stream)
  return _internal_mutable_no_stream();
}

// .event_store.client.Empty any = 4;
inline bool DeleteReq_Options::_internal_has_any() const {
  return expected_stream_revision_case() == kAny;
}
inline bool DeleteReq_Options::has_any() const {
  return _internal_has_any();
}
inline void DeleteReq_Options::set_has_any() {
  _oneof_case_[0] = kAny;
}
inline ::event_store::client::Empty* DeleteReq_Options::release_any() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.DeleteReq.Options.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& DeleteReq_Options::_internal_any() const {
  return _internal_has_any()
      ? *expected_stream_revision_.any_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& DeleteReq_Options::any() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteReq.Options.any)
  return _internal_any();
}
inline ::event_store::client::Empty* DeleteReq_Options::unsafe_arena_release_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.DeleteReq.Options.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.any_;
    expected_stream_revision_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_any(::event_store::client::Empty* any) {
  clear_expected_stream_revision();
  if (any) {
    set_has_any();
    expected_stream_revision_.any_ = any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.DeleteReq.Options.any)
}
inline ::event_store::client::Empty* DeleteReq_Options::_internal_mutable_any() {
  if (!_internal_has_any()) {
    clear_expected_stream_revision();
    set_has_any();
    expected_stream_revision_.any_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.any_;
}
inline ::event_store::client::Empty* DeleteReq_Options::mutable_any() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.DeleteReq.Options.any)
  return _internal_mutable_any();
}

// .event_store.client.Empty stream_exists = 5;
inline bool DeleteReq_Options::_internal_has_stream_exists() const {
  return expected_stream_revision_case() == kStreamExists;
}
inline bool DeleteReq_Options::has_stream_exists() const {
  return _internal_has_stream_exists();
}
inline void DeleteReq_Options::set_has_stream_exists() {
  _oneof_case_[0] = kStreamExists;
}
inline ::event_store::client::Empty* DeleteReq_Options::release_stream_exists() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.DeleteReq.Options.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.stream_exists_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& DeleteReq_Options::_internal_stream_exists() const {
  return _internal_has_stream_exists()
      ? *expected_stream_revision_.stream_exists_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& DeleteReq_Options::stream_exists() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteReq.Options.stream_exists)
  return _internal_stream_exists();
}
inline ::event_store::client::Empty* DeleteReq_Options::unsafe_arena_release_stream_exists() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.DeleteReq.Options.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.stream_exists_;
    expected_stream_revision_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_stream_exists(::event_store::client::Empty* stream_exists) {
  clear_expected_stream_revision();
  if (stream_exists) {
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.DeleteReq.Options.stream_exists)
}
inline ::event_store::client::Empty* DeleteReq_Options::_internal_mutable_stream_exists() {
  if (!_internal_has_stream_exists()) {
    clear_expected_stream_revision();
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.stream_exists_;
}
inline ::event_store::client::Empty* DeleteReq_Options::mutable_stream_exists() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.DeleteReq.Options.stream_exists)
  return _internal_mutable_stream_exists();
}

inline bool DeleteReq_Options::has_expected_stream_revision() const {
  return expected_stream_revision_case() != EXPECTED_STREAM_REVISION_NOT_SET;
}
inline void DeleteReq_Options::clear_has_expected_stream_revision() {
  _oneof_case_[0] = EXPECTED_STREAM_REVISION_NOT_SET;
}
inline DeleteReq_Options::ExpectedStreamRevisionCase DeleteReq_Options::expected_stream_revision_case() const {
  return DeleteReq_Options::ExpectedStreamRevisionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteReq

// .event_store.client.streams.DeleteReq.Options options = 1;
inline bool DeleteReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DeleteReq::has_options() const {
  return _internal_has_options();
}
inline void DeleteReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::streams::DeleteReq_Options& DeleteReq::_internal_options() const {
  const ::event_store::client::streams::DeleteReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::streams::DeleteReq_Options*>(
      &::event_store::client::streams::_DeleteReq_Options_default_instance_);
}
inline const ::event_store::client::streams::DeleteReq_Options& DeleteReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteReq.options)
  return _internal_options();
}
inline void DeleteReq::unsafe_arena_set_allocated_options(
    ::event_store::client::streams::DeleteReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.DeleteReq.options)
}
inline ::event_store::client::streams::DeleteReq_Options* DeleteReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::streams::DeleteReq_Options* DeleteReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.DeleteReq.options)
  
  ::event_store::client::streams::DeleteReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::streams::DeleteReq_Options* DeleteReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::streams::DeleteReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::streams::DeleteReq_Options* DeleteReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.DeleteReq.options)
  return _internal_mutable_options();
}
inline void DeleteReq::set_allocated_options(::event_store::client::streams::DeleteReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.DeleteReq.options)
}

// -------------------------------------------------------------------

// DeleteResp_Position

// uint64 commit_position = 1;
inline void DeleteResp_Position::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteResp_Position::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteResp_Position::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteResp.Position.commit_position)
  return _internal_commit_position();
}
inline void DeleteResp_Position::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void DeleteResp_Position::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.DeleteResp.Position.commit_position)
}

// uint64 prepare_position = 2;
inline void DeleteResp_Position::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteResp_Position::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteResp_Position::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteResp.Position.prepare_position)
  return _internal_prepare_position();
}
inline void DeleteResp_Position::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void DeleteResp_Position::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.DeleteResp.Position.prepare_position)
}

// -------------------------------------------------------------------

// DeleteResp

// .event_store.client.streams.DeleteResp.Position position = 1;
inline bool DeleteResp::_internal_has_position() const {
  return position_option_case() == kPosition;
}
inline bool DeleteResp::has_position() const {
  return _internal_has_position();
}
inline void DeleteResp::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void DeleteResp::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete position_option_.position_;
    }
    clear_has_position_option();
  }
}
inline ::event_store::client::streams::DeleteResp_Position* DeleteResp::release_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.DeleteResp.position)
  if (_internal_has_position()) {
    clear_has_position_option();
      ::event_store::client::streams::DeleteResp_Position* temp = position_option_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::DeleteResp_Position& DeleteResp::_internal_position() const {
  return _internal_has_position()
      ? *position_option_.position_
      : *reinterpret_cast< ::event_store::client::streams::DeleteResp_Position*>(&::event_store::client::streams::_DeleteResp_Position_default_instance_);
}
inline const ::event_store::client::streams::DeleteResp_Position& DeleteResp::position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteResp.position)
  return _internal_position();
}
inline ::event_store::client::streams::DeleteResp_Position* DeleteResp::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.DeleteResp.position)
  if (_internal_has_position()) {
    clear_has_position_option();
    ::event_store::client::streams::DeleteResp_Position* temp = position_option_.position_;
    position_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteResp::unsafe_arena_set_allocated_position(::event_store::client::streams::DeleteResp_Position* position) {
  clear_position_option();
  if (position) {
    set_has_position();
    position_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.DeleteResp.position)
}
inline ::event_store::client::streams::DeleteResp_Position* DeleteResp::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_position_option();
    set_has_position();
    position_option_.position_ = CreateMaybeMessage< ::event_store::client::streams::DeleteResp_Position >(GetArena());
  }
  return position_option_.position_;
}
inline ::event_store::client::streams::DeleteResp_Position* DeleteResp::mutable_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.DeleteResp.position)
  return _internal_mutable_position();
}

// .event_store.client.Empty no_position = 2;
inline bool DeleteResp::_internal_has_no_position() const {
  return position_option_case() == kNoPosition;
}
inline bool DeleteResp::has_no_position() const {
  return _internal_has_no_position();
}
inline void DeleteResp::set_has_no_position() {
  _oneof_case_[0] = kNoPosition;
}
inline ::event_store::client::Empty* DeleteResp::release_no_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.DeleteResp.no_position)
  if (_internal_has_no_position()) {
    clear_has_position_option();
      ::event_store::client::Empty* temp = position_option_.no_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_option_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& DeleteResp::_internal_no_position() const {
  return _internal_has_no_position()
      ? *position_option_.no_position_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& DeleteResp::no_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.DeleteResp.no_position)
  return _internal_no_position();
}
inline ::event_store::client::Empty* DeleteResp::unsafe_arena_release_no_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.DeleteResp.no_position)
  if (_internal_has_no_position()) {
    clear_has_position_option();
    ::event_store::client::Empty* temp = position_option_.no_position_;
    position_option_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteResp::unsafe_arena_set_allocated_no_position(::event_store::client::Empty* no_position) {
  clear_position_option();
  if (no_position) {
    set_has_no_position();
    position_option_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.DeleteResp.no_position)
}
inline ::event_store::client::Empty* DeleteResp::_internal_mutable_no_position() {
  if (!_internal_has_no_position()) {
    clear_position_option();
    set_has_no_position();
    position_option_.no_position_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return position_option_.no_position_;
}
inline ::event_store::client::Empty* DeleteResp::mutable_no_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.DeleteResp.no_position)
  return _internal_mutable_no_position();
}

inline bool DeleteResp::has_position_option() const {
  return position_option_case() != POSITION_OPTION_NOT_SET;
}
inline void DeleteResp::clear_has_position_option() {
  _oneof_case_[0] = POSITION_OPTION_NOT_SET;
}
inline DeleteResp::PositionOptionCase DeleteResp::position_option_case() const {
  return DeleteResp::PositionOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TombstoneReq_Options

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool TombstoneReq_Options::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool TombstoneReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& TombstoneReq_Options::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& TombstoneReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline void TombstoneReq_Options::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.TombstoneReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* TombstoneReq_Options::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* TombstoneReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.TombstoneReq.Options.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* TombstoneReq_Options::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* TombstoneReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.TombstoneReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void TombstoneReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.TombstoneReq.Options.stream_identifier)
}

// uint64 revision = 2;
inline bool TombstoneReq_Options::_internal_has_revision() const {
  return expected_stream_revision_case() == kRevision;
}
inline void TombstoneReq_Options::set_has_revision() {
  _oneof_case_[0] = kRevision;
}
inline void TombstoneReq_Options::clear_revision() {
  if (_internal_has_revision()) {
    expected_stream_revision_.revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_expected_stream_revision();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TombstoneReq_Options::_internal_revision() const {
  if (_internal_has_revision()) {
    return expected_stream_revision_.revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void TombstoneReq_Options::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_revision()) {
    clear_expected_stream_revision();
    set_has_revision();
  }
  expected_stream_revision_.revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TombstoneReq_Options::revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneReq.Options.revision)
  return _internal_revision();
}
inline void TombstoneReq_Options::set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.TombstoneReq.Options.revision)
}

// .event_store.client.Empty no_stream = 3;
inline bool TombstoneReq_Options::_internal_has_no_stream() const {
  return expected_stream_revision_case() == kNoStream;
}
inline bool TombstoneReq_Options::has_no_stream() const {
  return _internal_has_no_stream();
}
inline void TombstoneReq_Options::set_has_no_stream() {
  _oneof_case_[0] = kNoStream;
}
inline ::event_store::client::Empty* TombstoneReq_Options::release_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.TombstoneReq.Options.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& TombstoneReq_Options::_internal_no_stream() const {
  return _internal_has_no_stream()
      ? *expected_stream_revision_.no_stream_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& TombstoneReq_Options::no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneReq.Options.no_stream)
  return _internal_no_stream();
}
inline ::event_store::client::Empty* TombstoneReq_Options::unsafe_arena_release_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.TombstoneReq.Options.no_stream)
  if (_internal_has_no_stream()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.no_stream_;
    expected_stream_revision_.no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TombstoneReq_Options::unsafe_arena_set_allocated_no_stream(::event_store::client::Empty* no_stream) {
  clear_expected_stream_revision();
  if (no_stream) {
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.TombstoneReq.Options.no_stream)
}
inline ::event_store::client::Empty* TombstoneReq_Options::_internal_mutable_no_stream() {
  if (!_internal_has_no_stream()) {
    clear_expected_stream_revision();
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.no_stream_;
}
inline ::event_store::client::Empty* TombstoneReq_Options::mutable_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.TombstoneReq.Options.no_stream)
  return _internal_mutable_no_stream();
}

// .event_store.client.Empty any = 4;
inline bool TombstoneReq_Options::_internal_has_any() const {
  return expected_stream_revision_case() == kAny;
}
inline bool TombstoneReq_Options::has_any() const {
  return _internal_has_any();
}
inline void TombstoneReq_Options::set_has_any() {
  _oneof_case_[0] = kAny;
}
inline ::event_store::client::Empty* TombstoneReq_Options::release_any() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.TombstoneReq.Options.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& TombstoneReq_Options::_internal_any() const {
  return _internal_has_any()
      ? *expected_stream_revision_.any_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& TombstoneReq_Options::any() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneReq.Options.any)
  return _internal_any();
}
inline ::event_store::client::Empty* TombstoneReq_Options::unsafe_arena_release_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.TombstoneReq.Options.any)
  if (_internal_has_any()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.any_;
    expected_stream_revision_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TombstoneReq_Options::unsafe_arena_set_allocated_any(::event_store::client::Empty* any) {
  clear_expected_stream_revision();
  if (any) {
    set_has_any();
    expected_stream_revision_.any_ = any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.TombstoneReq.Options.any)
}
inline ::event_store::client::Empty* TombstoneReq_Options::_internal_mutable_any() {
  if (!_internal_has_any()) {
    clear_expected_stream_revision();
    set_has_any();
    expected_stream_revision_.any_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.any_;
}
inline ::event_store::client::Empty* TombstoneReq_Options::mutable_any() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.TombstoneReq.Options.any)
  return _internal_mutable_any();
}

// .event_store.client.Empty stream_exists = 5;
inline bool TombstoneReq_Options::_internal_has_stream_exists() const {
  return expected_stream_revision_case() == kStreamExists;
}
inline bool TombstoneReq_Options::has_stream_exists() const {
  return _internal_has_stream_exists();
}
inline void TombstoneReq_Options::set_has_stream_exists() {
  _oneof_case_[0] = kStreamExists;
}
inline ::event_store::client::Empty* TombstoneReq_Options::release_stream_exists() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.TombstoneReq.Options.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_revision();
      ::event_store::client::Empty* temp = expected_stream_revision_.stream_exists_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_revision_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& TombstoneReq_Options::_internal_stream_exists() const {
  return _internal_has_stream_exists()
      ? *expected_stream_revision_.stream_exists_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& TombstoneReq_Options::stream_exists() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneReq.Options.stream_exists)
  return _internal_stream_exists();
}
inline ::event_store::client::Empty* TombstoneReq_Options::unsafe_arena_release_stream_exists() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.TombstoneReq.Options.stream_exists)
  if (_internal_has_stream_exists()) {
    clear_has_expected_stream_revision();
    ::event_store::client::Empty* temp = expected_stream_revision_.stream_exists_;
    expected_stream_revision_.stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TombstoneReq_Options::unsafe_arena_set_allocated_stream_exists(::event_store::client::Empty* stream_exists) {
  clear_expected_stream_revision();
  if (stream_exists) {
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.TombstoneReq.Options.stream_exists)
}
inline ::event_store::client::Empty* TombstoneReq_Options::_internal_mutable_stream_exists() {
  if (!_internal_has_stream_exists()) {
    clear_expected_stream_revision();
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return expected_stream_revision_.stream_exists_;
}
inline ::event_store::client::Empty* TombstoneReq_Options::mutable_stream_exists() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.TombstoneReq.Options.stream_exists)
  return _internal_mutable_stream_exists();
}

inline bool TombstoneReq_Options::has_expected_stream_revision() const {
  return expected_stream_revision_case() != EXPECTED_STREAM_REVISION_NOT_SET;
}
inline void TombstoneReq_Options::clear_has_expected_stream_revision() {
  _oneof_case_[0] = EXPECTED_STREAM_REVISION_NOT_SET;
}
inline TombstoneReq_Options::ExpectedStreamRevisionCase TombstoneReq_Options::expected_stream_revision_case() const {
  return TombstoneReq_Options::ExpectedStreamRevisionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TombstoneReq

// .event_store.client.streams.TombstoneReq.Options options = 1;
inline bool TombstoneReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool TombstoneReq::has_options() const {
  return _internal_has_options();
}
inline void TombstoneReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::streams::TombstoneReq_Options& TombstoneReq::_internal_options() const {
  const ::event_store::client::streams::TombstoneReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::streams::TombstoneReq_Options*>(
      &::event_store::client::streams::_TombstoneReq_Options_default_instance_);
}
inline const ::event_store::client::streams::TombstoneReq_Options& TombstoneReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneReq.options)
  return _internal_options();
}
inline void TombstoneReq::unsafe_arena_set_allocated_options(
    ::event_store::client::streams::TombstoneReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.TombstoneReq.options)
}
inline ::event_store::client::streams::TombstoneReq_Options* TombstoneReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::streams::TombstoneReq_Options* TombstoneReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.TombstoneReq.options)
  
  ::event_store::client::streams::TombstoneReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::streams::TombstoneReq_Options* TombstoneReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::streams::TombstoneReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::streams::TombstoneReq_Options* TombstoneReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.TombstoneReq.options)
  return _internal_mutable_options();
}
inline void TombstoneReq::set_allocated_options(::event_store::client::streams::TombstoneReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.TombstoneReq.options)
}

// -------------------------------------------------------------------

// TombstoneResp_Position

// uint64 commit_position = 1;
inline void TombstoneResp_Position::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TombstoneResp_Position::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TombstoneResp_Position::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneResp.Position.commit_position)
  return _internal_commit_position();
}
inline void TombstoneResp_Position::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void TombstoneResp_Position::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.TombstoneResp.Position.commit_position)
}

// uint64 prepare_position = 2;
inline void TombstoneResp_Position::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TombstoneResp_Position::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TombstoneResp_Position::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneResp.Position.prepare_position)
  return _internal_prepare_position();
}
inline void TombstoneResp_Position::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void TombstoneResp_Position::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.streams.TombstoneResp.Position.prepare_position)
}

// -------------------------------------------------------------------

// TombstoneResp

// .event_store.client.streams.TombstoneResp.Position position = 1;
inline bool TombstoneResp::_internal_has_position() const {
  return position_option_case() == kPosition;
}
inline bool TombstoneResp::has_position() const {
  return _internal_has_position();
}
inline void TombstoneResp::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void TombstoneResp::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete position_option_.position_;
    }
    clear_has_position_option();
  }
}
inline ::event_store::client::streams::TombstoneResp_Position* TombstoneResp::release_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.TombstoneResp.position)
  if (_internal_has_position()) {
    clear_has_position_option();
      ::event_store::client::streams::TombstoneResp_Position* temp = position_option_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::streams::TombstoneResp_Position& TombstoneResp::_internal_position() const {
  return _internal_has_position()
      ? *position_option_.position_
      : *reinterpret_cast< ::event_store::client::streams::TombstoneResp_Position*>(&::event_store::client::streams::_TombstoneResp_Position_default_instance_);
}
inline const ::event_store::client::streams::TombstoneResp_Position& TombstoneResp::position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneResp.position)
  return _internal_position();
}
inline ::event_store::client::streams::TombstoneResp_Position* TombstoneResp::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.TombstoneResp.position)
  if (_internal_has_position()) {
    clear_has_position_option();
    ::event_store::client::streams::TombstoneResp_Position* temp = position_option_.position_;
    position_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TombstoneResp::unsafe_arena_set_allocated_position(::event_store::client::streams::TombstoneResp_Position* position) {
  clear_position_option();
  if (position) {
    set_has_position();
    position_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.TombstoneResp.position)
}
inline ::event_store::client::streams::TombstoneResp_Position* TombstoneResp::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_position_option();
    set_has_position();
    position_option_.position_ = CreateMaybeMessage< ::event_store::client::streams::TombstoneResp_Position >(GetArena());
  }
  return position_option_.position_;
}
inline ::event_store::client::streams::TombstoneResp_Position* TombstoneResp::mutable_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.TombstoneResp.position)
  return _internal_mutable_position();
}

// .event_store.client.Empty no_position = 2;
inline bool TombstoneResp::_internal_has_no_position() const {
  return position_option_case() == kNoPosition;
}
inline bool TombstoneResp::has_no_position() const {
  return _internal_has_no_position();
}
inline void TombstoneResp::set_has_no_position() {
  _oneof_case_[0] = kNoPosition;
}
inline ::event_store::client::Empty* TombstoneResp::release_no_position() {
  // @@protoc_insertion_point(field_release:event_store.client.streams.TombstoneResp.no_position)
  if (_internal_has_no_position()) {
    clear_has_position_option();
      ::event_store::client::Empty* temp = position_option_.no_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_option_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& TombstoneResp::_internal_no_position() const {
  return _internal_has_no_position()
      ? *position_option_.no_position_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& TombstoneResp::no_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.streams.TombstoneResp.no_position)
  return _internal_no_position();
}
inline ::event_store::client::Empty* TombstoneResp::unsafe_arena_release_no_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.streams.TombstoneResp.no_position)
  if (_internal_has_no_position()) {
    clear_has_position_option();
    ::event_store::client::Empty* temp = position_option_.no_position_;
    position_option_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TombstoneResp::unsafe_arena_set_allocated_no_position(::event_store::client::Empty* no_position) {
  clear_position_option();
  if (no_position) {
    set_has_no_position();
    position_option_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.streams.TombstoneResp.no_position)
}
inline ::event_store::client::Empty* TombstoneResp::_internal_mutable_no_position() {
  if (!_internal_has_no_position()) {
    clear_position_option();
    set_has_no_position();
    position_option_.no_position_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return position_option_.no_position_;
}
inline ::event_store::client::Empty* TombstoneResp::mutable_no_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.streams.TombstoneResp.no_position)
  return _internal_mutable_no_position();
}

inline bool TombstoneResp::has_position_option() const {
  return position_option_case() != POSITION_OPTION_NOT_SET;
}
inline void TombstoneResp::clear_has_position_option() {
  _oneof_case_[0] = POSITION_OPTION_NOT_SET;
}
inline TombstoneResp::PositionOptionCase TombstoneResp::position_option_case() const {
  return TombstoneResp::PositionOptionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace streams
}  // namespace client
}  // namespace event_store

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::event_store::client::streams::ReadReq_Options_ReadDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event_store::client::streams::ReadReq_Options_ReadDirection>() {
  return ::event_store::client::streams::ReadReq_Options_ReadDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_streams_2eproto

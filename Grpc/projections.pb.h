// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projections.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_projections_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_projections_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include "shared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_projections_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_projections_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_projections_2eproto;
namespace event_store {
namespace client {
namespace projections {
class CreateReq;
class CreateReqDefaultTypeInternal;
extern CreateReqDefaultTypeInternal _CreateReq_default_instance_;
class CreateReq_Options;
class CreateReq_OptionsDefaultTypeInternal;
extern CreateReq_OptionsDefaultTypeInternal _CreateReq_Options_default_instance_;
class CreateReq_Options_Continuous;
class CreateReq_Options_ContinuousDefaultTypeInternal;
extern CreateReq_Options_ContinuousDefaultTypeInternal _CreateReq_Options_Continuous_default_instance_;
class CreateReq_Options_Transient;
class CreateReq_Options_TransientDefaultTypeInternal;
extern CreateReq_Options_TransientDefaultTypeInternal _CreateReq_Options_Transient_default_instance_;
class CreateResp;
class CreateRespDefaultTypeInternal;
extern CreateRespDefaultTypeInternal _CreateResp_default_instance_;
class DeleteReq;
class DeleteReqDefaultTypeInternal;
extern DeleteReqDefaultTypeInternal _DeleteReq_default_instance_;
class DeleteReq_Options;
class DeleteReq_OptionsDefaultTypeInternal;
extern DeleteReq_OptionsDefaultTypeInternal _DeleteReq_Options_default_instance_;
class DeleteResp;
class DeleteRespDefaultTypeInternal;
extern DeleteRespDefaultTypeInternal _DeleteResp_default_instance_;
class DisableReq;
class DisableReqDefaultTypeInternal;
extern DisableReqDefaultTypeInternal _DisableReq_default_instance_;
class DisableReq_Options;
class DisableReq_OptionsDefaultTypeInternal;
extern DisableReq_OptionsDefaultTypeInternal _DisableReq_Options_default_instance_;
class DisableResp;
class DisableRespDefaultTypeInternal;
extern DisableRespDefaultTypeInternal _DisableResp_default_instance_;
class EnableReq;
class EnableReqDefaultTypeInternal;
extern EnableReqDefaultTypeInternal _EnableReq_default_instance_;
class EnableReq_Options;
class EnableReq_OptionsDefaultTypeInternal;
extern EnableReq_OptionsDefaultTypeInternal _EnableReq_Options_default_instance_;
class EnableResp;
class EnableRespDefaultTypeInternal;
extern EnableRespDefaultTypeInternal _EnableResp_default_instance_;
class ResetReq;
class ResetReqDefaultTypeInternal;
extern ResetReqDefaultTypeInternal _ResetReq_default_instance_;
class ResetReq_Options;
class ResetReq_OptionsDefaultTypeInternal;
extern ResetReq_OptionsDefaultTypeInternal _ResetReq_Options_default_instance_;
class ResetResp;
class ResetRespDefaultTypeInternal;
extern ResetRespDefaultTypeInternal _ResetResp_default_instance_;
class ResultReq;
class ResultReqDefaultTypeInternal;
extern ResultReqDefaultTypeInternal _ResultReq_default_instance_;
class ResultReq_Options;
class ResultReq_OptionsDefaultTypeInternal;
extern ResultReq_OptionsDefaultTypeInternal _ResultReq_Options_default_instance_;
class ResultResp;
class ResultRespDefaultTypeInternal;
extern ResultRespDefaultTypeInternal _ResultResp_default_instance_;
class StateReq;
class StateReqDefaultTypeInternal;
extern StateReqDefaultTypeInternal _StateReq_default_instance_;
class StateReq_Options;
class StateReq_OptionsDefaultTypeInternal;
extern StateReq_OptionsDefaultTypeInternal _StateReq_Options_default_instance_;
class StateResp;
class StateRespDefaultTypeInternal;
extern StateRespDefaultTypeInternal _StateResp_default_instance_;
class StatisticsReq;
class StatisticsReqDefaultTypeInternal;
extern StatisticsReqDefaultTypeInternal _StatisticsReq_default_instance_;
class StatisticsReq_Options;
class StatisticsReq_OptionsDefaultTypeInternal;
extern StatisticsReq_OptionsDefaultTypeInternal _StatisticsReq_Options_default_instance_;
class StatisticsResp;
class StatisticsRespDefaultTypeInternal;
extern StatisticsRespDefaultTypeInternal _StatisticsResp_default_instance_;
class StatisticsResp_Details;
class StatisticsResp_DetailsDefaultTypeInternal;
extern StatisticsResp_DetailsDefaultTypeInternal _StatisticsResp_Details_default_instance_;
class UpdateReq;
class UpdateReqDefaultTypeInternal;
extern UpdateReqDefaultTypeInternal _UpdateReq_default_instance_;
class UpdateReq_Options;
class UpdateReq_OptionsDefaultTypeInternal;
extern UpdateReq_OptionsDefaultTypeInternal _UpdateReq_Options_default_instance_;
class UpdateResp;
class UpdateRespDefaultTypeInternal;
extern UpdateRespDefaultTypeInternal _UpdateResp_default_instance_;
}  // namespace projections
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::client::projections::CreateReq* Arena::CreateMaybeMessage<::event_store::client::projections::CreateReq>(Arena*);
template<> ::event_store::client::projections::CreateReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::CreateReq_Options>(Arena*);
template<> ::event_store::client::projections::CreateReq_Options_Continuous* Arena::CreateMaybeMessage<::event_store::client::projections::CreateReq_Options_Continuous>(Arena*);
template<> ::event_store::client::projections::CreateReq_Options_Transient* Arena::CreateMaybeMessage<::event_store::client::projections::CreateReq_Options_Transient>(Arena*);
template<> ::event_store::client::projections::CreateResp* Arena::CreateMaybeMessage<::event_store::client::projections::CreateResp>(Arena*);
template<> ::event_store::client::projections::DeleteReq* Arena::CreateMaybeMessage<::event_store::client::projections::DeleteReq>(Arena*);
template<> ::event_store::client::projections::DeleteReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::DeleteReq_Options>(Arena*);
template<> ::event_store::client::projections::DeleteResp* Arena::CreateMaybeMessage<::event_store::client::projections::DeleteResp>(Arena*);
template<> ::event_store::client::projections::DisableReq* Arena::CreateMaybeMessage<::event_store::client::projections::DisableReq>(Arena*);
template<> ::event_store::client::projections::DisableReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::DisableReq_Options>(Arena*);
template<> ::event_store::client::projections::DisableResp* Arena::CreateMaybeMessage<::event_store::client::projections::DisableResp>(Arena*);
template<> ::event_store::client::projections::EnableReq* Arena::CreateMaybeMessage<::event_store::client::projections::EnableReq>(Arena*);
template<> ::event_store::client::projections::EnableReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::EnableReq_Options>(Arena*);
template<> ::event_store::client::projections::EnableResp* Arena::CreateMaybeMessage<::event_store::client::projections::EnableResp>(Arena*);
template<> ::event_store::client::projections::ResetReq* Arena::CreateMaybeMessage<::event_store::client::projections::ResetReq>(Arena*);
template<> ::event_store::client::projections::ResetReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::ResetReq_Options>(Arena*);
template<> ::event_store::client::projections::ResetResp* Arena::CreateMaybeMessage<::event_store::client::projections::ResetResp>(Arena*);
template<> ::event_store::client::projections::ResultReq* Arena::CreateMaybeMessage<::event_store::client::projections::ResultReq>(Arena*);
template<> ::event_store::client::projections::ResultReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::ResultReq_Options>(Arena*);
template<> ::event_store::client::projections::ResultResp* Arena::CreateMaybeMessage<::event_store::client::projections::ResultResp>(Arena*);
template<> ::event_store::client::projections::StateReq* Arena::CreateMaybeMessage<::event_store::client::projections::StateReq>(Arena*);
template<> ::event_store::client::projections::StateReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::StateReq_Options>(Arena*);
template<> ::event_store::client::projections::StateResp* Arena::CreateMaybeMessage<::event_store::client::projections::StateResp>(Arena*);
template<> ::event_store::client::projections::StatisticsReq* Arena::CreateMaybeMessage<::event_store::client::projections::StatisticsReq>(Arena*);
template<> ::event_store::client::projections::StatisticsReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::StatisticsReq_Options>(Arena*);
template<> ::event_store::client::projections::StatisticsResp* Arena::CreateMaybeMessage<::event_store::client::projections::StatisticsResp>(Arena*);
template<> ::event_store::client::projections::StatisticsResp_Details* Arena::CreateMaybeMessage<::event_store::client::projections::StatisticsResp_Details>(Arena*);
template<> ::event_store::client::projections::UpdateReq* Arena::CreateMaybeMessage<::event_store::client::projections::UpdateReq>(Arena*);
template<> ::event_store::client::projections::UpdateReq_Options* Arena::CreateMaybeMessage<::event_store::client::projections::UpdateReq_Options>(Arena*);
template<> ::event_store::client::projections::UpdateResp* Arena::CreateMaybeMessage<::event_store::client::projections::UpdateResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace client {
namespace projections {

// ===================================================================

class CreateReq_Options_Transient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.CreateReq.Options.Transient) */ {
 public:
  inline CreateReq_Options_Transient() : CreateReq_Options_Transient(nullptr) {};
  virtual ~CreateReq_Options_Transient();

  CreateReq_Options_Transient(const CreateReq_Options_Transient& from);
  CreateReq_Options_Transient(CreateReq_Options_Transient&& from) noexcept
    : CreateReq_Options_Transient() {
    *this = ::std::move(from);
  }

  inline CreateReq_Options_Transient& operator=(const CreateReq_Options_Transient& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_Options_Transient& operator=(CreateReq_Options_Transient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_Options_Transient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_Options_Transient* internal_default_instance() {
    return reinterpret_cast<const CreateReq_Options_Transient*>(
               &_CreateReq_Options_Transient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateReq_Options_Transient& a, CreateReq_Options_Transient& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_Options_Transient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_Options_Transient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_Options_Transient* New() const final {
    return CreateMaybeMessage<CreateReq_Options_Transient>(nullptr);
  }

  CreateReq_Options_Transient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_Options_Transient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_Options_Transient& from);
  void MergeFrom(const CreateReq_Options_Transient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_Options_Transient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.CreateReq.Options.Transient";
  }
  protected:
  explicit CreateReq_Options_Transient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.CreateReq.Options.Transient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_Options_Continuous PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.CreateReq.Options.Continuous) */ {
 public:
  inline CreateReq_Options_Continuous() : CreateReq_Options_Continuous(nullptr) {};
  virtual ~CreateReq_Options_Continuous();

  CreateReq_Options_Continuous(const CreateReq_Options_Continuous& from);
  CreateReq_Options_Continuous(CreateReq_Options_Continuous&& from) noexcept
    : CreateReq_Options_Continuous() {
    *this = ::std::move(from);
  }

  inline CreateReq_Options_Continuous& operator=(const CreateReq_Options_Continuous& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_Options_Continuous& operator=(CreateReq_Options_Continuous&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_Options_Continuous& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_Options_Continuous* internal_default_instance() {
    return reinterpret_cast<const CreateReq_Options_Continuous*>(
               &_CreateReq_Options_Continuous_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateReq_Options_Continuous& a, CreateReq_Options_Continuous& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_Options_Continuous* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_Options_Continuous* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_Options_Continuous* New() const final {
    return CreateMaybeMessage<CreateReq_Options_Continuous>(nullptr);
  }

  CreateReq_Options_Continuous* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_Options_Continuous>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_Options_Continuous& from);
  void MergeFrom(const CreateReq_Options_Continuous& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_Options_Continuous* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.CreateReq.Options.Continuous";
  }
  protected:
  explicit CreateReq_Options_Continuous(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmitEnabledFieldNumber = 2,
    kTrackEmittedStreamsFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool emit_enabled = 2;
  void clear_emit_enabled();
  bool emit_enabled() const;
  void set_emit_enabled(bool value);
  private:
  bool _internal_emit_enabled() const;
  void _internal_set_emit_enabled(bool value);
  public:

  // bool track_emitted_streams = 3;
  void clear_track_emitted_streams();
  bool track_emitted_streams() const;
  void set_track_emitted_streams(bool value);
  private:
  bool _internal_track_emitted_streams() const;
  void _internal_set_track_emitted_streams(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.CreateReq.Options.Continuous)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool emit_enabled_;
  bool track_emitted_streams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.CreateReq.Options) */ {
 public:
  inline CreateReq_Options() : CreateReq_Options(nullptr) {};
  virtual ~CreateReq_Options();

  CreateReq_Options(const CreateReq_Options& from);
  CreateReq_Options(CreateReq_Options&& from) noexcept
    : CreateReq_Options() {
    *this = ::std::move(from);
  }

  inline CreateReq_Options& operator=(const CreateReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_Options& operator=(CreateReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_Options& default_instance();

  enum ModeCase {
    kOneTime = 1,
    kTransient = 2,
    kContinuous = 3,
    MODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_Options* internal_default_instance() {
    return reinterpret_cast<const CreateReq_Options*>(
               &_CreateReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateReq_Options& a, CreateReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_Options* New() const final {
    return CreateMaybeMessage<CreateReq_Options>(nullptr);
  }

  CreateReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_Options& from);
  void MergeFrom(const CreateReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.CreateReq.Options";
  }
  protected:
  explicit CreateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateReq_Options_Transient Transient;
  typedef CreateReq_Options_Continuous Continuous;

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 4,
    kOneTimeFieldNumber = 1,
    kTransientFieldNumber = 2,
    kContinuousFieldNumber = 3,
  };
  // string query = 4;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query(
      std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .event_store.client.Empty one_time = 1;
  bool has_one_time() const;
  private:
  bool _internal_has_one_time() const;
  public:
  void clear_one_time();
  const ::event_store::client::Empty& one_time() const;
  ::event_store::client::Empty* release_one_time();
  ::event_store::client::Empty* mutable_one_time();
  void set_allocated_one_time(::event_store::client::Empty* one_time);
  private:
  const ::event_store::client::Empty& _internal_one_time() const;
  ::event_store::client::Empty* _internal_mutable_one_time();
  public:
  void unsafe_arena_set_allocated_one_time(
      ::event_store::client::Empty* one_time);
  ::event_store::client::Empty* unsafe_arena_release_one_time();

  // .event_store.client.projections.CreateReq.Options.Transient transient = 2;
  bool has_transient() const;
  private:
  bool _internal_has_transient() const;
  public:
  void clear_transient();
  const ::event_store::client::projections::CreateReq_Options_Transient& transient() const;
  ::event_store::client::projections::CreateReq_Options_Transient* release_transient();
  ::event_store::client::projections::CreateReq_Options_Transient* mutable_transient();
  void set_allocated_transient(::event_store::client::projections::CreateReq_Options_Transient* transient);
  private:
  const ::event_store::client::projections::CreateReq_Options_Transient& _internal_transient() const;
  ::event_store::client::projections::CreateReq_Options_Transient* _internal_mutable_transient();
  public:
  void unsafe_arena_set_allocated_transient(
      ::event_store::client::projections::CreateReq_Options_Transient* transient);
  ::event_store::client::projections::CreateReq_Options_Transient* unsafe_arena_release_transient();

  // .event_store.client.projections.CreateReq.Options.Continuous continuous = 3;
  bool has_continuous() const;
  private:
  bool _internal_has_continuous() const;
  public:
  void clear_continuous();
  const ::event_store::client::projections::CreateReq_Options_Continuous& continuous() const;
  ::event_store::client::projections::CreateReq_Options_Continuous* release_continuous();
  ::event_store::client::projections::CreateReq_Options_Continuous* mutable_continuous();
  void set_allocated_continuous(::event_store::client::projections::CreateReq_Options_Continuous* continuous);
  private:
  const ::event_store::client::projections::CreateReq_Options_Continuous& _internal_continuous() const;
  ::event_store::client::projections::CreateReq_Options_Continuous* _internal_mutable_continuous();
  public:
  void unsafe_arena_set_allocated_continuous(
      ::event_store::client::projections::CreateReq_Options_Continuous* continuous);
  ::event_store::client::projections::CreateReq_Options_Continuous* unsafe_arena_release_continuous();

  void clear_mode();
  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.projections.CreateReq.Options)
 private:
  class _Internal;
  void set_has_one_time();
  void set_has_transient();
  void set_has_continuous();

  inline bool has_mode() const;
  inline void clear_has_mode();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  union ModeUnion {
    ModeUnion() {}
    ::event_store::client::Empty* one_time_;
    ::event_store::client::projections::CreateReq_Options_Transient* transient_;
    ::event_store::client::projections::CreateReq_Options_Continuous* continuous_;
  } mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class CreateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.CreateReq) */ {
 public:
  inline CreateReq() : CreateReq(nullptr) {};
  virtual ~CreateReq();

  CreateReq(const CreateReq& from);
  CreateReq(CreateReq&& from) noexcept
    : CreateReq() {
    *this = ::std::move(from);
  }

  inline CreateReq& operator=(const CreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq& operator=(CreateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq* internal_default_instance() {
    return reinterpret_cast<const CreateReq*>(
               &_CreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateReq& a, CreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq* New() const final {
    return CreateMaybeMessage<CreateReq>(nullptr);
  }

  CreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq& from);
  void MergeFrom(const CreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.CreateReq";
  }
  protected:
  explicit CreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.CreateReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::CreateReq_Options& options() const;
  ::event_store::client::projections::CreateReq_Options* release_options();
  ::event_store::client::projections::CreateReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::CreateReq_Options* options);
  private:
  const ::event_store::client::projections::CreateReq_Options& _internal_options() const;
  ::event_store::client::projections::CreateReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::CreateReq_Options* options);
  ::event_store::client::projections::CreateReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.CreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::CreateReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class CreateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.CreateResp) */ {
 public:
  inline CreateResp() : CreateResp(nullptr) {};
  virtual ~CreateResp();

  CreateResp(const CreateResp& from);
  CreateResp(CreateResp&& from) noexcept
    : CreateResp() {
    *this = ::std::move(from);
  }

  inline CreateResp& operator=(const CreateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResp& operator=(CreateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResp* internal_default_instance() {
    return reinterpret_cast<const CreateResp*>(
               &_CreateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateResp& a, CreateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResp* New() const final {
    return CreateMaybeMessage<CreateResp>(nullptr);
  }

  CreateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateResp& from);
  void MergeFrom(const CreateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.CreateResp";
  }
  protected:
  explicit CreateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.projections.CreateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.UpdateReq.Options) */ {
 public:
  inline UpdateReq_Options() : UpdateReq_Options(nullptr) {};
  virtual ~UpdateReq_Options();

  UpdateReq_Options(const UpdateReq_Options& from);
  UpdateReq_Options(UpdateReq_Options&& from) noexcept
    : UpdateReq_Options() {
    *this = ::std::move(from);
  }

  inline UpdateReq_Options& operator=(const UpdateReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq_Options& operator=(UpdateReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq_Options& default_instance();

  enum EmitOptionCase {
    kEmitEnabled = 3,
    kNoEmitOptions = 4,
    EMIT_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq_Options* internal_default_instance() {
    return reinterpret_cast<const UpdateReq_Options*>(
               &_UpdateReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateReq_Options& a, UpdateReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq_Options* New() const final {
    return CreateMaybeMessage<UpdateReq_Options>(nullptr);
  }

  UpdateReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq_Options& from);
  void MergeFrom(const UpdateReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.UpdateReq.Options";
  }
  protected:
  explicit UpdateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kQueryFieldNumber = 2,
    kEmitEnabledFieldNumber = 3,
    kNoEmitOptionsFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query(
      std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // bool emit_enabled = 3;
  private:
  bool _internal_has_emit_enabled() const;
  public:
  void clear_emit_enabled();
  bool emit_enabled() const;
  void set_emit_enabled(bool value);
  private:
  bool _internal_emit_enabled() const;
  void _internal_set_emit_enabled(bool value);
  public:

  // .event_store.client.Empty no_emit_options = 4;
  bool has_no_emit_options() const;
  private:
  bool _internal_has_no_emit_options() const;
  public:
  void clear_no_emit_options();
  const ::event_store::client::Empty& no_emit_options() const;
  ::event_store::client::Empty* release_no_emit_options();
  ::event_store::client::Empty* mutable_no_emit_options();
  void set_allocated_no_emit_options(::event_store::client::Empty* no_emit_options);
  private:
  const ::event_store::client::Empty& _internal_no_emit_options() const;
  ::event_store::client::Empty* _internal_mutable_no_emit_options();
  public:
  void unsafe_arena_set_allocated_no_emit_options(
      ::event_store::client::Empty* no_emit_options);
  ::event_store::client::Empty* unsafe_arena_release_no_emit_options();

  void clear_emit_option();
  EmitOptionCase emit_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.projections.UpdateReq.Options)
 private:
  class _Internal;
  void set_has_emit_enabled();
  void set_has_no_emit_options();

  inline bool has_emit_option() const;
  inline void clear_has_emit_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  union EmitOptionUnion {
    EmitOptionUnion() {}
    bool emit_enabled_;
    ::event_store::client::Empty* no_emit_options_;
  } emit_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.UpdateReq) */ {
 public:
  inline UpdateReq() : UpdateReq(nullptr) {};
  virtual ~UpdateReq();

  UpdateReq(const UpdateReq& from);
  UpdateReq(UpdateReq&& from) noexcept
    : UpdateReq() {
    *this = ::std::move(from);
  }

  inline UpdateReq& operator=(const UpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq& operator=(UpdateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq* internal_default_instance() {
    return reinterpret_cast<const UpdateReq*>(
               &_UpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateReq& a, UpdateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq* New() const final {
    return CreateMaybeMessage<UpdateReq>(nullptr);
  }

  UpdateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq& from);
  void MergeFrom(const UpdateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.UpdateReq";
  }
  protected:
  explicit UpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.UpdateReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::UpdateReq_Options& options() const;
  ::event_store::client::projections::UpdateReq_Options* release_options();
  ::event_store::client::projections::UpdateReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::UpdateReq_Options* options);
  private:
  const ::event_store::client::projections::UpdateReq_Options& _internal_options() const;
  ::event_store::client::projections::UpdateReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::UpdateReq_Options* options);
  ::event_store::client::projections::UpdateReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.UpdateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::UpdateReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class UpdateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.UpdateResp) */ {
 public:
  inline UpdateResp() : UpdateResp(nullptr) {};
  virtual ~UpdateResp();

  UpdateResp(const UpdateResp& from);
  UpdateResp(UpdateResp&& from) noexcept
    : UpdateResp() {
    *this = ::std::move(from);
  }

  inline UpdateResp& operator=(const UpdateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResp& operator=(UpdateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateResp* internal_default_instance() {
    return reinterpret_cast<const UpdateResp*>(
               &_UpdateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateResp& a, UpdateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResp* New() const final {
    return CreateMaybeMessage<UpdateResp>(nullptr);
  }

  UpdateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResp& from);
  void MergeFrom(const UpdateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.UpdateResp";
  }
  protected:
  explicit UpdateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.projections.UpdateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.DeleteReq.Options) */ {
 public:
  inline DeleteReq_Options() : DeleteReq_Options(nullptr) {};
  virtual ~DeleteReq_Options();

  DeleteReq_Options(const DeleteReq_Options& from);
  DeleteReq_Options(DeleteReq_Options&& from) noexcept
    : DeleteReq_Options() {
    *this = ::std::move(from);
  }

  inline DeleteReq_Options& operator=(const DeleteReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq_Options& operator=(DeleteReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReq_Options* internal_default_instance() {
    return reinterpret_cast<const DeleteReq_Options*>(
               &_DeleteReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteReq_Options& a, DeleteReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq_Options* New() const final {
    return CreateMaybeMessage<DeleteReq_Options>(nullptr);
  }

  DeleteReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq_Options& from);
  void MergeFrom(const DeleteReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.DeleteReq.Options";
  }
  protected:
  explicit DeleteReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDeleteEmittedStreamsFieldNumber = 2,
    kDeleteStateStreamFieldNumber = 3,
    kDeleteCheckpointStreamFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool delete_emitted_streams = 2;
  void clear_delete_emitted_streams();
  bool delete_emitted_streams() const;
  void set_delete_emitted_streams(bool value);
  private:
  bool _internal_delete_emitted_streams() const;
  void _internal_set_delete_emitted_streams(bool value);
  public:

  // bool delete_state_stream = 3;
  void clear_delete_state_stream();
  bool delete_state_stream() const;
  void set_delete_state_stream(bool value);
  private:
  bool _internal_delete_state_stream() const;
  void _internal_set_delete_state_stream(bool value);
  public:

  // bool delete_checkpoint_stream = 4;
  void clear_delete_checkpoint_stream();
  bool delete_checkpoint_stream() const;
  void set_delete_checkpoint_stream(bool value);
  private:
  bool _internal_delete_checkpoint_stream() const;
  void _internal_set_delete_checkpoint_stream(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.DeleteReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool delete_emitted_streams_;
  bool delete_state_stream_;
  bool delete_checkpoint_stream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.DeleteReq) */ {
 public:
  inline DeleteReq() : DeleteReq(nullptr) {};
  virtual ~DeleteReq();

  DeleteReq(const DeleteReq& from);
  DeleteReq(DeleteReq&& from) noexcept
    : DeleteReq() {
    *this = ::std::move(from);
  }

  inline DeleteReq& operator=(const DeleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq& operator=(DeleteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReq* internal_default_instance() {
    return reinterpret_cast<const DeleteReq*>(
               &_DeleteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteReq& a, DeleteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq* New() const final {
    return CreateMaybeMessage<DeleteReq>(nullptr);
  }

  DeleteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq& from);
  void MergeFrom(const DeleteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.DeleteReq";
  }
  protected:
  explicit DeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.DeleteReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::DeleteReq_Options& options() const;
  ::event_store::client::projections::DeleteReq_Options* release_options();
  ::event_store::client::projections::DeleteReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::DeleteReq_Options* options);
  private:
  const ::event_store::client::projections::DeleteReq_Options& _internal_options() const;
  ::event_store::client::projections::DeleteReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::DeleteReq_Options* options);
  ::event_store::client::projections::DeleteReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.DeleteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::DeleteReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.DeleteResp) */ {
 public:
  inline DeleteResp() : DeleteResp(nullptr) {};
  virtual ~DeleteResp();

  DeleteResp(const DeleteResp& from);
  DeleteResp(DeleteResp&& from) noexcept
    : DeleteResp() {
    *this = ::std::move(from);
  }

  inline DeleteResp& operator=(const DeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp& operator=(DeleteResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp* internal_default_instance() {
    return reinterpret_cast<const DeleteResp*>(
               &_DeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteResp& a, DeleteResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp* New() const final {
    return CreateMaybeMessage<DeleteResp>(nullptr);
  }

  DeleteResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp& from);
  void MergeFrom(const DeleteResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.DeleteResp";
  }
  protected:
  explicit DeleteResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.projections.DeleteResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class StatisticsReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.StatisticsReq.Options) */ {
 public:
  inline StatisticsReq_Options() : StatisticsReq_Options(nullptr) {};
  virtual ~StatisticsReq_Options();

  StatisticsReq_Options(const StatisticsReq_Options& from);
  StatisticsReq_Options(StatisticsReq_Options&& from) noexcept
    : StatisticsReq_Options() {
    *this = ::std::move(from);
  }

  inline StatisticsReq_Options& operator=(const StatisticsReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsReq_Options& operator=(StatisticsReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticsReq_Options& default_instance();

  enum ModeCase {
    kName = 1,
    kAll = 2,
    kTransient = 3,
    kContinuous = 4,
    kOneTime = 5,
    MODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticsReq_Options* internal_default_instance() {
    return reinterpret_cast<const StatisticsReq_Options*>(
               &_StatisticsReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StatisticsReq_Options& a, StatisticsReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsReq_Options* New() const final {
    return CreateMaybeMessage<StatisticsReq_Options>(nullptr);
  }

  StatisticsReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticsReq_Options& from);
  void MergeFrom(const StatisticsReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.StatisticsReq.Options";
  }
  protected:
  explicit StatisticsReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllFieldNumber = 2,
    kTransientFieldNumber = 3,
    kContinuousFieldNumber = 4,
    kOneTimeFieldNumber = 5,
  };
  // string name = 1;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .event_store.client.Empty all = 2;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::Empty& all() const;
  ::event_store::client::Empty* release_all();
  ::event_store::client::Empty* mutable_all();
  void set_allocated_all(::event_store::client::Empty* all);
  private:
  const ::event_store::client::Empty& _internal_all() const;
  ::event_store::client::Empty* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::Empty* all);
  ::event_store::client::Empty* unsafe_arena_release_all();

  // .event_store.client.Empty transient = 3;
  bool has_transient() const;
  private:
  bool _internal_has_transient() const;
  public:
  void clear_transient();
  const ::event_store::client::Empty& transient() const;
  ::event_store::client::Empty* release_transient();
  ::event_store::client::Empty* mutable_transient();
  void set_allocated_transient(::event_store::client::Empty* transient);
  private:
  const ::event_store::client::Empty& _internal_transient() const;
  ::event_store::client::Empty* _internal_mutable_transient();
  public:
  void unsafe_arena_set_allocated_transient(
      ::event_store::client::Empty* transient);
  ::event_store::client::Empty* unsafe_arena_release_transient();

  // .event_store.client.Empty continuous = 4;
  bool has_continuous() const;
  private:
  bool _internal_has_continuous() const;
  public:
  void clear_continuous();
  const ::event_store::client::Empty& continuous() const;
  ::event_store::client::Empty* release_continuous();
  ::event_store::client::Empty* mutable_continuous();
  void set_allocated_continuous(::event_store::client::Empty* continuous);
  private:
  const ::event_store::client::Empty& _internal_continuous() const;
  ::event_store::client::Empty* _internal_mutable_continuous();
  public:
  void unsafe_arena_set_allocated_continuous(
      ::event_store::client::Empty* continuous);
  ::event_store::client::Empty* unsafe_arena_release_continuous();

  // .event_store.client.Empty one_time = 5;
  bool has_one_time() const;
  private:
  bool _internal_has_one_time() const;
  public:
  void clear_one_time();
  const ::event_store::client::Empty& one_time() const;
  ::event_store::client::Empty* release_one_time();
  ::event_store::client::Empty* mutable_one_time();
  void set_allocated_one_time(::event_store::client::Empty* one_time);
  private:
  const ::event_store::client::Empty& _internal_one_time() const;
  ::event_store::client::Empty* _internal_mutable_one_time();
  public:
  void unsafe_arena_set_allocated_one_time(
      ::event_store::client::Empty* one_time);
  ::event_store::client::Empty* unsafe_arena_release_one_time();

  void clear_mode();
  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.projections.StatisticsReq.Options)
 private:
  class _Internal;
  void set_has_name();
  void set_has_all();
  void set_has_transient();
  void set_has_continuous();
  void set_has_one_time();

  inline bool has_mode() const;
  inline void clear_has_mode();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ModeUnion {
    ModeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::event_store::client::Empty* all_;
    ::event_store::client::Empty* transient_;
    ::event_store::client::Empty* continuous_;
    ::event_store::client::Empty* one_time_;
  } mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class StatisticsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.StatisticsReq) */ {
 public:
  inline StatisticsReq() : StatisticsReq(nullptr) {};
  virtual ~StatisticsReq();

  StatisticsReq(const StatisticsReq& from);
  StatisticsReq(StatisticsReq&& from) noexcept
    : StatisticsReq() {
    *this = ::std::move(from);
  }

  inline StatisticsReq& operator=(const StatisticsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsReq& operator=(StatisticsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticsReq* internal_default_instance() {
    return reinterpret_cast<const StatisticsReq*>(
               &_StatisticsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StatisticsReq& a, StatisticsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsReq* New() const final {
    return CreateMaybeMessage<StatisticsReq>(nullptr);
  }

  StatisticsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticsReq& from);
  void MergeFrom(const StatisticsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.StatisticsReq";
  }
  protected:
  explicit StatisticsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StatisticsReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.StatisticsReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::StatisticsReq_Options& options() const;
  ::event_store::client::projections::StatisticsReq_Options* release_options();
  ::event_store::client::projections::StatisticsReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::StatisticsReq_Options* options);
  private:
  const ::event_store::client::projections::StatisticsReq_Options& _internal_options() const;
  ::event_store::client::projections::StatisticsReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::StatisticsReq_Options* options);
  ::event_store::client::projections::StatisticsReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.StatisticsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::StatisticsReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class StatisticsResp_Details PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.StatisticsResp.Details) */ {
 public:
  inline StatisticsResp_Details() : StatisticsResp_Details(nullptr) {};
  virtual ~StatisticsResp_Details();

  StatisticsResp_Details(const StatisticsResp_Details& from);
  StatisticsResp_Details(StatisticsResp_Details&& from) noexcept
    : StatisticsResp_Details() {
    *this = ::std::move(from);
  }

  inline StatisticsResp_Details& operator=(const StatisticsResp_Details& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsResp_Details& operator=(StatisticsResp_Details&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticsResp_Details& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticsResp_Details* internal_default_instance() {
    return reinterpret_cast<const StatisticsResp_Details*>(
               &_StatisticsResp_Details_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StatisticsResp_Details& a, StatisticsResp_Details& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsResp_Details* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsResp_Details* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsResp_Details* New() const final {
    return CreateMaybeMessage<StatisticsResp_Details>(nullptr);
  }

  StatisticsResp_Details* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsResp_Details>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticsResp_Details& from);
  void MergeFrom(const StatisticsResp_Details& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsResp_Details* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.StatisticsResp.Details";
  }
  protected:
  explicit StatisticsResp_Details(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectiveNameFieldNumber = 4,
    kStatusFieldNumber = 8,
    kStateReasonFieldNumber = 9,
    kNameFieldNumber = 10,
    kModeFieldNumber = 11,
    kPositionFieldNumber = 12,
    kLastCheckpointFieldNumber = 14,
    kCheckpointStatusFieldNumber = 16,
    kCoreProcessingTimeFieldNumber = 1,
    kVersionFieldNumber = 2,
    kEpochFieldNumber = 3,
    kWritesInProgressFieldNumber = 5,
    kReadsInProgressFieldNumber = 6,
    kPartitionsCachedFieldNumber = 7,
    kProgressFieldNumber = 13,
    kEventsProcessedAfterRestartFieldNumber = 15,
    kBufferedEventsFieldNumber = 17,
    kWritePendingEventsBeforeCheckpointFieldNumber = 18,
    kWritePendingEventsAfterCheckpointFieldNumber = 19,
  };
  // string effectiveName = 4;
  void clear_effectivename();
  const std::string& effectivename() const;
  void set_effectivename(const std::string& value);
  void set_effectivename(std::string&& value);
  void set_effectivename(const char* value);
  void set_effectivename(const char* value, size_t size);
  std::string* mutable_effectivename();
  std::string* release_effectivename();
  void set_allocated_effectivename(std::string* effectivename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_effectivename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_effectivename(
      std::string* effectivename);
  private:
  const std::string& _internal_effectivename() const;
  void _internal_set_effectivename(const std::string& value);
  std::string* _internal_mutable_effectivename();
  public:

  // string status = 8;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string stateReason = 9;
  void clear_statereason();
  const std::string& statereason() const;
  void set_statereason(const std::string& value);
  void set_statereason(std::string&& value);
  void set_statereason(const char* value);
  void set_statereason(const char* value, size_t size);
  std::string* mutable_statereason();
  std::string* release_statereason();
  void set_allocated_statereason(std::string* statereason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_statereason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_statereason(
      std::string* statereason);
  private:
  const std::string& _internal_statereason() const;
  void _internal_set_statereason(const std::string& value);
  std::string* _internal_mutable_statereason();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mode = 11;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mode(
      std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // string position = 12;
  void clear_position();
  const std::string& position() const;
  void set_position(const std::string& value);
  void set_position(std::string&& value);
  void set_position(const char* value);
  void set_position(const char* value, size_t size);
  std::string* mutable_position();
  std::string* release_position();
  void set_allocated_position(std::string* position);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_position();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_position(
      std::string* position);
  private:
  const std::string& _internal_position() const;
  void _internal_set_position(const std::string& value);
  std::string* _internal_mutable_position();
  public:

  // string lastCheckpoint = 14;
  void clear_lastcheckpoint();
  const std::string& lastcheckpoint() const;
  void set_lastcheckpoint(const std::string& value);
  void set_lastcheckpoint(std::string&& value);
  void set_lastcheckpoint(const char* value);
  void set_lastcheckpoint(const char* value, size_t size);
  std::string* mutable_lastcheckpoint();
  std::string* release_lastcheckpoint();
  void set_allocated_lastcheckpoint(std::string* lastcheckpoint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lastcheckpoint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lastcheckpoint(
      std::string* lastcheckpoint);
  private:
  const std::string& _internal_lastcheckpoint() const;
  void _internal_set_lastcheckpoint(const std::string& value);
  std::string* _internal_mutable_lastcheckpoint();
  public:

  // string checkpointStatus = 16;
  void clear_checkpointstatus();
  const std::string& checkpointstatus() const;
  void set_checkpointstatus(const std::string& value);
  void set_checkpointstatus(std::string&& value);
  void set_checkpointstatus(const char* value);
  void set_checkpointstatus(const char* value, size_t size);
  std::string* mutable_checkpointstatus();
  std::string* release_checkpointstatus();
  void set_allocated_checkpointstatus(std::string* checkpointstatus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checkpointstatus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checkpointstatus(
      std::string* checkpointstatus);
  private:
  const std::string& _internal_checkpointstatus() const;
  void _internal_set_checkpointstatus(const std::string& value);
  std::string* _internal_mutable_checkpointstatus();
  public:

  // int64 coreProcessingTime = 1;
  void clear_coreprocessingtime();
  ::PROTOBUF_NAMESPACE_ID::int64 coreprocessingtime() const;
  void set_coreprocessingtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coreprocessingtime() const;
  void _internal_set_coreprocessingtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 epoch = 3;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::int64 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 writesInProgress = 5;
  void clear_writesinprogress();
  ::PROTOBUF_NAMESPACE_ID::int32 writesinprogress() const;
  void set_writesinprogress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_writesinprogress() const;
  void _internal_set_writesinprogress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 readsInProgress = 6;
  void clear_readsinprogress();
  ::PROTOBUF_NAMESPACE_ID::int32 readsinprogress() const;
  void set_readsinprogress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_readsinprogress() const;
  void _internal_set_readsinprogress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 partitionsCached = 7;
  void clear_partitionscached();
  ::PROTOBUF_NAMESPACE_ID::int32 partitionscached() const;
  void set_partitionscached(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partitionscached() const;
  void _internal_set_partitionscached(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float progress = 13;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // int64 eventsProcessedAfterRestart = 15;
  void clear_eventsprocessedafterrestart();
  ::PROTOBUF_NAMESPACE_ID::int64 eventsprocessedafterrestart() const;
  void set_eventsprocessedafterrestart(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_eventsprocessedafterrestart() const;
  void _internal_set_eventsprocessedafterrestart(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 bufferedEvents = 17;
  void clear_bufferedevents();
  ::PROTOBUF_NAMESPACE_ID::int64 bufferedevents() const;
  void set_bufferedevents(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bufferedevents() const;
  void _internal_set_bufferedevents(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 writePendingEventsBeforeCheckpoint = 18;
  void clear_writependingeventsbeforecheckpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 writependingeventsbeforecheckpoint() const;
  void set_writependingeventsbeforecheckpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_writependingeventsbeforecheckpoint() const;
  void _internal_set_writependingeventsbeforecheckpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 writePendingEventsAfterCheckpoint = 19;
  void clear_writependingeventsaftercheckpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 writependingeventsaftercheckpoint() const;
  void set_writependingeventsaftercheckpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_writependingeventsaftercheckpoint() const;
  void _internal_set_writependingeventsaftercheckpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.StatisticsResp.Details)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectivename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statereason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastcheckpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkpointstatus_;
  ::PROTOBUF_NAMESPACE_ID::int64 coreprocessingtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 epoch_;
  ::PROTOBUF_NAMESPACE_ID::int32 writesinprogress_;
  ::PROTOBUF_NAMESPACE_ID::int32 readsinprogress_;
  ::PROTOBUF_NAMESPACE_ID::int32 partitionscached_;
  float progress_;
  ::PROTOBUF_NAMESPACE_ID::int64 eventsprocessedafterrestart_;
  ::PROTOBUF_NAMESPACE_ID::int64 bufferedevents_;
  ::PROTOBUF_NAMESPACE_ID::int32 writependingeventsbeforecheckpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 writependingeventsaftercheckpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class StatisticsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.StatisticsResp) */ {
 public:
  inline StatisticsResp() : StatisticsResp(nullptr) {};
  virtual ~StatisticsResp();

  StatisticsResp(const StatisticsResp& from);
  StatisticsResp(StatisticsResp&& from) noexcept
    : StatisticsResp() {
    *this = ::std::move(from);
  }

  inline StatisticsResp& operator=(const StatisticsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsResp& operator=(StatisticsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatisticsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticsResp* internal_default_instance() {
    return reinterpret_cast<const StatisticsResp*>(
               &_StatisticsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StatisticsResp& a, StatisticsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsResp* New() const final {
    return CreateMaybeMessage<StatisticsResp>(nullptr);
  }

  StatisticsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatisticsResp& from);
  void MergeFrom(const StatisticsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.StatisticsResp";
  }
  protected:
  explicit StatisticsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StatisticsResp_Details Details;

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 1,
  };
  // .event_store.client.projections.StatisticsResp.Details details = 1;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::event_store::client::projections::StatisticsResp_Details& details() const;
  ::event_store::client::projections::StatisticsResp_Details* release_details();
  ::event_store::client::projections::StatisticsResp_Details* mutable_details();
  void set_allocated_details(::event_store::client::projections::StatisticsResp_Details* details);
  private:
  const ::event_store::client::projections::StatisticsResp_Details& _internal_details() const;
  ::event_store::client::projections::StatisticsResp_Details* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::event_store::client::projections::StatisticsResp_Details* details);
  ::event_store::client::projections::StatisticsResp_Details* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.StatisticsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::StatisticsResp_Details* details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class StateReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.StateReq.Options) */ {
 public:
  inline StateReq_Options() : StateReq_Options(nullptr) {};
  virtual ~StateReq_Options();

  StateReq_Options(const StateReq_Options& from);
  StateReq_Options(StateReq_Options&& from) noexcept
    : StateReq_Options() {
    *this = ::std::move(from);
  }

  inline StateReq_Options& operator=(const StateReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateReq_Options& operator=(StateReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateReq_Options* internal_default_instance() {
    return reinterpret_cast<const StateReq_Options*>(
               &_StateReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StateReq_Options& a, StateReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(StateReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateReq_Options* New() const final {
    return CreateMaybeMessage<StateReq_Options>(nullptr);
  }

  StateReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateReq_Options& from);
  void MergeFrom(const StateReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.StateReq.Options";
  }
  protected:
  explicit StateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPartitionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string partition = 2;
  void clear_partition();
  const std::string& partition() const;
  void set_partition(const std::string& value);
  void set_partition(std::string&& value);
  void set_partition(const char* value);
  void set_partition(const char* value, size_t size);
  std::string* mutable_partition();
  std::string* release_partition();
  void set_allocated_partition(std::string* partition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_partition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_partition(
      std::string* partition);
  private:
  const std::string& _internal_partition() const;
  void _internal_set_partition(const std::string& value);
  std::string* _internal_mutable_partition();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.StateReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class StateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.StateReq) */ {
 public:
  inline StateReq() : StateReq(nullptr) {};
  virtual ~StateReq();

  StateReq(const StateReq& from);
  StateReq(StateReq&& from) noexcept
    : StateReq() {
    *this = ::std::move(from);
  }

  inline StateReq& operator=(const StateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateReq& operator=(StateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateReq* internal_default_instance() {
    return reinterpret_cast<const StateReq*>(
               &_StateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StateReq& a, StateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateReq* New() const final {
    return CreateMaybeMessage<StateReq>(nullptr);
  }

  StateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateReq& from);
  void MergeFrom(const StateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.StateReq";
  }
  protected:
  explicit StateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StateReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.StateReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::StateReq_Options& options() const;
  ::event_store::client::projections::StateReq_Options* release_options();
  ::event_store::client::projections::StateReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::StateReq_Options* options);
  private:
  const ::event_store::client::projections::StateReq_Options& _internal_options() const;
  ::event_store::client::projections::StateReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::StateReq_Options* options);
  ::event_store::client::projections::StateReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.StateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::StateReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class StateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.StateResp) */ {
 public:
  inline StateResp() : StateResp(nullptr) {};
  virtual ~StateResp();

  StateResp(const StateResp& from);
  StateResp(StateResp&& from) noexcept
    : StateResp() {
    *this = ::std::move(from);
  }

  inline StateResp& operator=(const StateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateResp& operator=(StateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateResp* internal_default_instance() {
    return reinterpret_cast<const StateResp*>(
               &_StateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StateResp& a, StateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(StateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateResp* New() const final {
    return CreateMaybeMessage<StateResp>(nullptr);
  }

  StateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateResp& from);
  void MergeFrom(const StateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.StateResp";
  }
  protected:
  explicit StateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .google.protobuf.Value state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const PROTOBUF_NAMESPACE_ID::Value& state() const;
  PROTOBUF_NAMESPACE_ID::Value* release_state();
  PROTOBUF_NAMESPACE_ID::Value* mutable_state();
  void set_allocated_state(PROTOBUF_NAMESPACE_ID::Value* state);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_state() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      PROTOBUF_NAMESPACE_ID::Value* state);
  PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.StateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Value* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class ResultReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.ResultReq.Options) */ {
 public:
  inline ResultReq_Options() : ResultReq_Options(nullptr) {};
  virtual ~ResultReq_Options();

  ResultReq_Options(const ResultReq_Options& from);
  ResultReq_Options(ResultReq_Options&& from) noexcept
    : ResultReq_Options() {
    *this = ::std::move(from);
  }

  inline ResultReq_Options& operator=(const ResultReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultReq_Options& operator=(ResultReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultReq_Options* internal_default_instance() {
    return reinterpret_cast<const ResultReq_Options*>(
               &_ResultReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ResultReq_Options& a, ResultReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultReq_Options* New() const final {
    return CreateMaybeMessage<ResultReq_Options>(nullptr);
  }

  ResultReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultReq_Options& from);
  void MergeFrom(const ResultReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.ResultReq.Options";
  }
  protected:
  explicit ResultReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPartitionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string partition = 2;
  void clear_partition();
  const std::string& partition() const;
  void set_partition(const std::string& value);
  void set_partition(std::string&& value);
  void set_partition(const char* value);
  void set_partition(const char* value, size_t size);
  std::string* mutable_partition();
  std::string* release_partition();
  void set_allocated_partition(std::string* partition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_partition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_partition(
      std::string* partition);
  private:
  const std::string& _internal_partition() const;
  void _internal_set_partition(const std::string& value);
  std::string* _internal_mutable_partition();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.ResultReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class ResultReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.ResultReq) */ {
 public:
  inline ResultReq() : ResultReq(nullptr) {};
  virtual ~ResultReq();

  ResultReq(const ResultReq& from);
  ResultReq(ResultReq&& from) noexcept
    : ResultReq() {
    *this = ::std::move(from);
  }

  inline ResultReq& operator=(const ResultReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultReq& operator=(ResultReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultReq* internal_default_instance() {
    return reinterpret_cast<const ResultReq*>(
               &_ResultReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ResultReq& a, ResultReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultReq* New() const final {
    return CreateMaybeMessage<ResultReq>(nullptr);
  }

  ResultReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultReq& from);
  void MergeFrom(const ResultReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.ResultReq";
  }
  protected:
  explicit ResultReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResultReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.ResultReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::ResultReq_Options& options() const;
  ::event_store::client::projections::ResultReq_Options* release_options();
  ::event_store::client::projections::ResultReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::ResultReq_Options* options);
  private:
  const ::event_store::client::projections::ResultReq_Options& _internal_options() const;
  ::event_store::client::projections::ResultReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::ResultReq_Options* options);
  ::event_store::client::projections::ResultReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.ResultReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::ResultReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class ResultResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.ResultResp) */ {
 public:
  inline ResultResp() : ResultResp(nullptr) {};
  virtual ~ResultResp();

  ResultResp(const ResultResp& from);
  ResultResp(ResultResp&& from) noexcept
    : ResultResp() {
    *this = ::std::move(from);
  }

  inline ResultResp& operator=(const ResultResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultResp& operator=(ResultResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultResp* internal_default_instance() {
    return reinterpret_cast<const ResultResp*>(
               &_ResultResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ResultResp& a, ResultResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultResp* New() const final {
    return CreateMaybeMessage<ResultResp>(nullptr);
  }

  ResultResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultResp& from);
  void MergeFrom(const ResultResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.ResultResp";
  }
  protected:
  explicit ResultResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .google.protobuf.Value result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const PROTOBUF_NAMESPACE_ID::Value& result() const;
  PROTOBUF_NAMESPACE_ID::Value* release_result();
  PROTOBUF_NAMESPACE_ID::Value* mutable_result();
  void set_allocated_result(PROTOBUF_NAMESPACE_ID::Value* result);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_result() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      PROTOBUF_NAMESPACE_ID::Value* result);
  PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.ResultResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Value* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class ResetReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.ResetReq.Options) */ {
 public:
  inline ResetReq_Options() : ResetReq_Options(nullptr) {};
  virtual ~ResetReq_Options();

  ResetReq_Options(const ResetReq_Options& from);
  ResetReq_Options(ResetReq_Options&& from) noexcept
    : ResetReq_Options() {
    *this = ::std::move(from);
  }

  inline ResetReq_Options& operator=(const ResetReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetReq_Options& operator=(ResetReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetReq_Options* internal_default_instance() {
    return reinterpret_cast<const ResetReq_Options*>(
               &_ResetReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ResetReq_Options& a, ResetReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetReq_Options* New() const final {
    return CreateMaybeMessage<ResetReq_Options>(nullptr);
  }

  ResetReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetReq_Options& from);
  void MergeFrom(const ResetReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.ResetReq.Options";
  }
  protected:
  explicit ResetReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kWriteCheckpointFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool write_checkpoint = 2;
  void clear_write_checkpoint();
  bool write_checkpoint() const;
  void set_write_checkpoint(bool value);
  private:
  bool _internal_write_checkpoint() const;
  void _internal_set_write_checkpoint(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.ResetReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool write_checkpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class ResetReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.ResetReq) */ {
 public:
  inline ResetReq() : ResetReq(nullptr) {};
  virtual ~ResetReq();

  ResetReq(const ResetReq& from);
  ResetReq(ResetReq&& from) noexcept
    : ResetReq() {
    *this = ::std::move(from);
  }

  inline ResetReq& operator=(const ResetReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetReq& operator=(ResetReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetReq* internal_default_instance() {
    return reinterpret_cast<const ResetReq*>(
               &_ResetReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ResetReq& a, ResetReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetReq* New() const final {
    return CreateMaybeMessage<ResetReq>(nullptr);
  }

  ResetReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetReq& from);
  void MergeFrom(const ResetReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.ResetReq";
  }
  protected:
  explicit ResetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.ResetReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::ResetReq_Options& options() const;
  ::event_store::client::projections::ResetReq_Options* release_options();
  ::event_store::client::projections::ResetReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::ResetReq_Options* options);
  private:
  const ::event_store::client::projections::ResetReq_Options& _internal_options() const;
  ::event_store::client::projections::ResetReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::ResetReq_Options* options);
  ::event_store::client::projections::ResetReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.ResetReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::ResetReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class ResetResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.ResetResp) */ {
 public:
  inline ResetResp() : ResetResp(nullptr) {};
  virtual ~ResetResp();

  ResetResp(const ResetResp& from);
  ResetResp(ResetResp&& from) noexcept
    : ResetResp() {
    *this = ::std::move(from);
  }

  inline ResetResp& operator=(const ResetResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetResp& operator=(ResetResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetResp* internal_default_instance() {
    return reinterpret_cast<const ResetResp*>(
               &_ResetResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ResetResp& a, ResetResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetResp* New() const final {
    return CreateMaybeMessage<ResetResp>(nullptr);
  }

  ResetResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetResp& from);
  void MergeFrom(const ResetResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.ResetResp";
  }
  protected:
  explicit ResetResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.projections.ResetResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class EnableReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.EnableReq.Options) */ {
 public:
  inline EnableReq_Options() : EnableReq_Options(nullptr) {};
  virtual ~EnableReq_Options();

  EnableReq_Options(const EnableReq_Options& from);
  EnableReq_Options(EnableReq_Options&& from) noexcept
    : EnableReq_Options() {
    *this = ::std::move(from);
  }

  inline EnableReq_Options& operator=(const EnableReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableReq_Options& operator=(EnableReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableReq_Options* internal_default_instance() {
    return reinterpret_cast<const EnableReq_Options*>(
               &_EnableReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EnableReq_Options& a, EnableReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableReq_Options* New() const final {
    return CreateMaybeMessage<EnableReq_Options>(nullptr);
  }

  EnableReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableReq_Options& from);
  void MergeFrom(const EnableReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.EnableReq.Options";
  }
  protected:
  explicit EnableReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.EnableReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class EnableReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.EnableReq) */ {
 public:
  inline EnableReq() : EnableReq(nullptr) {};
  virtual ~EnableReq();

  EnableReq(const EnableReq& from);
  EnableReq(EnableReq&& from) noexcept
    : EnableReq() {
    *this = ::std::move(from);
  }

  inline EnableReq& operator=(const EnableReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableReq& operator=(EnableReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableReq* internal_default_instance() {
    return reinterpret_cast<const EnableReq*>(
               &_EnableReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(EnableReq& a, EnableReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableReq* New() const final {
    return CreateMaybeMessage<EnableReq>(nullptr);
  }

  EnableReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableReq& from);
  void MergeFrom(const EnableReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.EnableReq";
  }
  protected:
  explicit EnableReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnableReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.EnableReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::EnableReq_Options& options() const;
  ::event_store::client::projections::EnableReq_Options* release_options();
  ::event_store::client::projections::EnableReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::EnableReq_Options* options);
  private:
  const ::event_store::client::projections::EnableReq_Options& _internal_options() const;
  ::event_store::client::projections::EnableReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::EnableReq_Options* options);
  ::event_store::client::projections::EnableReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.EnableReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::EnableReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class EnableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.EnableResp) */ {
 public:
  inline EnableResp() : EnableResp(nullptr) {};
  virtual ~EnableResp();

  EnableResp(const EnableResp& from);
  EnableResp(EnableResp&& from) noexcept
    : EnableResp() {
    *this = ::std::move(from);
  }

  inline EnableResp& operator=(const EnableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableResp& operator=(EnableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableResp* internal_default_instance() {
    return reinterpret_cast<const EnableResp*>(
               &_EnableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(EnableResp& a, EnableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableResp* New() const final {
    return CreateMaybeMessage<EnableResp>(nullptr);
  }

  EnableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableResp& from);
  void MergeFrom(const EnableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.EnableResp";
  }
  protected:
  explicit EnableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.projections.EnableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class DisableReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.DisableReq.Options) */ {
 public:
  inline DisableReq_Options() : DisableReq_Options(nullptr) {};
  virtual ~DisableReq_Options();

  DisableReq_Options(const DisableReq_Options& from);
  DisableReq_Options(DisableReq_Options&& from) noexcept
    : DisableReq_Options() {
    *this = ::std::move(from);
  }

  inline DisableReq_Options& operator=(const DisableReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableReq_Options& operator=(DisableReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableReq_Options* internal_default_instance() {
    return reinterpret_cast<const DisableReq_Options*>(
               &_DisableReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DisableReq_Options& a, DisableReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableReq_Options* New() const final {
    return CreateMaybeMessage<DisableReq_Options>(nullptr);
  }

  DisableReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableReq_Options& from);
  void MergeFrom(const DisableReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.DisableReq.Options";
  }
  protected:
  explicit DisableReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kWriteCheckpointFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool write_checkpoint = 2;
  void clear_write_checkpoint();
  bool write_checkpoint() const;
  void set_write_checkpoint(bool value);
  private:
  bool _internal_write_checkpoint() const;
  void _internal_set_write_checkpoint(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.projections.DisableReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool write_checkpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class DisableReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.DisableReq) */ {
 public:
  inline DisableReq() : DisableReq(nullptr) {};
  virtual ~DisableReq();

  DisableReq(const DisableReq& from);
  DisableReq(DisableReq&& from) noexcept
    : DisableReq() {
    *this = ::std::move(from);
  }

  inline DisableReq& operator=(const DisableReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableReq& operator=(DisableReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableReq* internal_default_instance() {
    return reinterpret_cast<const DisableReq*>(
               &_DisableReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DisableReq& a, DisableReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableReq* New() const final {
    return CreateMaybeMessage<DisableReq>(nullptr);
  }

  DisableReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableReq& from);
  void MergeFrom(const DisableReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.DisableReq";
  }
  protected:
  explicit DisableReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DisableReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.projections.DisableReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::projections::DisableReq_Options& options() const;
  ::event_store::client::projections::DisableReq_Options* release_options();
  ::event_store::client::projections::DisableReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::projections::DisableReq_Options* options);
  private:
  const ::event_store::client::projections::DisableReq_Options& _internal_options() const;
  ::event_store::client::projections::DisableReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::projections::DisableReq_Options* options);
  ::event_store::client::projections::DisableReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.projections.DisableReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::projections::DisableReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// -------------------------------------------------------------------

class DisableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.projections.DisableResp) */ {
 public:
  inline DisableResp() : DisableResp(nullptr) {};
  virtual ~DisableResp();

  DisableResp(const DisableResp& from);
  DisableResp(DisableResp&& from) noexcept
    : DisableResp() {
    *this = ::std::move(from);
  }

  inline DisableResp& operator=(const DisableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableResp& operator=(DisableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableResp* internal_default_instance() {
    return reinterpret_cast<const DisableResp*>(
               &_DisableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DisableResp& a, DisableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableResp* New() const final {
    return CreateMaybeMessage<DisableResp>(nullptr);
  }

  DisableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableResp& from);
  void MergeFrom(const DisableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.projections.DisableResp";
  }
  protected:
  explicit DisableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_projections_2eproto);
    return ::descriptor_table_projections_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.projections.DisableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_projections_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateReq_Options_Transient

// string name = 1;
inline void CreateReq_Options_Transient::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_Options_Transient::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.Options.Transient.name)
  return _internal_name();
}
inline void CreateReq_Options_Transient::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.CreateReq.Options.Transient.name)
}
inline std::string* CreateReq_Options_Transient::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.CreateReq.Options.Transient.name)
  return _internal_mutable_name();
}
inline const std::string& CreateReq_Options_Transient::_internal_name() const {
  return name_.Get();
}
inline void CreateReq_Options_Transient::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_Options_Transient::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.CreateReq.Options.Transient.name)
}
inline void CreateReq_Options_Transient::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.CreateReq.Options.Transient.name)
}
inline void CreateReq_Options_Transient::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.CreateReq.Options.Transient.name)
}
inline std::string* CreateReq_Options_Transient::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_Options_Transient::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.CreateReq.Options.Transient.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_Options_Transient::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.CreateReq.Options.Transient.name)
}
inline std::string* CreateReq_Options_Transient::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.CreateReq.Options.Transient.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_Options_Transient::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.CreateReq.Options.Transient.name)
}

// -------------------------------------------------------------------

// CreateReq_Options_Continuous

// string name = 1;
inline void CreateReq_Options_Continuous::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_Options_Continuous::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.Options.Continuous.name)
  return _internal_name();
}
inline void CreateReq_Options_Continuous::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.CreateReq.Options.Continuous.name)
}
inline std::string* CreateReq_Options_Continuous::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.CreateReq.Options.Continuous.name)
  return _internal_mutable_name();
}
inline const std::string& CreateReq_Options_Continuous::_internal_name() const {
  return name_.Get();
}
inline void CreateReq_Options_Continuous::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_Options_Continuous::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.CreateReq.Options.Continuous.name)
}
inline void CreateReq_Options_Continuous::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.CreateReq.Options.Continuous.name)
}
inline void CreateReq_Options_Continuous::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.CreateReq.Options.Continuous.name)
}
inline std::string* CreateReq_Options_Continuous::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_Options_Continuous::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.CreateReq.Options.Continuous.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_Options_Continuous::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.CreateReq.Options.Continuous.name)
}
inline std::string* CreateReq_Options_Continuous::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.CreateReq.Options.Continuous.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_Options_Continuous::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.CreateReq.Options.Continuous.name)
}

// bool emit_enabled = 2;
inline void CreateReq_Options_Continuous::clear_emit_enabled() {
  emit_enabled_ = false;
}
inline bool CreateReq_Options_Continuous::_internal_emit_enabled() const {
  return emit_enabled_;
}
inline bool CreateReq_Options_Continuous::emit_enabled() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.Options.Continuous.emit_enabled)
  return _internal_emit_enabled();
}
inline void CreateReq_Options_Continuous::_internal_set_emit_enabled(bool value) {
  
  emit_enabled_ = value;
}
inline void CreateReq_Options_Continuous::set_emit_enabled(bool value) {
  _internal_set_emit_enabled(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.CreateReq.Options.Continuous.emit_enabled)
}

// bool track_emitted_streams = 3;
inline void CreateReq_Options_Continuous::clear_track_emitted_streams() {
  track_emitted_streams_ = false;
}
inline bool CreateReq_Options_Continuous::_internal_track_emitted_streams() const {
  return track_emitted_streams_;
}
inline bool CreateReq_Options_Continuous::track_emitted_streams() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.Options.Continuous.track_emitted_streams)
  return _internal_track_emitted_streams();
}
inline void CreateReq_Options_Continuous::_internal_set_track_emitted_streams(bool value) {
  
  track_emitted_streams_ = value;
}
inline void CreateReq_Options_Continuous::set_track_emitted_streams(bool value) {
  _internal_set_track_emitted_streams(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.CreateReq.Options.Continuous.track_emitted_streams)
}

// -------------------------------------------------------------------

// CreateReq_Options

// .event_store.client.Empty one_time = 1;
inline bool CreateReq_Options::_internal_has_one_time() const {
  return mode_case() == kOneTime;
}
inline bool CreateReq_Options::has_one_time() const {
  return _internal_has_one_time();
}
inline void CreateReq_Options::set_has_one_time() {
  _oneof_case_[0] = kOneTime;
}
inline ::event_store::client::Empty* CreateReq_Options::release_one_time() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.CreateReq.Options.one_time)
  if (_internal_has_one_time()) {
    clear_has_mode();
      ::event_store::client::Empty* temp = mode_.one_time_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mode_.one_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& CreateReq_Options::_internal_one_time() const {
  return _internal_has_one_time()
      ? *mode_.one_time_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& CreateReq_Options::one_time() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.Options.one_time)
  return _internal_one_time();
}
inline ::event_store::client::Empty* CreateReq_Options::unsafe_arena_release_one_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.CreateReq.Options.one_time)
  if (_internal_has_one_time()) {
    clear_has_mode();
    ::event_store::client::Empty* temp = mode_.one_time_;
    mode_.one_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_Options::unsafe_arena_set_allocated_one_time(::event_store::client::Empty* one_time) {
  clear_mode();
  if (one_time) {
    set_has_one_time();
    mode_.one_time_ = one_time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.CreateReq.Options.one_time)
}
inline ::event_store::client::Empty* CreateReq_Options::_internal_mutable_one_time() {
  if (!_internal_has_one_time()) {
    clear_mode();
    set_has_one_time();
    mode_.one_time_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return mode_.one_time_;
}
inline ::event_store::client::Empty* CreateReq_Options::mutable_one_time() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.CreateReq.Options.one_time)
  return _internal_mutable_one_time();
}

// .event_store.client.projections.CreateReq.Options.Transient transient = 2;
inline bool CreateReq_Options::_internal_has_transient() const {
  return mode_case() == kTransient;
}
inline bool CreateReq_Options::has_transient() const {
  return _internal_has_transient();
}
inline void CreateReq_Options::set_has_transient() {
  _oneof_case_[0] = kTransient;
}
inline void CreateReq_Options::clear_transient() {
  if (_internal_has_transient()) {
    if (GetArena() == nullptr) {
      delete mode_.transient_;
    }
    clear_has_mode();
  }
}
inline ::event_store::client::projections::CreateReq_Options_Transient* CreateReq_Options::release_transient() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.CreateReq.Options.transient)
  if (_internal_has_transient()) {
    clear_has_mode();
      ::event_store::client::projections::CreateReq_Options_Transient* temp = mode_.transient_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mode_.transient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::projections::CreateReq_Options_Transient& CreateReq_Options::_internal_transient() const {
  return _internal_has_transient()
      ? *mode_.transient_
      : *reinterpret_cast< ::event_store::client::projections::CreateReq_Options_Transient*>(&::event_store::client::projections::_CreateReq_Options_Transient_default_instance_);
}
inline const ::event_store::client::projections::CreateReq_Options_Transient& CreateReq_Options::transient() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.Options.transient)
  return _internal_transient();
}
inline ::event_store::client::projections::CreateReq_Options_Transient* CreateReq_Options::unsafe_arena_release_transient() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.CreateReq.Options.transient)
  if (_internal_has_transient()) {
    clear_has_mode();
    ::event_store::client::projections::CreateReq_Options_Transient* temp = mode_.transient_;
    mode_.transient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_Options::unsafe_arena_set_allocated_transient(::event_store::client::projections::CreateReq_Options_Transient* transient) {
  clear_mode();
  if (transient) {
    set_has_transient();
    mode_.transient_ = transient;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.CreateReq.Options.transient)
}
inline ::event_store::client::projections::CreateReq_Options_Transient* CreateReq_Options::_internal_mutable_transient() {
  if (!_internal_has_transient()) {
    clear_mode();
    set_has_transient();
    mode_.transient_ = CreateMaybeMessage< ::event_store::client::projections::CreateReq_Options_Transient >(GetArena());
  }
  return mode_.transient_;
}
inline ::event_store::client::projections::CreateReq_Options_Transient* CreateReq_Options::mutable_transient() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.CreateReq.Options.transient)
  return _internal_mutable_transient();
}

// .event_store.client.projections.CreateReq.Options.Continuous continuous = 3;
inline bool CreateReq_Options::_internal_has_continuous() const {
  return mode_case() == kContinuous;
}
inline bool CreateReq_Options::has_continuous() const {
  return _internal_has_continuous();
}
inline void CreateReq_Options::set_has_continuous() {
  _oneof_case_[0] = kContinuous;
}
inline void CreateReq_Options::clear_continuous() {
  if (_internal_has_continuous()) {
    if (GetArena() == nullptr) {
      delete mode_.continuous_;
    }
    clear_has_mode();
  }
}
inline ::event_store::client::projections::CreateReq_Options_Continuous* CreateReq_Options::release_continuous() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.CreateReq.Options.continuous)
  if (_internal_has_continuous()) {
    clear_has_mode();
      ::event_store::client::projections::CreateReq_Options_Continuous* temp = mode_.continuous_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mode_.continuous_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::projections::CreateReq_Options_Continuous& CreateReq_Options::_internal_continuous() const {
  return _internal_has_continuous()
      ? *mode_.continuous_
      : *reinterpret_cast< ::event_store::client::projections::CreateReq_Options_Continuous*>(&::event_store::client::projections::_CreateReq_Options_Continuous_default_instance_);
}
inline const ::event_store::client::projections::CreateReq_Options_Continuous& CreateReq_Options::continuous() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.Options.continuous)
  return _internal_continuous();
}
inline ::event_store::client::projections::CreateReq_Options_Continuous* CreateReq_Options::unsafe_arena_release_continuous() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.CreateReq.Options.continuous)
  if (_internal_has_continuous()) {
    clear_has_mode();
    ::event_store::client::projections::CreateReq_Options_Continuous* temp = mode_.continuous_;
    mode_.continuous_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_Options::unsafe_arena_set_allocated_continuous(::event_store::client::projections::CreateReq_Options_Continuous* continuous) {
  clear_mode();
  if (continuous) {
    set_has_continuous();
    mode_.continuous_ = continuous;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.CreateReq.Options.continuous)
}
inline ::event_store::client::projections::CreateReq_Options_Continuous* CreateReq_Options::_internal_mutable_continuous() {
  if (!_internal_has_continuous()) {
    clear_mode();
    set_has_continuous();
    mode_.continuous_ = CreateMaybeMessage< ::event_store::client::projections::CreateReq_Options_Continuous >(GetArena());
  }
  return mode_.continuous_;
}
inline ::event_store::client::projections::CreateReq_Options_Continuous* CreateReq_Options::mutable_continuous() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.CreateReq.Options.continuous)
  return _internal_mutable_continuous();
}

// string query = 4;
inline void CreateReq_Options::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_Options::query() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.Options.query)
  return _internal_query();
}
inline void CreateReq_Options::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.CreateReq.Options.query)
}
inline std::string* CreateReq_Options::mutable_query() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.CreateReq.Options.query)
  return _internal_mutable_query();
}
inline const std::string& CreateReq_Options::_internal_query() const {
  return query_.Get();
}
inline void CreateReq_Options::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_Options::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.CreateReq.Options.query)
}
inline void CreateReq_Options::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.CreateReq.Options.query)
}
inline void CreateReq_Options::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.CreateReq.Options.query)
}
inline std::string* CreateReq_Options::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_Options::release_query() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.CreateReq.Options.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_Options::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.CreateReq.Options.query)
}
inline std::string* CreateReq_Options::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.CreateReq.Options.query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_Options::unsafe_arena_set_allocated_query(
    std::string* query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query != nullptr) {
    
  } else {
    
  }
  query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.CreateReq.Options.query)
}

inline bool CreateReq_Options::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void CreateReq_Options::clear_has_mode() {
  _oneof_case_[0] = MODE_NOT_SET;
}
inline CreateReq_Options::ModeCase CreateReq_Options::mode_case() const {
  return CreateReq_Options::ModeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateReq

// .event_store.client.projections.CreateReq.Options options = 1;
inline bool CreateReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool CreateReq::has_options() const {
  return _internal_has_options();
}
inline void CreateReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::CreateReq_Options& CreateReq::_internal_options() const {
  const ::event_store::client::projections::CreateReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::CreateReq_Options*>(
      &::event_store::client::projections::_CreateReq_Options_default_instance_);
}
inline const ::event_store::client::projections::CreateReq_Options& CreateReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.CreateReq.options)
  return _internal_options();
}
inline void CreateReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::CreateReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.CreateReq.options)
}
inline ::event_store::client::projections::CreateReq_Options* CreateReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::CreateReq_Options* CreateReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.CreateReq.options)
  
  ::event_store::client::projections::CreateReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::CreateReq_Options* CreateReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::CreateReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::CreateReq_Options* CreateReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.CreateReq.options)
  return _internal_mutable_options();
}
inline void CreateReq::set_allocated_options(::event_store::client::projections::CreateReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.CreateReq.options)
}

// -------------------------------------------------------------------

// CreateResp

// -------------------------------------------------------------------

// UpdateReq_Options

// string name = 1;
inline void UpdateReq_Options::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateReq_Options::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.UpdateReq.Options.name)
  return _internal_name();
}
inline void UpdateReq_Options::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.UpdateReq.Options.name)
}
inline std::string* UpdateReq_Options::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.UpdateReq.Options.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateReq_Options::_internal_name() const {
  return name_.Get();
}
inline void UpdateReq_Options::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateReq_Options::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.UpdateReq.Options.name)
}
inline void UpdateReq_Options::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.UpdateReq.Options.name)
}
inline void UpdateReq_Options::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.UpdateReq.Options.name)
}
inline std::string* UpdateReq_Options::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateReq_Options::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.UpdateReq.Options.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateReq_Options::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.UpdateReq.Options.name)
}
inline std::string* UpdateReq_Options::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.UpdateReq.Options.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.UpdateReq.Options.name)
}

// string query = 2;
inline void UpdateReq_Options::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateReq_Options::query() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.UpdateReq.Options.query)
  return _internal_query();
}
inline void UpdateReq_Options::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.UpdateReq.Options.query)
}
inline std::string* UpdateReq_Options::mutable_query() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.UpdateReq.Options.query)
  return _internal_mutable_query();
}
inline const std::string& UpdateReq_Options::_internal_query() const {
  return query_.Get();
}
inline void UpdateReq_Options::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateReq_Options::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.UpdateReq.Options.query)
}
inline void UpdateReq_Options::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.UpdateReq.Options.query)
}
inline void UpdateReq_Options::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.UpdateReq.Options.query)
}
inline std::string* UpdateReq_Options::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateReq_Options::release_query() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.UpdateReq.Options.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateReq_Options::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.UpdateReq.Options.query)
}
inline std::string* UpdateReq_Options::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.UpdateReq.Options.query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_query(
    std::string* query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query != nullptr) {
    
  } else {
    
  }
  query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.UpdateReq.Options.query)
}

// bool emit_enabled = 3;
inline bool UpdateReq_Options::_internal_has_emit_enabled() const {
  return emit_option_case() == kEmitEnabled;
}
inline void UpdateReq_Options::set_has_emit_enabled() {
  _oneof_case_[0] = kEmitEnabled;
}
inline void UpdateReq_Options::clear_emit_enabled() {
  if (_internal_has_emit_enabled()) {
    emit_option_.emit_enabled_ = false;
    clear_has_emit_option();
  }
}
inline bool UpdateReq_Options::_internal_emit_enabled() const {
  if (_internal_has_emit_enabled()) {
    return emit_option_.emit_enabled_;
  }
  return false;
}
inline void UpdateReq_Options::_internal_set_emit_enabled(bool value) {
  if (!_internal_has_emit_enabled()) {
    clear_emit_option();
    set_has_emit_enabled();
  }
  emit_option_.emit_enabled_ = value;
}
inline bool UpdateReq_Options::emit_enabled() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.UpdateReq.Options.emit_enabled)
  return _internal_emit_enabled();
}
inline void UpdateReq_Options::set_emit_enabled(bool value) {
  _internal_set_emit_enabled(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.UpdateReq.Options.emit_enabled)
}

// .event_store.client.Empty no_emit_options = 4;
inline bool UpdateReq_Options::_internal_has_no_emit_options() const {
  return emit_option_case() == kNoEmitOptions;
}
inline bool UpdateReq_Options::has_no_emit_options() const {
  return _internal_has_no_emit_options();
}
inline void UpdateReq_Options::set_has_no_emit_options() {
  _oneof_case_[0] = kNoEmitOptions;
}
inline ::event_store::client::Empty* UpdateReq_Options::release_no_emit_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.UpdateReq.Options.no_emit_options)
  if (_internal_has_no_emit_options()) {
    clear_has_emit_option();
      ::event_store::client::Empty* temp = emit_option_.no_emit_options_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    emit_option_.no_emit_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& UpdateReq_Options::_internal_no_emit_options() const {
  return _internal_has_no_emit_options()
      ? *emit_option_.no_emit_options_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& UpdateReq_Options::no_emit_options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.UpdateReq.Options.no_emit_options)
  return _internal_no_emit_options();
}
inline ::event_store::client::Empty* UpdateReq_Options::unsafe_arena_release_no_emit_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.UpdateReq.Options.no_emit_options)
  if (_internal_has_no_emit_options()) {
    clear_has_emit_option();
    ::event_store::client::Empty* temp = emit_option_.no_emit_options_;
    emit_option_.no_emit_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_no_emit_options(::event_store::client::Empty* no_emit_options) {
  clear_emit_option();
  if (no_emit_options) {
    set_has_no_emit_options();
    emit_option_.no_emit_options_ = no_emit_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.UpdateReq.Options.no_emit_options)
}
inline ::event_store::client::Empty* UpdateReq_Options::_internal_mutable_no_emit_options() {
  if (!_internal_has_no_emit_options()) {
    clear_emit_option();
    set_has_no_emit_options();
    emit_option_.no_emit_options_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return emit_option_.no_emit_options_;
}
inline ::event_store::client::Empty* UpdateReq_Options::mutable_no_emit_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.UpdateReq.Options.no_emit_options)
  return _internal_mutable_no_emit_options();
}

inline bool UpdateReq_Options::has_emit_option() const {
  return emit_option_case() != EMIT_OPTION_NOT_SET;
}
inline void UpdateReq_Options::clear_has_emit_option() {
  _oneof_case_[0] = EMIT_OPTION_NOT_SET;
}
inline UpdateReq_Options::EmitOptionCase UpdateReq_Options::emit_option_case() const {
  return UpdateReq_Options::EmitOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateReq

// .event_store.client.projections.UpdateReq.Options options = 1;
inline bool UpdateReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UpdateReq::has_options() const {
  return _internal_has_options();
}
inline void UpdateReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::UpdateReq_Options& UpdateReq::_internal_options() const {
  const ::event_store::client::projections::UpdateReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::UpdateReq_Options*>(
      &::event_store::client::projections::_UpdateReq_Options_default_instance_);
}
inline const ::event_store::client::projections::UpdateReq_Options& UpdateReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.UpdateReq.options)
  return _internal_options();
}
inline void UpdateReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::UpdateReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.UpdateReq.options)
}
inline ::event_store::client::projections::UpdateReq_Options* UpdateReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::UpdateReq_Options* UpdateReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.UpdateReq.options)
  
  ::event_store::client::projections::UpdateReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::UpdateReq_Options* UpdateReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::UpdateReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::UpdateReq_Options* UpdateReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.UpdateReq.options)
  return _internal_mutable_options();
}
inline void UpdateReq::set_allocated_options(::event_store::client::projections::UpdateReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.UpdateReq.options)
}

// -------------------------------------------------------------------

// UpdateResp

// -------------------------------------------------------------------

// DeleteReq_Options

// string name = 1;
inline void DeleteReq_Options::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteReq_Options::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.DeleteReq.Options.name)
  return _internal_name();
}
inline void DeleteReq_Options::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.DeleteReq.Options.name)
}
inline std::string* DeleteReq_Options::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.DeleteReq.Options.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteReq_Options::_internal_name() const {
  return name_.Get();
}
inline void DeleteReq_Options::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteReq_Options::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.DeleteReq.Options.name)
}
inline void DeleteReq_Options::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.DeleteReq.Options.name)
}
inline void DeleteReq_Options::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.DeleteReq.Options.name)
}
inline std::string* DeleteReq_Options::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteReq_Options::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.DeleteReq.Options.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteReq_Options::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.DeleteReq.Options.name)
}
inline std::string* DeleteReq_Options::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.DeleteReq.Options.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.DeleteReq.Options.name)
}

// bool delete_emitted_streams = 2;
inline void DeleteReq_Options::clear_delete_emitted_streams() {
  delete_emitted_streams_ = false;
}
inline bool DeleteReq_Options::_internal_delete_emitted_streams() const {
  return delete_emitted_streams_;
}
inline bool DeleteReq_Options::delete_emitted_streams() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.DeleteReq.Options.delete_emitted_streams)
  return _internal_delete_emitted_streams();
}
inline void DeleteReq_Options::_internal_set_delete_emitted_streams(bool value) {
  
  delete_emitted_streams_ = value;
}
inline void DeleteReq_Options::set_delete_emitted_streams(bool value) {
  _internal_set_delete_emitted_streams(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.DeleteReq.Options.delete_emitted_streams)
}

// bool delete_state_stream = 3;
inline void DeleteReq_Options::clear_delete_state_stream() {
  delete_state_stream_ = false;
}
inline bool DeleteReq_Options::_internal_delete_state_stream() const {
  return delete_state_stream_;
}
inline bool DeleteReq_Options::delete_state_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.DeleteReq.Options.delete_state_stream)
  return _internal_delete_state_stream();
}
inline void DeleteReq_Options::_internal_set_delete_state_stream(bool value) {
  
  delete_state_stream_ = value;
}
inline void DeleteReq_Options::set_delete_state_stream(bool value) {
  _internal_set_delete_state_stream(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.DeleteReq.Options.delete_state_stream)
}

// bool delete_checkpoint_stream = 4;
inline void DeleteReq_Options::clear_delete_checkpoint_stream() {
  delete_checkpoint_stream_ = false;
}
inline bool DeleteReq_Options::_internal_delete_checkpoint_stream() const {
  return delete_checkpoint_stream_;
}
inline bool DeleteReq_Options::delete_checkpoint_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.DeleteReq.Options.delete_checkpoint_stream)
  return _internal_delete_checkpoint_stream();
}
inline void DeleteReq_Options::_internal_set_delete_checkpoint_stream(bool value) {
  
  delete_checkpoint_stream_ = value;
}
inline void DeleteReq_Options::set_delete_checkpoint_stream(bool value) {
  _internal_set_delete_checkpoint_stream(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.DeleteReq.Options.delete_checkpoint_stream)
}

// -------------------------------------------------------------------

// DeleteReq

// .event_store.client.projections.DeleteReq.Options options = 1;
inline bool DeleteReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DeleteReq::has_options() const {
  return _internal_has_options();
}
inline void DeleteReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::DeleteReq_Options& DeleteReq::_internal_options() const {
  const ::event_store::client::projections::DeleteReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::DeleteReq_Options*>(
      &::event_store::client::projections::_DeleteReq_Options_default_instance_);
}
inline const ::event_store::client::projections::DeleteReq_Options& DeleteReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.DeleteReq.options)
  return _internal_options();
}
inline void DeleteReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::DeleteReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.DeleteReq.options)
}
inline ::event_store::client::projections::DeleteReq_Options* DeleteReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::DeleteReq_Options* DeleteReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.DeleteReq.options)
  
  ::event_store::client::projections::DeleteReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::DeleteReq_Options* DeleteReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::DeleteReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::DeleteReq_Options* DeleteReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.DeleteReq.options)
  return _internal_mutable_options();
}
inline void DeleteReq::set_allocated_options(::event_store::client::projections::DeleteReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.DeleteReq.options)
}

// -------------------------------------------------------------------

// DeleteResp

// -------------------------------------------------------------------

// StatisticsReq_Options

// string name = 1;
inline bool StatisticsReq_Options::_internal_has_name() const {
  return mode_case() == kName;
}
inline void StatisticsReq_Options::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void StatisticsReq_Options::clear_name() {
  if (_internal_has_name()) {
    mode_.name_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_mode();
  }
}
inline const std::string& StatisticsReq_Options::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsReq.Options.name)
  return _internal_name();
}
inline void StatisticsReq_Options::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsReq.Options.name)
}
inline std::string* StatisticsReq_Options::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsReq.Options.name)
  return _internal_mutable_name();
}
inline const std::string& StatisticsReq_Options::_internal_name() const {
  if (_internal_has_name()) {
    return mode_.name_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StatisticsReq_Options::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_mode();
    set_has_name();
    mode_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  mode_.name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsReq_Options::set_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsReq.Options.name)
  if (!_internal_has_name()) {
    clear_mode();
    set_has_name();
    mode_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  mode_.name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsReq.Options.name)
}
inline void StatisticsReq_Options::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_name()) {
    clear_mode();
    set_has_name();
    mode_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  mode_.name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsReq.Options.name)
}
inline void StatisticsReq_Options::set_name(const char* value,
                             size_t size) {
  if (!_internal_has_name()) {
    clear_mode();
    set_has_name();
    mode_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  mode_.name_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsReq.Options.name)
}
inline std::string* StatisticsReq_Options::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_mode();
    set_has_name();
    mode_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return mode_.name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsReq_Options::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsReq.Options.name)
  if (_internal_has_name()) {
    clear_has_mode();
    return mode_.name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StatisticsReq_Options::set_allocated_name(std::string* name) {
  if (has_mode()) {
    clear_mode();
  }
  if (name != nullptr) {
    set_has_name();
    mode_.name_.UnsafeSetDefault(name);
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsReq.Options.name)
}
inline std::string* StatisticsReq_Options::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsReq.Options.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_name()) {
    clear_has_mode();
    return mode_.name_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StatisticsReq_Options::unsafe_arena_set_allocated_name(std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_name()) {
    mode_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_mode();
  if (name) {
    set_has_name();
    mode_.name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsReq.Options.name)
}

// .event_store.client.Empty all = 2;
inline bool StatisticsReq_Options::_internal_has_all() const {
  return mode_case() == kAll;
}
inline bool StatisticsReq_Options::has_all() const {
  return _internal_has_all();
}
inline void StatisticsReq_Options::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline ::event_store::client::Empty* StatisticsReq_Options::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsReq.Options.all)
  if (_internal_has_all()) {
    clear_has_mode();
      ::event_store::client::Empty* temp = mode_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mode_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& StatisticsReq_Options::_internal_all() const {
  return _internal_has_all()
      ? *mode_.all_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& StatisticsReq_Options::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsReq.Options.all)
  return _internal_all();
}
inline ::event_store::client::Empty* StatisticsReq_Options::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsReq.Options.all)
  if (_internal_has_all()) {
    clear_has_mode();
    ::event_store::client::Empty* temp = mode_.all_;
    mode_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatisticsReq_Options::unsafe_arena_set_allocated_all(::event_store::client::Empty* all) {
  clear_mode();
  if (all) {
    set_has_all();
    mode_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsReq.Options.all)
}
inline ::event_store::client::Empty* StatisticsReq_Options::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_mode();
    set_has_all();
    mode_.all_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return mode_.all_;
}
inline ::event_store::client::Empty* StatisticsReq_Options::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsReq.Options.all)
  return _internal_mutable_all();
}

// .event_store.client.Empty transient = 3;
inline bool StatisticsReq_Options::_internal_has_transient() const {
  return mode_case() == kTransient;
}
inline bool StatisticsReq_Options::has_transient() const {
  return _internal_has_transient();
}
inline void StatisticsReq_Options::set_has_transient() {
  _oneof_case_[0] = kTransient;
}
inline ::event_store::client::Empty* StatisticsReq_Options::release_transient() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsReq.Options.transient)
  if (_internal_has_transient()) {
    clear_has_mode();
      ::event_store::client::Empty* temp = mode_.transient_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mode_.transient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& StatisticsReq_Options::_internal_transient() const {
  return _internal_has_transient()
      ? *mode_.transient_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& StatisticsReq_Options::transient() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsReq.Options.transient)
  return _internal_transient();
}
inline ::event_store::client::Empty* StatisticsReq_Options::unsafe_arena_release_transient() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsReq.Options.transient)
  if (_internal_has_transient()) {
    clear_has_mode();
    ::event_store::client::Empty* temp = mode_.transient_;
    mode_.transient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatisticsReq_Options::unsafe_arena_set_allocated_transient(::event_store::client::Empty* transient) {
  clear_mode();
  if (transient) {
    set_has_transient();
    mode_.transient_ = transient;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsReq.Options.transient)
}
inline ::event_store::client::Empty* StatisticsReq_Options::_internal_mutable_transient() {
  if (!_internal_has_transient()) {
    clear_mode();
    set_has_transient();
    mode_.transient_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return mode_.transient_;
}
inline ::event_store::client::Empty* StatisticsReq_Options::mutable_transient() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsReq.Options.transient)
  return _internal_mutable_transient();
}

// .event_store.client.Empty continuous = 4;
inline bool StatisticsReq_Options::_internal_has_continuous() const {
  return mode_case() == kContinuous;
}
inline bool StatisticsReq_Options::has_continuous() const {
  return _internal_has_continuous();
}
inline void StatisticsReq_Options::set_has_continuous() {
  _oneof_case_[0] = kContinuous;
}
inline ::event_store::client::Empty* StatisticsReq_Options::release_continuous() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsReq.Options.continuous)
  if (_internal_has_continuous()) {
    clear_has_mode();
      ::event_store::client::Empty* temp = mode_.continuous_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mode_.continuous_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& StatisticsReq_Options::_internal_continuous() const {
  return _internal_has_continuous()
      ? *mode_.continuous_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& StatisticsReq_Options::continuous() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsReq.Options.continuous)
  return _internal_continuous();
}
inline ::event_store::client::Empty* StatisticsReq_Options::unsafe_arena_release_continuous() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsReq.Options.continuous)
  if (_internal_has_continuous()) {
    clear_has_mode();
    ::event_store::client::Empty* temp = mode_.continuous_;
    mode_.continuous_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatisticsReq_Options::unsafe_arena_set_allocated_continuous(::event_store::client::Empty* continuous) {
  clear_mode();
  if (continuous) {
    set_has_continuous();
    mode_.continuous_ = continuous;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsReq.Options.continuous)
}
inline ::event_store::client::Empty* StatisticsReq_Options::_internal_mutable_continuous() {
  if (!_internal_has_continuous()) {
    clear_mode();
    set_has_continuous();
    mode_.continuous_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return mode_.continuous_;
}
inline ::event_store::client::Empty* StatisticsReq_Options::mutable_continuous() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsReq.Options.continuous)
  return _internal_mutable_continuous();
}

// .event_store.client.Empty one_time = 5;
inline bool StatisticsReq_Options::_internal_has_one_time() const {
  return mode_case() == kOneTime;
}
inline bool StatisticsReq_Options::has_one_time() const {
  return _internal_has_one_time();
}
inline void StatisticsReq_Options::set_has_one_time() {
  _oneof_case_[0] = kOneTime;
}
inline ::event_store::client::Empty* StatisticsReq_Options::release_one_time() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsReq.Options.one_time)
  if (_internal_has_one_time()) {
    clear_has_mode();
      ::event_store::client::Empty* temp = mode_.one_time_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mode_.one_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& StatisticsReq_Options::_internal_one_time() const {
  return _internal_has_one_time()
      ? *mode_.one_time_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& StatisticsReq_Options::one_time() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsReq.Options.one_time)
  return _internal_one_time();
}
inline ::event_store::client::Empty* StatisticsReq_Options::unsafe_arena_release_one_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsReq.Options.one_time)
  if (_internal_has_one_time()) {
    clear_has_mode();
    ::event_store::client::Empty* temp = mode_.one_time_;
    mode_.one_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatisticsReq_Options::unsafe_arena_set_allocated_one_time(::event_store::client::Empty* one_time) {
  clear_mode();
  if (one_time) {
    set_has_one_time();
    mode_.one_time_ = one_time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsReq.Options.one_time)
}
inline ::event_store::client::Empty* StatisticsReq_Options::_internal_mutable_one_time() {
  if (!_internal_has_one_time()) {
    clear_mode();
    set_has_one_time();
    mode_.one_time_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return mode_.one_time_;
}
inline ::event_store::client::Empty* StatisticsReq_Options::mutable_one_time() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsReq.Options.one_time)
  return _internal_mutable_one_time();
}

inline bool StatisticsReq_Options::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void StatisticsReq_Options::clear_has_mode() {
  _oneof_case_[0] = MODE_NOT_SET;
}
inline StatisticsReq_Options::ModeCase StatisticsReq_Options::mode_case() const {
  return StatisticsReq_Options::ModeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StatisticsReq

// .event_store.client.projections.StatisticsReq.Options options = 1;
inline bool StatisticsReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool StatisticsReq::has_options() const {
  return _internal_has_options();
}
inline void StatisticsReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::StatisticsReq_Options& StatisticsReq::_internal_options() const {
  const ::event_store::client::projections::StatisticsReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::StatisticsReq_Options*>(
      &::event_store::client::projections::_StatisticsReq_Options_default_instance_);
}
inline const ::event_store::client::projections::StatisticsReq_Options& StatisticsReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsReq.options)
  return _internal_options();
}
inline void StatisticsReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::StatisticsReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsReq.options)
}
inline ::event_store::client::projections::StatisticsReq_Options* StatisticsReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::StatisticsReq_Options* StatisticsReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsReq.options)
  
  ::event_store::client::projections::StatisticsReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::StatisticsReq_Options* StatisticsReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::StatisticsReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::StatisticsReq_Options* StatisticsReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsReq.options)
  return _internal_mutable_options();
}
inline void StatisticsReq::set_allocated_options(::event_store::client::projections::StatisticsReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsReq.options)
}

// -------------------------------------------------------------------

// StatisticsResp_Details

// int64 coreProcessingTime = 1;
inline void StatisticsResp_Details::clear_coreprocessingtime() {
  coreprocessingtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::_internal_coreprocessingtime() const {
  return coreprocessingtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::coreprocessingtime() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.coreProcessingTime)
  return _internal_coreprocessingtime();
}
inline void StatisticsResp_Details::_internal_set_coreprocessingtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coreprocessingtime_ = value;
}
inline void StatisticsResp_Details::set_coreprocessingtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coreprocessingtime(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.coreProcessingTime)
}

// int64 version = 2;
inline void StatisticsResp_Details::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::version() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.version)
  return _internal_version();
}
inline void StatisticsResp_Details::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void StatisticsResp_Details::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.version)
}

// int64 epoch = 3;
inline void StatisticsResp_Details::clear_epoch() {
  epoch_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::epoch() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.epoch)
  return _internal_epoch();
}
inline void StatisticsResp_Details::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  epoch_ = value;
}
inline void StatisticsResp_Details::set_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.epoch)
}

// string effectiveName = 4;
inline void StatisticsResp_Details::clear_effectivename() {
  effectivename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatisticsResp_Details::effectivename() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.effectiveName)
  return _internal_effectivename();
}
inline void StatisticsResp_Details::set_effectivename(const std::string& value) {
  _internal_set_effectivename(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.effectiveName)
}
inline std::string* StatisticsResp_Details::mutable_effectivename() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.Details.effectiveName)
  return _internal_mutable_effectivename();
}
inline const std::string& StatisticsResp_Details::_internal_effectivename() const {
  return effectivename_.Get();
}
inline void StatisticsResp_Details::_internal_set_effectivename(const std::string& value) {
  
  effectivename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsResp_Details::set_effectivename(std::string&& value) {
  
  effectivename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsResp.Details.effectiveName)
}
inline void StatisticsResp_Details::set_effectivename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  effectivename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsResp.Details.effectiveName)
}
inline void StatisticsResp_Details::set_effectivename(const char* value,
    size_t size) {
  
  effectivename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsResp.Details.effectiveName)
}
inline std::string* StatisticsResp_Details::_internal_mutable_effectivename() {
  
  return effectivename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsResp_Details::release_effectivename() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.Details.effectiveName)
  return effectivename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatisticsResp_Details::set_allocated_effectivename(std::string* effectivename) {
  if (effectivename != nullptr) {
    
  } else {
    
  }
  effectivename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectivename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.Details.effectiveName)
}
inline std::string* StatisticsResp_Details::unsafe_arena_release_effectivename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsResp.Details.effectiveName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return effectivename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatisticsResp_Details::unsafe_arena_set_allocated_effectivename(
    std::string* effectivename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (effectivename != nullptr) {
    
  } else {
    
  }
  effectivename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      effectivename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.Details.effectiveName)
}

// int32 writesInProgress = 5;
inline void StatisticsResp_Details::clear_writesinprogress() {
  writesinprogress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::_internal_writesinprogress() const {
  return writesinprogress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::writesinprogress() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.writesInProgress)
  return _internal_writesinprogress();
}
inline void StatisticsResp_Details::_internal_set_writesinprogress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  writesinprogress_ = value;
}
inline void StatisticsResp_Details::set_writesinprogress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_writesinprogress(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.writesInProgress)
}

// int32 readsInProgress = 6;
inline void StatisticsResp_Details::clear_readsinprogress() {
  readsinprogress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::_internal_readsinprogress() const {
  return readsinprogress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::readsinprogress() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.readsInProgress)
  return _internal_readsinprogress();
}
inline void StatisticsResp_Details::_internal_set_readsinprogress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  readsinprogress_ = value;
}
inline void StatisticsResp_Details::set_readsinprogress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_readsinprogress(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.readsInProgress)
}

// int32 partitionsCached = 7;
inline void StatisticsResp_Details::clear_partitionscached() {
  partitionscached_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::_internal_partitionscached() const {
  return partitionscached_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::partitionscached() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.partitionsCached)
  return _internal_partitionscached();
}
inline void StatisticsResp_Details::_internal_set_partitionscached(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partitionscached_ = value;
}
inline void StatisticsResp_Details::set_partitionscached(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partitionscached(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.partitionsCached)
}

// string status = 8;
inline void StatisticsResp_Details::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatisticsResp_Details::status() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.status)
  return _internal_status();
}
inline void StatisticsResp_Details::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.status)
}
inline std::string* StatisticsResp_Details::mutable_status() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.Details.status)
  return _internal_mutable_status();
}
inline const std::string& StatisticsResp_Details::_internal_status() const {
  return status_.Get();
}
inline void StatisticsResp_Details::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsResp_Details::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsResp.Details.status)
}
inline void StatisticsResp_Details::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsResp.Details.status)
}
inline void StatisticsResp_Details::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsResp.Details.status)
}
inline std::string* StatisticsResp_Details::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsResp_Details::release_status() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.Details.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatisticsResp_Details::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.Details.status)
}
inline std::string* StatisticsResp_Details::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsResp.Details.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatisticsResp_Details::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.Details.status)
}

// string stateReason = 9;
inline void StatisticsResp_Details::clear_statereason() {
  statereason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatisticsResp_Details::statereason() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.stateReason)
  return _internal_statereason();
}
inline void StatisticsResp_Details::set_statereason(const std::string& value) {
  _internal_set_statereason(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.stateReason)
}
inline std::string* StatisticsResp_Details::mutable_statereason() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.Details.stateReason)
  return _internal_mutable_statereason();
}
inline const std::string& StatisticsResp_Details::_internal_statereason() const {
  return statereason_.Get();
}
inline void StatisticsResp_Details::_internal_set_statereason(const std::string& value) {
  
  statereason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsResp_Details::set_statereason(std::string&& value) {
  
  statereason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsResp.Details.stateReason)
}
inline void StatisticsResp_Details::set_statereason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statereason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsResp.Details.stateReason)
}
inline void StatisticsResp_Details::set_statereason(const char* value,
    size_t size) {
  
  statereason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsResp.Details.stateReason)
}
inline std::string* StatisticsResp_Details::_internal_mutable_statereason() {
  
  return statereason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsResp_Details::release_statereason() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.Details.stateReason)
  return statereason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatisticsResp_Details::set_allocated_statereason(std::string* statereason) {
  if (statereason != nullptr) {
    
  } else {
    
  }
  statereason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statereason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.Details.stateReason)
}
inline std::string* StatisticsResp_Details::unsafe_arena_release_statereason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsResp.Details.stateReason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return statereason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatisticsResp_Details::unsafe_arena_set_allocated_statereason(
    std::string* statereason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (statereason != nullptr) {
    
  } else {
    
  }
  statereason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      statereason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.Details.stateReason)
}

// string name = 10;
inline void StatisticsResp_Details::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatisticsResp_Details::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.name)
  return _internal_name();
}
inline void StatisticsResp_Details::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.name)
}
inline std::string* StatisticsResp_Details::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.Details.name)
  return _internal_mutable_name();
}
inline const std::string& StatisticsResp_Details::_internal_name() const {
  return name_.Get();
}
inline void StatisticsResp_Details::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsResp_Details::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsResp.Details.name)
}
inline void StatisticsResp_Details::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsResp.Details.name)
}
inline void StatisticsResp_Details::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsResp.Details.name)
}
inline std::string* StatisticsResp_Details::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsResp_Details::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.Details.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatisticsResp_Details::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.Details.name)
}
inline std::string* StatisticsResp_Details::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsResp.Details.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatisticsResp_Details::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.Details.name)
}

// string mode = 11;
inline void StatisticsResp_Details::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatisticsResp_Details::mode() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.mode)
  return _internal_mode();
}
inline void StatisticsResp_Details::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.mode)
}
inline std::string* StatisticsResp_Details::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.Details.mode)
  return _internal_mutable_mode();
}
inline const std::string& StatisticsResp_Details::_internal_mode() const {
  return mode_.Get();
}
inline void StatisticsResp_Details::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsResp_Details::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsResp.Details.mode)
}
inline void StatisticsResp_Details::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsResp.Details.mode)
}
inline void StatisticsResp_Details::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsResp.Details.mode)
}
inline std::string* StatisticsResp_Details::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsResp_Details::release_mode() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.Details.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatisticsResp_Details::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.Details.mode)
}
inline std::string* StatisticsResp_Details::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsResp.Details.mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatisticsResp_Details::unsafe_arena_set_allocated_mode(
    std::string* mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.Details.mode)
}

// string position = 12;
inline void StatisticsResp_Details::clear_position() {
  position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatisticsResp_Details::position() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.position)
  return _internal_position();
}
inline void StatisticsResp_Details::set_position(const std::string& value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.position)
}
inline std::string* StatisticsResp_Details::mutable_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.Details.position)
  return _internal_mutable_position();
}
inline const std::string& StatisticsResp_Details::_internal_position() const {
  return position_.Get();
}
inline void StatisticsResp_Details::_internal_set_position(const std::string& value) {
  
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsResp_Details::set_position(std::string&& value) {
  
  position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsResp.Details.position)
}
inline void StatisticsResp_Details::set_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsResp.Details.position)
}
inline void StatisticsResp_Details::set_position(const char* value,
    size_t size) {
  
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsResp.Details.position)
}
inline std::string* StatisticsResp_Details::_internal_mutable_position() {
  
  return position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsResp_Details::release_position() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.Details.position)
  return position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatisticsResp_Details::set_allocated_position(std::string* position) {
  if (position != nullptr) {
    
  } else {
    
  }
  position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.Details.position)
}
inline std::string* StatisticsResp_Details::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsResp.Details.position)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return position_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatisticsResp_Details::unsafe_arena_set_allocated_position(
    std::string* position) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (position != nullptr) {
    
  } else {
    
  }
  position_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      position, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.Details.position)
}

// float progress = 13;
inline void StatisticsResp_Details::clear_progress() {
  progress_ = 0;
}
inline float StatisticsResp_Details::_internal_progress() const {
  return progress_;
}
inline float StatisticsResp_Details::progress() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.progress)
  return _internal_progress();
}
inline void StatisticsResp_Details::_internal_set_progress(float value) {
  
  progress_ = value;
}
inline void StatisticsResp_Details::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.progress)
}

// string lastCheckpoint = 14;
inline void StatisticsResp_Details::clear_lastcheckpoint() {
  lastcheckpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatisticsResp_Details::lastcheckpoint() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
  return _internal_lastcheckpoint();
}
inline void StatisticsResp_Details::set_lastcheckpoint(const std::string& value) {
  _internal_set_lastcheckpoint(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
}
inline std::string* StatisticsResp_Details::mutable_lastcheckpoint() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
  return _internal_mutable_lastcheckpoint();
}
inline const std::string& StatisticsResp_Details::_internal_lastcheckpoint() const {
  return lastcheckpoint_.Get();
}
inline void StatisticsResp_Details::_internal_set_lastcheckpoint(const std::string& value) {
  
  lastcheckpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsResp_Details::set_lastcheckpoint(std::string&& value) {
  
  lastcheckpoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
}
inline void StatisticsResp_Details::set_lastcheckpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastcheckpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
}
inline void StatisticsResp_Details::set_lastcheckpoint(const char* value,
    size_t size) {
  
  lastcheckpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
}
inline std::string* StatisticsResp_Details::_internal_mutable_lastcheckpoint() {
  
  return lastcheckpoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsResp_Details::release_lastcheckpoint() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
  return lastcheckpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatisticsResp_Details::set_allocated_lastcheckpoint(std::string* lastcheckpoint) {
  if (lastcheckpoint != nullptr) {
    
  } else {
    
  }
  lastcheckpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastcheckpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
}
inline std::string* StatisticsResp_Details::unsafe_arena_release_lastcheckpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lastcheckpoint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatisticsResp_Details::unsafe_arena_set_allocated_lastcheckpoint(
    std::string* lastcheckpoint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lastcheckpoint != nullptr) {
    
  } else {
    
  }
  lastcheckpoint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lastcheckpoint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.Details.lastCheckpoint)
}

// int64 eventsProcessedAfterRestart = 15;
inline void StatisticsResp_Details::clear_eventsprocessedafterrestart() {
  eventsprocessedafterrestart_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::_internal_eventsprocessedafterrestart() const {
  return eventsprocessedafterrestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::eventsprocessedafterrestart() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.eventsProcessedAfterRestart)
  return _internal_eventsprocessedafterrestart();
}
inline void StatisticsResp_Details::_internal_set_eventsprocessedafterrestart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  eventsprocessedafterrestart_ = value;
}
inline void StatisticsResp_Details::set_eventsprocessedafterrestart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_eventsprocessedafterrestart(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.eventsProcessedAfterRestart)
}

// string checkpointStatus = 16;
inline void StatisticsResp_Details::clear_checkpointstatus() {
  checkpointstatus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatisticsResp_Details::checkpointstatus() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
  return _internal_checkpointstatus();
}
inline void StatisticsResp_Details::set_checkpointstatus(const std::string& value) {
  _internal_set_checkpointstatus(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
}
inline std::string* StatisticsResp_Details::mutable_checkpointstatus() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
  return _internal_mutable_checkpointstatus();
}
inline const std::string& StatisticsResp_Details::_internal_checkpointstatus() const {
  return checkpointstatus_.Get();
}
inline void StatisticsResp_Details::_internal_set_checkpointstatus(const std::string& value) {
  
  checkpointstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatisticsResp_Details::set_checkpointstatus(std::string&& value) {
  
  checkpointstatus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
}
inline void StatisticsResp_Details::set_checkpointstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpointstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
}
inline void StatisticsResp_Details::set_checkpointstatus(const char* value,
    size_t size) {
  
  checkpointstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
}
inline std::string* StatisticsResp_Details::_internal_mutable_checkpointstatus() {
  
  return checkpointstatus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatisticsResp_Details::release_checkpointstatus() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
  return checkpointstatus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatisticsResp_Details::set_allocated_checkpointstatus(std::string* checkpointstatus) {
  if (checkpointstatus != nullptr) {
    
  } else {
    
  }
  checkpointstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkpointstatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
}
inline std::string* StatisticsResp_Details::unsafe_arena_release_checkpointstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checkpointstatus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatisticsResp_Details::unsafe_arena_set_allocated_checkpointstatus(
    std::string* checkpointstatus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checkpointstatus != nullptr) {
    
  } else {
    
  }
  checkpointstatus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checkpointstatus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.Details.checkpointStatus)
}

// int64 bufferedEvents = 17;
inline void StatisticsResp_Details::clear_bufferedevents() {
  bufferedevents_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::_internal_bufferedevents() const {
  return bufferedevents_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatisticsResp_Details::bufferedevents() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.bufferedEvents)
  return _internal_bufferedevents();
}
inline void StatisticsResp_Details::_internal_set_bufferedevents(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bufferedevents_ = value;
}
inline void StatisticsResp_Details::set_bufferedevents(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bufferedevents(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.bufferedEvents)
}

// int32 writePendingEventsBeforeCheckpoint = 18;
inline void StatisticsResp_Details::clear_writependingeventsbeforecheckpoint() {
  writependingeventsbeforecheckpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::_internal_writependingeventsbeforecheckpoint() const {
  return writependingeventsbeforecheckpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::writependingeventsbeforecheckpoint() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.writePendingEventsBeforeCheckpoint)
  return _internal_writependingeventsbeforecheckpoint();
}
inline void StatisticsResp_Details::_internal_set_writependingeventsbeforecheckpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  writependingeventsbeforecheckpoint_ = value;
}
inline void StatisticsResp_Details::set_writependingeventsbeforecheckpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_writependingeventsbeforecheckpoint(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.writePendingEventsBeforeCheckpoint)
}

// int32 writePendingEventsAfterCheckpoint = 19;
inline void StatisticsResp_Details::clear_writependingeventsaftercheckpoint() {
  writependingeventsaftercheckpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::_internal_writependingeventsaftercheckpoint() const {
  return writependingeventsaftercheckpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatisticsResp_Details::writependingeventsaftercheckpoint() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.Details.writePendingEventsAfterCheckpoint)
  return _internal_writependingeventsaftercheckpoint();
}
inline void StatisticsResp_Details::_internal_set_writependingeventsaftercheckpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  writependingeventsaftercheckpoint_ = value;
}
inline void StatisticsResp_Details::set_writependingeventsaftercheckpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_writependingeventsaftercheckpoint(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StatisticsResp.Details.writePendingEventsAfterCheckpoint)
}

// -------------------------------------------------------------------

// StatisticsResp

// .event_store.client.projections.StatisticsResp.Details details = 1;
inline bool StatisticsResp::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool StatisticsResp::has_details() const {
  return _internal_has_details();
}
inline void StatisticsResp::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::event_store::client::projections::StatisticsResp_Details& StatisticsResp::_internal_details() const {
  const ::event_store::client::projections::StatisticsResp_Details* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::StatisticsResp_Details*>(
      &::event_store::client::projections::_StatisticsResp_Details_default_instance_);
}
inline const ::event_store::client::projections::StatisticsResp_Details& StatisticsResp::details() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StatisticsResp.details)
  return _internal_details();
}
inline void StatisticsResp::unsafe_arena_set_allocated_details(
    ::event_store::client::projections::StatisticsResp_Details* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StatisticsResp.details)
}
inline ::event_store::client::projections::StatisticsResp_Details* StatisticsResp::release_details() {
  auto temp = unsafe_arena_release_details();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::StatisticsResp_Details* StatisticsResp::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StatisticsResp.details)
  
  ::event_store::client::projections::StatisticsResp_Details* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::StatisticsResp_Details* StatisticsResp::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::StatisticsResp_Details>(GetArena());
    details_ = p;
  }
  return details_;
}
inline ::event_store::client::projections::StatisticsResp_Details* StatisticsResp::mutable_details() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StatisticsResp.details)
  return _internal_mutable_details();
}
inline void StatisticsResp::set_allocated_details(::event_store::client::projections::StatisticsResp_Details* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StatisticsResp.details)
}

// -------------------------------------------------------------------

// StateReq_Options

// string name = 1;
inline void StateReq_Options::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StateReq_Options::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StateReq.Options.name)
  return _internal_name();
}
inline void StateReq_Options::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StateReq.Options.name)
}
inline std::string* StateReq_Options::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StateReq.Options.name)
  return _internal_mutable_name();
}
inline const std::string& StateReq_Options::_internal_name() const {
  return name_.Get();
}
inline void StateReq_Options::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StateReq_Options::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StateReq.Options.name)
}
inline void StateReq_Options::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StateReq.Options.name)
}
inline void StateReq_Options::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StateReq.Options.name)
}
inline std::string* StateReq_Options::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StateReq_Options::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StateReq.Options.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StateReq_Options::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StateReq.Options.name)
}
inline std::string* StateReq_Options::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StateReq.Options.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StateReq_Options::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StateReq.Options.name)
}

// string partition = 2;
inline void StateReq_Options::clear_partition() {
  partition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StateReq_Options::partition() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StateReq.Options.partition)
  return _internal_partition();
}
inline void StateReq_Options::set_partition(const std::string& value) {
  _internal_set_partition(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.StateReq.Options.partition)
}
inline std::string* StateReq_Options::mutable_partition() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StateReq.Options.partition)
  return _internal_mutable_partition();
}
inline const std::string& StateReq_Options::_internal_partition() const {
  return partition_.Get();
}
inline void StateReq_Options::_internal_set_partition(const std::string& value) {
  
  partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StateReq_Options::set_partition(std::string&& value) {
  
  partition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.StateReq.Options.partition)
}
inline void StateReq_Options::set_partition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.StateReq.Options.partition)
}
inline void StateReq_Options::set_partition(const char* value,
    size_t size) {
  
  partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.StateReq.Options.partition)
}
inline std::string* StateReq_Options::_internal_mutable_partition() {
  
  return partition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StateReq_Options::release_partition() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StateReq.Options.partition)
  return partition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StateReq_Options::set_allocated_partition(std::string* partition) {
  if (partition != nullptr) {
    
  } else {
    
  }
  partition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StateReq.Options.partition)
}
inline std::string* StateReq_Options::unsafe_arena_release_partition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.StateReq.Options.partition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return partition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StateReq_Options::unsafe_arena_set_allocated_partition(
    std::string* partition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (partition != nullptr) {
    
  } else {
    
  }
  partition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      partition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StateReq.Options.partition)
}

// -------------------------------------------------------------------

// StateReq

// .event_store.client.projections.StateReq.Options options = 1;
inline bool StateReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool StateReq::has_options() const {
  return _internal_has_options();
}
inline void StateReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::StateReq_Options& StateReq::_internal_options() const {
  const ::event_store::client::projections::StateReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::StateReq_Options*>(
      &::event_store::client::projections::_StateReq_Options_default_instance_);
}
inline const ::event_store::client::projections::StateReq_Options& StateReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StateReq.options)
  return _internal_options();
}
inline void StateReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::StateReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StateReq.options)
}
inline ::event_store::client::projections::StateReq_Options* StateReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::StateReq_Options* StateReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StateReq.options)
  
  ::event_store::client::projections::StateReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::StateReq_Options* StateReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::StateReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::StateReq_Options* StateReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StateReq.options)
  return _internal_mutable_options();
}
inline void StateReq::set_allocated_options(::event_store::client::projections::StateReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StateReq.options)
}

// -------------------------------------------------------------------

// StateResp

// .google.protobuf.Value state = 1;
inline bool StateResp::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool StateResp::has_state() const {
  return _internal_has_state();
}
inline const PROTOBUF_NAMESPACE_ID::Value& StateResp::_internal_state() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& StateResp::state() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.StateResp.state)
  return _internal_state();
}
inline void StateResp::unsafe_arena_set_allocated_state(
    PROTOBUF_NAMESPACE_ID::Value* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.StateResp.state)
}
inline PROTOBUF_NAMESPACE_ID::Value* StateResp::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* StateResp::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.StateResp.state)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = state_;
  state_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* StateResp::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArena());
    state_ = p;
  }
  return state_;
}
inline PROTOBUF_NAMESPACE_ID::Value* StateResp::mutable_state() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.StateResp.state)
  return _internal_mutable_state();
}
inline void StateResp::set_allocated_state(PROTOBUF_NAMESPACE_ID::Value* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state)->GetArena();
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.StateResp.state)
}

// -------------------------------------------------------------------

// ResultReq_Options

// string name = 1;
inline void ResultReq_Options::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultReq_Options::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.ResultReq.Options.name)
  return _internal_name();
}
inline void ResultReq_Options::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.ResultReq.Options.name)
}
inline std::string* ResultReq_Options::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.ResultReq.Options.name)
  return _internal_mutable_name();
}
inline const std::string& ResultReq_Options::_internal_name() const {
  return name_.Get();
}
inline void ResultReq_Options::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultReq_Options::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.ResultReq.Options.name)
}
inline void ResultReq_Options::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.ResultReq.Options.name)
}
inline void ResultReq_Options::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.ResultReq.Options.name)
}
inline std::string* ResultReq_Options::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultReq_Options::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.ResultReq.Options.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultReq_Options::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.ResultReq.Options.name)
}
inline std::string* ResultReq_Options::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.ResultReq.Options.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultReq_Options::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.ResultReq.Options.name)
}

// string partition = 2;
inline void ResultReq_Options::clear_partition() {
  partition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultReq_Options::partition() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.ResultReq.Options.partition)
  return _internal_partition();
}
inline void ResultReq_Options::set_partition(const std::string& value) {
  _internal_set_partition(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.ResultReq.Options.partition)
}
inline std::string* ResultReq_Options::mutable_partition() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.ResultReq.Options.partition)
  return _internal_mutable_partition();
}
inline const std::string& ResultReq_Options::_internal_partition() const {
  return partition_.Get();
}
inline void ResultReq_Options::_internal_set_partition(const std::string& value) {
  
  partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultReq_Options::set_partition(std::string&& value) {
  
  partition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.ResultReq.Options.partition)
}
inline void ResultReq_Options::set_partition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.ResultReq.Options.partition)
}
inline void ResultReq_Options::set_partition(const char* value,
    size_t size) {
  
  partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.ResultReq.Options.partition)
}
inline std::string* ResultReq_Options::_internal_mutable_partition() {
  
  return partition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultReq_Options::release_partition() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.ResultReq.Options.partition)
  return partition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultReq_Options::set_allocated_partition(std::string* partition) {
  if (partition != nullptr) {
    
  } else {
    
  }
  partition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.ResultReq.Options.partition)
}
inline std::string* ResultReq_Options::unsafe_arena_release_partition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.ResultReq.Options.partition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return partition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultReq_Options::unsafe_arena_set_allocated_partition(
    std::string* partition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (partition != nullptr) {
    
  } else {
    
  }
  partition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      partition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.ResultReq.Options.partition)
}

// -------------------------------------------------------------------

// ResultReq

// .event_store.client.projections.ResultReq.Options options = 1;
inline bool ResultReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ResultReq::has_options() const {
  return _internal_has_options();
}
inline void ResultReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::ResultReq_Options& ResultReq::_internal_options() const {
  const ::event_store::client::projections::ResultReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::ResultReq_Options*>(
      &::event_store::client::projections::_ResultReq_Options_default_instance_);
}
inline const ::event_store::client::projections::ResultReq_Options& ResultReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.ResultReq.options)
  return _internal_options();
}
inline void ResultReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::ResultReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.ResultReq.options)
}
inline ::event_store::client::projections::ResultReq_Options* ResultReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::ResultReq_Options* ResultReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.ResultReq.options)
  
  ::event_store::client::projections::ResultReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::ResultReq_Options* ResultReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::ResultReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::ResultReq_Options* ResultReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.ResultReq.options)
  return _internal_mutable_options();
}
inline void ResultReq::set_allocated_options(::event_store::client::projections::ResultReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.ResultReq.options)
}

// -------------------------------------------------------------------

// ResultResp

// .google.protobuf.Value result = 1;
inline bool ResultResp::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResultResp::has_result() const {
  return _internal_has_result();
}
inline const PROTOBUF_NAMESPACE_ID::Value& ResultResp::_internal_result() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& ResultResp::result() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.ResultResp.result)
  return _internal_result();
}
inline void ResultResp::unsafe_arena_set_allocated_result(
    PROTOBUF_NAMESPACE_ID::Value* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.ResultResp.result)
}
inline PROTOBUF_NAMESPACE_ID::Value* ResultResp::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* ResultResp::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.ResultResp.result)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = result_;
  result_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* ResultResp::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArena());
    result_ = p;
  }
  return result_;
}
inline PROTOBUF_NAMESPACE_ID::Value* ResultResp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.ResultResp.result)
  return _internal_mutable_result();
}
inline void ResultResp::set_allocated_result(PROTOBUF_NAMESPACE_ID::Value* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.ResultResp.result)
}

// -------------------------------------------------------------------

// ResetReq_Options

// string name = 1;
inline void ResetReq_Options::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResetReq_Options::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.ResetReq.Options.name)
  return _internal_name();
}
inline void ResetReq_Options::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.ResetReq.Options.name)
}
inline std::string* ResetReq_Options::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.ResetReq.Options.name)
  return _internal_mutable_name();
}
inline const std::string& ResetReq_Options::_internal_name() const {
  return name_.Get();
}
inline void ResetReq_Options::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResetReq_Options::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.ResetReq.Options.name)
}
inline void ResetReq_Options::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.ResetReq.Options.name)
}
inline void ResetReq_Options::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.ResetReq.Options.name)
}
inline std::string* ResetReq_Options::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResetReq_Options::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.ResetReq.Options.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetReq_Options::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.ResetReq.Options.name)
}
inline std::string* ResetReq_Options::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.ResetReq.Options.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResetReq_Options::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.ResetReq.Options.name)
}

// bool write_checkpoint = 2;
inline void ResetReq_Options::clear_write_checkpoint() {
  write_checkpoint_ = false;
}
inline bool ResetReq_Options::_internal_write_checkpoint() const {
  return write_checkpoint_;
}
inline bool ResetReq_Options::write_checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.ResetReq.Options.write_checkpoint)
  return _internal_write_checkpoint();
}
inline void ResetReq_Options::_internal_set_write_checkpoint(bool value) {
  
  write_checkpoint_ = value;
}
inline void ResetReq_Options::set_write_checkpoint(bool value) {
  _internal_set_write_checkpoint(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.ResetReq.Options.write_checkpoint)
}

// -------------------------------------------------------------------

// ResetReq

// .event_store.client.projections.ResetReq.Options options = 1;
inline bool ResetReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ResetReq::has_options() const {
  return _internal_has_options();
}
inline void ResetReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::ResetReq_Options& ResetReq::_internal_options() const {
  const ::event_store::client::projections::ResetReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::ResetReq_Options*>(
      &::event_store::client::projections::_ResetReq_Options_default_instance_);
}
inline const ::event_store::client::projections::ResetReq_Options& ResetReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.ResetReq.options)
  return _internal_options();
}
inline void ResetReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::ResetReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.ResetReq.options)
}
inline ::event_store::client::projections::ResetReq_Options* ResetReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::ResetReq_Options* ResetReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.ResetReq.options)
  
  ::event_store::client::projections::ResetReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::ResetReq_Options* ResetReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::ResetReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::ResetReq_Options* ResetReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.ResetReq.options)
  return _internal_mutable_options();
}
inline void ResetReq::set_allocated_options(::event_store::client::projections::ResetReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.ResetReq.options)
}

// -------------------------------------------------------------------

// ResetResp

// -------------------------------------------------------------------

// EnableReq_Options

// string name = 1;
inline void EnableReq_Options::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnableReq_Options::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.EnableReq.Options.name)
  return _internal_name();
}
inline void EnableReq_Options::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.EnableReq.Options.name)
}
inline std::string* EnableReq_Options::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.EnableReq.Options.name)
  return _internal_mutable_name();
}
inline const std::string& EnableReq_Options::_internal_name() const {
  return name_.Get();
}
inline void EnableReq_Options::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnableReq_Options::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.EnableReq.Options.name)
}
inline void EnableReq_Options::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.EnableReq.Options.name)
}
inline void EnableReq_Options::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.EnableReq.Options.name)
}
inline std::string* EnableReq_Options::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnableReq_Options::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.EnableReq.Options.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnableReq_Options::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.EnableReq.Options.name)
}
inline std::string* EnableReq_Options::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.EnableReq.Options.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EnableReq_Options::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.EnableReq.Options.name)
}

// -------------------------------------------------------------------

// EnableReq

// .event_store.client.projections.EnableReq.Options options = 1;
inline bool EnableReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool EnableReq::has_options() const {
  return _internal_has_options();
}
inline void EnableReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::EnableReq_Options& EnableReq::_internal_options() const {
  const ::event_store::client::projections::EnableReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::EnableReq_Options*>(
      &::event_store::client::projections::_EnableReq_Options_default_instance_);
}
inline const ::event_store::client::projections::EnableReq_Options& EnableReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.EnableReq.options)
  return _internal_options();
}
inline void EnableReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::EnableReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.EnableReq.options)
}
inline ::event_store::client::projections::EnableReq_Options* EnableReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::EnableReq_Options* EnableReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.EnableReq.options)
  
  ::event_store::client::projections::EnableReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::EnableReq_Options* EnableReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::EnableReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::EnableReq_Options* EnableReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.EnableReq.options)
  return _internal_mutable_options();
}
inline void EnableReq::set_allocated_options(::event_store::client::projections::EnableReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.EnableReq.options)
}

// -------------------------------------------------------------------

// EnableResp

// -------------------------------------------------------------------

// DisableReq_Options

// string name = 1;
inline void DisableReq_Options::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DisableReq_Options::name() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.DisableReq.Options.name)
  return _internal_name();
}
inline void DisableReq_Options::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.DisableReq.Options.name)
}
inline std::string* DisableReq_Options::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.DisableReq.Options.name)
  return _internal_mutable_name();
}
inline const std::string& DisableReq_Options::_internal_name() const {
  return name_.Get();
}
inline void DisableReq_Options::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisableReq_Options::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.projections.DisableReq.Options.name)
}
inline void DisableReq_Options::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.projections.DisableReq.Options.name)
}
inline void DisableReq_Options::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.projections.DisableReq.Options.name)
}
inline std::string* DisableReq_Options::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisableReq_Options::release_name() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.DisableReq.Options.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisableReq_Options::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.DisableReq.Options.name)
}
inline std::string* DisableReq_Options::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.projections.DisableReq.Options.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DisableReq_Options::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.DisableReq.Options.name)
}

// bool write_checkpoint = 2;
inline void DisableReq_Options::clear_write_checkpoint() {
  write_checkpoint_ = false;
}
inline bool DisableReq_Options::_internal_write_checkpoint() const {
  return write_checkpoint_;
}
inline bool DisableReq_Options::write_checkpoint() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.DisableReq.Options.write_checkpoint)
  return _internal_write_checkpoint();
}
inline void DisableReq_Options::_internal_set_write_checkpoint(bool value) {
  
  write_checkpoint_ = value;
}
inline void DisableReq_Options::set_write_checkpoint(bool value) {
  _internal_set_write_checkpoint(value);
  // @@protoc_insertion_point(field_set:event_store.client.projections.DisableReq.Options.write_checkpoint)
}

// -------------------------------------------------------------------

// DisableReq

// .event_store.client.projections.DisableReq.Options options = 1;
inline bool DisableReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DisableReq::has_options() const {
  return _internal_has_options();
}
inline void DisableReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::projections::DisableReq_Options& DisableReq::_internal_options() const {
  const ::event_store::client::projections::DisableReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::projections::DisableReq_Options*>(
      &::event_store::client::projections::_DisableReq_Options_default_instance_);
}
inline const ::event_store::client::projections::DisableReq_Options& DisableReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.projections.DisableReq.options)
  return _internal_options();
}
inline void DisableReq::unsafe_arena_set_allocated_options(
    ::event_store::client::projections::DisableReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.projections.DisableReq.options)
}
inline ::event_store::client::projections::DisableReq_Options* DisableReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::projections::DisableReq_Options* DisableReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.projections.DisableReq.options)
  
  ::event_store::client::projections::DisableReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::projections::DisableReq_Options* DisableReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::projections::DisableReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::projections::DisableReq_Options* DisableReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.projections.DisableReq.options)
  return _internal_mutable_options();
}
inline void DisableReq::set_allocated_options(::event_store::client::projections::DisableReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.projections.DisableReq.options)
}

// -------------------------------------------------------------------

// DisableResp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace projections
}  // namespace client
}  // namespace event_store

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_projections_2eproto

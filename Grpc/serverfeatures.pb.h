// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverfeatures.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serverfeatures_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serverfeatures_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "shared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serverfeatures_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serverfeatures_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serverfeatures_2eproto;
namespace event_store {
namespace client {
namespace server_features {
class SupportedMethod;
class SupportedMethodDefaultTypeInternal;
extern SupportedMethodDefaultTypeInternal _SupportedMethod_default_instance_;
class SupportedMethods;
class SupportedMethodsDefaultTypeInternal;
extern SupportedMethodsDefaultTypeInternal _SupportedMethods_default_instance_;
}  // namespace server_features
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::client::server_features::SupportedMethod* Arena::CreateMaybeMessage<::event_store::client::server_features::SupportedMethod>(Arena*);
template<> ::event_store::client::server_features::SupportedMethods* Arena::CreateMaybeMessage<::event_store::client::server_features::SupportedMethods>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace client {
namespace server_features {

// ===================================================================

class SupportedMethods PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.server_features.SupportedMethods) */ {
 public:
  inline SupportedMethods() : SupportedMethods(nullptr) {};
  virtual ~SupportedMethods();

  SupportedMethods(const SupportedMethods& from);
  SupportedMethods(SupportedMethods&& from) noexcept
    : SupportedMethods() {
    *this = ::std::move(from);
  }

  inline SupportedMethods& operator=(const SupportedMethods& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupportedMethods& operator=(SupportedMethods&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupportedMethods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportedMethods* internal_default_instance() {
    return reinterpret_cast<const SupportedMethods*>(
               &_SupportedMethods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SupportedMethods& a, SupportedMethods& b) {
    a.Swap(&b);
  }
  inline void Swap(SupportedMethods* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupportedMethods* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupportedMethods* New() const final {
    return CreateMaybeMessage<SupportedMethods>(nullptr);
  }

  SupportedMethods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupportedMethods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupportedMethods& from);
  void MergeFrom(const SupportedMethods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupportedMethods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.server_features.SupportedMethods";
  }
  protected:
  explicit SupportedMethods(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serverfeatures_2eproto);
    return ::descriptor_table_serverfeatures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodsFieldNumber = 1,
    kEventStoreServerVersionFieldNumber = 2,
  };
  // repeated .event_store.client.server_features.SupportedMethod methods = 1;
  int methods_size() const;
  private:
  int _internal_methods_size() const;
  public:
  void clear_methods();
  ::event_store::client::server_features::SupportedMethod* mutable_methods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::server_features::SupportedMethod >*
      mutable_methods();
  private:
  const ::event_store::client::server_features::SupportedMethod& _internal_methods(int index) const;
  ::event_store::client::server_features::SupportedMethod* _internal_add_methods();
  public:
  const ::event_store::client::server_features::SupportedMethod& methods(int index) const;
  ::event_store::client::server_features::SupportedMethod* add_methods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::server_features::SupportedMethod >&
      methods() const;

  // string event_store_server_version = 2;
  void clear_event_store_server_version();
  const std::string& event_store_server_version() const;
  void set_event_store_server_version(const std::string& value);
  void set_event_store_server_version(std::string&& value);
  void set_event_store_server_version(const char* value);
  void set_event_store_server_version(const char* value, size_t size);
  std::string* mutable_event_store_server_version();
  std::string* release_event_store_server_version();
  void set_allocated_event_store_server_version(std::string* event_store_server_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_event_store_server_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_store_server_version(
      std::string* event_store_server_version);
  private:
  const std::string& _internal_event_store_server_version() const;
  void _internal_set_event_store_server_version(const std::string& value);
  std::string* _internal_mutable_event_store_server_version();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.server_features.SupportedMethods)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::server_features::SupportedMethod > methods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_store_server_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serverfeatures_2eproto;
};
// -------------------------------------------------------------------

class SupportedMethod PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.server_features.SupportedMethod) */ {
 public:
  inline SupportedMethod() : SupportedMethod(nullptr) {};
  virtual ~SupportedMethod();

  SupportedMethod(const SupportedMethod& from);
  SupportedMethod(SupportedMethod&& from) noexcept
    : SupportedMethod() {
    *this = ::std::move(from);
  }

  inline SupportedMethod& operator=(const SupportedMethod& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupportedMethod& operator=(SupportedMethod&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupportedMethod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportedMethod* internal_default_instance() {
    return reinterpret_cast<const SupportedMethod*>(
               &_SupportedMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SupportedMethod& a, SupportedMethod& b) {
    a.Swap(&b);
  }
  inline void Swap(SupportedMethod* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupportedMethod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupportedMethod* New() const final {
    return CreateMaybeMessage<SupportedMethod>(nullptr);
  }

  SupportedMethod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupportedMethod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupportedMethod& from);
  void MergeFrom(const SupportedMethod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupportedMethod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.server_features.SupportedMethod";
  }
  protected:
  explicit SupportedMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serverfeatures_2eproto);
    return ::descriptor_table_serverfeatures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 3,
    kMethodNameFieldNumber = 1,
    kServiceNameFieldNumber = 2,
  };
  // repeated string features = 3;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  const std::string& features(int index) const;
  std::string* mutable_features(int index);
  void set_features(int index, const std::string& value);
  void set_features(int index, std::string&& value);
  void set_features(int index, const char* value);
  void set_features(int index, const char* value, size_t size);
  std::string* add_features();
  void add_features(const std::string& value);
  void add_features(std::string&& value);
  void add_features(const char* value);
  void add_features(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_features();
  private:
  const std::string& _internal_features(int index) const;
  std::string* _internal_add_features();
  public:

  // string method_name = 1;
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method_name(
      std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.server_features.SupportedMethod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serverfeatures_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SupportedMethods

// repeated .event_store.client.server_features.SupportedMethod methods = 1;
inline int SupportedMethods::_internal_methods_size() const {
  return methods_.size();
}
inline int SupportedMethods::methods_size() const {
  return _internal_methods_size();
}
inline void SupportedMethods::clear_methods() {
  methods_.Clear();
}
inline ::event_store::client::server_features::SupportedMethod* SupportedMethods::mutable_methods(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.server_features.SupportedMethods.methods)
  return methods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::server_features::SupportedMethod >*
SupportedMethods::mutable_methods() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.server_features.SupportedMethods.methods)
  return &methods_;
}
inline const ::event_store::client::server_features::SupportedMethod& SupportedMethods::_internal_methods(int index) const {
  return methods_.Get(index);
}
inline const ::event_store::client::server_features::SupportedMethod& SupportedMethods::methods(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.server_features.SupportedMethods.methods)
  return _internal_methods(index);
}
inline ::event_store::client::server_features::SupportedMethod* SupportedMethods::_internal_add_methods() {
  return methods_.Add();
}
inline ::event_store::client::server_features::SupportedMethod* SupportedMethods::add_methods() {
  // @@protoc_insertion_point(field_add:event_store.client.server_features.SupportedMethods.methods)
  return _internal_add_methods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::server_features::SupportedMethod >&
SupportedMethods::methods() const {
  // @@protoc_insertion_point(field_list:event_store.client.server_features.SupportedMethods.methods)
  return methods_;
}

// string event_store_server_version = 2;
inline void SupportedMethods::clear_event_store_server_version() {
  event_store_server_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SupportedMethods::event_store_server_version() const {
  // @@protoc_insertion_point(field_get:event_store.client.server_features.SupportedMethods.event_store_server_version)
  return _internal_event_store_server_version();
}
inline void SupportedMethods::set_event_store_server_version(const std::string& value) {
  _internal_set_event_store_server_version(value);
  // @@protoc_insertion_point(field_set:event_store.client.server_features.SupportedMethods.event_store_server_version)
}
inline std::string* SupportedMethods::mutable_event_store_server_version() {
  // @@protoc_insertion_point(field_mutable:event_store.client.server_features.SupportedMethods.event_store_server_version)
  return _internal_mutable_event_store_server_version();
}
inline const std::string& SupportedMethods::_internal_event_store_server_version() const {
  return event_store_server_version_.Get();
}
inline void SupportedMethods::_internal_set_event_store_server_version(const std::string& value) {
  
  event_store_server_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SupportedMethods::set_event_store_server_version(std::string&& value) {
  
  event_store_server_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.server_features.SupportedMethods.event_store_server_version)
}
inline void SupportedMethods::set_event_store_server_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_store_server_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.server_features.SupportedMethods.event_store_server_version)
}
inline void SupportedMethods::set_event_store_server_version(const char* value,
    size_t size) {
  
  event_store_server_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.server_features.SupportedMethods.event_store_server_version)
}
inline std::string* SupportedMethods::_internal_mutable_event_store_server_version() {
  
  return event_store_server_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SupportedMethods::release_event_store_server_version() {
  // @@protoc_insertion_point(field_release:event_store.client.server_features.SupportedMethods.event_store_server_version)
  return event_store_server_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SupportedMethods::set_allocated_event_store_server_version(std::string* event_store_server_version) {
  if (event_store_server_version != nullptr) {
    
  } else {
    
  }
  event_store_server_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_store_server_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.server_features.SupportedMethods.event_store_server_version)
}
inline std::string* SupportedMethods::unsafe_arena_release_event_store_server_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.server_features.SupportedMethods.event_store_server_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return event_store_server_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SupportedMethods::unsafe_arena_set_allocated_event_store_server_version(
    std::string* event_store_server_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (event_store_server_version != nullptr) {
    
  } else {
    
  }
  event_store_server_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      event_store_server_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.server_features.SupportedMethods.event_store_server_version)
}

// -------------------------------------------------------------------

// SupportedMethod

// string method_name = 1;
inline void SupportedMethod::clear_method_name() {
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SupportedMethod::method_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.server_features.SupportedMethod.method_name)
  return _internal_method_name();
}
inline void SupportedMethod::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.server_features.SupportedMethod.method_name)
}
inline std::string* SupportedMethod::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.server_features.SupportedMethod.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& SupportedMethod::_internal_method_name() const {
  return method_name_.Get();
}
inline void SupportedMethod::_internal_set_method_name(const std::string& value) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SupportedMethod::set_method_name(std::string&& value) {
  
  method_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.server_features.SupportedMethod.method_name)
}
inline void SupportedMethod::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.server_features.SupportedMethod.method_name)
}
inline void SupportedMethod::set_method_name(const char* value,
    size_t size) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.server_features.SupportedMethod.method_name)
}
inline std::string* SupportedMethod::_internal_mutable_method_name() {
  
  return method_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SupportedMethod::release_method_name() {
  // @@protoc_insertion_point(field_release:event_store.client.server_features.SupportedMethod.method_name)
  return method_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SupportedMethod::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.server_features.SupportedMethod.method_name)
}
inline std::string* SupportedMethod::unsafe_arena_release_method_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.server_features.SupportedMethod.method_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SupportedMethod::unsafe_arena_set_allocated_method_name(
    std::string* method_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.server_features.SupportedMethod.method_name)
}

// string service_name = 2;
inline void SupportedMethod::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SupportedMethod::service_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.server_features.SupportedMethod.service_name)
  return _internal_service_name();
}
inline void SupportedMethod::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.server_features.SupportedMethod.service_name)
}
inline std::string* SupportedMethod::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.server_features.SupportedMethod.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& SupportedMethod::_internal_service_name() const {
  return service_name_.Get();
}
inline void SupportedMethod::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SupportedMethod::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.server_features.SupportedMethod.service_name)
}
inline void SupportedMethod::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.server_features.SupportedMethod.service_name)
}
inline void SupportedMethod::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.server_features.SupportedMethod.service_name)
}
inline std::string* SupportedMethod::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SupportedMethod::release_service_name() {
  // @@protoc_insertion_point(field_release:event_store.client.server_features.SupportedMethod.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SupportedMethod::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.server_features.SupportedMethod.service_name)
}
inline std::string* SupportedMethod::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.server_features.SupportedMethod.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SupportedMethod::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.server_features.SupportedMethod.service_name)
}

// repeated string features = 3;
inline int SupportedMethod::_internal_features_size() const {
  return features_.size();
}
inline int SupportedMethod::features_size() const {
  return _internal_features_size();
}
inline void SupportedMethod::clear_features() {
  features_.Clear();
}
inline std::string* SupportedMethod::add_features() {
  // @@protoc_insertion_point(field_add_mutable:event_store.client.server_features.SupportedMethod.features)
  return _internal_add_features();
}
inline const std::string& SupportedMethod::_internal_features(int index) const {
  return features_.Get(index);
}
inline const std::string& SupportedMethod::features(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.server_features.SupportedMethod.features)
  return _internal_features(index);
}
inline std::string* SupportedMethod::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.server_features.SupportedMethod.features)
  return features_.Mutable(index);
}
inline void SupportedMethod::set_features(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:event_store.client.server_features.SupportedMethod.features)
  features_.Mutable(index)->assign(value);
}
inline void SupportedMethod::set_features(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:event_store.client.server_features.SupportedMethod.features)
  features_.Mutable(index)->assign(std::move(value));
}
inline void SupportedMethod::set_features(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_store.client.server_features.SupportedMethod.features)
}
inline void SupportedMethod::set_features(int index, const char* value, size_t size) {
  features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_store.client.server_features.SupportedMethod.features)
}
inline std::string* SupportedMethod::_internal_add_features() {
  return features_.Add();
}
inline void SupportedMethod::add_features(const std::string& value) {
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_store.client.server_features.SupportedMethod.features)
}
inline void SupportedMethod::add_features(std::string&& value) {
  features_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_store.client.server_features.SupportedMethod.features)
}
inline void SupportedMethod::add_features(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_store.client.server_features.SupportedMethod.features)
}
inline void SupportedMethod::add_features(const char* value, size_t size) {
  features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_store.client.server_features.SupportedMethod.features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SupportedMethod::features() const {
  // @@protoc_insertion_point(field_list:event_store.client.server_features.SupportedMethod.features)
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SupportedMethod::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.server_features.SupportedMethod.features)
  return &features_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_features
}  // namespace client
}  // namespace event_store

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serverfeatures_2eproto

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: operations.proto
#ifndef GRPC_operations_2eproto__INCLUDED
#define GRPC_operations_2eproto__INCLUDED

#include "operations.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace event_store {
namespace client {
namespace operations {

class Operations final {
 public:
  static constexpr char const* service_full_name() {
    return "event_store.client.operations.Operations";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::event_store::client::operations::ScavengeResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>> AsyncStartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>>(AsyncStartScavengeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>> PrepareAsyncStartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>>(PrepareAsyncStartScavengeRaw(context, request, cq));
    }
    virtual ::grpc::Status StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::event_store::client::operations::ScavengeResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>> AsyncStopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>>(AsyncStopScavengeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>> PrepareAsyncStopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>>(PrepareAsyncStopScavengeRaw(context, request, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> AsyncShutdown(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> AsyncMergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(AsyncMergeIndexesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> PrepareAsyncMergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(PrepareAsyncMergeIndexesRaw(context, request, cq));
    }
    virtual ::grpc::Status ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> AsyncResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(AsyncResignNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> PrepareAsyncResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(PrepareAsyncResignNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::event_store::client::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> AsyncSetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(AsyncSetNodePriorityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> PrepareAsyncSetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(PrepareAsyncSetNodePriorityRaw(context, request, cq));
    }
    virtual ::grpc::Status RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> AsyncRestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(AsyncRestartPersistentSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> PrepareAsyncRestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(PrepareAsyncRestartPersistentSubscriptionsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MergeIndexes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MergeIndexes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MergeIndexes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResignNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResignNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResignNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNodePriority(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetNodePriority(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetNodePriority(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>* AsyncStartScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>* PrepareAsyncStartScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>* AsyncStopScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::operations::ScavengeResp>* PrepareAsyncStopScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* AsyncMergeIndexesRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* PrepareAsyncMergeIndexesRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* AsyncResignNodeRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* PrepareAsyncResignNodeRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* AsyncSetNodePriorityRaw(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* PrepareAsyncSetNodePriorityRaw(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* AsyncRestartPersistentSubscriptionsRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* PrepareAsyncRestartPersistentSubscriptionsRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::event_store::client::operations::ScavengeResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>> AsyncStartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>>(AsyncStartScavengeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>> PrepareAsyncStartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>>(PrepareAsyncStartScavengeRaw(context, request, cq));
    }
    ::grpc::Status StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::event_store::client::operations::ScavengeResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>> AsyncStopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>>(AsyncStopScavengeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>> PrepareAsyncStopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>>(PrepareAsyncStopScavengeRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> AsyncShutdown(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> AsyncMergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(AsyncMergeIndexesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> PrepareAsyncMergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(PrepareAsyncMergeIndexesRaw(context, request, cq));
    }
    ::grpc::Status ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> AsyncResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(AsyncResignNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> PrepareAsyncResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(PrepareAsyncResignNodeRaw(context, request, cq));
    }
    ::grpc::Status SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::event_store::client::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> AsyncSetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(AsyncSetNodePriorityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> PrepareAsyncSetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(PrepareAsyncSetNodePriorityRaw(context, request, cq));
    }
    ::grpc::Status RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> AsyncRestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(AsyncRestartPersistentSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> PrepareAsyncRestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(PrepareAsyncRestartPersistentSubscriptionsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)>) override;
      void StartScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)>) override;
      void StopScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      void MergeIndexes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MergeIndexes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MergeIndexes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      void ResignNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResignNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResignNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetNodePriority(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetNodePriority(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetNodePriority(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>* AsyncStartScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>* PrepareAsyncStartScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>* AsyncStopScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>* PrepareAsyncStopScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* AsyncMergeIndexesRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* PrepareAsyncMergeIndexesRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* AsyncResignNodeRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* PrepareAsyncResignNodeRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* AsyncSetNodePriorityRaw(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* PrepareAsyncSetNodePriorityRaw(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* AsyncRestartPersistentSubscriptionsRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* PrepareAsyncRestartPersistentSubscriptionsRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartScavenge_;
    const ::grpc::internal::RpcMethod rpcmethod_StopScavenge_;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_MergeIndexes_;
    const ::grpc::internal::RpcMethod rpcmethod_ResignNode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetNodePriority_;
    const ::grpc::internal::RpcMethod rpcmethod_RestartPersistentSubscriptions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartScavenge(::grpc::ServerContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response);
    virtual ::grpc::Status StopScavenge(::grpc::ServerContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response);
    virtual ::grpc::Status MergeIndexes(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response);
    virtual ::grpc::Status ResignNode(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response);
    virtual ::grpc::Status SetNodePriority(::grpc::ServerContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response);
    virtual ::grpc::Status RestartPersistentSubscriptions(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartScavenge() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StartScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartScavenge(::grpc::ServerContext* context, ::event_store::client::operations::StartScavengeReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::operations::ScavengeResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopScavenge() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StopScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopScavenge(::grpc::ServerContext* context, ::event_store::client::operations::StopScavengeReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::operations::ScavengeResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::event_store::client::Empty* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MergeIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MergeIndexes() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MergeIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeIndexes(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMergeIndexes(::grpc::ServerContext* context, ::event_store::client::Empty* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResignNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResignNode() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ResignNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResignNode(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResignNode(::grpc::ServerContext* context, ::event_store::client::Empty* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNodePriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetNodePriority() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetNodePriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePriority(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::SetNodePriorityReq* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodePriority(::grpc::ServerContext* context, ::event_store::client::operations::SetNodePriorityReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestartPersistentSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestartPersistentSubscriptions() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RestartPersistentSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartPersistentSubscriptions(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartPersistentSubscriptions(::grpc::ServerContext* context, ::event_store::client::Empty* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartScavenge<WithAsyncMethod_StopScavenge<WithAsyncMethod_Shutdown<WithAsyncMethod_MergeIndexes<WithAsyncMethod_ResignNode<WithAsyncMethod_SetNodePriority<WithAsyncMethod_RestartPersistentSubscriptions<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartScavenge() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::operations::StartScavengeReq, ::event_store::client::operations::ScavengeResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response) { return this->StartScavenge(context, request, response); }));}
    void SetMessageAllocatorFor_StartScavenge(
        ::grpc::experimental::MessageAllocator< ::event_store::client::operations::StartScavengeReq, ::event_store::client::operations::ScavengeResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::operations::StartScavengeReq, ::event_store::client::operations::ScavengeResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StartScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartScavenge(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::operations::StartScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartScavenge(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::operations::StartScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopScavenge() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::operations::StopScavengeReq, ::event_store::client::operations::ScavengeResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response) { return this->StopScavenge(context, request, response); }));}
    void SetMessageAllocatorFor_StopScavenge(
        ::grpc::experimental::MessageAllocator< ::event_store::client::operations::StopScavengeReq, ::event_store::client::operations::ScavengeResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::operations::StopScavengeReq, ::event_store::client::operations::ScavengeResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StopScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopScavenge(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::operations::StopScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopScavenge(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::operations::StopScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Shutdown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) { return this->Shutdown(context, request, response); }));}
    void SetMessageAllocatorFor_Shutdown(
        ::grpc::experimental::MessageAllocator< ::event_store::client::Empty, ::event_store::client::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Shutdown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MergeIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MergeIndexes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) { return this->MergeIndexes(context, request, response); }));}
    void SetMessageAllocatorFor_MergeIndexes(
        ::grpc::experimental::MessageAllocator< ::event_store::client::Empty, ::event_store::client::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MergeIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeIndexes(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MergeIndexes(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MergeIndexes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResignNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResignNode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) { return this->ResignNode(context, request, response); }));}
    void SetMessageAllocatorFor_ResignNode(
        ::grpc::experimental::MessageAllocator< ::event_store::client::Empty, ::event_store::client::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResignNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResignNode(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResignNode(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResignNode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetNodePriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetNodePriority() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::operations::SetNodePriorityReq, ::event_store::client::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response) { return this->SetNodePriority(context, request, response); }));}
    void SetMessageAllocatorFor_SetNodePriority(
        ::grpc::experimental::MessageAllocator< ::event_store::client::operations::SetNodePriorityReq, ::event_store::client::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::operations::SetNodePriorityReq, ::event_store::client::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetNodePriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePriority(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::SetNodePriorityReq* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetNodePriority(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::operations::SetNodePriorityReq* /*request*/, ::event_store::client::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetNodePriority(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::operations::SetNodePriorityReq* /*request*/, ::event_store::client::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RestartPersistentSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RestartPersistentSubscriptions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) { return this->RestartPersistentSubscriptions(context, request, response); }));}
    void SetMessageAllocatorFor_RestartPersistentSubscriptions(
        ::grpc::experimental::MessageAllocator< ::event_store::client::Empty, ::event_store::client::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RestartPersistentSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartPersistentSubscriptions(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartPersistentSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartPersistentSubscriptions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartScavenge<ExperimentalWithCallbackMethod_StopScavenge<ExperimentalWithCallbackMethod_Shutdown<ExperimentalWithCallbackMethod_MergeIndexes<ExperimentalWithCallbackMethod_ResignNode<ExperimentalWithCallbackMethod_SetNodePriority<ExperimentalWithCallbackMethod_RestartPersistentSubscriptions<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartScavenge<ExperimentalWithCallbackMethod_StopScavenge<ExperimentalWithCallbackMethod_Shutdown<ExperimentalWithCallbackMethod_MergeIndexes<ExperimentalWithCallbackMethod_ResignNode<ExperimentalWithCallbackMethod_SetNodePriority<ExperimentalWithCallbackMethod_RestartPersistentSubscriptions<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartScavenge() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StartScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopScavenge() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StopScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MergeIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MergeIndexes() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MergeIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeIndexes(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResignNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResignNode() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ResignNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResignNode(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNodePriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetNodePriority() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetNodePriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePriority(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::SetNodePriorityReq* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestartPersistentSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestartPersistentSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RestartPersistentSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartPersistentSubscriptions(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartScavenge() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StartScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartScavenge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopScavenge() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StopScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopScavenge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Shutdown() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MergeIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MergeIndexes() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MergeIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeIndexes(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMergeIndexes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResignNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResignNode() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ResignNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResignNode(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResignNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetNodePriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetNodePriority() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetNodePriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePriority(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::SetNodePriorityReq* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodePriority(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestartPersistentSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestartPersistentSubscriptions() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RestartPersistentSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartPersistentSubscriptions(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartPersistentSubscriptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartScavenge() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartScavenge(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StartScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartScavenge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartScavenge(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopScavenge() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopScavenge(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StopScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopScavenge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopScavenge(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Shutdown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Shutdown(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Shutdown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MergeIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MergeIndexes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MergeIndexes(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MergeIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MergeIndexes(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MergeIndexes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MergeIndexes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResignNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResignNode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResignNode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ResignNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResignNode(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResignNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResignNode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetNodePriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetNodePriority() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetNodePriority(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetNodePriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePriority(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::SetNodePriorityReq* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetNodePriority(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetNodePriority(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RestartPersistentSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RestartPersistentSubscriptions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestartPersistentSubscriptions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RestartPersistentSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartPersistentSubscriptions(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartPersistentSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartPersistentSubscriptions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartScavenge() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::operations::StartScavengeReq, ::event_store::client::operations::ScavengeResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::operations::StartScavengeReq, ::event_store::client::operations::ScavengeResp>* streamer) {
                       return this->StreamedStartScavenge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StartScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartScavenge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::operations::StartScavengeReq,::event_store::client::operations::ScavengeResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopScavenge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopScavenge() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::operations::StopScavengeReq, ::event_store::client::operations::ScavengeResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::operations::StopScavengeReq, ::event_store::client::operations::ScavengeResp>* streamer) {
                       return this->StreamedStopScavenge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopScavenge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopScavenge(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::StopScavengeReq* /*request*/, ::event_store::client::operations::ScavengeResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopScavenge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::operations::StopScavengeReq,::event_store::client::operations::ScavengeResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::Empty, ::event_store::client::Empty>* streamer) {
                       return this->StreamedShutdown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::Empty,::event_store::client::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MergeIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MergeIndexes() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::Empty, ::event_store::client::Empty>* streamer) {
                       return this->StreamedMergeIndexes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MergeIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MergeIndexes(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMergeIndexes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::Empty,::event_store::client::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResignNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResignNode() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::Empty, ::event_store::client::Empty>* streamer) {
                       return this->StreamedResignNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResignNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResignNode(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResignNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::Empty,::event_store::client::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNodePriority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetNodePriority() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::operations::SetNodePriorityReq, ::event_store::client::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::operations::SetNodePriorityReq, ::event_store::client::Empty>* streamer) {
                       return this->StreamedSetNodePriority(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetNodePriority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNodePriority(::grpc::ServerContext* /*context*/, const ::event_store::client::operations::SetNodePriorityReq* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNodePriority(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::operations::SetNodePriorityReq,::event_store::client::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestartPersistentSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestartPersistentSubscriptions() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::Empty, ::event_store::client::Empty>* streamer) {
                       return this->StreamedRestartPersistentSubscriptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RestartPersistentSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestartPersistentSubscriptions(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestartPersistentSubscriptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::Empty,::event_store::client::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartScavenge<WithStreamedUnaryMethod_StopScavenge<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_MergeIndexes<WithStreamedUnaryMethod_ResignNode<WithStreamedUnaryMethod_SetNodePriority<WithStreamedUnaryMethod_RestartPersistentSubscriptions<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartScavenge<WithStreamedUnaryMethod_StopScavenge<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_MergeIndexes<WithStreamedUnaryMethod_ResignNode<WithStreamedUnaryMethod_SetNodePriority<WithStreamedUnaryMethod_RestartPersistentSubscriptions<Service > > > > > > > StreamedService;
};

}  // namespace operations
}  // namespace client
}  // namespace event_store


#endif  // GRPC_operations_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: projections.proto
#ifndef GRPC_projections_2eproto__INCLUDED
#define GRPC_projections_2eproto__INCLUDED

#include "projections.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace event_store {
namespace client {
namespace projections {

class Projections final {
 public:
  static constexpr char const* service_full_name() {
    return "event_store.client.projections.Projections";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::event_store::client::projections::CreateResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::CreateResp>> AsyncCreate(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::CreateResp>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::CreateResp>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::CreateResp>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::event_store::client::projections::UpdateResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::UpdateResp>> AsyncUpdate(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::UpdateResp>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::UpdateResp>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::UpdateResp>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::event_store::client::projections::DeleteResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DeleteResp>> AsyncDelete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DeleteResp>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DeleteResp>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DeleteResp>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::event_store::client::projections::StatisticsResp>> Statistics(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::event_store::client::projections::StatisticsResp>>(StatisticsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::event_store::client::projections::StatisticsResp>> AsyncStatistics(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::event_store::client::projections::StatisticsResp>>(AsyncStatisticsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::event_store::client::projections::StatisticsResp>> PrepareAsyncStatistics(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::event_store::client::projections::StatisticsResp>>(PrepareAsyncStatisticsRaw(context, request, cq));
    }
    virtual ::grpc::Status Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::event_store::client::projections::DisableResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DisableResp>> AsyncDisable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DisableResp>>(AsyncDisableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DisableResp>> PrepareAsyncDisable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DisableResp>>(PrepareAsyncDisableRaw(context, request, cq));
    }
    virtual ::grpc::Status Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::event_store::client::projections::EnableResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::EnableResp>> AsyncEnable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::EnableResp>>(AsyncEnableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::EnableResp>> PrepareAsyncEnable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::EnableResp>>(PrepareAsyncEnableRaw(context, request, cq));
    }
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::event_store::client::projections::ResetResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResetResp>> AsyncReset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResetResp>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResetResp>> PrepareAsyncReset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResetResp>>(PrepareAsyncResetRaw(context, request, cq));
    }
    virtual ::grpc::Status State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::event_store::client::projections::StateResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::StateResp>> AsyncState(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::StateResp>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::StateResp>> PrepareAsyncState(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::StateResp>>(PrepareAsyncStateRaw(context, request, cq));
    }
    virtual ::grpc::Status Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::event_store::client::projections::ResultResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResultResp>> AsyncResult(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResultResp>>(AsyncResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResultResp>> PrepareAsyncResult(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResultResp>>(PrepareAsyncResultRaw(context, request, cq));
    }
    virtual ::grpc::Status RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> AsyncRestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(AsyncRestartSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>> PrepareAsyncRestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>>(PrepareAsyncRestartSubsystemRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::CreateResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::CreateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::UpdateResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::UpdateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DeleteResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Statistics(::grpc::ClientContext* context, ::event_store::client::projections::StatisticsReq* request, ::grpc::ClientReadReactor< ::event_store::client::projections::StatisticsResp>* reactor) = 0;
      #else
      virtual void Statistics(::grpc::ClientContext* context, ::event_store::client::projections::StatisticsReq* request, ::grpc::experimental::ClientReadReactor< ::event_store::client::projections::StatisticsResp>* reactor) = 0;
      #endif
      virtual void Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DisableResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DisableResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DisableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::EnableResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::EnableResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::EnableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResetResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResetResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResetResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::StateResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::StateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::StateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Result(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResultResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Result(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResultResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Result(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResultResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::CreateResp>* AsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::CreateResp>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::UpdateResp>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::UpdateResp>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DeleteResp>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DeleteResp>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::event_store::client::projections::StatisticsResp>* StatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::event_store::client::projections::StatisticsResp>* AsyncStatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::event_store::client::projections::StatisticsResp>* PrepareAsyncStatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DisableResp>* AsyncDisableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::DisableResp>* PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::EnableResp>* AsyncEnableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::EnableResp>* PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResetResp>* AsyncResetRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResetResp>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::StateResp>* AsyncStateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::StateResp>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResultResp>* AsyncResultRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::projections::ResultResp>* PrepareAsyncResultRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* AsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::Empty>* PrepareAsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::event_store::client::projections::CreateResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::CreateResp>> AsyncCreate(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::CreateResp>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::CreateResp>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::CreateResp>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::event_store::client::projections::UpdateResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::UpdateResp>> AsyncUpdate(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::UpdateResp>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::UpdateResp>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::UpdateResp>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::event_store::client::projections::DeleteResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DeleteResp>> AsyncDelete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DeleteResp>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DeleteResp>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DeleteResp>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::event_store::client::projections::StatisticsResp>> Statistics(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::event_store::client::projections::StatisticsResp>>(StatisticsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::event_store::client::projections::StatisticsResp>> AsyncStatistics(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::event_store::client::projections::StatisticsResp>>(AsyncStatisticsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::event_store::client::projections::StatisticsResp>> PrepareAsyncStatistics(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::event_store::client::projections::StatisticsResp>>(PrepareAsyncStatisticsRaw(context, request, cq));
    }
    ::grpc::Status Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::event_store::client::projections::DisableResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DisableResp>> AsyncDisable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DisableResp>>(AsyncDisableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DisableResp>> PrepareAsyncDisable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DisableResp>>(PrepareAsyncDisableRaw(context, request, cq));
    }
    ::grpc::Status Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::event_store::client::projections::EnableResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::EnableResp>> AsyncEnable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::EnableResp>>(AsyncEnableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::EnableResp>> PrepareAsyncEnable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::EnableResp>>(PrepareAsyncEnableRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::event_store::client::projections::ResetResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResetResp>> AsyncReset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResetResp>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResetResp>> PrepareAsyncReset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResetResp>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::event_store::client::projections::StateResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::StateResp>> AsyncState(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::StateResp>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::StateResp>> PrepareAsyncState(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::StateResp>>(PrepareAsyncStateRaw(context, request, cq));
    }
    ::grpc::Status Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::event_store::client::projections::ResultResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResultResp>> AsyncResult(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResultResp>>(AsyncResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResultResp>> PrepareAsyncResult(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResultResp>>(PrepareAsyncResultRaw(context, request, cq));
    }
    ::grpc::Status RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> AsyncRestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(AsyncRestartSubsystemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>> PrepareAsyncRestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>>(PrepareAsyncRestartSubsystemRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::CreateResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::CreateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::UpdateResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Update(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::UpdateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DeleteResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Statistics(::grpc::ClientContext* context, ::event_store::client::projections::StatisticsReq* request, ::grpc::ClientReadReactor< ::event_store::client::projections::StatisticsResp>* reactor) override;
      #else
      void Statistics(::grpc::ClientContext* context, ::event_store::client::projections::StatisticsReq* request, ::grpc::experimental::ClientReadReactor< ::event_store::client::projections::StatisticsResp>* reactor) override;
      #endif
      void Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response, std::function<void(::grpc::Status)>) override;
      void Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DisableResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Disable(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DisableResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::DisableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response, std::function<void(::grpc::Status)>) override;
      void Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::EnableResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Enable(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::EnableResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::EnableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResetResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reset(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResetResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResetResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response, std::function<void(::grpc::Status)>) override;
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::StateResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void State(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::StateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void State(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::StateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response, std::function<void(::grpc::Status)>) override;
      void Result(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResultResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Result(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Result(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResultResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Result(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::projections::ResultResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartSubsystem(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartSubsystem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::CreateResp>* AsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::CreateResp>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::CreateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::UpdateResp>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::UpdateResp>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::UpdateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DeleteResp>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DeleteResp>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DeleteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::event_store::client::projections::StatisticsResp>* StatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request) override;
    ::grpc::ClientAsyncReader< ::event_store::client::projections::StatisticsResp>* AsyncStatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::event_store::client::projections::StatisticsResp>* PrepareAsyncStatisticsRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StatisticsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DisableResp>* AsyncDisableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::DisableResp>* PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::DisableReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::EnableResp>* AsyncEnableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::EnableResp>* PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::event_store::client::projections::EnableReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResetResp>* AsyncResetRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResetResp>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResetReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::StateResp>* AsyncStateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::StateResp>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::event_store::client::projections::StateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResultResp>* AsyncResultRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::projections::ResultResp>* PrepareAsyncResultRaw(::grpc::ClientContext* context, const ::event_store::client::projections::ResultReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* AsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* PrepareAsyncRestartSubsystemRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Statistics_;
    const ::grpc::internal::RpcMethod rpcmethod_Disable_;
    const ::grpc::internal::RpcMethod rpcmethod_Enable_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_State_;
    const ::grpc::internal::RpcMethod rpcmethod_Result_;
    const ::grpc::internal::RpcMethod rpcmethod_RestartSubsystem_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response);
    virtual ::grpc::Status Statistics(::grpc::ServerContext* context, const ::event_store::client::projections::StatisticsReq* request, ::grpc::ServerWriter< ::event_store::client::projections::StatisticsResp>* writer);
    virtual ::grpc::Status Disable(::grpc::ServerContext* context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response);
    virtual ::grpc::Status Enable(::grpc::ServerContext* context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response);
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response);
    virtual ::grpc::Status State(::grpc::ServerContext* context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response);
    virtual ::grpc::Status Result(::grpc::ServerContext* context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response);
    virtual ::grpc::Status RestartSubsystem(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::CreateReq* /*request*/, ::event_store::client::projections::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::event_store::client::projections::CreateReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::projections::CreateResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::UpdateReq* /*request*/, ::event_store::client::projections::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::event_store::client::projections::UpdateReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::projections::UpdateResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DeleteReq* /*request*/, ::event_store::client::projections::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::event_store::client::projections::DeleteReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::projections::DeleteResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Statistics() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StatisticsReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::projections::StatisticsResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatistics(::grpc::ServerContext* context, ::event_store::client::projections::StatisticsReq* request, ::grpc::ServerAsyncWriter< ::event_store::client::projections::StatisticsResp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Disable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Disable() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Disable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DisableReq* /*request*/, ::event_store::client::projections::DisableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisable(::grpc::ServerContext* context, ::event_store::client::projections::DisableReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::projections::DisableResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Enable() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::EnableReq* /*request*/, ::event_store::client::projections::EnableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnable(::grpc::ServerContext* context, ::event_store::client::projections::EnableReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::projections::EnableResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResetReq* /*request*/, ::event_store::client::projections::ResetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::event_store::client::projections::ResetReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::projections::ResetResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_State() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StateReq* /*request*/, ::event_store::client::projections::StateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::event_store::client::projections::StateReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::projections::StateResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Result() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Result(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResultReq* /*request*/, ::event_store::client::projections::ResultResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResult(::grpc::ServerContext* context, ::event_store::client::projections::ResultReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::projections::ResultResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestartSubsystem() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartSubsystem(::grpc::ServerContext* context, ::event_store::client::Empty* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Update<WithAsyncMethod_Delete<WithAsyncMethod_Statistics<WithAsyncMethod_Disable<WithAsyncMethod_Enable<WithAsyncMethod_Reset<WithAsyncMethod_State<WithAsyncMethod_Result<WithAsyncMethod_RestartSubsystem<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::CreateReq, ::event_store::client::projections::CreateResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::CreateReq* request, ::event_store::client::projections::CreateResp* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::experimental::MessageAllocator< ::event_store::client::projections::CreateReq, ::event_store::client::projections::CreateResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::CreateReq, ::event_store::client::projections::CreateResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::CreateReq* /*request*/, ::event_store::client::projections::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::CreateReq* /*request*/, ::event_store::client::projections::CreateResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::CreateReq* /*request*/, ::event_store::client::projections::CreateResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::UpdateReq, ::event_store::client::projections::UpdateResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::UpdateReq* request, ::event_store::client::projections::UpdateResp* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::experimental::MessageAllocator< ::event_store::client::projections::UpdateReq, ::event_store::client::projections::UpdateResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::UpdateReq, ::event_store::client::projections::UpdateResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::UpdateReq* /*request*/, ::event_store::client::projections::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::UpdateReq* /*request*/, ::event_store::client::projections::UpdateResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Update(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::UpdateReq* /*request*/, ::event_store::client::projections::UpdateResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::DeleteReq, ::event_store::client::projections::DeleteResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::DeleteReq* request, ::event_store::client::projections::DeleteResp* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::event_store::client::projections::DeleteReq, ::event_store::client::projections::DeleteResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::DeleteReq, ::event_store::client::projections::DeleteResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DeleteReq* /*request*/, ::event_store::client::projections::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::DeleteReq* /*request*/, ::event_store::client::projections::DeleteResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::DeleteReq* /*request*/, ::event_store::client::projections::DeleteResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Statistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::event_store::client::projections::StatisticsReq, ::event_store::client::projections::StatisticsResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::StatisticsReq* request) { return this->Statistics(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StatisticsReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::projections::StatisticsResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::event_store::client::projections::StatisticsResp>* Statistics(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::StatisticsReq* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::event_store::client::projections::StatisticsResp>* Statistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::StatisticsReq* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Disable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Disable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::DisableReq, ::event_store::client::projections::DisableResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::DisableReq* request, ::event_store::client::projections::DisableResp* response) { return this->Disable(context, request, response); }));}
    void SetMessageAllocatorFor_Disable(
        ::grpc::experimental::MessageAllocator< ::event_store::client::projections::DisableReq, ::event_store::client::projections::DisableResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::DisableReq, ::event_store::client::projections::DisableResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Disable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DisableReq* /*request*/, ::event_store::client::projections::DisableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Disable(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::DisableReq* /*request*/, ::event_store::client::projections::DisableResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Disable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::DisableReq* /*request*/, ::event_store::client::projections::DisableResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Enable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::EnableReq, ::event_store::client::projections::EnableResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::EnableReq* request, ::event_store::client::projections::EnableResp* response) { return this->Enable(context, request, response); }));}
    void SetMessageAllocatorFor_Enable(
        ::grpc::experimental::MessageAllocator< ::event_store::client::projections::EnableReq, ::event_store::client::projections::EnableResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::EnableReq, ::event_store::client::projections::EnableResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::EnableReq* /*request*/, ::event_store::client::projections::EnableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Enable(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::EnableReq* /*request*/, ::event_store::client::projections::EnableResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Enable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::EnableReq* /*request*/, ::event_store::client::projections::EnableResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Reset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::ResetReq, ::event_store::client::projections::ResetResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::ResetReq* request, ::event_store::client::projections::ResetResp* response) { return this->Reset(context, request, response); }));}
    void SetMessageAllocatorFor_Reset(
        ::grpc::experimental::MessageAllocator< ::event_store::client::projections::ResetReq, ::event_store::client::projections::ResetResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::ResetReq, ::event_store::client::projections::ResetResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResetReq* /*request*/, ::event_store::client::projections::ResetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::ResetReq* /*request*/, ::event_store::client::projections::ResetResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::ResetReq* /*request*/, ::event_store::client::projections::ResetResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_State() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::StateReq, ::event_store::client::projections::StateResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::StateReq* request, ::event_store::client::projections::StateResp* response) { return this->State(context, request, response); }));}
    void SetMessageAllocatorFor_State(
        ::grpc::experimental::MessageAllocator< ::event_store::client::projections::StateReq, ::event_store::client::projections::StateResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::StateReq, ::event_store::client::projections::StateResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StateReq* /*request*/, ::event_store::client::projections::StateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* State(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::StateReq* /*request*/, ::event_store::client::projections::StateResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* State(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::StateReq* /*request*/, ::event_store::client::projections::StateResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Result() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::ResultReq, ::event_store::client::projections::ResultResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::projections::ResultReq* request, ::event_store::client::projections::ResultResp* response) { return this->Result(context, request, response); }));}
    void SetMessageAllocatorFor_Result(
        ::grpc::experimental::MessageAllocator< ::event_store::client::projections::ResultReq, ::event_store::client::projections::ResultResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::projections::ResultReq, ::event_store::client::projections::ResultResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Result(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResultReq* /*request*/, ::event_store::client::projections::ResultResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Result(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::projections::ResultReq* /*request*/, ::event_store::client::projections::ResultResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Result(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::projections::ResultReq* /*request*/, ::event_store::client::projections::ResultResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RestartSubsystem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) { return this->RestartSubsystem(context, request, response); }));}
    void SetMessageAllocatorFor_RestartSubsystem(
        ::grpc::experimental::MessageAllocator< ::event_store::client::Empty, ::event_store::client::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::Empty, ::event_store::client::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartSubsystem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Statistics<ExperimentalWithCallbackMethod_Disable<ExperimentalWithCallbackMethod_Enable<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_State<ExperimentalWithCallbackMethod_Result<ExperimentalWithCallbackMethod_RestartSubsystem<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Statistics<ExperimentalWithCallbackMethod_Disable<ExperimentalWithCallbackMethod_Enable<ExperimentalWithCallbackMethod_Reset<ExperimentalWithCallbackMethod_State<ExperimentalWithCallbackMethod_Result<ExperimentalWithCallbackMethod_RestartSubsystem<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::CreateReq* /*request*/, ::event_store::client::projections::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::UpdateReq* /*request*/, ::event_store::client::projections::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DeleteReq* /*request*/, ::event_store::client::projections::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Statistics() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StatisticsReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::projections::StatisticsResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Disable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Disable() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Disable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DisableReq* /*request*/, ::event_store::client::projections::DisableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Enable() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::EnableReq* /*request*/, ::event_store::client::projections::EnableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResetReq* /*request*/, ::event_store::client::projections::ResetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_State() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StateReq* /*request*/, ::event_store::client::projections::StateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Result() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Result(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResultReq* /*request*/, ::event_store::client::projections::ResultResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestartSubsystem() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::CreateReq* /*request*/, ::event_store::client::projections::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::UpdateReq* /*request*/, ::event_store::client::projections::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DeleteReq* /*request*/, ::event_store::client::projections::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Statistics() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StatisticsReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::projections::StatisticsResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Disable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Disable() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Disable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DisableReq* /*request*/, ::event_store::client::projections::DisableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Enable() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::EnableReq* /*request*/, ::event_store::client::projections::EnableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResetReq* /*request*/, ::event_store::client::projections::ResetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_State() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StateReq* /*request*/, ::event_store::client::projections::StateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Result() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Result(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResultReq* /*request*/, ::event_store::client::projections::ResultResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestartSubsystem() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartSubsystem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::CreateReq* /*request*/, ::event_store::client::projections::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Create(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::UpdateReq* /*request*/, ::event_store::client::projections::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Update(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DeleteReq* /*request*/, ::event_store::client::projections::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Statistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Statistics(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StatisticsReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::projections::StatisticsResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Statistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Statistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Disable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Disable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Disable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Disable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DisableReq* /*request*/, ::event_store::client::projections::DisableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Disable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Disable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Enable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Enable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::EnableReq* /*request*/, ::event_store::client::projections::EnableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Enable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Enable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Reset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reset(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResetReq* /*request*/, ::event_store::client::projections::ResetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_State() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->State(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StateReq* /*request*/, ::event_store::client::projections::StateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* State(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* State(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Result() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Result(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Result(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResultReq* /*request*/, ::event_store::client::projections::ResultResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Result(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Result(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RestartSubsystem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestartSubsystem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartSubsystem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartSubsystem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::projections::CreateReq, ::event_store::client::projections::CreateResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::projections::CreateReq, ::event_store::client::projections::CreateResp>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::CreateReq* /*request*/, ::event_store::client::projections::CreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::projections::CreateReq,::event_store::client::projections::CreateResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::projections::UpdateReq, ::event_store::client::projections::UpdateResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::projections::UpdateReq, ::event_store::client::projections::UpdateResp>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::UpdateReq* /*request*/, ::event_store::client::projections::UpdateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::projections::UpdateReq,::event_store::client::projections::UpdateResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::projections::DeleteReq, ::event_store::client::projections::DeleteResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::projections::DeleteReq, ::event_store::client::projections::DeleteResp>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DeleteReq* /*request*/, ::event_store::client::projections::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::projections::DeleteReq,::event_store::client::projections::DeleteResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Disable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Disable() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::projections::DisableReq, ::event_store::client::projections::DisableResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::projections::DisableReq, ::event_store::client::projections::DisableResp>* streamer) {
                       return this->StreamedDisable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Disable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Disable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::DisableReq* /*request*/, ::event_store::client::projections::DisableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::projections::DisableReq,::event_store::client::projections::DisableResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Enable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Enable() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::projections::EnableReq, ::event_store::client::projections::EnableResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::projections::EnableReq, ::event_store::client::projections::EnableResp>* streamer) {
                       return this->StreamedEnable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Enable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Enable(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::EnableReq* /*request*/, ::event_store::client::projections::EnableResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::projections::EnableReq,::event_store::client::projections::EnableResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::projections::ResetReq, ::event_store::client::projections::ResetResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::projections::ResetReq, ::event_store::client::projections::ResetResp>* streamer) {
                       return this->StreamedReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResetReq* /*request*/, ::event_store::client::projections::ResetResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::projections::ResetReq,::event_store::client::projections::ResetResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_State() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::projections::StateReq, ::event_store::client::projections::StateResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::projections::StateReq, ::event_store::client::projections::StateResp>* streamer) {
                       return this->StreamedState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StateReq* /*request*/, ::event_store::client::projections::StateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::projections::StateReq,::event_store::client::projections::StateResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Result : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Result() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::projections::ResultReq, ::event_store::client::projections::ResultResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::projections::ResultReq, ::event_store::client::projections::ResultResp>* streamer) {
                       return this->StreamedResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Result() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Result(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::ResultReq* /*request*/, ::event_store::client::projections::ResultResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::projections::ResultReq,::event_store::client::projections::ResultResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestartSubsystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestartSubsystem() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::Empty, ::event_store::client::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::Empty, ::event_store::client::Empty>* streamer) {
                       return this->StreamedRestartSubsystem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RestartSubsystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestartSubsystem(::grpc::ServerContext* /*context*/, const ::event_store::client::Empty* /*request*/, ::event_store::client::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestartSubsystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::Empty,::event_store::client::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Disable<WithStreamedUnaryMethod_Enable<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_State<WithStreamedUnaryMethod_Result<WithStreamedUnaryMethod_RestartSubsystem<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Statistics() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::event_store::client::projections::StatisticsReq, ::event_store::client::projections::StatisticsResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::event_store::client::projections::StatisticsReq, ::event_store::client::projections::StatisticsResp>* streamer) {
                       return this->StreamedStatistics(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* /*context*/, const ::event_store::client::projections::StatisticsReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::projections::StatisticsResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStatistics(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::event_store::client::projections::StatisticsReq,::event_store::client::projections::StatisticsResp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Statistics<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<WithSplitStreamingMethod_Statistics<WithStreamedUnaryMethod_Disable<WithStreamedUnaryMethod_Enable<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_State<WithStreamedUnaryMethod_Result<WithStreamedUnaryMethod_RestartSubsystem<Service > > > > > > > > > > StreamedService;
};

}  // namespace projections
}  // namespace client
}  // namespace event_store


#endif  // GRPC_projections_2eproto__INCLUDED

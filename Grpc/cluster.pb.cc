// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster.proto

#include "cluster.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UUID_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cluster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClusterInfo_cluster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cluster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPoint_cluster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cluster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Epoch_cluster_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cluster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberInfo_cluster_2eproto;
namespace event_store {
namespace cluster {
class GossipRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GossipRequest> _instance;
} _GossipRequest_default_instance_;
class ViewChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewChangeRequest> _instance;
} _ViewChangeRequest_default_instance_;
class ViewChangeProofRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewChangeProofRequest> _instance;
} _ViewChangeProofRequest_default_instance_;
class PrepareRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareRequest> _instance;
} _PrepareRequest_default_instance_;
class PrepareOkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareOkRequest> _instance;
} _PrepareOkRequest_default_instance_;
class ProposalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposalRequest> _instance;
} _ProposalRequest_default_instance_;
class AcceptRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptRequest> _instance;
} _AcceptRequest_default_instance_;
class LeaderIsResigningRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderIsResigningRequest> _instance;
} _LeaderIsResigningRequest_default_instance_;
class LeaderIsResigningOkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderIsResigningOkRequest> _instance;
} _LeaderIsResigningOkRequest_default_instance_;
class ClusterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterInfo> _instance;
} _ClusterInfo_default_instance_;
class EndPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndPoint> _instance;
} _EndPoint_default_instance_;
class MemberInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberInfo> _instance;
} _MemberInfo_default_instance_;
class ReplicaLogWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicaLogWrite> _instance;
} _ReplicaLogWrite_default_instance_;
class ReplicatedToDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicatedTo> _instance;
} _ReplicatedTo_default_instance_;
class EpochDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Epoch> _instance;
} _Epoch_default_instance_;
class SubscribeReplicaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeReplica> _instance;
} _SubscribeReplica_default_instance_;
class ReplicaSubscriptionRetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicaSubscriptionRetry> _instance;
} _ReplicaSubscriptionRetry_default_instance_;
class ReplicaSubscribedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicaSubscribed> _instance;
} _ReplicaSubscribed_default_instance_;
class ReplicaLogPositionAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicaLogPositionAck> _instance;
} _ReplicaLogPositionAck_default_instance_;
class CreateChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateChunk> _instance;
} _CreateChunk_default_instance_;
class RawChunkBulkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawChunkBulk> _instance;
} _RawChunkBulk_default_instance_;
class DataChunkBulkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataChunkBulk> _instance;
} _DataChunkBulk_default_instance_;
class FollowerAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FollowerAssignment> _instance;
} _FollowerAssignment_default_instance_;
class CloneAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloneAssignment> _instance;
} _CloneAssignment_default_instance_;
class DropSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropSubscription> _instance;
} _DropSubscription_default_instance_;
}  // namespace cluster
}  // namespace event_store
static void InitDefaultsscc_info_AcceptRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_AcceptRequest_default_instance_;
    new (ptr) ::event_store::cluster::AcceptRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::AcceptRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcceptRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AcceptRequest_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static void InitDefaultsscc_info_CloneAssignment_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_CloneAssignment_default_instance_;
    new (ptr) ::event_store::cluster::CloneAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::CloneAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloneAssignment_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloneAssignment_cluster_2eproto}, {}};

static void InitDefaultsscc_info_ClusterInfo_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ClusterInfo_default_instance_;
    new (ptr) ::event_store::cluster::ClusterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ClusterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClusterInfo_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClusterInfo_cluster_2eproto}, {
      &scc_info_MemberInfo_cluster_2eproto.base,}};

static void InitDefaultsscc_info_CreateChunk_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_CreateChunk_default_instance_;
    new (ptr) ::event_store::cluster::CreateChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::CreateChunk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateChunk_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateChunk_cluster_2eproto}, {}};

static void InitDefaultsscc_info_DataChunkBulk_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_DataChunkBulk_default_instance_;
    new (ptr) ::event_store::cluster::DataChunkBulk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::DataChunkBulk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataChunkBulk_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataChunkBulk_cluster_2eproto}, {}};

static void InitDefaultsscc_info_DropSubscription_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_DropSubscription_default_instance_;
    new (ptr) ::event_store::cluster::DropSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::DropSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DropSubscription_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DropSubscription_cluster_2eproto}, {}};

static void InitDefaultsscc_info_EndPoint_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_EndPoint_default_instance_;
    new (ptr) ::event_store::cluster::EndPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::EndPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPoint_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndPoint_cluster_2eproto}, {}};

static void InitDefaultsscc_info_Epoch_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_Epoch_default_instance_;
    new (ptr) ::event_store::cluster::Epoch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::Epoch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Epoch_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Epoch_cluster_2eproto}, {}};

static void InitDefaultsscc_info_FollowerAssignment_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_FollowerAssignment_default_instance_;
    new (ptr) ::event_store::cluster::FollowerAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::FollowerAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FollowerAssignment_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FollowerAssignment_cluster_2eproto}, {}};

static void InitDefaultsscc_info_GossipRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_GossipRequest_default_instance_;
    new (ptr) ::event_store::cluster::GossipRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::GossipRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GossipRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GossipRequest_cluster_2eproto}, {
      &scc_info_ClusterInfo_cluster_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static void InitDefaultsscc_info_LeaderIsResigningOkRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_LeaderIsResigningOkRequest_default_instance_;
    new (ptr) ::event_store::cluster::LeaderIsResigningOkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::LeaderIsResigningOkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaderIsResigningOkRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LeaderIsResigningOkRequest_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static void InitDefaultsscc_info_LeaderIsResigningRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_LeaderIsResigningRequest_default_instance_;
    new (ptr) ::event_store::cluster::LeaderIsResigningRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::LeaderIsResigningRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaderIsResigningRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LeaderIsResigningRequest_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static void InitDefaultsscc_info_MemberInfo_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_MemberInfo_default_instance_;
    new (ptr) ::event_store::cluster::MemberInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::MemberInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberInfo_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberInfo_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static void InitDefaultsscc_info_PrepareOkRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_PrepareOkRequest_default_instance_;
    new (ptr) ::event_store::cluster::PrepareOkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::PrepareOkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PrepareOkRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PrepareOkRequest_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,
      &scc_info_ClusterInfo_cluster_2eproto.base,}};

static void InitDefaultsscc_info_PrepareRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_PrepareRequest_default_instance_;
    new (ptr) ::event_store::cluster::PrepareRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::PrepareRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrepareRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PrepareRequest_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static void InitDefaultsscc_info_ProposalRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ProposalRequest_default_instance_;
    new (ptr) ::event_store::cluster::ProposalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ProposalRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProposalRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProposalRequest_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static void InitDefaultsscc_info_RawChunkBulk_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_RawChunkBulk_default_instance_;
    new (ptr) ::event_store::cluster::RawChunkBulk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::RawChunkBulk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawChunkBulk_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RawChunkBulk_cluster_2eproto}, {}};

static void InitDefaultsscc_info_ReplicaLogPositionAck_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ReplicaLogPositionAck_default_instance_;
    new (ptr) ::event_store::cluster::ReplicaLogPositionAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ReplicaLogPositionAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicaLogPositionAck_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplicaLogPositionAck_cluster_2eproto}, {}};

static void InitDefaultsscc_info_ReplicaLogWrite_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ReplicaLogWrite_default_instance_;
    new (ptr) ::event_store::cluster::ReplicaLogWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ReplicaLogWrite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicaLogWrite_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplicaLogWrite_cluster_2eproto}, {}};

static void InitDefaultsscc_info_ReplicaSubscribed_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ReplicaSubscribed_default_instance_;
    new (ptr) ::event_store::cluster::ReplicaSubscribed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ReplicaSubscribed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicaSubscribed_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplicaSubscribed_cluster_2eproto}, {}};

static void InitDefaultsscc_info_ReplicaSubscriptionRetry_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ReplicaSubscriptionRetry_default_instance_;
    new (ptr) ::event_store::cluster::ReplicaSubscriptionRetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ReplicaSubscriptionRetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicaSubscriptionRetry_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplicaSubscriptionRetry_cluster_2eproto}, {}};

static void InitDefaultsscc_info_ReplicatedTo_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ReplicatedTo_default_instance_;
    new (ptr) ::event_store::cluster::ReplicatedTo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ReplicatedTo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicatedTo_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplicatedTo_cluster_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeReplica_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_SubscribeReplica_default_instance_;
    new (ptr) ::event_store::cluster::SubscribeReplica();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::SubscribeReplica::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeReplica_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeReplica_cluster_2eproto}, {
      &scc_info_Epoch_cluster_2eproto.base,}};

static void InitDefaultsscc_info_ViewChangeProofRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ViewChangeProofRequest_default_instance_;
    new (ptr) ::event_store::cluster::ViewChangeProofRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ViewChangeProofRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ViewChangeProofRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ViewChangeProofRequest_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static void InitDefaultsscc_info_ViewChangeRequest_cluster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::cluster::_ViewChangeRequest_default_instance_;
    new (ptr) ::event_store::cluster::ViewChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::cluster::ViewChangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ViewChangeRequest_cluster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ViewChangeRequest_cluster_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_EndPoint_cluster_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cluster_2eproto[25];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cluster_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cluster_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cluster_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::GossipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::GossipRequest, info_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::GossipRequest, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ViewChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ViewChangeRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ViewChangeRequest, server_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ViewChangeRequest, attempted_view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ViewChangeProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ViewChangeProofRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ViewChangeProofRequest, server_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ViewChangeProofRequest, installed_view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareRequest, server_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareRequest, view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, view_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, server_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, epoch_number_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, epoch_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, epoch_leader_instance_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, last_commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, writer_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, chaser_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, node_priority_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::PrepareOkRequest, cluster_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, server_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, leader_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, view_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, epoch_number_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, epoch_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, epoch_leader_instance_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, last_commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, writer_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, chaser_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ProposalRequest, node_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::AcceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::AcceptRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::AcceptRequest, server_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::AcceptRequest, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::AcceptRequest, leader_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::AcceptRequest, view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::LeaderIsResigningRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::LeaderIsResigningRequest, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::LeaderIsResigningRequest, leader_http_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::LeaderIsResigningOkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::LeaderIsResigningOkRequest, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::LeaderIsResigningOkRequest, leader_http_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::LeaderIsResigningOkRequest, server_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::LeaderIsResigningOkRequest, server_http_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ClusterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ClusterInfo, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::EndPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::EndPoint, address_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::EndPoint, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, instance_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, state_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, is_alive_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, http_end_point_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, internal_tcp_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, external_tcp_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, internal_tcp_uses_tls_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, external_tcp_uses_tls_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, last_commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, writer_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, chaser_checkpoint_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, epoch_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, epoch_number_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, node_priority_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, is_read_only_replica_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, advertise_host_to_client_as_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, advertise_http_port_to_client_as_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::MemberInfo, advertise_tcp_port_to_client_as_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaLogWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaLogWrite, log_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaLogWrite, replica_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicatedTo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicatedTo, log_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::Epoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::Epoch, epoch_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::Epoch, epoch_number_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::Epoch, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, log_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, chunk_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, lastepochs_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, ip_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, port_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::SubscribeReplica, is_promotable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaSubscriptionRetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaSubscriptionRetry, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaSubscriptionRetry, subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaSubscribed, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaSubscribed, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaSubscribed, subscription_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaLogPositionAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaLogPositionAck, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::ReplicaLogPositionAck, replication_log_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CreateChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CreateChunk, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CreateChunk, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CreateChunk, chunk_header_bytes_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CreateChunk, file_size_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CreateChunk, is_completed_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::RawChunkBulk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::RawChunkBulk, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::RawChunkBulk, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::RawChunkBulk, chunk_start_number_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::RawChunkBulk, chunk_end_number_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::RawChunkBulk, raw_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::RawChunkBulk, raw_bytes_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::RawChunkBulk, complete_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DataChunkBulk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DataChunkBulk, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DataChunkBulk, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DataChunkBulk, chunk_start_number_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DataChunkBulk, chunk_end_number_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DataChunkBulk, subscription_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DataChunkBulk, data_bytes_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DataChunkBulk, complete_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::FollowerAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::FollowerAssignment, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::FollowerAssignment, subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CloneAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CloneAssignment, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::CloneAssignment, subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DropSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DropSubscription, leader_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::cluster::DropSubscription, subscription_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::event_store::cluster::GossipRequest)},
  { 7, -1, sizeof(::event_store::cluster::ViewChangeRequest)},
  { 15, -1, sizeof(::event_store::cluster::ViewChangeProofRequest)},
  { 23, -1, sizeof(::event_store::cluster::PrepareRequest)},
  { 31, -1, sizeof(::event_store::cluster::PrepareOkRequest)},
  { 48, -1, sizeof(::event_store::cluster::ProposalRequest)},
  { 66, -1, sizeof(::event_store::cluster::AcceptRequest)},
  { 76, -1, sizeof(::event_store::cluster::LeaderIsResigningRequest)},
  { 83, -1, sizeof(::event_store::cluster::LeaderIsResigningOkRequest)},
  { 92, -1, sizeof(::event_store::cluster::ClusterInfo)},
  { 98, -1, sizeof(::event_store::cluster::EndPoint)},
  { 105, -1, sizeof(::event_store::cluster::MemberInfo)},
  { 130, -1, sizeof(::event_store::cluster::ReplicaLogWrite)},
  { 137, -1, sizeof(::event_store::cluster::ReplicatedTo)},
  { 143, -1, sizeof(::event_store::cluster::Epoch)},
  { 151, -1, sizeof(::event_store::cluster::SubscribeReplica)},
  { 164, -1, sizeof(::event_store::cluster::ReplicaSubscriptionRetry)},
  { 171, -1, sizeof(::event_store::cluster::ReplicaSubscribed)},
  { 179, -1, sizeof(::event_store::cluster::ReplicaLogPositionAck)},
  { 186, -1, sizeof(::event_store::cluster::CreateChunk)},
  { 196, -1, sizeof(::event_store::cluster::RawChunkBulk)},
  { 208, -1, sizeof(::event_store::cluster::DataChunkBulk)},
  { 220, -1, sizeof(::event_store::cluster::FollowerAssignment)},
  { 227, -1, sizeof(::event_store::cluster::CloneAssignment)},
  { 234, -1, sizeof(::event_store::cluster::DropSubscription)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_GossipRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ViewChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ViewChangeProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_PrepareRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_PrepareOkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ProposalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_AcceptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_LeaderIsResigningRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_LeaderIsResigningOkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ClusterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_EndPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_MemberInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ReplicaLogWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ReplicatedTo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_Epoch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_SubscribeReplica_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ReplicaSubscriptionRetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ReplicaSubscribed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_ReplicaLogPositionAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_CreateChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_RawChunkBulk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_DataChunkBulk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_FollowerAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_CloneAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::cluster::_DropSubscription_default_instance_),
};

const char descriptor_table_protodef_cluster_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcluster.proto\022\023event_store.cluster\032\014sh"
  "ared.proto\"n\n\rGossipRequest\022.\n\004info\030\001 \001("
  "\0132 .event_store.cluster.ClusterInfo\022-\n\006s"
  "erver\030\002 \001(\0132\035.event_store.cluster.EndPoi"
  "nt\"\214\001\n\021ViewChangeRequest\022+\n\tserver_id\030\001 "
  "\001(\0132\030.event_store.client.UUID\0222\n\013server_"
  "http\030\002 \001(\0132\035.event_store.cluster.EndPoin"
  "t\022\026\n\016attempted_view\030\003 \001(\005\"\221\001\n\026ViewChange"
  "ProofRequest\022+\n\tserver_id\030\001 \001(\0132\030.event_"
  "store.client.UUID\0222\n\013server_http\030\002 \001(\0132\035"
  ".event_store.cluster.EndPoint\022\026\n\016install"
  "ed_view\030\003 \001(\005\"\177\n\016PrepareRequest\022+\n\tserve"
  "r_id\030\001 \001(\0132\030.event_store.client.UUID\0222\n\013"
  "server_http\030\002 \001(\0132\035.event_store.cluster."
  "EndPoint\022\014\n\004view\030\003 \001(\005\"\272\003\n\020PrepareOkRequ"
  "est\022\014\n\004view\030\001 \001(\005\022+\n\tserver_id\030\002 \001(\0132\030.e"
  "vent_store.client.UUID\0222\n\013server_http\030\003 "
  "\001(\0132\035.event_store.cluster.EndPoint\022\024\n\014ep"
  "och_number\030\004 \001(\005\022\026\n\016epoch_position\030\005 \001(\003"
  "\022*\n\010epoch_id\030\006 \001(\0132\030.event_store.client."
  "UUID\022:\n\030epoch_leader_instance_id\030\007 \001(\0132\030"
  ".event_store.client.UUID\022\034\n\024last_commit_"
  "position\030\010 \001(\003\022\031\n\021writer_checkpoint\030\t \001("
  "\003\022\031\n\021chaser_checkpoint\030\n \001(\003\022\025\n\rnode_pri"
  "ority\030\013 \001(\005\0226\n\014cluster_info\030\014 \001(\0132 .even"
  "t_store.cluster.ClusterInfo\"\342\003\n\017Proposal"
  "Request\022+\n\tserver_id\030\001 \001(\0132\030.event_store"
  ".client.UUID\0222\n\013server_http\030\002 \001(\0132\035.even"
  "t_store.cluster.EndPoint\022+\n\tleader_id\030\003 "
  "\001(\0132\030.event_store.client.UUID\0222\n\013leader_"
  "http\030\004 \001(\0132\035.event_store.cluster.EndPoin"
  "t\022\014\n\004view\030\005 \001(\005\022\024\n\014epoch_number\030\006 \001(\005\022\026\n"
  "\016epoch_position\030\007 \001(\003\022*\n\010epoch_id\030\010 \001(\0132"
  "\030.event_store.client.UUID\022:\n\030epoch_leade"
  "r_instance_id\030\t \001(\0132\030.event_store.client"
  ".UUID\022\034\n\024last_commit_position\030\n \001(\003\022\031\n\021w"
  "riter_checkpoint\030\013 \001(\003\022\031\n\021chaser_checkpo"
  "int\030\014 \001(\003\022\025\n\rnode_priority\030\r \001(\005\"\337\001\n\rAcc"
  "eptRequest\022+\n\tserver_id\030\001 \001(\0132\030.event_st"
  "ore.client.UUID\0222\n\013server_http\030\002 \001(\0132\035.e"
  "vent_store.cluster.EndPoint\022+\n\tleader_id"
  "\030\003 \001(\0132\030.event_store.client.UUID\0222\n\013lead"
  "er_http\030\004 \001(\0132\035.event_store.cluster.EndP"
  "oint\022\014\n\004view\030\005 \001(\005\"{\n\030LeaderIsResigningR"
  "equest\022+\n\tleader_id\030\001 \001(\0132\030.event_store."
  "client.UUID\0222\n\013leader_http\030\002 \001(\0132\035.event"
  "_store.cluster.EndPoint\"\336\001\n\032LeaderIsResi"
  "gningOkRequest\022+\n\tleader_id\030\001 \001(\0132\030.even"
  "t_store.client.UUID\0222\n\013leader_http\030\002 \001(\013"
  "2\035.event_store.cluster.EndPoint\022+\n\tserve"
  "r_id\030\003 \001(\0132\030.event_store.client.UUID\0222\n\013"
  "server_http\030\004 \001(\0132\035.event_store.cluster."
  "EndPoint\"\?\n\013ClusterInfo\0220\n\007members\030\001 \003(\013"
  "2\037.event_store.cluster.MemberInfo\")\n\010End"
  "Point\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"\363\007\n"
  "\nMemberInfo\022-\n\013instance_id\030\001 \001(\0132\030.event"
  "_store.client.UUID\022\022\n\ntime_stamp\030\002 \001(\003\0229"
  "\n\005state\030\003 \001(\0162*.event_store.cluster.Memb"
  "erInfo.VNodeState\022\020\n\010is_alive\030\004 \001(\010\0225\n\016h"
  "ttp_end_point\030\005 \001(\0132\035.event_store.cluste"
  "r.EndPoint\0223\n\014internal_tcp\030\006 \001(\0132\035.event"
  "_store.cluster.EndPoint\0223\n\014external_tcp\030"
  "\007 \001(\0132\035.event_store.cluster.EndPoint\022\035\n\025"
  "internal_tcp_uses_tls\030\010 \001(\010\022\035\n\025external_"
  "tcp_uses_tls\030\t \001(\010\022\034\n\024last_commit_positi"
  "on\030\n \001(\003\022\031\n\021writer_checkpoint\030\013 \001(\003\022\031\n\021c"
  "haser_checkpoint\030\014 \001(\003\022\026\n\016epoch_position"
  "\030\r \001(\003\022\024\n\014epoch_number\030\016 \001(\005\022*\n\010epoch_id"
  "\030\017 \001(\0132\030.event_store.client.UUID\022\025\n\rnode"
  "_priority\030\020 \001(\005\022\034\n\024is_read_only_replica\030"
  "\021 \001(\010\022#\n\033advertise_host_to_client_as\030\022 \001"
  "(\t\022(\n advertise_http_port_to_client_as\030\023"
  " \001(\r\022\'\n\037advertise_tcp_port_to_client_as\030"
  "\024 \001(\r\"\232\002\n\nVNodeState\022\020\n\014Initializing\020\000\022\022"
  "\n\016DiscoverLeader\020\001\022\013\n\007Unknown\020\002\022\016\n\nPreRe"
  "plica\020\003\022\016\n\nCatchingUp\020\004\022\t\n\005Clone\020\005\022\014\n\010Fo"
  "llower\020\006\022\r\n\tPreLeader\020\007\022\n\n\006Leader\020\010\022\013\n\007M"
  "anager\020\t\022\020\n\014ShuttingDown\020\n\022\014\n\010Shutdown\020\013"
  "\022\026\n\022ReadOnlyLeaderless\020\014\022\026\n\022PreReadOnlyR"
  "eplica\020\r\022\023\n\017ReadOnlyReplica\020\016\022\023\n\017Resigni"
  "ngLeader\020\017\";\n\017ReplicaLogWrite\022\024\n\014log_pos"
  "ition\030\001 \001(\003\022\022\n\nreplica_id\030\002 \001(\014\"$\n\014Repli"
  "catedTo\022\024\n\014log_position\030\001 \001(\003\"G\n\005Epoch\022\026"
  "\n\016epoch_position\030\001 \001(\003\022\024\n\014epoch_number\030\002"
  " \001(\005\022\020\n\010epoch_id\030\003 \001(\014\"\307\001\n\020SubscribeRepl"
  "ica\022\024\n\014log_position\030\001 \001(\003\022\020\n\010chunk_id\030\002 "
  "\001(\014\022.\n\nLastEpochs\030\003 \003(\0132\032.event_store.cl"
  "uster.Epoch\022\n\n\002ip\030\004 \001(\014\022\014\n\004port\030\005 \001(\005\022\021\n"
  "\tleader_id\030\006 \001(\014\022\027\n\017subscription_id\030\007 \001("
  "\014\022\025\n\ris_promotable\030\010 \001(\010\"F\n\030ReplicaSubsc"
  "riptionRetry\022\021\n\tleader_id\030\001 \001(\014\022\027\n\017subsc"
  "ription_id\030\002 \001(\014\"^\n\021ReplicaSubscribed\022\021\n"
  "\tleader_id\030\001 \001(\014\022\027\n\017subscription_id\030\002 \001("
  "\014\022\035\n\025subscription_position\030\003 \001(\003\"R\n\025Repl"
  "icaLogPositionAck\022\027\n\017subscription_id\030\001 \001"
  "(\014\022 \n\030replication_log_position\030\002 \001(\003\"\204\001\n"
  "\013CreateChunk\022\021\n\tleader_id\030\001 \001(\014\022\027\n\017subsc"
  "ription_id\030\002 \001(\014\022\032\n\022chunk_header_bytes\030\003"
  " \001(\014\022\021\n\tfile_size\030\004 \001(\005\022\032\n\022is_completed_"
  "chunk\030\005 \001(\010\"\261\001\n\014RawChunkBulk\022\021\n\tleader_i"
  "d\030\001 \001(\014\022\027\n\017subscription_id\030\002 \001(\014\022\032\n\022chun"
  "k_start_number\030\003 \001(\005\022\030\n\020chunk_end_number"
  "\030\004 \001(\005\022\024\n\014raw_position\030\005 \001(\005\022\021\n\traw_byte"
  "s\030\006 \001(\014\022\026\n\016complete_chunk\030\007 \001(\010\"\274\001\n\rData"
  "ChunkBulk\022\021\n\tleader_id\030\001 \001(\014\022\027\n\017subscrip"
  "tion_id\030\002 \001(\014\022\032\n\022chunk_start_number\030\003 \001("
  "\005\022\030\n\020chunk_end_number\030\004 \001(\005\022\035\n\025subscript"
  "ion_position\030\005 \001(\003\022\022\n\ndata_bytes\030\006 \001(\014\022\026"
  "\n\016complete_chunk\030\007 \001(\010\"@\n\022FollowerAssign"
  "ment\022\021\n\tleader_id\030\001 \001(\014\022\027\n\017subscription_"
  "id\030\002 \001(\014\"=\n\017CloneAssignment\022\021\n\tleader_id"
  "\030\001 \001(\014\022\027\n\017subscription_id\030\002 \001(\014\">\n\020DropS"
  "ubscription\022\021\n\tleader_id\030\001 \001(\014\022\027\n\017subscr"
  "iption_id\030\002 \001(\0142\235\001\n\006Gossip\022N\n\006Update\022\".e"
  "vent_store.cluster.GossipRequest\032 .event"
  "_store.cluster.ClusterInfo\022C\n\004Read\022\031.eve"
  "nt_store.client.Empty\032 .event_store.clus"
  "ter.ClusterInfo2\251\005\n\tElections\022O\n\nViewCha"
  "nge\022&.event_store.cluster.ViewChangeRequ"
  "est\032\031.event_store.client.Empty\022Y\n\017ViewCh"
  "angeProof\022+.event_store.cluster.ViewChan"
  "geProofRequest\032\031.event_store.client.Empt"
  "y\022I\n\007Prepare\022#.event_store.cluster.Prepa"
  "reRequest\032\031.event_store.client.Empty\022M\n\t"
  "PrepareOk\022%.event_store.cluster.PrepareO"
  "kRequest\032\031.event_store.client.Empty\022K\n\010P"
  "roposal\022$.event_store.cluster.ProposalRe"
  "quest\032\031.event_store.client.Empty\022G\n\006Acce"
  "pt\022\".event_store.cluster.AcceptRequest\032\031"
  ".event_store.client.Empty\022]\n\021LeaderIsRes"
  "igning\022-.event_store.cluster.LeaderIsRes"
  "igningRequest\032\031.event_store.client.Empty"
  "\022a\n\023LeaderIsResigningOk\022/.event_store.cl"
  "uster.LeaderIsResigningOkRequest\032\031.event"
  "_store.client.EmptyB\'\n%com.eventstore.db"
  "client.proto.clusterb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cluster_2eproto_deps[1] = {
  &::descriptor_table_shared_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cluster_2eproto_sccs[25] = {
  &scc_info_AcceptRequest_cluster_2eproto.base,
  &scc_info_CloneAssignment_cluster_2eproto.base,
  &scc_info_ClusterInfo_cluster_2eproto.base,
  &scc_info_CreateChunk_cluster_2eproto.base,
  &scc_info_DataChunkBulk_cluster_2eproto.base,
  &scc_info_DropSubscription_cluster_2eproto.base,
  &scc_info_EndPoint_cluster_2eproto.base,
  &scc_info_Epoch_cluster_2eproto.base,
  &scc_info_FollowerAssignment_cluster_2eproto.base,
  &scc_info_GossipRequest_cluster_2eproto.base,
  &scc_info_LeaderIsResigningOkRequest_cluster_2eproto.base,
  &scc_info_LeaderIsResigningRequest_cluster_2eproto.base,
  &scc_info_MemberInfo_cluster_2eproto.base,
  &scc_info_PrepareOkRequest_cluster_2eproto.base,
  &scc_info_PrepareRequest_cluster_2eproto.base,
  &scc_info_ProposalRequest_cluster_2eproto.base,
  &scc_info_RawChunkBulk_cluster_2eproto.base,
  &scc_info_ReplicaLogPositionAck_cluster_2eproto.base,
  &scc_info_ReplicaLogWrite_cluster_2eproto.base,
  &scc_info_ReplicaSubscribed_cluster_2eproto.base,
  &scc_info_ReplicaSubscriptionRetry_cluster_2eproto.base,
  &scc_info_ReplicatedTo_cluster_2eproto.base,
  &scc_info_SubscribeReplica_cluster_2eproto.base,
  &scc_info_ViewChangeProofRequest_cluster_2eproto.base,
  &scc_info_ViewChangeRequest_cluster_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cluster_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cluster_2eproto = {
  false, false, descriptor_table_protodef_cluster_2eproto, "cluster.proto", 5428,
  &descriptor_table_cluster_2eproto_once, descriptor_table_cluster_2eproto_sccs, descriptor_table_cluster_2eproto_deps, 25, 1,
  schemas, file_default_instances, TableStruct_cluster_2eproto::offsets,
  file_level_metadata_cluster_2eproto, 25, file_level_enum_descriptors_cluster_2eproto, file_level_service_descriptors_cluster_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cluster_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cluster_2eproto)), true);
namespace event_store {
namespace cluster {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberInfo_VNodeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cluster_2eproto);
  return file_level_enum_descriptors_cluster_2eproto[0];
}
bool MemberInfo_VNodeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MemberInfo_VNodeState MemberInfo::Initializing;
constexpr MemberInfo_VNodeState MemberInfo::DiscoverLeader;
constexpr MemberInfo_VNodeState MemberInfo::Unknown;
constexpr MemberInfo_VNodeState MemberInfo::PreReplica;
constexpr MemberInfo_VNodeState MemberInfo::CatchingUp;
constexpr MemberInfo_VNodeState MemberInfo::Clone;
constexpr MemberInfo_VNodeState MemberInfo::Follower;
constexpr MemberInfo_VNodeState MemberInfo::PreLeader;
constexpr MemberInfo_VNodeState MemberInfo::Leader;
constexpr MemberInfo_VNodeState MemberInfo::Manager;
constexpr MemberInfo_VNodeState MemberInfo::ShuttingDown;
constexpr MemberInfo_VNodeState MemberInfo::Shutdown;
constexpr MemberInfo_VNodeState MemberInfo::ReadOnlyLeaderless;
constexpr MemberInfo_VNodeState MemberInfo::PreReadOnlyReplica;
constexpr MemberInfo_VNodeState MemberInfo::ReadOnlyReplica;
constexpr MemberInfo_VNodeState MemberInfo::ResigningLeader;
constexpr MemberInfo_VNodeState MemberInfo::VNodeState_MIN;
constexpr MemberInfo_VNodeState MemberInfo::VNodeState_MAX;
constexpr int MemberInfo::VNodeState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GossipRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_GossipRequest_default_instance_._instance.get_mutable()->info_ = const_cast< ::event_store::cluster::ClusterInfo*>(
      ::event_store::cluster::ClusterInfo::internal_default_instance());
  ::event_store::cluster::_GossipRequest_default_instance_._instance.get_mutable()->server_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
}
class GossipRequest::_Internal {
 public:
  static const ::event_store::cluster::ClusterInfo& info(const GossipRequest* msg);
  static const ::event_store::cluster::EndPoint& server(const GossipRequest* msg);
};

const ::event_store::cluster::ClusterInfo&
GossipRequest::_Internal::info(const GossipRequest* msg) {
  return *msg->info_;
}
const ::event_store::cluster::EndPoint&
GossipRequest::_Internal::server(const GossipRequest* msg) {
  return *msg->server_;
}
GossipRequest::GossipRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.GossipRequest)
}
GossipRequest::GossipRequest(const GossipRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::event_store::cluster::ClusterInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_server()) {
    server_ = new ::event_store::cluster::EndPoint(*from.server_);
  } else {
    server_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.GossipRequest)
}

void GossipRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GossipRequest_cluster_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_) -
      reinterpret_cast<char*>(&info_)) + sizeof(server_));
}

GossipRequest::~GossipRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.GossipRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GossipRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete server_;
}

void GossipRequest::ArenaDtor(void* object) {
  GossipRequest* _this = reinterpret_cast< GossipRequest* >(object);
  (void)_this;
}
void GossipRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GossipRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GossipRequest& GossipRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GossipRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void GossipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.GossipRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  if (GetArena() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GossipRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.cluster.ClusterInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GossipRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.GossipRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.cluster.ClusterInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // .event_store.cluster.EndPoint server = 2;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.GossipRequest)
  return target;
}

size_t GossipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.GossipRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.cluster.ClusterInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .event_store.cluster.EndPoint server = 2;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GossipRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.GossipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GossipRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GossipRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.GossipRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.GossipRequest)
    MergeFrom(*source);
  }
}

void GossipRequest::MergeFrom(const GossipRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.GossipRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::event_store::cluster::ClusterInfo::MergeFrom(from._internal_info());
  }
  if (from.has_server()) {
    _internal_mutable_server()->::event_store::cluster::EndPoint::MergeFrom(from._internal_server());
  }
}

void GossipRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.GossipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GossipRequest::CopyFrom(const GossipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.GossipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GossipRequest::IsInitialized() const {
  return true;
}

void GossipRequest::InternalSwap(GossipRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GossipRequest, server_)
      + sizeof(GossipRequest::server_)
      - PROTOBUF_FIELD_OFFSET(GossipRequest, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GossipRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewChangeRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_ViewChangeRequest_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_ViewChangeRequest_default_instance_._instance.get_mutable()->server_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
}
class ViewChangeRequest::_Internal {
 public:
  static const ::event_store::client::UUID& server_id(const ViewChangeRequest* msg);
  static const ::event_store::cluster::EndPoint& server_http(const ViewChangeRequest* msg);
};

const ::event_store::client::UUID&
ViewChangeRequest::_Internal::server_id(const ViewChangeRequest* msg) {
  return *msg->server_id_;
}
const ::event_store::cluster::EndPoint&
ViewChangeRequest::_Internal::server_http(const ViewChangeRequest* msg) {
  return *msg->server_http_;
}
void ViewChangeRequest::clear_server_id() {
  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
}
ViewChangeRequest::ViewChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ViewChangeRequest)
}
ViewChangeRequest::ViewChangeRequest(const ViewChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_id()) {
    server_id_ = new ::event_store::client::UUID(*from.server_id_);
  } else {
    server_id_ = nullptr;
  }
  if (from._internal_has_server_http()) {
    server_http_ = new ::event_store::cluster::EndPoint(*from.server_http_);
  } else {
    server_http_ = nullptr;
  }
  attempted_view_ = from.attempted_view_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ViewChangeRequest)
}

void ViewChangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewChangeRequest_cluster_2eproto.base);
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attempted_view_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(attempted_view_));
}

ViewChangeRequest::~ViewChangeRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ViewChangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_id_;
  if (this != internal_default_instance()) delete server_http_;
}

void ViewChangeRequest::ArenaDtor(void* object) {
  ViewChangeRequest* _this = reinterpret_cast< ViewChangeRequest* >(object);
  (void)_this;
}
void ViewChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewChangeRequest& ViewChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewChangeRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void ViewChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ViewChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
  attempted_view_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint server_http = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attempted_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attempted_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ViewChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_http(this), target, stream);
  }

  // int32 attempted_view = 3;
  if (this->attempted_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attempted_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ViewChangeRequest)
  return target;
}

size_t ViewChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ViewChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_id_);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_http_);
  }

  // int32 attempted_view = 3;
  if (this->attempted_view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attempted_view());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ViewChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ViewChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ViewChangeRequest)
    MergeFrom(*source);
  }
}

void ViewChangeRequest::MergeFrom(const ViewChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ViewChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_id()) {
    _internal_mutable_server_id()->::event_store::client::UUID::MergeFrom(from._internal_server_id());
  }
  if (from.has_server_http()) {
    _internal_mutable_server_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_server_http());
  }
  if (from.attempted_view() != 0) {
    _internal_set_attempted_view(from._internal_attempted_view());
  }
}

void ViewChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ViewChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewChangeRequest::CopyFrom(const ViewChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ViewChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewChangeRequest::IsInitialized() const {
  return true;
}

void ViewChangeRequest::InternalSwap(ViewChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewChangeRequest, attempted_view_)
      + sizeof(ViewChangeRequest::attempted_view_)
      - PROTOBUF_FIELD_OFFSET(ViewChangeRequest, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewChangeProofRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_ViewChangeProofRequest_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_ViewChangeProofRequest_default_instance_._instance.get_mutable()->server_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
}
class ViewChangeProofRequest::_Internal {
 public:
  static const ::event_store::client::UUID& server_id(const ViewChangeProofRequest* msg);
  static const ::event_store::cluster::EndPoint& server_http(const ViewChangeProofRequest* msg);
};

const ::event_store::client::UUID&
ViewChangeProofRequest::_Internal::server_id(const ViewChangeProofRequest* msg) {
  return *msg->server_id_;
}
const ::event_store::cluster::EndPoint&
ViewChangeProofRequest::_Internal::server_http(const ViewChangeProofRequest* msg) {
  return *msg->server_http_;
}
void ViewChangeProofRequest::clear_server_id() {
  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
}
ViewChangeProofRequest::ViewChangeProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ViewChangeProofRequest)
}
ViewChangeProofRequest::ViewChangeProofRequest(const ViewChangeProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_id()) {
    server_id_ = new ::event_store::client::UUID(*from.server_id_);
  } else {
    server_id_ = nullptr;
  }
  if (from._internal_has_server_http()) {
    server_http_ = new ::event_store::cluster::EndPoint(*from.server_http_);
  } else {
    server_http_ = nullptr;
  }
  installed_view_ = from.installed_view_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ViewChangeProofRequest)
}

void ViewChangeProofRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewChangeProofRequest_cluster_2eproto.base);
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&installed_view_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(installed_view_));
}

ViewChangeProofRequest::~ViewChangeProofRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ViewChangeProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewChangeProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_id_;
  if (this != internal_default_instance()) delete server_http_;
}

void ViewChangeProofRequest::ArenaDtor(void* object) {
  ViewChangeProofRequest* _this = reinterpret_cast< ViewChangeProofRequest* >(object);
  (void)_this;
}
void ViewChangeProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewChangeProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewChangeProofRequest& ViewChangeProofRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewChangeProofRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void ViewChangeProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ViewChangeProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
  installed_view_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewChangeProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint server_http = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 installed_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          installed_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewChangeProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ViewChangeProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_http(this), target, stream);
  }

  // int32 installed_view = 3;
  if (this->installed_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_installed_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ViewChangeProofRequest)
  return target;
}

size_t ViewChangeProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ViewChangeProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_id_);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_http_);
  }

  // int32 installed_view = 3;
  if (this->installed_view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_installed_view());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewChangeProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ViewChangeProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewChangeProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewChangeProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ViewChangeProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ViewChangeProofRequest)
    MergeFrom(*source);
  }
}

void ViewChangeProofRequest::MergeFrom(const ViewChangeProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ViewChangeProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_id()) {
    _internal_mutable_server_id()->::event_store::client::UUID::MergeFrom(from._internal_server_id());
  }
  if (from.has_server_http()) {
    _internal_mutable_server_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_server_http());
  }
  if (from.installed_view() != 0) {
    _internal_set_installed_view(from._internal_installed_view());
  }
}

void ViewChangeProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ViewChangeProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewChangeProofRequest::CopyFrom(const ViewChangeProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ViewChangeProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewChangeProofRequest::IsInitialized() const {
  return true;
}

void ViewChangeProofRequest::InternalSwap(ViewChangeProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewChangeProofRequest, installed_view_)
      + sizeof(ViewChangeProofRequest::installed_view_)
      - PROTOBUF_FIELD_OFFSET(ViewChangeProofRequest, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewChangeProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_PrepareRequest_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_PrepareRequest_default_instance_._instance.get_mutable()->server_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
}
class PrepareRequest::_Internal {
 public:
  static const ::event_store::client::UUID& server_id(const PrepareRequest* msg);
  static const ::event_store::cluster::EndPoint& server_http(const PrepareRequest* msg);
};

const ::event_store::client::UUID&
PrepareRequest::_Internal::server_id(const PrepareRequest* msg) {
  return *msg->server_id_;
}
const ::event_store::cluster::EndPoint&
PrepareRequest::_Internal::server_http(const PrepareRequest* msg) {
  return *msg->server_http_;
}
void PrepareRequest::clear_server_id() {
  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
}
PrepareRequest::PrepareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.PrepareRequest)
}
PrepareRequest::PrepareRequest(const PrepareRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_id()) {
    server_id_ = new ::event_store::client::UUID(*from.server_id_);
  } else {
    server_id_ = nullptr;
  }
  if (from._internal_has_server_http()) {
    server_http_ = new ::event_store::cluster::EndPoint(*from.server_http_);
  } else {
    server_http_ = nullptr;
  }
  view_ = from.view_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.PrepareRequest)
}

void PrepareRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareRequest_cluster_2eproto.base);
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(view_));
}

PrepareRequest::~PrepareRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.PrepareRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_id_;
  if (this != internal_default_instance()) delete server_http_;
}

void PrepareRequest::ArenaDtor(void* object) {
  PrepareRequest* _this = reinterpret_cast< PrepareRequest* >(object);
  (void)_this;
}
void PrepareRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareRequest& PrepareRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void PrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.PrepareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
  view_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint server_http = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.PrepareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_http(this), target, stream);
  }

  // int32 view = 3;
  if (this->view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.PrepareRequest)
  return target;
}

size_t PrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.PrepareRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_id_);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_http_);
  }

  // int32 view = 3;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_view());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.PrepareRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.PrepareRequest)
    MergeFrom(*source);
  }
}

void PrepareRequest::MergeFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_id()) {
    _internal_mutable_server_id()->::event_store::client::UUID::MergeFrom(from._internal_server_id());
  }
  if (from.has_server_http()) {
    _internal_mutable_server_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_server_http());
  }
  if (from.view() != 0) {
    _internal_set_view(from._internal_view());
  }
}

void PrepareRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareRequest::CopyFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareRequest::IsInitialized() const {
  return true;
}

void PrepareRequest::InternalSwap(PrepareRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrepareRequest, view_)
      + sizeof(PrepareRequest::view_)
      - PROTOBUF_FIELD_OFFSET(PrepareRequest, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareOkRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_PrepareOkRequest_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_PrepareOkRequest_default_instance_._instance.get_mutable()->server_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
  ::event_store::cluster::_PrepareOkRequest_default_instance_._instance.get_mutable()->epoch_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_PrepareOkRequest_default_instance_._instance.get_mutable()->epoch_leader_instance_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_PrepareOkRequest_default_instance_._instance.get_mutable()->cluster_info_ = const_cast< ::event_store::cluster::ClusterInfo*>(
      ::event_store::cluster::ClusterInfo::internal_default_instance());
}
class PrepareOkRequest::_Internal {
 public:
  static const ::event_store::client::UUID& server_id(const PrepareOkRequest* msg);
  static const ::event_store::cluster::EndPoint& server_http(const PrepareOkRequest* msg);
  static const ::event_store::client::UUID& epoch_id(const PrepareOkRequest* msg);
  static const ::event_store::client::UUID& epoch_leader_instance_id(const PrepareOkRequest* msg);
  static const ::event_store::cluster::ClusterInfo& cluster_info(const PrepareOkRequest* msg);
};

const ::event_store::client::UUID&
PrepareOkRequest::_Internal::server_id(const PrepareOkRequest* msg) {
  return *msg->server_id_;
}
const ::event_store::cluster::EndPoint&
PrepareOkRequest::_Internal::server_http(const PrepareOkRequest* msg) {
  return *msg->server_http_;
}
const ::event_store::client::UUID&
PrepareOkRequest::_Internal::epoch_id(const PrepareOkRequest* msg) {
  return *msg->epoch_id_;
}
const ::event_store::client::UUID&
PrepareOkRequest::_Internal::epoch_leader_instance_id(const PrepareOkRequest* msg) {
  return *msg->epoch_leader_instance_id_;
}
const ::event_store::cluster::ClusterInfo&
PrepareOkRequest::_Internal::cluster_info(const PrepareOkRequest* msg) {
  return *msg->cluster_info_;
}
void PrepareOkRequest::clear_server_id() {
  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
}
void PrepareOkRequest::clear_epoch_id() {
  if (GetArena() == nullptr && epoch_id_ != nullptr) {
    delete epoch_id_;
  }
  epoch_id_ = nullptr;
}
void PrepareOkRequest::clear_epoch_leader_instance_id() {
  if (GetArena() == nullptr && epoch_leader_instance_id_ != nullptr) {
    delete epoch_leader_instance_id_;
  }
  epoch_leader_instance_id_ = nullptr;
}
PrepareOkRequest::PrepareOkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.PrepareOkRequest)
}
PrepareOkRequest::PrepareOkRequest(const PrepareOkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_id()) {
    server_id_ = new ::event_store::client::UUID(*from.server_id_);
  } else {
    server_id_ = nullptr;
  }
  if (from._internal_has_server_http()) {
    server_http_ = new ::event_store::cluster::EndPoint(*from.server_http_);
  } else {
    server_http_ = nullptr;
  }
  if (from._internal_has_epoch_id()) {
    epoch_id_ = new ::event_store::client::UUID(*from.epoch_id_);
  } else {
    epoch_id_ = nullptr;
  }
  if (from._internal_has_epoch_leader_instance_id()) {
    epoch_leader_instance_id_ = new ::event_store::client::UUID(*from.epoch_leader_instance_id_);
  } else {
    epoch_leader_instance_id_ = nullptr;
  }
  if (from._internal_has_cluster_info()) {
    cluster_info_ = new ::event_store::cluster::ClusterInfo(*from.cluster_info_);
  } else {
    cluster_info_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_priority_) -
    reinterpret_cast<char*>(&view_)) + sizeof(node_priority_));
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.PrepareOkRequest)
}

void PrepareOkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareOkRequest_cluster_2eproto.base);
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_priority_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(node_priority_));
}

PrepareOkRequest::~PrepareOkRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.PrepareOkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareOkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_id_;
  if (this != internal_default_instance()) delete server_http_;
  if (this != internal_default_instance()) delete epoch_id_;
  if (this != internal_default_instance()) delete epoch_leader_instance_id_;
  if (this != internal_default_instance()) delete cluster_info_;
}

void PrepareOkRequest::ArenaDtor(void* object) {
  PrepareOkRequest* _this = reinterpret_cast< PrepareOkRequest* >(object);
  (void)_this;
}
void PrepareOkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareOkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareOkRequest& PrepareOkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareOkRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void PrepareOkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.PrepareOkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
  if (GetArena() == nullptr && epoch_id_ != nullptr) {
    delete epoch_id_;
  }
  epoch_id_ = nullptr;
  if (GetArena() == nullptr && epoch_leader_instance_id_ != nullptr) {
    delete epoch_leader_instance_id_;
  }
  epoch_leader_instance_id_ = nullptr;
  if (GetArena() == nullptr && cluster_info_ != nullptr) {
    delete cluster_info_;
  }
  cluster_info_ = nullptr;
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_priority_) -
      reinterpret_cast<char*>(&view_)) + sizeof(node_priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareOkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint server_http = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 epoch_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          epoch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 epoch_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          epoch_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID epoch_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID epoch_leader_instance_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_leader_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_commit_position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          last_commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 writer_checkpoint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          writer_checkpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 chaser_checkpoint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          chaser_checkpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          node_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.ClusterInfo cluster_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cluster_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareOkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.PrepareOkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view = 1;
  if (this->view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_view(), target);
  }

  // .event_store.client.UUID server_id = 2;
  if (this->has_server_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint server_http = 3;
  if (this->has_server_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::server_http(this), target, stream);
  }

  // int32 epoch_number = 4;
  if (this->epoch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_epoch_number(), target);
  }

  // int64 epoch_position = 5;
  if (this->epoch_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_epoch_position(), target);
  }

  // .event_store.client.UUID epoch_id = 6;
  if (this->has_epoch_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::epoch_id(this), target, stream);
  }

  // .event_store.client.UUID epoch_leader_instance_id = 7;
  if (this->has_epoch_leader_instance_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::epoch_leader_instance_id(this), target, stream);
  }

  // int64 last_commit_position = 8;
  if (this->last_commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_last_commit_position(), target);
  }

  // int64 writer_checkpoint = 9;
  if (this->writer_checkpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_writer_checkpoint(), target);
  }

  // int64 chaser_checkpoint = 10;
  if (this->chaser_checkpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_chaser_checkpoint(), target);
  }

  // int32 node_priority = 11;
  if (this->node_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_node_priority(), target);
  }

  // .event_store.cluster.ClusterInfo cluster_info = 12;
  if (this->has_cluster_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::cluster_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.PrepareOkRequest)
  return target;
}

size_t PrepareOkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.PrepareOkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 2;
  if (this->has_server_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_id_);
  }

  // .event_store.cluster.EndPoint server_http = 3;
  if (this->has_server_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_http_);
  }

  // .event_store.client.UUID epoch_id = 6;
  if (this->has_epoch_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_id_);
  }

  // .event_store.client.UUID epoch_leader_instance_id = 7;
  if (this->has_epoch_leader_instance_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_leader_instance_id_);
  }

  // .event_store.cluster.ClusterInfo cluster_info = 12;
  if (this->has_cluster_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cluster_info_);
  }

  // int32 view = 1;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_view());
  }

  // int32 epoch_number = 4;
  if (this->epoch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epoch_number());
  }

  // int64 epoch_position = 5;
  if (this->epoch_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_epoch_position());
  }

  // int64 last_commit_position = 8;
  if (this->last_commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_commit_position());
  }

  // int64 writer_checkpoint = 9;
  if (this->writer_checkpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_writer_checkpoint());
  }

  // int64 chaser_checkpoint = 10;
  if (this->chaser_checkpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_chaser_checkpoint());
  }

  // int32 node_priority = 11;
  if (this->node_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareOkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.PrepareOkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareOkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareOkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.PrepareOkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.PrepareOkRequest)
    MergeFrom(*source);
  }
}

void PrepareOkRequest::MergeFrom(const PrepareOkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.PrepareOkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_id()) {
    _internal_mutable_server_id()->::event_store::client::UUID::MergeFrom(from._internal_server_id());
  }
  if (from.has_server_http()) {
    _internal_mutable_server_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_server_http());
  }
  if (from.has_epoch_id()) {
    _internal_mutable_epoch_id()->::event_store::client::UUID::MergeFrom(from._internal_epoch_id());
  }
  if (from.has_epoch_leader_instance_id()) {
    _internal_mutable_epoch_leader_instance_id()->::event_store::client::UUID::MergeFrom(from._internal_epoch_leader_instance_id());
  }
  if (from.has_cluster_info()) {
    _internal_mutable_cluster_info()->::event_store::cluster::ClusterInfo::MergeFrom(from._internal_cluster_info());
  }
  if (from.view() != 0) {
    _internal_set_view(from._internal_view());
  }
  if (from.epoch_number() != 0) {
    _internal_set_epoch_number(from._internal_epoch_number());
  }
  if (from.epoch_position() != 0) {
    _internal_set_epoch_position(from._internal_epoch_position());
  }
  if (from.last_commit_position() != 0) {
    _internal_set_last_commit_position(from._internal_last_commit_position());
  }
  if (from.writer_checkpoint() != 0) {
    _internal_set_writer_checkpoint(from._internal_writer_checkpoint());
  }
  if (from.chaser_checkpoint() != 0) {
    _internal_set_chaser_checkpoint(from._internal_chaser_checkpoint());
  }
  if (from.node_priority() != 0) {
    _internal_set_node_priority(from._internal_node_priority());
  }
}

void PrepareOkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.PrepareOkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareOkRequest::CopyFrom(const PrepareOkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.PrepareOkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareOkRequest::IsInitialized() const {
  return true;
}

void PrepareOkRequest::InternalSwap(PrepareOkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrepareOkRequest, node_priority_)
      + sizeof(PrepareOkRequest::node_priority_)
      - PROTOBUF_FIELD_OFFSET(PrepareOkRequest, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareOkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProposalRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_ProposalRequest_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_ProposalRequest_default_instance_._instance.get_mutable()->server_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
  ::event_store::cluster::_ProposalRequest_default_instance_._instance.get_mutable()->leader_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_ProposalRequest_default_instance_._instance.get_mutable()->leader_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
  ::event_store::cluster::_ProposalRequest_default_instance_._instance.get_mutable()->epoch_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_ProposalRequest_default_instance_._instance.get_mutable()->epoch_leader_instance_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
}
class ProposalRequest::_Internal {
 public:
  static const ::event_store::client::UUID& server_id(const ProposalRequest* msg);
  static const ::event_store::cluster::EndPoint& server_http(const ProposalRequest* msg);
  static const ::event_store::client::UUID& leader_id(const ProposalRequest* msg);
  static const ::event_store::cluster::EndPoint& leader_http(const ProposalRequest* msg);
  static const ::event_store::client::UUID& epoch_id(const ProposalRequest* msg);
  static const ::event_store::client::UUID& epoch_leader_instance_id(const ProposalRequest* msg);
};

const ::event_store::client::UUID&
ProposalRequest::_Internal::server_id(const ProposalRequest* msg) {
  return *msg->server_id_;
}
const ::event_store::cluster::EndPoint&
ProposalRequest::_Internal::server_http(const ProposalRequest* msg) {
  return *msg->server_http_;
}
const ::event_store::client::UUID&
ProposalRequest::_Internal::leader_id(const ProposalRequest* msg) {
  return *msg->leader_id_;
}
const ::event_store::cluster::EndPoint&
ProposalRequest::_Internal::leader_http(const ProposalRequest* msg) {
  return *msg->leader_http_;
}
const ::event_store::client::UUID&
ProposalRequest::_Internal::epoch_id(const ProposalRequest* msg) {
  return *msg->epoch_id_;
}
const ::event_store::client::UUID&
ProposalRequest::_Internal::epoch_leader_instance_id(const ProposalRequest* msg) {
  return *msg->epoch_leader_instance_id_;
}
void ProposalRequest::clear_server_id() {
  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
}
void ProposalRequest::clear_leader_id() {
  if (GetArena() == nullptr && leader_id_ != nullptr) {
    delete leader_id_;
  }
  leader_id_ = nullptr;
}
void ProposalRequest::clear_epoch_id() {
  if (GetArena() == nullptr && epoch_id_ != nullptr) {
    delete epoch_id_;
  }
  epoch_id_ = nullptr;
}
void ProposalRequest::clear_epoch_leader_instance_id() {
  if (GetArena() == nullptr && epoch_leader_instance_id_ != nullptr) {
    delete epoch_leader_instance_id_;
  }
  epoch_leader_instance_id_ = nullptr;
}
ProposalRequest::ProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ProposalRequest)
}
ProposalRequest::ProposalRequest(const ProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_id()) {
    server_id_ = new ::event_store::client::UUID(*from.server_id_);
  } else {
    server_id_ = nullptr;
  }
  if (from._internal_has_server_http()) {
    server_http_ = new ::event_store::cluster::EndPoint(*from.server_http_);
  } else {
    server_http_ = nullptr;
  }
  if (from._internal_has_leader_id()) {
    leader_id_ = new ::event_store::client::UUID(*from.leader_id_);
  } else {
    leader_id_ = nullptr;
  }
  if (from._internal_has_leader_http()) {
    leader_http_ = new ::event_store::cluster::EndPoint(*from.leader_http_);
  } else {
    leader_http_ = nullptr;
  }
  if (from._internal_has_epoch_id()) {
    epoch_id_ = new ::event_store::client::UUID(*from.epoch_id_);
  } else {
    epoch_id_ = nullptr;
  }
  if (from._internal_has_epoch_leader_instance_id()) {
    epoch_leader_instance_id_ = new ::event_store::client::UUID(*from.epoch_leader_instance_id_);
  } else {
    epoch_leader_instance_id_ = nullptr;
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_priority_) -
    reinterpret_cast<char*>(&view_)) + sizeof(node_priority_));
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ProposalRequest)
}

void ProposalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProposalRequest_cluster_2eproto.base);
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_priority_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(node_priority_));
}

ProposalRequest::~ProposalRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ProposalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_id_;
  if (this != internal_default_instance()) delete server_http_;
  if (this != internal_default_instance()) delete leader_id_;
  if (this != internal_default_instance()) delete leader_http_;
  if (this != internal_default_instance()) delete epoch_id_;
  if (this != internal_default_instance()) delete epoch_leader_instance_id_;
}

void ProposalRequest::ArenaDtor(void* object) {
  ProposalRequest* _this = reinterpret_cast< ProposalRequest* >(object);
  (void)_this;
}
void ProposalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposalRequest& ProposalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposalRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void ProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ProposalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
  if (GetArena() == nullptr && leader_id_ != nullptr) {
    delete leader_id_;
  }
  leader_id_ = nullptr;
  if (GetArena() == nullptr && leader_http_ != nullptr) {
    delete leader_http_;
  }
  leader_http_ = nullptr;
  if (GetArena() == nullptr && epoch_id_ != nullptr) {
    delete epoch_id_;
  }
  epoch_id_ = nullptr;
  if (GetArena() == nullptr && epoch_leader_instance_id_ != nullptr) {
    delete epoch_leader_instance_id_;
  }
  epoch_leader_instance_id_ = nullptr;
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_priority_) -
      reinterpret_cast<char*>(&view_)) + sizeof(node_priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint server_http = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID leader_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint leader_http = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 view = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 epoch_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          epoch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 epoch_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          epoch_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID epoch_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID epoch_leader_instance_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_leader_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_commit_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          last_commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 writer_checkpoint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          writer_checkpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 chaser_checkpoint = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          chaser_checkpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_priority = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          node_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ProposalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_http(this), target, stream);
  }

  // .event_store.client.UUID leader_id = 3;
  if (this->has_leader_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leader_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint leader_http = 4;
  if (this->has_leader_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::leader_http(this), target, stream);
  }

  // int32 view = 5;
  if (this->view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_view(), target);
  }

  // int32 epoch_number = 6;
  if (this->epoch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_epoch_number(), target);
  }

  // int64 epoch_position = 7;
  if (this->epoch_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_epoch_position(), target);
  }

  // .event_store.client.UUID epoch_id = 8;
  if (this->has_epoch_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::epoch_id(this), target, stream);
  }

  // .event_store.client.UUID epoch_leader_instance_id = 9;
  if (this->has_epoch_leader_instance_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::epoch_leader_instance_id(this), target, stream);
  }

  // int64 last_commit_position = 10;
  if (this->last_commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_last_commit_position(), target);
  }

  // int64 writer_checkpoint = 11;
  if (this->writer_checkpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_writer_checkpoint(), target);
  }

  // int64 chaser_checkpoint = 12;
  if (this->chaser_checkpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_chaser_checkpoint(), target);
  }

  // int32 node_priority = 13;
  if (this->node_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_node_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ProposalRequest)
  return target;
}

size_t ProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ProposalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_id_);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_http_);
  }

  // .event_store.client.UUID leader_id = 3;
  if (this->has_leader_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_id_);
  }

  // .event_store.cluster.EndPoint leader_http = 4;
  if (this->has_leader_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_http_);
  }

  // .event_store.client.UUID epoch_id = 8;
  if (this->has_epoch_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_id_);
  }

  // .event_store.client.UUID epoch_leader_instance_id = 9;
  if (this->has_epoch_leader_instance_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_leader_instance_id_);
  }

  // int32 view = 5;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_view());
  }

  // int32 epoch_number = 6;
  if (this->epoch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epoch_number());
  }

  // int64 epoch_position = 7;
  if (this->epoch_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_epoch_position());
  }

  // int64 last_commit_position = 10;
  if (this->last_commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_commit_position());
  }

  // int64 writer_checkpoint = 11;
  if (this->writer_checkpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_writer_checkpoint());
  }

  // int64 chaser_checkpoint = 12;
  if (this->chaser_checkpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_chaser_checkpoint());
  }

  // int32 node_priority = 13;
  if (this->node_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ProposalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ProposalRequest)
    MergeFrom(*source);
  }
}

void ProposalRequest::MergeFrom(const ProposalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_id()) {
    _internal_mutable_server_id()->::event_store::client::UUID::MergeFrom(from._internal_server_id());
  }
  if (from.has_server_http()) {
    _internal_mutable_server_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_server_http());
  }
  if (from.has_leader_id()) {
    _internal_mutable_leader_id()->::event_store::client::UUID::MergeFrom(from._internal_leader_id());
  }
  if (from.has_leader_http()) {
    _internal_mutable_leader_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_leader_http());
  }
  if (from.has_epoch_id()) {
    _internal_mutable_epoch_id()->::event_store::client::UUID::MergeFrom(from._internal_epoch_id());
  }
  if (from.has_epoch_leader_instance_id()) {
    _internal_mutable_epoch_leader_instance_id()->::event_store::client::UUID::MergeFrom(from._internal_epoch_leader_instance_id());
  }
  if (from.view() != 0) {
    _internal_set_view(from._internal_view());
  }
  if (from.epoch_number() != 0) {
    _internal_set_epoch_number(from._internal_epoch_number());
  }
  if (from.epoch_position() != 0) {
    _internal_set_epoch_position(from._internal_epoch_position());
  }
  if (from.last_commit_position() != 0) {
    _internal_set_last_commit_position(from._internal_last_commit_position());
  }
  if (from.writer_checkpoint() != 0) {
    _internal_set_writer_checkpoint(from._internal_writer_checkpoint());
  }
  if (from.chaser_checkpoint() != 0) {
    _internal_set_chaser_checkpoint(from._internal_chaser_checkpoint());
  }
  if (from.node_priority() != 0) {
    _internal_set_node_priority(from._internal_node_priority());
  }
}

void ProposalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalRequest::CopyFrom(const ProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalRequest::IsInitialized() const {
  return true;
}

void ProposalRequest::InternalSwap(ProposalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposalRequest, node_priority_)
      + sizeof(ProposalRequest::node_priority_)
      - PROTOBUF_FIELD_OFFSET(ProposalRequest, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_AcceptRequest_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_AcceptRequest_default_instance_._instance.get_mutable()->server_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
  ::event_store::cluster::_AcceptRequest_default_instance_._instance.get_mutable()->leader_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_AcceptRequest_default_instance_._instance.get_mutable()->leader_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
}
class AcceptRequest::_Internal {
 public:
  static const ::event_store::client::UUID& server_id(const AcceptRequest* msg);
  static const ::event_store::cluster::EndPoint& server_http(const AcceptRequest* msg);
  static const ::event_store::client::UUID& leader_id(const AcceptRequest* msg);
  static const ::event_store::cluster::EndPoint& leader_http(const AcceptRequest* msg);
};

const ::event_store::client::UUID&
AcceptRequest::_Internal::server_id(const AcceptRequest* msg) {
  return *msg->server_id_;
}
const ::event_store::cluster::EndPoint&
AcceptRequest::_Internal::server_http(const AcceptRequest* msg) {
  return *msg->server_http_;
}
const ::event_store::client::UUID&
AcceptRequest::_Internal::leader_id(const AcceptRequest* msg) {
  return *msg->leader_id_;
}
const ::event_store::cluster::EndPoint&
AcceptRequest::_Internal::leader_http(const AcceptRequest* msg) {
  return *msg->leader_http_;
}
void AcceptRequest::clear_server_id() {
  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
}
void AcceptRequest::clear_leader_id() {
  if (GetArena() == nullptr && leader_id_ != nullptr) {
    delete leader_id_;
  }
  leader_id_ = nullptr;
}
AcceptRequest::AcceptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.AcceptRequest)
}
AcceptRequest::AcceptRequest(const AcceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_id()) {
    server_id_ = new ::event_store::client::UUID(*from.server_id_);
  } else {
    server_id_ = nullptr;
  }
  if (from._internal_has_server_http()) {
    server_http_ = new ::event_store::cluster::EndPoint(*from.server_http_);
  } else {
    server_http_ = nullptr;
  }
  if (from._internal_has_leader_id()) {
    leader_id_ = new ::event_store::client::UUID(*from.leader_id_);
  } else {
    leader_id_ = nullptr;
  }
  if (from._internal_has_leader_http()) {
    leader_http_ = new ::event_store::cluster::EndPoint(*from.leader_http_);
  } else {
    leader_http_ = nullptr;
  }
  view_ = from.view_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.AcceptRequest)
}

void AcceptRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptRequest_cluster_2eproto.base);
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(view_));
}

AcceptRequest::~AcceptRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.AcceptRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_id_;
  if (this != internal_default_instance()) delete server_http_;
  if (this != internal_default_instance()) delete leader_id_;
  if (this != internal_default_instance()) delete leader_http_;
}

void AcceptRequest::ArenaDtor(void* object) {
  AcceptRequest* _this = reinterpret_cast< AcceptRequest* >(object);
  (void)_this;
}
void AcceptRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptRequest& AcceptRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void AcceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.AcceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
  if (GetArena() == nullptr && leader_id_ != nullptr) {
    delete leader_id_;
  }
  leader_id_ = nullptr;
  if (GetArena() == nullptr && leader_http_ != nullptr) {
    delete leader_http_;
  }
  leader_http_ = nullptr;
  view_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint server_http = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID leader_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint leader_http = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 view = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.AcceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_http(this), target, stream);
  }

  // .event_store.client.UUID leader_id = 3;
  if (this->has_leader_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leader_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint leader_http = 4;
  if (this->has_leader_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::leader_http(this), target, stream);
  }

  // int32 view = 5;
  if (this->view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.AcceptRequest)
  return target;
}

size_t AcceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.AcceptRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID server_id = 1;
  if (this->has_server_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_id_);
  }

  // .event_store.cluster.EndPoint server_http = 2;
  if (this->has_server_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_http_);
  }

  // .event_store.client.UUID leader_id = 3;
  if (this->has_leader_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_id_);
  }

  // .event_store.cluster.EndPoint leader_http = 4;
  if (this->has_leader_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_http_);
  }

  // int32 view = 5;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_view());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.AcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.AcceptRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.AcceptRequest)
    MergeFrom(*source);
  }
}

void AcceptRequest::MergeFrom(const AcceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.AcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_id()) {
    _internal_mutable_server_id()->::event_store::client::UUID::MergeFrom(from._internal_server_id());
  }
  if (from.has_server_http()) {
    _internal_mutable_server_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_server_http());
  }
  if (from.has_leader_id()) {
    _internal_mutable_leader_id()->::event_store::client::UUID::MergeFrom(from._internal_leader_id());
  }
  if (from.has_leader_http()) {
    _internal_mutable_leader_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_leader_http());
  }
  if (from.view() != 0) {
    _internal_set_view(from._internal_view());
  }
}

void AcceptRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.AcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptRequest::CopyFrom(const AcceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.AcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptRequest::IsInitialized() const {
  return true;
}

void AcceptRequest::InternalSwap(AcceptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptRequest, view_)
      + sizeof(AcceptRequest::view_)
      - PROTOBUF_FIELD_OFFSET(AcceptRequest, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderIsResigningRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_LeaderIsResigningRequest_default_instance_._instance.get_mutable()->leader_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_LeaderIsResigningRequest_default_instance_._instance.get_mutable()->leader_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
}
class LeaderIsResigningRequest::_Internal {
 public:
  static const ::event_store::client::UUID& leader_id(const LeaderIsResigningRequest* msg);
  static const ::event_store::cluster::EndPoint& leader_http(const LeaderIsResigningRequest* msg);
};

const ::event_store::client::UUID&
LeaderIsResigningRequest::_Internal::leader_id(const LeaderIsResigningRequest* msg) {
  return *msg->leader_id_;
}
const ::event_store::cluster::EndPoint&
LeaderIsResigningRequest::_Internal::leader_http(const LeaderIsResigningRequest* msg) {
  return *msg->leader_http_;
}
void LeaderIsResigningRequest::clear_leader_id() {
  if (GetArena() == nullptr && leader_id_ != nullptr) {
    delete leader_id_;
  }
  leader_id_ = nullptr;
}
LeaderIsResigningRequest::LeaderIsResigningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.LeaderIsResigningRequest)
}
LeaderIsResigningRequest::LeaderIsResigningRequest(const LeaderIsResigningRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leader_id()) {
    leader_id_ = new ::event_store::client::UUID(*from.leader_id_);
  } else {
    leader_id_ = nullptr;
  }
  if (from._internal_has_leader_http()) {
    leader_http_ = new ::event_store::cluster::EndPoint(*from.leader_http_);
  } else {
    leader_http_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.LeaderIsResigningRequest)
}

void LeaderIsResigningRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderIsResigningRequest_cluster_2eproto.base);
  ::memset(&leader_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_http_) -
      reinterpret_cast<char*>(&leader_id_)) + sizeof(leader_http_));
}

LeaderIsResigningRequest::~LeaderIsResigningRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.LeaderIsResigningRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderIsResigningRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leader_id_;
  if (this != internal_default_instance()) delete leader_http_;
}

void LeaderIsResigningRequest::ArenaDtor(void* object) {
  LeaderIsResigningRequest* _this = reinterpret_cast< LeaderIsResigningRequest* >(object);
  (void)_this;
}
void LeaderIsResigningRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderIsResigningRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderIsResigningRequest& LeaderIsResigningRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderIsResigningRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void LeaderIsResigningRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.LeaderIsResigningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && leader_id_ != nullptr) {
    delete leader_id_;
  }
  leader_id_ = nullptr;
  if (GetArena() == nullptr && leader_http_ != nullptr) {
    delete leader_http_;
  }
  leader_http_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderIsResigningRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint leader_http = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderIsResigningRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.LeaderIsResigningRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID leader_id = 1;
  if (this->has_leader_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::leader_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint leader_http = 2;
  if (this->has_leader_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::leader_http(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.LeaderIsResigningRequest)
  return target;
}

size_t LeaderIsResigningRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.LeaderIsResigningRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID leader_id = 1;
  if (this->has_leader_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_id_);
  }

  // .event_store.cluster.EndPoint leader_http = 2;
  if (this->has_leader_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_http_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderIsResigningRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.LeaderIsResigningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderIsResigningRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderIsResigningRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.LeaderIsResigningRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.LeaderIsResigningRequest)
    MergeFrom(*source);
  }
}

void LeaderIsResigningRequest::MergeFrom(const LeaderIsResigningRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.LeaderIsResigningRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leader_id()) {
    _internal_mutable_leader_id()->::event_store::client::UUID::MergeFrom(from._internal_leader_id());
  }
  if (from.has_leader_http()) {
    _internal_mutable_leader_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_leader_http());
  }
}

void LeaderIsResigningRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.LeaderIsResigningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderIsResigningRequest::CopyFrom(const LeaderIsResigningRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.LeaderIsResigningRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderIsResigningRequest::IsInitialized() const {
  return true;
}

void LeaderIsResigningRequest::InternalSwap(LeaderIsResigningRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderIsResigningRequest, leader_http_)
      + sizeof(LeaderIsResigningRequest::leader_http_)
      - PROTOBUF_FIELD_OFFSET(LeaderIsResigningRequest, leader_id_)>(
          reinterpret_cast<char*>(&leader_id_),
          reinterpret_cast<char*>(&other->leader_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderIsResigningRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderIsResigningOkRequest::InitAsDefaultInstance() {
  ::event_store::cluster::_LeaderIsResigningOkRequest_default_instance_._instance.get_mutable()->leader_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_LeaderIsResigningOkRequest_default_instance_._instance.get_mutable()->leader_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
  ::event_store::cluster::_LeaderIsResigningOkRequest_default_instance_._instance.get_mutable()->server_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_LeaderIsResigningOkRequest_default_instance_._instance.get_mutable()->server_http_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
}
class LeaderIsResigningOkRequest::_Internal {
 public:
  static const ::event_store::client::UUID& leader_id(const LeaderIsResigningOkRequest* msg);
  static const ::event_store::cluster::EndPoint& leader_http(const LeaderIsResigningOkRequest* msg);
  static const ::event_store::client::UUID& server_id(const LeaderIsResigningOkRequest* msg);
  static const ::event_store::cluster::EndPoint& server_http(const LeaderIsResigningOkRequest* msg);
};

const ::event_store::client::UUID&
LeaderIsResigningOkRequest::_Internal::leader_id(const LeaderIsResigningOkRequest* msg) {
  return *msg->leader_id_;
}
const ::event_store::cluster::EndPoint&
LeaderIsResigningOkRequest::_Internal::leader_http(const LeaderIsResigningOkRequest* msg) {
  return *msg->leader_http_;
}
const ::event_store::client::UUID&
LeaderIsResigningOkRequest::_Internal::server_id(const LeaderIsResigningOkRequest* msg) {
  return *msg->server_id_;
}
const ::event_store::cluster::EndPoint&
LeaderIsResigningOkRequest::_Internal::server_http(const LeaderIsResigningOkRequest* msg) {
  return *msg->server_http_;
}
void LeaderIsResigningOkRequest::clear_leader_id() {
  if (GetArena() == nullptr && leader_id_ != nullptr) {
    delete leader_id_;
  }
  leader_id_ = nullptr;
}
void LeaderIsResigningOkRequest::clear_server_id() {
  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
}
LeaderIsResigningOkRequest::LeaderIsResigningOkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.LeaderIsResigningOkRequest)
}
LeaderIsResigningOkRequest::LeaderIsResigningOkRequest(const LeaderIsResigningOkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leader_id()) {
    leader_id_ = new ::event_store::client::UUID(*from.leader_id_);
  } else {
    leader_id_ = nullptr;
  }
  if (from._internal_has_leader_http()) {
    leader_http_ = new ::event_store::cluster::EndPoint(*from.leader_http_);
  } else {
    leader_http_ = nullptr;
  }
  if (from._internal_has_server_id()) {
    server_id_ = new ::event_store::client::UUID(*from.server_id_);
  } else {
    server_id_ = nullptr;
  }
  if (from._internal_has_server_http()) {
    server_http_ = new ::event_store::cluster::EndPoint(*from.server_http_);
  } else {
    server_http_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.LeaderIsResigningOkRequest)
}

void LeaderIsResigningOkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderIsResigningOkRequest_cluster_2eproto.base);
  ::memset(&leader_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_http_) -
      reinterpret_cast<char*>(&leader_id_)) + sizeof(server_http_));
}

LeaderIsResigningOkRequest::~LeaderIsResigningOkRequest() {
  // @@protoc_insertion_point(destructor:event_store.cluster.LeaderIsResigningOkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderIsResigningOkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leader_id_;
  if (this != internal_default_instance()) delete leader_http_;
  if (this != internal_default_instance()) delete server_id_;
  if (this != internal_default_instance()) delete server_http_;
}

void LeaderIsResigningOkRequest::ArenaDtor(void* object) {
  LeaderIsResigningOkRequest* _this = reinterpret_cast< LeaderIsResigningOkRequest* >(object);
  (void)_this;
}
void LeaderIsResigningOkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaderIsResigningOkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderIsResigningOkRequest& LeaderIsResigningOkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderIsResigningOkRequest_cluster_2eproto.base);
  return *internal_default_instance();
}


void LeaderIsResigningOkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.LeaderIsResigningOkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && leader_id_ != nullptr) {
    delete leader_id_;
  }
  leader_id_ = nullptr;
  if (GetArena() == nullptr && leader_http_ != nullptr) {
    delete leader_http_;
  }
  leader_http_ = nullptr;
  if (GetArena() == nullptr && server_id_ != nullptr) {
    delete server_id_;
  }
  server_id_ = nullptr;
  if (GetArena() == nullptr && server_http_ != nullptr) {
    delete server_http_;
  }
  server_http_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaderIsResigningOkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint leader_http = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint server_http = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderIsResigningOkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.LeaderIsResigningOkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID leader_id = 1;
  if (this->has_leader_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::leader_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint leader_http = 2;
  if (this->has_leader_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::leader_http(this), target, stream);
  }

  // .event_store.client.UUID server_id = 3;
  if (this->has_server_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::server_id(this), target, stream);
  }

  // .event_store.cluster.EndPoint server_http = 4;
  if (this->has_server_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::server_http(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.LeaderIsResigningOkRequest)
  return target;
}

size_t LeaderIsResigningOkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.LeaderIsResigningOkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID leader_id = 1;
  if (this->has_leader_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_id_);
  }

  // .event_store.cluster.EndPoint leader_http = 2;
  if (this->has_leader_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_http_);
  }

  // .event_store.client.UUID server_id = 3;
  if (this->has_server_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_id_);
  }

  // .event_store.cluster.EndPoint server_http = 4;
  if (this->has_server_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_http_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderIsResigningOkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.LeaderIsResigningOkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderIsResigningOkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderIsResigningOkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.LeaderIsResigningOkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.LeaderIsResigningOkRequest)
    MergeFrom(*source);
  }
}

void LeaderIsResigningOkRequest::MergeFrom(const LeaderIsResigningOkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.LeaderIsResigningOkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leader_id()) {
    _internal_mutable_leader_id()->::event_store::client::UUID::MergeFrom(from._internal_leader_id());
  }
  if (from.has_leader_http()) {
    _internal_mutable_leader_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_leader_http());
  }
  if (from.has_server_id()) {
    _internal_mutable_server_id()->::event_store::client::UUID::MergeFrom(from._internal_server_id());
  }
  if (from.has_server_http()) {
    _internal_mutable_server_http()->::event_store::cluster::EndPoint::MergeFrom(from._internal_server_http());
  }
}

void LeaderIsResigningOkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.LeaderIsResigningOkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderIsResigningOkRequest::CopyFrom(const LeaderIsResigningOkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.LeaderIsResigningOkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderIsResigningOkRequest::IsInitialized() const {
  return true;
}

void LeaderIsResigningOkRequest::InternalSwap(LeaderIsResigningOkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaderIsResigningOkRequest, server_http_)
      + sizeof(LeaderIsResigningOkRequest::server_http_)
      - PROTOBUF_FIELD_OFFSET(LeaderIsResigningOkRequest, leader_id_)>(
          reinterpret_cast<char*>(&leader_id_),
          reinterpret_cast<char*>(&other->leader_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderIsResigningOkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterInfo::InitAsDefaultInstance() {
}
class ClusterInfo::_Internal {
 public:
};

ClusterInfo::ClusterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ClusterInfo)
}
ClusterInfo::ClusterInfo(const ClusterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ClusterInfo)
}

void ClusterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterInfo_cluster_2eproto.base);
}

ClusterInfo::~ClusterInfo() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ClusterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClusterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClusterInfo::ArenaDtor(void* object) {
  ClusterInfo* _this = reinterpret_cast< ClusterInfo* >(object);
  (void)_this;
}
void ClusterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClusterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterInfo& ClusterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterInfo_cluster_2eproto.base);
  return *internal_default_instance();
}


void ClusterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ClusterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClusterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .event_store.cluster.MemberInfo members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ClusterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .event_store.cluster.MemberInfo members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ClusterInfo)
  return target;
}

size_t ClusterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ClusterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.cluster.MemberInfo members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ClusterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ClusterInfo)
    MergeFrom(*source);
  }
}

void ClusterInfo::MergeFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ClusterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
}

void ClusterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterInfo::CopyFrom(const ClusterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ClusterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterInfo::IsInitialized() const {
  return true;
}

void ClusterInfo::InternalSwap(ClusterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndPoint::InitAsDefaultInstance() {
}
class EndPoint::_Internal {
 public:
};

EndPoint::EndPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.EndPoint)
}
EndPoint::EndPoint(const EndPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.EndPoint)
}

void EndPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndPoint_cluster_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

EndPoint::~EndPoint() {
  // @@protoc_insertion_point(destructor:event_store.cluster.EndPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndPoint::ArenaDtor(void* object) {
  EndPoint* _this = reinterpret_cast< EndPoint* >(object);
  (void)_this;
}
void EndPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndPoint& EndPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndPoint_cluster_2eproto.base);
  return *internal_default_instance();
}


void EndPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.EndPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.cluster.EndPoint.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.EndPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.cluster.EndPoint.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.EndPoint)
  return target;
}

size_t EndPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.EndPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.EndPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const EndPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.EndPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.EndPoint)
    MergeFrom(*source);
  }
}

void EndPoint::MergeFrom(const EndPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.EndPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void EndPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.EndPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPoint::CopyFrom(const EndPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.EndPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPoint::IsInitialized() const {
  return true;
}

void EndPoint::InternalSwap(EndPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberInfo::InitAsDefaultInstance() {
  ::event_store::cluster::_MemberInfo_default_instance_._instance.get_mutable()->instance_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::cluster::_MemberInfo_default_instance_._instance.get_mutable()->http_end_point_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
  ::event_store::cluster::_MemberInfo_default_instance_._instance.get_mutable()->internal_tcp_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
  ::event_store::cluster::_MemberInfo_default_instance_._instance.get_mutable()->external_tcp_ = const_cast< ::event_store::cluster::EndPoint*>(
      ::event_store::cluster::EndPoint::internal_default_instance());
  ::event_store::cluster::_MemberInfo_default_instance_._instance.get_mutable()->epoch_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
}
class MemberInfo::_Internal {
 public:
  static const ::event_store::client::UUID& instance_id(const MemberInfo* msg);
  static const ::event_store::cluster::EndPoint& http_end_point(const MemberInfo* msg);
  static const ::event_store::cluster::EndPoint& internal_tcp(const MemberInfo* msg);
  static const ::event_store::cluster::EndPoint& external_tcp(const MemberInfo* msg);
  static const ::event_store::client::UUID& epoch_id(const MemberInfo* msg);
};

const ::event_store::client::UUID&
MemberInfo::_Internal::instance_id(const MemberInfo* msg) {
  return *msg->instance_id_;
}
const ::event_store::cluster::EndPoint&
MemberInfo::_Internal::http_end_point(const MemberInfo* msg) {
  return *msg->http_end_point_;
}
const ::event_store::cluster::EndPoint&
MemberInfo::_Internal::internal_tcp(const MemberInfo* msg) {
  return *msg->internal_tcp_;
}
const ::event_store::cluster::EndPoint&
MemberInfo::_Internal::external_tcp(const MemberInfo* msg) {
  return *msg->external_tcp_;
}
const ::event_store::client::UUID&
MemberInfo::_Internal::epoch_id(const MemberInfo* msg) {
  return *msg->epoch_id_;
}
void MemberInfo::clear_instance_id() {
  if (GetArena() == nullptr && instance_id_ != nullptr) {
    delete instance_id_;
  }
  instance_id_ = nullptr;
}
void MemberInfo::clear_epoch_id() {
  if (GetArena() == nullptr && epoch_id_ != nullptr) {
    delete epoch_id_;
  }
  epoch_id_ = nullptr;
}
MemberInfo::MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.MemberInfo)
}
MemberInfo::MemberInfo(const MemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  advertise_host_to_client_as_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_advertise_host_to_client_as().empty()) {
    advertise_host_to_client_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_advertise_host_to_client_as(),
      GetArena());
  }
  if (from._internal_has_instance_id()) {
    instance_id_ = new ::event_store::client::UUID(*from.instance_id_);
  } else {
    instance_id_ = nullptr;
  }
  if (from._internal_has_http_end_point()) {
    http_end_point_ = new ::event_store::cluster::EndPoint(*from.http_end_point_);
  } else {
    http_end_point_ = nullptr;
  }
  if (from._internal_has_internal_tcp()) {
    internal_tcp_ = new ::event_store::cluster::EndPoint(*from.internal_tcp_);
  } else {
    internal_tcp_ = nullptr;
  }
  if (from._internal_has_external_tcp()) {
    external_tcp_ = new ::event_store::cluster::EndPoint(*from.external_tcp_);
  } else {
    external_tcp_ = nullptr;
  }
  if (from._internal_has_epoch_id()) {
    epoch_id_ = new ::event_store::client::UUID(*from.epoch_id_);
  } else {
    epoch_id_ = nullptr;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&advertise_tcp_port_to_client_as_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(advertise_tcp_port_to_client_as_));
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.MemberInfo)
}

void MemberInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberInfo_cluster_2eproto.base);
  advertise_host_to_client_as_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advertise_tcp_port_to_client_as_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(advertise_tcp_port_to_client_as_));
}

MemberInfo::~MemberInfo() {
  // @@protoc_insertion_point(destructor:event_store.cluster.MemberInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  advertise_host_to_client_as_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete instance_id_;
  if (this != internal_default_instance()) delete http_end_point_;
  if (this != internal_default_instance()) delete internal_tcp_;
  if (this != internal_default_instance()) delete external_tcp_;
  if (this != internal_default_instance()) delete epoch_id_;
}

void MemberInfo::ArenaDtor(void* object) {
  MemberInfo* _this = reinterpret_cast< MemberInfo* >(object);
  (void)_this;
}
void MemberInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberInfo& MemberInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberInfo_cluster_2eproto.base);
  return *internal_default_instance();
}


void MemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.MemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  advertise_host_to_client_as_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && instance_id_ != nullptr) {
    delete instance_id_;
  }
  instance_id_ = nullptr;
  if (GetArena() == nullptr && http_end_point_ != nullptr) {
    delete http_end_point_;
  }
  http_end_point_ = nullptr;
  if (GetArena() == nullptr && internal_tcp_ != nullptr) {
    delete internal_tcp_;
  }
  internal_tcp_ = nullptr;
  if (GetArena() == nullptr && external_tcp_ != nullptr) {
    delete external_tcp_;
  }
  external_tcp_ = nullptr;
  if (GetArena() == nullptr && epoch_id_ != nullptr) {
    delete epoch_id_;
  }
  epoch_id_ = nullptr;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advertise_tcp_port_to_client_as_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(advertise_tcp_port_to_client_as_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.MemberInfo.VNodeState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::event_store::cluster::MemberInfo_VNodeState>(val));
        } else goto handle_unusual;
        continue;
      // bool is_alive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint http_end_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_http_end_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint internal_tcp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_tcp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.cluster.EndPoint external_tcp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_tcp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool internal_tcp_uses_tls = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          internal_tcp_uses_tls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external_tcp_uses_tls = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          external_tcp_uses_tls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_commit_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          last_commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 writer_checkpoint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          writer_checkpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 chaser_checkpoint = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          chaser_checkpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 epoch_position = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          epoch_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 epoch_number = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          epoch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.UUID epoch_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_priority = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          node_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_read_only_replica = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          is_read_only_replica_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string advertise_host_to_client_as = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_advertise_host_to_client_as();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.cluster.MemberInfo.advertise_host_to_client_as"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 advertise_http_port_to_client_as = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          advertise_http_port_to_client_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 advertise_tcp_port_to_client_as = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          advertise_tcp_port_to_client_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.MemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID instance_id = 1;
  if (this->has_instance_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instance_id(this), target, stream);
  }

  // int64 time_stamp = 2;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_stamp(), target);
  }

  // .event_store.cluster.MemberInfo.VNodeState state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // bool is_alive = 4;
  if (this->is_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_alive(), target);
  }

  // .event_store.cluster.EndPoint http_end_point = 5;
  if (this->has_http_end_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::http_end_point(this), target, stream);
  }

  // .event_store.cluster.EndPoint internal_tcp = 6;
  if (this->has_internal_tcp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::internal_tcp(this), target, stream);
  }

  // .event_store.cluster.EndPoint external_tcp = 7;
  if (this->has_external_tcp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::external_tcp(this), target, stream);
  }

  // bool internal_tcp_uses_tls = 8;
  if (this->internal_tcp_uses_tls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_internal_tcp_uses_tls(), target);
  }

  // bool external_tcp_uses_tls = 9;
  if (this->external_tcp_uses_tls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_external_tcp_uses_tls(), target);
  }

  // int64 last_commit_position = 10;
  if (this->last_commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_last_commit_position(), target);
  }

  // int64 writer_checkpoint = 11;
  if (this->writer_checkpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_writer_checkpoint(), target);
  }

  // int64 chaser_checkpoint = 12;
  if (this->chaser_checkpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_chaser_checkpoint(), target);
  }

  // int64 epoch_position = 13;
  if (this->epoch_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_epoch_position(), target);
  }

  // int32 epoch_number = 14;
  if (this->epoch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_epoch_number(), target);
  }

  // .event_store.client.UUID epoch_id = 15;
  if (this->has_epoch_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::epoch_id(this), target, stream);
  }

  // int32 node_priority = 16;
  if (this->node_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_node_priority(), target);
  }

  // bool is_read_only_replica = 17;
  if (this->is_read_only_replica() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_read_only_replica(), target);
  }

  // string advertise_host_to_client_as = 18;
  if (this->advertise_host_to_client_as().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_advertise_host_to_client_as().data(), static_cast<int>(this->_internal_advertise_host_to_client_as().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.cluster.MemberInfo.advertise_host_to_client_as");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_advertise_host_to_client_as(), target);
  }

  // uint32 advertise_http_port_to_client_as = 19;
  if (this->advertise_http_port_to_client_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_advertise_http_port_to_client_as(), target);
  }

  // uint32 advertise_tcp_port_to_client_as = 20;
  if (this->advertise_tcp_port_to_client_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_advertise_tcp_port_to_client_as(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.MemberInfo)
  return target;
}

size_t MemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.MemberInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string advertise_host_to_client_as = 18;
  if (this->advertise_host_to_client_as().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_advertise_host_to_client_as());
  }

  // .event_store.client.UUID instance_id = 1;
  if (this->has_instance_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instance_id_);
  }

  // .event_store.cluster.EndPoint http_end_point = 5;
  if (this->has_http_end_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *http_end_point_);
  }

  // .event_store.cluster.EndPoint internal_tcp = 6;
  if (this->has_internal_tcp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *internal_tcp_);
  }

  // .event_store.cluster.EndPoint external_tcp = 7;
  if (this->has_external_tcp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_tcp_);
  }

  // .event_store.client.UUID epoch_id = 15;
  if (this->has_epoch_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_id_);
  }

  // int64 time_stamp = 2;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  // .event_store.cluster.MemberInfo.VNodeState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool is_alive = 4;
  if (this->is_alive() != 0) {
    total_size += 1 + 1;
  }

  // bool internal_tcp_uses_tls = 8;
  if (this->internal_tcp_uses_tls() != 0) {
    total_size += 1 + 1;
  }

  // bool external_tcp_uses_tls = 9;
  if (this->external_tcp_uses_tls() != 0) {
    total_size += 1 + 1;
  }

  // bool is_read_only_replica = 17;
  if (this->is_read_only_replica() != 0) {
    total_size += 2 + 1;
  }

  // int64 last_commit_position = 10;
  if (this->last_commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_commit_position());
  }

  // int64 writer_checkpoint = 11;
  if (this->writer_checkpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_writer_checkpoint());
  }

  // int64 chaser_checkpoint = 12;
  if (this->chaser_checkpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_chaser_checkpoint());
  }

  // int64 epoch_position = 13;
  if (this->epoch_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_epoch_position());
  }

  // int32 epoch_number = 14;
  if (this->epoch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epoch_number());
  }

  // int32 node_priority = 16;
  if (this->node_priority() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_priority());
  }

  // uint32 advertise_http_port_to_client_as = 19;
  if (this->advertise_http_port_to_client_as() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_advertise_http_port_to_client_as());
  }

  // uint32 advertise_tcp_port_to_client_as = 20;
  if (this->advertise_tcp_port_to_client_as() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_advertise_tcp_port_to_client_as());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.MemberInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.MemberInfo)
    MergeFrom(*source);
  }
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.advertise_host_to_client_as().size() > 0) {
    _internal_set_advertise_host_to_client_as(from._internal_advertise_host_to_client_as());
  }
  if (from.has_instance_id()) {
    _internal_mutable_instance_id()->::event_store::client::UUID::MergeFrom(from._internal_instance_id());
  }
  if (from.has_http_end_point()) {
    _internal_mutable_http_end_point()->::event_store::cluster::EndPoint::MergeFrom(from._internal_http_end_point());
  }
  if (from.has_internal_tcp()) {
    _internal_mutable_internal_tcp()->::event_store::cluster::EndPoint::MergeFrom(from._internal_internal_tcp());
  }
  if (from.has_external_tcp()) {
    _internal_mutable_external_tcp()->::event_store::cluster::EndPoint::MergeFrom(from._internal_external_tcp());
  }
  if (from.has_epoch_id()) {
    _internal_mutable_epoch_id()->::event_store::client::UUID::MergeFrom(from._internal_epoch_id());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.is_alive() != 0) {
    _internal_set_is_alive(from._internal_is_alive());
  }
  if (from.internal_tcp_uses_tls() != 0) {
    _internal_set_internal_tcp_uses_tls(from._internal_internal_tcp_uses_tls());
  }
  if (from.external_tcp_uses_tls() != 0) {
    _internal_set_external_tcp_uses_tls(from._internal_external_tcp_uses_tls());
  }
  if (from.is_read_only_replica() != 0) {
    _internal_set_is_read_only_replica(from._internal_is_read_only_replica());
  }
  if (from.last_commit_position() != 0) {
    _internal_set_last_commit_position(from._internal_last_commit_position());
  }
  if (from.writer_checkpoint() != 0) {
    _internal_set_writer_checkpoint(from._internal_writer_checkpoint());
  }
  if (from.chaser_checkpoint() != 0) {
    _internal_set_chaser_checkpoint(from._internal_chaser_checkpoint());
  }
  if (from.epoch_position() != 0) {
    _internal_set_epoch_position(from._internal_epoch_position());
  }
  if (from.epoch_number() != 0) {
    _internal_set_epoch_number(from._internal_epoch_number());
  }
  if (from.node_priority() != 0) {
    _internal_set_node_priority(from._internal_node_priority());
  }
  if (from.advertise_http_port_to_client_as() != 0) {
    _internal_set_advertise_http_port_to_client_as(from._internal_advertise_http_port_to_client_as());
  }
  if (from.advertise_tcp_port_to_client_as() != 0) {
    _internal_set_advertise_tcp_port_to_client_as(from._internal_advertise_tcp_port_to_client_as());
  }
}

void MemberInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  return true;
}

void MemberInfo::InternalSwap(MemberInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  advertise_host_to_client_as_.Swap(&other->advertise_host_to_client_as_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemberInfo, advertise_tcp_port_to_client_as_)
      + sizeof(MemberInfo::advertise_tcp_port_to_client_as_)
      - PROTOBUF_FIELD_OFFSET(MemberInfo, instance_id_)>(
          reinterpret_cast<char*>(&instance_id_),
          reinterpret_cast<char*>(&other->instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicaLogWrite::InitAsDefaultInstance() {
}
class ReplicaLogWrite::_Internal {
 public:
};

ReplicaLogWrite::ReplicaLogWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ReplicaLogWrite)
}
ReplicaLogWrite::ReplicaLogWrite(const ReplicaLogWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  replica_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_replica_id().empty()) {
    replica_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_replica_id(),
      GetArena());
  }
  log_position_ = from.log_position_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ReplicaLogWrite)
}

void ReplicaLogWrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicaLogWrite_cluster_2eproto.base);
  replica_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_position_ = PROTOBUF_LONGLONG(0);
}

ReplicaLogWrite::~ReplicaLogWrite() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ReplicaLogWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicaLogWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  replica_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplicaLogWrite::ArenaDtor(void* object) {
  ReplicaLogWrite* _this = reinterpret_cast< ReplicaLogWrite* >(object);
  (void)_this;
}
void ReplicaLogWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicaLogWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaLogWrite& ReplicaLogWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicaLogWrite_cluster_2eproto.base);
  return *internal_default_instance();
}


void ReplicaLogWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ReplicaLogWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replica_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_position_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaLogWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 log_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          log_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes replica_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_replica_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicaLogWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ReplicaLogWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 log_position = 1;
  if (this->log_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_log_position(), target);
  }

  // bytes replica_id = 2;
  if (this->replica_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_replica_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ReplicaLogWrite)
  return target;
}

size_t ReplicaLogWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ReplicaLogWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes replica_id = 2;
  if (this->replica_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_replica_id());
  }

  // int64 log_position = 1;
  if (this->log_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_log_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaLogWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ReplicaLogWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaLogWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicaLogWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ReplicaLogWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ReplicaLogWrite)
    MergeFrom(*source);
  }
}

void ReplicaLogWrite::MergeFrom(const ReplicaLogWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ReplicaLogWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.replica_id().size() > 0) {
    _internal_set_replica_id(from._internal_replica_id());
  }
  if (from.log_position() != 0) {
    _internal_set_log_position(from._internal_log_position());
  }
}

void ReplicaLogWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ReplicaLogWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaLogWrite::CopyFrom(const ReplicaLogWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ReplicaLogWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaLogWrite::IsInitialized() const {
  return true;
}

void ReplicaLogWrite::InternalSwap(ReplicaLogWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  replica_id_.Swap(&other->replica_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(log_position_, other->log_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaLogWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicatedTo::InitAsDefaultInstance() {
}
class ReplicatedTo::_Internal {
 public:
};

ReplicatedTo::ReplicatedTo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ReplicatedTo)
}
ReplicatedTo::ReplicatedTo(const ReplicatedTo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_position_ = from.log_position_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ReplicatedTo)
}

void ReplicatedTo::SharedCtor() {
  log_position_ = PROTOBUF_LONGLONG(0);
}

ReplicatedTo::~ReplicatedTo() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ReplicatedTo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicatedTo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReplicatedTo::ArenaDtor(void* object) {
  ReplicatedTo* _this = reinterpret_cast< ReplicatedTo* >(object);
  (void)_this;
}
void ReplicatedTo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicatedTo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicatedTo& ReplicatedTo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicatedTo_cluster_2eproto.base);
  return *internal_default_instance();
}


void ReplicatedTo::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ReplicatedTo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_position_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicatedTo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 log_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          log_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicatedTo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ReplicatedTo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 log_position = 1;
  if (this->log_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_log_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ReplicatedTo)
  return target;
}

size_t ReplicatedTo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ReplicatedTo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 log_position = 1;
  if (this->log_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_log_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicatedTo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ReplicatedTo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicatedTo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicatedTo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ReplicatedTo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ReplicatedTo)
    MergeFrom(*source);
  }
}

void ReplicatedTo::MergeFrom(const ReplicatedTo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ReplicatedTo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_position() != 0) {
    _internal_set_log_position(from._internal_log_position());
  }
}

void ReplicatedTo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ReplicatedTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicatedTo::CopyFrom(const ReplicatedTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ReplicatedTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicatedTo::IsInitialized() const {
  return true;
}

void ReplicatedTo::InternalSwap(ReplicatedTo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(log_position_, other->log_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicatedTo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Epoch::InitAsDefaultInstance() {
}
class Epoch::_Internal {
 public:
};

Epoch::Epoch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.Epoch)
}
Epoch::Epoch(const Epoch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  epoch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_epoch_id().empty()) {
    epoch_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_epoch_id(),
      GetArena());
  }
  ::memcpy(&epoch_position_, &from.epoch_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_number_) -
    reinterpret_cast<char*>(&epoch_position_)) + sizeof(epoch_number_));
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.Epoch)
}

void Epoch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Epoch_cluster_2eproto.base);
  epoch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_number_) -
      reinterpret_cast<char*>(&epoch_position_)) + sizeof(epoch_number_));
}

Epoch::~Epoch() {
  // @@protoc_insertion_point(destructor:event_store.cluster.Epoch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Epoch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  epoch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Epoch::ArenaDtor(void* object) {
  Epoch* _this = reinterpret_cast< Epoch* >(object);
  (void)_this;
}
void Epoch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Epoch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Epoch& Epoch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Epoch_cluster_2eproto.base);
  return *internal_default_instance();
}


void Epoch::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.Epoch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epoch_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&epoch_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_number_) -
      reinterpret_cast<char*>(&epoch_position_)) + sizeof(epoch_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Epoch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 epoch_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epoch_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 epoch_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          epoch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_epoch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Epoch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.Epoch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch_position = 1;
  if (this->epoch_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch_position(), target);
  }

  // int32 epoch_number = 2;
  if (this->epoch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_epoch_number(), target);
  }

  // bytes epoch_id = 3;
  if (this->epoch_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.Epoch)
  return target;
}

size_t Epoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.Epoch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes epoch_id = 3;
  if (this->epoch_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_epoch_id());
  }

  // int64 epoch_position = 1;
  if (this->epoch_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_epoch_position());
  }

  // int32 epoch_number = 2;
  if (this->epoch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_epoch_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Epoch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.Epoch)
  GOOGLE_DCHECK_NE(&from, this);
  const Epoch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Epoch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.Epoch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.Epoch)
    MergeFrom(*source);
  }
}

void Epoch::MergeFrom(const Epoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.Epoch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.epoch_id().size() > 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from.epoch_position() != 0) {
    _internal_set_epoch_position(from._internal_epoch_position());
  }
  if (from.epoch_number() != 0) {
    _internal_set_epoch_number(from._internal_epoch_number());
  }
}

void Epoch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.Epoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Epoch::CopyFrom(const Epoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.Epoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epoch::IsInitialized() const {
  return true;
}

void Epoch::InternalSwap(Epoch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  epoch_id_.Swap(&other->epoch_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Epoch, epoch_number_)
      + sizeof(Epoch::epoch_number_)
      - PROTOBUF_FIELD_OFFSET(Epoch, epoch_position_)>(
          reinterpret_cast<char*>(&epoch_position_),
          reinterpret_cast<char*>(&other->epoch_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Epoch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeReplica::InitAsDefaultInstance() {
}
class SubscribeReplica::_Internal {
 public:
};

SubscribeReplica::SubscribeReplica(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lastepochs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.SubscribeReplica)
}
SubscribeReplica::SubscribeReplica(const SubscribeReplica& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lastepochs_(from.lastepochs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunk_id().empty()) {
    chunk_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chunk_id(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  ::memcpy(&log_position_, &from.log_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_promotable_) -
    reinterpret_cast<char*>(&log_position_)) + sizeof(is_promotable_));
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.SubscribeReplica)
}

void SubscribeReplica::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeReplica_cluster_2eproto.base);
  chunk_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_promotable_) -
      reinterpret_cast<char*>(&log_position_)) + sizeof(is_promotable_));
}

SubscribeReplica::~SubscribeReplica() {
  // @@protoc_insertion_point(destructor:event_store.cluster.SubscribeReplica)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeReplica::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chunk_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeReplica::ArenaDtor(void* object) {
  SubscribeReplica* _this = reinterpret_cast< SubscribeReplica* >(object);
  (void)_this;
}
void SubscribeReplica::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeReplica::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeReplica& SubscribeReplica::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeReplica_cluster_2eproto.base);
  return *internal_default_instance();
}


void SubscribeReplica::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.SubscribeReplica)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lastepochs_.Clear();
  chunk_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&log_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_promotable_) -
      reinterpret_cast<char*>(&log_position_)) + sizeof(is_promotable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeReplica::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 log_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          log_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chunk_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chunk_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event_store.cluster.Epoch LastEpochs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lastepochs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes leader_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_promotable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_promotable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeReplica::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.SubscribeReplica)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 log_position = 1;
  if (this->log_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_log_position(), target);
  }

  // bytes chunk_id = 2;
  if (this->chunk_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunk_id(), target);
  }

  // repeated .event_store.cluster.Epoch LastEpochs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lastepochs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lastepochs(i), target, stream);
  }

  // bytes ip = 4;
  if (this->ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_port(), target);
  }

  // bytes leader_id = 6;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 7;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_subscription_id(), target);
  }

  // bool is_promotable = 8;
  if (this->is_promotable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_promotable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.SubscribeReplica)
  return target;
}

size_t SubscribeReplica::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.SubscribeReplica)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.cluster.Epoch LastEpochs = 3;
  total_size += 1UL * this->_internal_lastepochs_size();
  for (const auto& msg : this->lastepochs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes chunk_id = 2;
  if (this->chunk_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk_id());
  }

  // bytes ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // bytes leader_id = 6;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 7;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  // int64 log_position = 1;
  if (this->log_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_log_position());
  }

  // int32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // bool is_promotable = 8;
  if (this->is_promotable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeReplica::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.SubscribeReplica)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeReplica* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeReplica>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.SubscribeReplica)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.SubscribeReplica)
    MergeFrom(*source);
  }
}

void SubscribeReplica::MergeFrom(const SubscribeReplica& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.SubscribeReplica)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lastepochs_.MergeFrom(from.lastepochs_);
  if (from.chunk_id().size() > 0) {
    _internal_set_chunk_id(from._internal_chunk_id());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from.log_position() != 0) {
    _internal_set_log_position(from._internal_log_position());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.is_promotable() != 0) {
    _internal_set_is_promotable(from._internal_is_promotable());
  }
}

void SubscribeReplica::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.SubscribeReplica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeReplica::CopyFrom(const SubscribeReplica& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.SubscribeReplica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeReplica::IsInitialized() const {
  return true;
}

void SubscribeReplica::InternalSwap(SubscribeReplica* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lastepochs_.InternalSwap(&other->lastepochs_);
  chunk_id_.Swap(&other->chunk_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeReplica, is_promotable_)
      + sizeof(SubscribeReplica::is_promotable_)
      - PROTOBUF_FIELD_OFFSET(SubscribeReplica, log_position_)>(
          reinterpret_cast<char*>(&log_position_),
          reinterpret_cast<char*>(&other->log_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeReplica::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicaSubscriptionRetry::InitAsDefaultInstance() {
}
class ReplicaSubscriptionRetry::_Internal {
 public:
};

ReplicaSubscriptionRetry::ReplicaSubscriptionRetry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ReplicaSubscriptionRetry)
}
ReplicaSubscriptionRetry::ReplicaSubscriptionRetry(const ReplicaSubscriptionRetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ReplicaSubscriptionRetry)
}

void ReplicaSubscriptionRetry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicaSubscriptionRetry_cluster_2eproto.base);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReplicaSubscriptionRetry::~ReplicaSubscriptionRetry() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ReplicaSubscriptionRetry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicaSubscriptionRetry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplicaSubscriptionRetry::ArenaDtor(void* object) {
  ReplicaSubscriptionRetry* _this = reinterpret_cast< ReplicaSubscriptionRetry* >(object);
  (void)_this;
}
void ReplicaSubscriptionRetry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicaSubscriptionRetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaSubscriptionRetry& ReplicaSubscriptionRetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicaSubscriptionRetry_cluster_2eproto.base);
  return *internal_default_instance();
}


void ReplicaSubscriptionRetry::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ReplicaSubscriptionRetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaSubscriptionRetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicaSubscriptionRetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ReplicaSubscriptionRetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ReplicaSubscriptionRetry)
  return target;
}

size_t ReplicaSubscriptionRetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ReplicaSubscriptionRetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaSubscriptionRetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ReplicaSubscriptionRetry)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaSubscriptionRetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicaSubscriptionRetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ReplicaSubscriptionRetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ReplicaSubscriptionRetry)
    MergeFrom(*source);
  }
}

void ReplicaSubscriptionRetry::MergeFrom(const ReplicaSubscriptionRetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ReplicaSubscriptionRetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
}

void ReplicaSubscriptionRetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ReplicaSubscriptionRetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaSubscriptionRetry::CopyFrom(const ReplicaSubscriptionRetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ReplicaSubscriptionRetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaSubscriptionRetry::IsInitialized() const {
  return true;
}

void ReplicaSubscriptionRetry::InternalSwap(ReplicaSubscriptionRetry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaSubscriptionRetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicaSubscribed::InitAsDefaultInstance() {
}
class ReplicaSubscribed::_Internal {
 public:
};

ReplicaSubscribed::ReplicaSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ReplicaSubscribed)
}
ReplicaSubscribed::ReplicaSubscribed(const ReplicaSubscribed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  subscription_position_ = from.subscription_position_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ReplicaSubscribed)
}

void ReplicaSubscribed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicaSubscribed_cluster_2eproto.base);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_position_ = PROTOBUF_LONGLONG(0);
}

ReplicaSubscribed::~ReplicaSubscribed() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ReplicaSubscribed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicaSubscribed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplicaSubscribed::ArenaDtor(void* object) {
  ReplicaSubscribed* _this = reinterpret_cast< ReplicaSubscribed* >(object);
  (void)_this;
}
void ReplicaSubscribed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicaSubscribed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaSubscribed& ReplicaSubscribed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicaSubscribed_cluster_2eproto.base);
  return *internal_default_instance();
}


void ReplicaSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ReplicaSubscribed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_position_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaSubscribed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 subscription_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subscription_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicaSubscribed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ReplicaSubscribed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_subscription_id(), target);
  }

  // int64 subscription_position = 3;
  if (this->subscription_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_subscription_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ReplicaSubscribed)
  return target;
}

size_t ReplicaSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ReplicaSubscribed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  // int64 subscription_position = 3;
  if (this->subscription_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_subscription_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaSubscribed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ReplicaSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaSubscribed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicaSubscribed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ReplicaSubscribed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ReplicaSubscribed)
    MergeFrom(*source);
  }
}

void ReplicaSubscribed::MergeFrom(const ReplicaSubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ReplicaSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from.subscription_position() != 0) {
    _internal_set_subscription_position(from._internal_subscription_position());
  }
}

void ReplicaSubscribed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ReplicaSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaSubscribed::CopyFrom(const ReplicaSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ReplicaSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaSubscribed::IsInitialized() const {
  return true;
}

void ReplicaSubscribed::InternalSwap(ReplicaSubscribed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(subscription_position_, other->subscription_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaSubscribed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicaLogPositionAck::InitAsDefaultInstance() {
}
class ReplicaLogPositionAck::_Internal {
 public:
};

ReplicaLogPositionAck::ReplicaLogPositionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.ReplicaLogPositionAck)
}
ReplicaLogPositionAck::ReplicaLogPositionAck(const ReplicaLogPositionAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  replication_log_position_ = from.replication_log_position_;
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.ReplicaLogPositionAck)
}

void ReplicaLogPositionAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicaLogPositionAck_cluster_2eproto.base);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  replication_log_position_ = PROTOBUF_LONGLONG(0);
}

ReplicaLogPositionAck::~ReplicaLogPositionAck() {
  // @@protoc_insertion_point(destructor:event_store.cluster.ReplicaLogPositionAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicaLogPositionAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplicaLogPositionAck::ArenaDtor(void* object) {
  ReplicaLogPositionAck* _this = reinterpret_cast< ReplicaLogPositionAck* >(object);
  (void)_this;
}
void ReplicaLogPositionAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicaLogPositionAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicaLogPositionAck& ReplicaLogPositionAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicaLogPositionAck_cluster_2eproto.base);
  return *internal_default_instance();
}


void ReplicaLogPositionAck::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.ReplicaLogPositionAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  replication_log_position_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaLogPositionAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes subscription_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 replication_log_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          replication_log_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicaLogPositionAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.ReplicaLogPositionAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes subscription_id = 1;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_subscription_id(), target);
  }

  // int64 replication_log_position = 2;
  if (this->replication_log_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_replication_log_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.ReplicaLogPositionAck)
  return target;
}

size_t ReplicaLogPositionAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.ReplicaLogPositionAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes subscription_id = 1;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  // int64 replication_log_position = 2;
  if (this->replication_log_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_replication_log_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaLogPositionAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.ReplicaLogPositionAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaLogPositionAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicaLogPositionAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.ReplicaLogPositionAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.ReplicaLogPositionAck)
    MergeFrom(*source);
  }
}

void ReplicaLogPositionAck::MergeFrom(const ReplicaLogPositionAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.ReplicaLogPositionAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from.replication_log_position() != 0) {
    _internal_set_replication_log_position(from._internal_replication_log_position());
  }
}

void ReplicaLogPositionAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.ReplicaLogPositionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaLogPositionAck::CopyFrom(const ReplicaLogPositionAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.ReplicaLogPositionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaLogPositionAck::IsInitialized() const {
  return true;
}

void ReplicaLogPositionAck::InternalSwap(ReplicaLogPositionAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(replication_log_position_, other->replication_log_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaLogPositionAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateChunk::InitAsDefaultInstance() {
}
class CreateChunk::_Internal {
 public:
};

CreateChunk::CreateChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.CreateChunk)
}
CreateChunk::CreateChunk(const CreateChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  chunk_header_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunk_header_bytes().empty()) {
    chunk_header_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chunk_header_bytes(),
      GetArena());
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_completed_chunk_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(is_completed_chunk_));
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.CreateChunk)
}

void CreateChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateChunk_cluster_2eproto.base);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunk_header_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_completed_chunk_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(is_completed_chunk_));
}

CreateChunk::~CreateChunk() {
  // @@protoc_insertion_point(destructor:event_store.cluster.CreateChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunk_header_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateChunk::ArenaDtor(void* object) {
  CreateChunk* _this = reinterpret_cast< CreateChunk* >(object);
  (void)_this;
}
void CreateChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateChunk& CreateChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateChunk_cluster_2eproto.base);
  return *internal_default_instance();
}


void CreateChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.CreateChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chunk_header_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_completed_chunk_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(is_completed_chunk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chunk_header_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chunk_header_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_completed_chunk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_completed_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.CreateChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_subscription_id(), target);
  }

  // bytes chunk_header_bytes = 3;
  if (this->chunk_header_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_chunk_header_bytes(), target);
  }

  // int32 file_size = 4;
  if (this->file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_file_size(), target);
  }

  // bool is_completed_chunk = 5;
  if (this->is_completed_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_completed_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.CreateChunk)
  return target;
}

size_t CreateChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.CreateChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  // bytes chunk_header_bytes = 3;
  if (this->chunk_header_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk_header_bytes());
  }

  // int32 file_size = 4;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_file_size());
  }

  // bool is_completed_chunk = 5;
  if (this->is_completed_chunk() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.CreateChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.CreateChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.CreateChunk)
    MergeFrom(*source);
  }
}

void CreateChunk::MergeFrom(const CreateChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.CreateChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from.chunk_header_bytes().size() > 0) {
    _internal_set_chunk_header_bytes(from._internal_chunk_header_bytes());
  }
  if (from.file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
  if (from.is_completed_chunk() != 0) {
    _internal_set_is_completed_chunk(from._internal_is_completed_chunk());
  }
}

void CreateChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.CreateChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChunk::CopyFrom(const CreateChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.CreateChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChunk::IsInitialized() const {
  return true;
}

void CreateChunk::InternalSwap(CreateChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chunk_header_bytes_.Swap(&other->chunk_header_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateChunk, is_completed_chunk_)
      + sizeof(CreateChunk::is_completed_chunk_)
      - PROTOBUF_FIELD_OFFSET(CreateChunk, file_size_)>(
          reinterpret_cast<char*>(&file_size_),
          reinterpret_cast<char*>(&other->file_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawChunkBulk::InitAsDefaultInstance() {
}
class RawChunkBulk::_Internal {
 public:
};

RawChunkBulk::RawChunkBulk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.RawChunkBulk)
}
RawChunkBulk::RawChunkBulk(const RawChunkBulk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  raw_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_bytes().empty()) {
    raw_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_raw_bytes(),
      GetArena());
  }
  ::memcpy(&chunk_start_number_, &from.chunk_start_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&complete_chunk_) -
    reinterpret_cast<char*>(&chunk_start_number_)) + sizeof(complete_chunk_));
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.RawChunkBulk)
}

void RawChunkBulk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawChunkBulk_cluster_2eproto.base);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunk_start_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&complete_chunk_) -
      reinterpret_cast<char*>(&chunk_start_number_)) + sizeof(complete_chunk_));
}

RawChunkBulk::~RawChunkBulk() {
  // @@protoc_insertion_point(destructor:event_store.cluster.RawChunkBulk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawChunkBulk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RawChunkBulk::ArenaDtor(void* object) {
  RawChunkBulk* _this = reinterpret_cast< RawChunkBulk* >(object);
  (void)_this;
}
void RawChunkBulk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawChunkBulk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawChunkBulk& RawChunkBulk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawChunkBulk_cluster_2eproto.base);
  return *internal_default_instance();
}


void RawChunkBulk::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.RawChunkBulk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  raw_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&chunk_start_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&complete_chunk_) -
      reinterpret_cast<char*>(&chunk_start_number_)) + sizeof(complete_chunk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawChunkBulk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chunk_start_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chunk_start_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chunk_end_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chunk_end_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 raw_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          raw_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes raw_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_raw_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool complete_chunk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          complete_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawChunkBulk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.RawChunkBulk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_subscription_id(), target);
  }

  // int32 chunk_start_number = 3;
  if (this->chunk_start_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chunk_start_number(), target);
  }

  // int32 chunk_end_number = 4;
  if (this->chunk_end_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chunk_end_number(), target);
  }

  // int32 raw_position = 5;
  if (this->raw_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_raw_position(), target);
  }

  // bytes raw_bytes = 6;
  if (this->raw_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_raw_bytes(), target);
  }

  // bool complete_chunk = 7;
  if (this->complete_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_complete_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.RawChunkBulk)
  return target;
}

size_t RawChunkBulk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.RawChunkBulk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  // bytes raw_bytes = 6;
  if (this->raw_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_bytes());
  }

  // int32 chunk_start_number = 3;
  if (this->chunk_start_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chunk_start_number());
  }

  // int32 chunk_end_number = 4;
  if (this->chunk_end_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chunk_end_number());
  }

  // int32 raw_position = 5;
  if (this->raw_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raw_position());
  }

  // bool complete_chunk = 7;
  if (this->complete_chunk() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawChunkBulk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.RawChunkBulk)
  GOOGLE_DCHECK_NE(&from, this);
  const RawChunkBulk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawChunkBulk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.RawChunkBulk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.RawChunkBulk)
    MergeFrom(*source);
  }
}

void RawChunkBulk::MergeFrom(const RawChunkBulk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.RawChunkBulk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from.raw_bytes().size() > 0) {
    _internal_set_raw_bytes(from._internal_raw_bytes());
  }
  if (from.chunk_start_number() != 0) {
    _internal_set_chunk_start_number(from._internal_chunk_start_number());
  }
  if (from.chunk_end_number() != 0) {
    _internal_set_chunk_end_number(from._internal_chunk_end_number());
  }
  if (from.raw_position() != 0) {
    _internal_set_raw_position(from._internal_raw_position());
  }
  if (from.complete_chunk() != 0) {
    _internal_set_complete_chunk(from._internal_complete_chunk());
  }
}

void RawChunkBulk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.RawChunkBulk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawChunkBulk::CopyFrom(const RawChunkBulk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.RawChunkBulk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawChunkBulk::IsInitialized() const {
  return true;
}

void RawChunkBulk::InternalSwap(RawChunkBulk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  raw_bytes_.Swap(&other->raw_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawChunkBulk, complete_chunk_)
      + sizeof(RawChunkBulk::complete_chunk_)
      - PROTOBUF_FIELD_OFFSET(RawChunkBulk, chunk_start_number_)>(
          reinterpret_cast<char*>(&chunk_start_number_),
          reinterpret_cast<char*>(&other->chunk_start_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawChunkBulk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataChunkBulk::InitAsDefaultInstance() {
}
class DataChunkBulk::_Internal {
 public:
};

DataChunkBulk::DataChunkBulk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.DataChunkBulk)
}
DataChunkBulk::DataChunkBulk(const DataChunkBulk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  data_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_bytes().empty()) {
    data_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data_bytes(),
      GetArena());
  }
  ::memcpy(&chunk_start_number_, &from.chunk_start_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&complete_chunk_) -
    reinterpret_cast<char*>(&chunk_start_number_)) + sizeof(complete_chunk_));
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.DataChunkBulk)
}

void DataChunkBulk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataChunkBulk_cluster_2eproto.base);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunk_start_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&complete_chunk_) -
      reinterpret_cast<char*>(&chunk_start_number_)) + sizeof(complete_chunk_));
}

DataChunkBulk::~DataChunkBulk() {
  // @@protoc_insertion_point(destructor:event_store.cluster.DataChunkBulk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataChunkBulk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataChunkBulk::ArenaDtor(void* object) {
  DataChunkBulk* _this = reinterpret_cast< DataChunkBulk* >(object);
  (void)_this;
}
void DataChunkBulk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataChunkBulk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataChunkBulk& DataChunkBulk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataChunkBulk_cluster_2eproto.base);
  return *internal_default_instance();
}


void DataChunkBulk::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.DataChunkBulk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&chunk_start_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&complete_chunk_) -
      reinterpret_cast<char*>(&chunk_start_number_)) + sizeof(complete_chunk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChunkBulk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chunk_start_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chunk_start_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chunk_end_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chunk_end_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 subscription_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subscription_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool complete_chunk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          complete_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataChunkBulk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.DataChunkBulk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_subscription_id(), target);
  }

  // int32 chunk_start_number = 3;
  if (this->chunk_start_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chunk_start_number(), target);
  }

  // int32 chunk_end_number = 4;
  if (this->chunk_end_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chunk_end_number(), target);
  }

  // int64 subscription_position = 5;
  if (this->subscription_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_subscription_position(), target);
  }

  // bytes data_bytes = 6;
  if (this->data_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data_bytes(), target);
  }

  // bool complete_chunk = 7;
  if (this->complete_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_complete_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.DataChunkBulk)
  return target;
}

size_t DataChunkBulk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.DataChunkBulk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  // bytes data_bytes = 6;
  if (this->data_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_bytes());
  }

  // int32 chunk_start_number = 3;
  if (this->chunk_start_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chunk_start_number());
  }

  // int32 chunk_end_number = 4;
  if (this->chunk_end_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chunk_end_number());
  }

  // int64 subscription_position = 5;
  if (this->subscription_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_subscription_position());
  }

  // bool complete_chunk = 7;
  if (this->complete_chunk() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataChunkBulk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.DataChunkBulk)
  GOOGLE_DCHECK_NE(&from, this);
  const DataChunkBulk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataChunkBulk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.DataChunkBulk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.DataChunkBulk)
    MergeFrom(*source);
  }
}

void DataChunkBulk::MergeFrom(const DataChunkBulk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.DataChunkBulk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from.data_bytes().size() > 0) {
    _internal_set_data_bytes(from._internal_data_bytes());
  }
  if (from.chunk_start_number() != 0) {
    _internal_set_chunk_start_number(from._internal_chunk_start_number());
  }
  if (from.chunk_end_number() != 0) {
    _internal_set_chunk_end_number(from._internal_chunk_end_number());
  }
  if (from.subscription_position() != 0) {
    _internal_set_subscription_position(from._internal_subscription_position());
  }
  if (from.complete_chunk() != 0) {
    _internal_set_complete_chunk(from._internal_complete_chunk());
  }
}

void DataChunkBulk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.DataChunkBulk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataChunkBulk::CopyFrom(const DataChunkBulk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.DataChunkBulk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChunkBulk::IsInitialized() const {
  return true;
}

void DataChunkBulk::InternalSwap(DataChunkBulk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_bytes_.Swap(&other->data_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChunkBulk, complete_chunk_)
      + sizeof(DataChunkBulk::complete_chunk_)
      - PROTOBUF_FIELD_OFFSET(DataChunkBulk, chunk_start_number_)>(
          reinterpret_cast<char*>(&chunk_start_number_),
          reinterpret_cast<char*>(&other->chunk_start_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChunkBulk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FollowerAssignment::InitAsDefaultInstance() {
}
class FollowerAssignment::_Internal {
 public:
};

FollowerAssignment::FollowerAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.FollowerAssignment)
}
FollowerAssignment::FollowerAssignment(const FollowerAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.FollowerAssignment)
}

void FollowerAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FollowerAssignment_cluster_2eproto.base);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FollowerAssignment::~FollowerAssignment() {
  // @@protoc_insertion_point(destructor:event_store.cluster.FollowerAssignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FollowerAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FollowerAssignment::ArenaDtor(void* object) {
  FollowerAssignment* _this = reinterpret_cast< FollowerAssignment* >(object);
  (void)_this;
}
void FollowerAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FollowerAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FollowerAssignment& FollowerAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FollowerAssignment_cluster_2eproto.base);
  return *internal_default_instance();
}


void FollowerAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.FollowerAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowerAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FollowerAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.FollowerAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.FollowerAssignment)
  return target;
}

size_t FollowerAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.FollowerAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FollowerAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.FollowerAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const FollowerAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FollowerAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.FollowerAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.FollowerAssignment)
    MergeFrom(*source);
  }
}

void FollowerAssignment::MergeFrom(const FollowerAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.FollowerAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
}

void FollowerAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.FollowerAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowerAssignment::CopyFrom(const FollowerAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.FollowerAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowerAssignment::IsInitialized() const {
  return true;
}

void FollowerAssignment::InternalSwap(FollowerAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowerAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloneAssignment::InitAsDefaultInstance() {
}
class CloneAssignment::_Internal {
 public:
};

CloneAssignment::CloneAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.CloneAssignment)
}
CloneAssignment::CloneAssignment(const CloneAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.CloneAssignment)
}

void CloneAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloneAssignment_cluster_2eproto.base);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CloneAssignment::~CloneAssignment() {
  // @@protoc_insertion_point(destructor:event_store.cluster.CloneAssignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloneAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloneAssignment::ArenaDtor(void* object) {
  CloneAssignment* _this = reinterpret_cast< CloneAssignment* >(object);
  (void)_this;
}
void CloneAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloneAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloneAssignment& CloneAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloneAssignment_cluster_2eproto.base);
  return *internal_default_instance();
}


void CloneAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.CloneAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloneAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloneAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.CloneAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.CloneAssignment)
  return target;
}

size_t CloneAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.CloneAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloneAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.CloneAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const CloneAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloneAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.CloneAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.CloneAssignment)
    MergeFrom(*source);
  }
}

void CloneAssignment::MergeFrom(const CloneAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.CloneAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
}

void CloneAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.CloneAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloneAssignment::CopyFrom(const CloneAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.CloneAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloneAssignment::IsInitialized() const {
  return true;
}

void CloneAssignment::InternalSwap(CloneAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CloneAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropSubscription::InitAsDefaultInstance() {
}
class DropSubscription::_Internal {
 public:
};

DropSubscription::DropSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.cluster.DropSubscription)
}
DropSubscription::DropSubscription(const DropSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_id().empty()) {
    leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
      GetArena());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.cluster.DropSubscription)
}

void DropSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DropSubscription_cluster_2eproto.base);
  leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DropSubscription::~DropSubscription() {
  // @@protoc_insertion_point(destructor:event_store.cluster.DropSubscription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DropSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DropSubscription::ArenaDtor(void* object) {
  DropSubscription* _this = reinterpret_cast< DropSubscription* >(object);
  (void)_this;
}
void DropSubscription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DropSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropSubscription& DropSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropSubscription_cluster_2eproto.base);
  return *internal_default_instance();
}


void DropSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.cluster.DropSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes subscription_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropSubscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.cluster.DropSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_leader_id(), target);
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.cluster.DropSubscription)
  return target;
}

size_t DropSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.cluster.DropSubscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_id = 1;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_id());
  }

  // bytes subscription_id = 2;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subscription_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.cluster.DropSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const DropSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.cluster.DropSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.cluster.DropSubscription)
    MergeFrom(*source);
  }
}

void DropSubscription::MergeFrom(const DropSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.cluster.DropSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_id().size() > 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
}

void DropSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.cluster.DropSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropSubscription::CopyFrom(const DropSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.cluster.DropSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropSubscription::IsInitialized() const {
  return true;
}

void DropSubscription::InternalSwap(DropSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DropSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cluster
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::event_store::cluster::GossipRequest* Arena::CreateMaybeMessage< ::event_store::cluster::GossipRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::GossipRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ViewChangeRequest* Arena::CreateMaybeMessage< ::event_store::cluster::ViewChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ViewChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ViewChangeProofRequest* Arena::CreateMaybeMessage< ::event_store::cluster::ViewChangeProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ViewChangeProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::PrepareRequest* Arena::CreateMaybeMessage< ::event_store::cluster::PrepareRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::PrepareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::PrepareOkRequest* Arena::CreateMaybeMessage< ::event_store::cluster::PrepareOkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::PrepareOkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ProposalRequest* Arena::CreateMaybeMessage< ::event_store::cluster::ProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::AcceptRequest* Arena::CreateMaybeMessage< ::event_store::cluster::AcceptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::AcceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::LeaderIsResigningRequest* Arena::CreateMaybeMessage< ::event_store::cluster::LeaderIsResigningRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::LeaderIsResigningRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::LeaderIsResigningOkRequest* Arena::CreateMaybeMessage< ::event_store::cluster::LeaderIsResigningOkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::LeaderIsResigningOkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ClusterInfo* Arena::CreateMaybeMessage< ::event_store::cluster::ClusterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ClusterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::EndPoint* Arena::CreateMaybeMessage< ::event_store::cluster::EndPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::EndPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::MemberInfo* Arena::CreateMaybeMessage< ::event_store::cluster::MemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::MemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ReplicaLogWrite* Arena::CreateMaybeMessage< ::event_store::cluster::ReplicaLogWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ReplicaLogWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ReplicatedTo* Arena::CreateMaybeMessage< ::event_store::cluster::ReplicatedTo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ReplicatedTo >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::Epoch* Arena::CreateMaybeMessage< ::event_store::cluster::Epoch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::Epoch >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::SubscribeReplica* Arena::CreateMaybeMessage< ::event_store::cluster::SubscribeReplica >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::SubscribeReplica >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ReplicaSubscriptionRetry* Arena::CreateMaybeMessage< ::event_store::cluster::ReplicaSubscriptionRetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ReplicaSubscriptionRetry >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ReplicaSubscribed* Arena::CreateMaybeMessage< ::event_store::cluster::ReplicaSubscribed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ReplicaSubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::ReplicaLogPositionAck* Arena::CreateMaybeMessage< ::event_store::cluster::ReplicaLogPositionAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::ReplicaLogPositionAck >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::CreateChunk* Arena::CreateMaybeMessage< ::event_store::cluster::CreateChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::CreateChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::RawChunkBulk* Arena::CreateMaybeMessage< ::event_store::cluster::RawChunkBulk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::RawChunkBulk >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::DataChunkBulk* Arena::CreateMaybeMessage< ::event_store::cluster::DataChunkBulk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::DataChunkBulk >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::FollowerAssignment* Arena::CreateMaybeMessage< ::event_store::cluster::FollowerAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::FollowerAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::CloneAssignment* Arena::CreateMaybeMessage< ::event_store::cluster::CloneAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::CloneAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::cluster::DropSubscription* Arena::CreateMaybeMessage< ::event_store::cluster::DropSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::cluster::DropSubscription >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

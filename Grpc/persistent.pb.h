// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: persistent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_persistent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_persistent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "shared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_persistent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_persistent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[42]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_persistent_2eproto;
namespace event_store {
namespace client {
namespace persistent_subscriptions {
class CreateReq;
class CreateReqDefaultTypeInternal;
extern CreateReqDefaultTypeInternal _CreateReq_default_instance_;
class CreateReq_AllOptions;
class CreateReq_AllOptionsDefaultTypeInternal;
extern CreateReq_AllOptionsDefaultTypeInternal _CreateReq_AllOptions_default_instance_;
class CreateReq_AllOptions_FilterOptions;
class CreateReq_AllOptions_FilterOptionsDefaultTypeInternal;
extern CreateReq_AllOptions_FilterOptionsDefaultTypeInternal _CreateReq_AllOptions_FilterOptions_default_instance_;
class CreateReq_AllOptions_FilterOptions_Expression;
class CreateReq_AllOptions_FilterOptions_ExpressionDefaultTypeInternal;
extern CreateReq_AllOptions_FilterOptions_ExpressionDefaultTypeInternal _CreateReq_AllOptions_FilterOptions_Expression_default_instance_;
class CreateReq_Options;
class CreateReq_OptionsDefaultTypeInternal;
extern CreateReq_OptionsDefaultTypeInternal _CreateReq_Options_default_instance_;
class CreateReq_Position;
class CreateReq_PositionDefaultTypeInternal;
extern CreateReq_PositionDefaultTypeInternal _CreateReq_Position_default_instance_;
class CreateReq_Settings;
class CreateReq_SettingsDefaultTypeInternal;
extern CreateReq_SettingsDefaultTypeInternal _CreateReq_Settings_default_instance_;
class CreateReq_StreamOptions;
class CreateReq_StreamOptionsDefaultTypeInternal;
extern CreateReq_StreamOptionsDefaultTypeInternal _CreateReq_StreamOptions_default_instance_;
class CreateResp;
class CreateRespDefaultTypeInternal;
extern CreateRespDefaultTypeInternal _CreateResp_default_instance_;
class DeleteReq;
class DeleteReqDefaultTypeInternal;
extern DeleteReqDefaultTypeInternal _DeleteReq_default_instance_;
class DeleteReq_Options;
class DeleteReq_OptionsDefaultTypeInternal;
extern DeleteReq_OptionsDefaultTypeInternal _DeleteReq_Options_default_instance_;
class DeleteResp;
class DeleteRespDefaultTypeInternal;
extern DeleteRespDefaultTypeInternal _DeleteResp_default_instance_;
class GetInfoReq;
class GetInfoReqDefaultTypeInternal;
extern GetInfoReqDefaultTypeInternal _GetInfoReq_default_instance_;
class GetInfoReq_Options;
class GetInfoReq_OptionsDefaultTypeInternal;
extern GetInfoReq_OptionsDefaultTypeInternal _GetInfoReq_Options_default_instance_;
class GetInfoResp;
class GetInfoRespDefaultTypeInternal;
extern GetInfoRespDefaultTypeInternal _GetInfoResp_default_instance_;
class ListReq;
class ListReqDefaultTypeInternal;
extern ListReqDefaultTypeInternal _ListReq_default_instance_;
class ListReq_Options;
class ListReq_OptionsDefaultTypeInternal;
extern ListReq_OptionsDefaultTypeInternal _ListReq_Options_default_instance_;
class ListReq_StreamOption;
class ListReq_StreamOptionDefaultTypeInternal;
extern ListReq_StreamOptionDefaultTypeInternal _ListReq_StreamOption_default_instance_;
class ListResp;
class ListRespDefaultTypeInternal;
extern ListRespDefaultTypeInternal _ListResp_default_instance_;
class ReadReq;
class ReadReqDefaultTypeInternal;
extern ReadReqDefaultTypeInternal _ReadReq_default_instance_;
class ReadReq_Ack;
class ReadReq_AckDefaultTypeInternal;
extern ReadReq_AckDefaultTypeInternal _ReadReq_Ack_default_instance_;
class ReadReq_Nack;
class ReadReq_NackDefaultTypeInternal;
extern ReadReq_NackDefaultTypeInternal _ReadReq_Nack_default_instance_;
class ReadReq_Options;
class ReadReq_OptionsDefaultTypeInternal;
extern ReadReq_OptionsDefaultTypeInternal _ReadReq_Options_default_instance_;
class ReadReq_Options_UUIDOption;
class ReadReq_Options_UUIDOptionDefaultTypeInternal;
extern ReadReq_Options_UUIDOptionDefaultTypeInternal _ReadReq_Options_UUIDOption_default_instance_;
class ReadResp;
class ReadRespDefaultTypeInternal;
extern ReadRespDefaultTypeInternal _ReadResp_default_instance_;
class ReadResp_ReadEvent;
class ReadResp_ReadEventDefaultTypeInternal;
extern ReadResp_ReadEventDefaultTypeInternal _ReadResp_ReadEvent_default_instance_;
class ReadResp_ReadEvent_RecordedEvent;
class ReadResp_ReadEvent_RecordedEventDefaultTypeInternal;
extern ReadResp_ReadEvent_RecordedEventDefaultTypeInternal _ReadResp_ReadEvent_RecordedEvent_default_instance_;
class ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse;
class ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUseDefaultTypeInternal _ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_;
class ReadResp_SubscriptionConfirmation;
class ReadResp_SubscriptionConfirmationDefaultTypeInternal;
extern ReadResp_SubscriptionConfirmationDefaultTypeInternal _ReadResp_SubscriptionConfirmation_default_instance_;
class ReplayParkedReq;
class ReplayParkedReqDefaultTypeInternal;
extern ReplayParkedReqDefaultTypeInternal _ReplayParkedReq_default_instance_;
class ReplayParkedReq_Options;
class ReplayParkedReq_OptionsDefaultTypeInternal;
extern ReplayParkedReq_OptionsDefaultTypeInternal _ReplayParkedReq_Options_default_instance_;
class ReplayParkedResp;
class ReplayParkedRespDefaultTypeInternal;
extern ReplayParkedRespDefaultTypeInternal _ReplayParkedResp_default_instance_;
class SubscriptionInfo;
class SubscriptionInfoDefaultTypeInternal;
extern SubscriptionInfoDefaultTypeInternal _SubscriptionInfo_default_instance_;
class SubscriptionInfo_ConnectionInfo;
class SubscriptionInfo_ConnectionInfoDefaultTypeInternal;
extern SubscriptionInfo_ConnectionInfoDefaultTypeInternal _SubscriptionInfo_ConnectionInfo_default_instance_;
class SubscriptionInfo_Measurement;
class SubscriptionInfo_MeasurementDefaultTypeInternal;
extern SubscriptionInfo_MeasurementDefaultTypeInternal _SubscriptionInfo_Measurement_default_instance_;
class UpdateReq;
class UpdateReqDefaultTypeInternal;
extern UpdateReqDefaultTypeInternal _UpdateReq_default_instance_;
class UpdateReq_AllOptions;
class UpdateReq_AllOptionsDefaultTypeInternal;
extern UpdateReq_AllOptionsDefaultTypeInternal _UpdateReq_AllOptions_default_instance_;
class UpdateReq_Options;
class UpdateReq_OptionsDefaultTypeInternal;
extern UpdateReq_OptionsDefaultTypeInternal _UpdateReq_Options_default_instance_;
class UpdateReq_Position;
class UpdateReq_PositionDefaultTypeInternal;
extern UpdateReq_PositionDefaultTypeInternal _UpdateReq_Position_default_instance_;
class UpdateReq_Settings;
class UpdateReq_SettingsDefaultTypeInternal;
extern UpdateReq_SettingsDefaultTypeInternal _UpdateReq_Settings_default_instance_;
class UpdateReq_StreamOptions;
class UpdateReq_StreamOptionsDefaultTypeInternal;
extern UpdateReq_StreamOptionsDefaultTypeInternal _UpdateReq_StreamOptions_default_instance_;
class UpdateResp;
class UpdateRespDefaultTypeInternal;
extern UpdateRespDefaultTypeInternal _UpdateResp_default_instance_;
}  // namespace persistent_subscriptions
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::client::persistent_subscriptions::CreateReq* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq>(Arena*);
template<> ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_AllOptions>(Arena*);
template<> ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions>(Arena*);
template<> ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression>(Arena*);
template<> ::event_store::client::persistent_subscriptions::CreateReq_Options* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_Options>(Arena*);
template<> ::event_store::client::persistent_subscriptions::CreateReq_Position* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_Position>(Arena*);
template<> ::event_store::client::persistent_subscriptions::CreateReq_Settings* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_Settings>(Arena*);
template<> ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_StreamOptions>(Arena*);
template<> ::event_store::client::persistent_subscriptions::CreateResp* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateResp>(Arena*);
template<> ::event_store::client::persistent_subscriptions::DeleteReq* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::DeleteReq>(Arena*);
template<> ::event_store::client::persistent_subscriptions::DeleteReq_Options* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::DeleteReq_Options>(Arena*);
template<> ::event_store::client::persistent_subscriptions::DeleteResp* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::DeleteResp>(Arena*);
template<> ::event_store::client::persistent_subscriptions::GetInfoReq* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::GetInfoReq>(Arena*);
template<> ::event_store::client::persistent_subscriptions::GetInfoReq_Options* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::GetInfoReq_Options>(Arena*);
template<> ::event_store::client::persistent_subscriptions::GetInfoResp* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::GetInfoResp>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ListReq* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ListReq>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ListReq_Options* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ListReq_Options>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ListReq_StreamOption* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ListReq_StreamOption>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ListResp* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ListResp>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadReq* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadReq>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadReq_Ack* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadReq_Ack>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadReq_Nack* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadReq_Nack>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadReq_Options* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadReq_Options>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadResp* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadResp>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadResp_ReadEvent>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReplayParkedReq* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReplayParkedReq>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReplayParkedReq_Options>(Arena*);
template<> ::event_store::client::persistent_subscriptions::ReplayParkedResp* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReplayParkedResp>(Arena*);
template<> ::event_store::client::persistent_subscriptions::SubscriptionInfo* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::SubscriptionInfo>(Arena*);
template<> ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo>(Arena*);
template<> ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement>(Arena*);
template<> ::event_store::client::persistent_subscriptions::UpdateReq* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateReq>(Arena*);
template<> ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateReq_AllOptions>(Arena*);
template<> ::event_store::client::persistent_subscriptions::UpdateReq_Options* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateReq_Options>(Arena*);
template<> ::event_store::client::persistent_subscriptions::UpdateReq_Position* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateReq_Position>(Arena*);
template<> ::event_store::client::persistent_subscriptions::UpdateReq_Settings* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateReq_Settings>(Arena*);
template<> ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions>(Arena*);
template<> ::event_store::client::persistent_subscriptions::UpdateResp* Arena::CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace client {
namespace persistent_subscriptions {

enum ReadReq_Nack_Action : int {
  ReadReq_Nack_Action_Unknown = 0,
  ReadReq_Nack_Action_Park = 1,
  ReadReq_Nack_Action_Retry = 2,
  ReadReq_Nack_Action_Skip = 3,
  ReadReq_Nack_Action_Stop = 4,
  ReadReq_Nack_Action_ReadReq_Nack_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadReq_Nack_Action_ReadReq_Nack_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadReq_Nack_Action_IsValid(int value);
constexpr ReadReq_Nack_Action ReadReq_Nack_Action_Action_MIN = ReadReq_Nack_Action_Unknown;
constexpr ReadReq_Nack_Action ReadReq_Nack_Action_Action_MAX = ReadReq_Nack_Action_Stop;
constexpr int ReadReq_Nack_Action_Action_ARRAYSIZE = ReadReq_Nack_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadReq_Nack_Action_descriptor();
template<typename T>
inline const std::string& ReadReq_Nack_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadReq_Nack_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadReq_Nack_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadReq_Nack_Action_descriptor(), enum_t_value);
}
inline bool ReadReq_Nack_Action_Parse(
    const std::string& name, ReadReq_Nack_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadReq_Nack_Action>(
    ReadReq_Nack_Action_descriptor(), name, value);
}
enum CreateReq_ConsumerStrategy : int {
  CreateReq_ConsumerStrategy_DispatchToSingle = 0,
  CreateReq_ConsumerStrategy_RoundRobin = 1,
  CreateReq_ConsumerStrategy_Pinned = 2,
  CreateReq_ConsumerStrategy_CreateReq_ConsumerStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateReq_ConsumerStrategy_CreateReq_ConsumerStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateReq_ConsumerStrategy_IsValid(int value);
constexpr CreateReq_ConsumerStrategy CreateReq_ConsumerStrategy_ConsumerStrategy_MIN = CreateReq_ConsumerStrategy_DispatchToSingle;
constexpr CreateReq_ConsumerStrategy CreateReq_ConsumerStrategy_ConsumerStrategy_MAX = CreateReq_ConsumerStrategy_Pinned;
constexpr int CreateReq_ConsumerStrategy_ConsumerStrategy_ARRAYSIZE = CreateReq_ConsumerStrategy_ConsumerStrategy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateReq_ConsumerStrategy_descriptor();
template<typename T>
inline const std::string& CreateReq_ConsumerStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateReq_ConsumerStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateReq_ConsumerStrategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateReq_ConsumerStrategy_descriptor(), enum_t_value);
}
inline bool CreateReq_ConsumerStrategy_Parse(
    const std::string& name, CreateReq_ConsumerStrategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateReq_ConsumerStrategy>(
    CreateReq_ConsumerStrategy_descriptor(), name, value);
}
enum UpdateReq_ConsumerStrategy : int {
  UpdateReq_ConsumerStrategy_DispatchToSingle = 0,
  UpdateReq_ConsumerStrategy_RoundRobin = 1,
  UpdateReq_ConsumerStrategy_Pinned = 2,
  UpdateReq_ConsumerStrategy_UpdateReq_ConsumerStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateReq_ConsumerStrategy_UpdateReq_ConsumerStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateReq_ConsumerStrategy_IsValid(int value);
constexpr UpdateReq_ConsumerStrategy UpdateReq_ConsumerStrategy_ConsumerStrategy_MIN = UpdateReq_ConsumerStrategy_DispatchToSingle;
constexpr UpdateReq_ConsumerStrategy UpdateReq_ConsumerStrategy_ConsumerStrategy_MAX = UpdateReq_ConsumerStrategy_Pinned;
constexpr int UpdateReq_ConsumerStrategy_ConsumerStrategy_ARRAYSIZE = UpdateReq_ConsumerStrategy_ConsumerStrategy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateReq_ConsumerStrategy_descriptor();
template<typename T>
inline const std::string& UpdateReq_ConsumerStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateReq_ConsumerStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateReq_ConsumerStrategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateReq_ConsumerStrategy_descriptor(), enum_t_value);
}
inline bool UpdateReq_ConsumerStrategy_Parse(
    const std::string& name, UpdateReq_ConsumerStrategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateReq_ConsumerStrategy>(
    UpdateReq_ConsumerStrategy_descriptor(), name, value);
}
// ===================================================================

class ReadReq_Options_UUIDOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption) */ {
 public:
  inline ReadReq_Options_UUIDOption() : ReadReq_Options_UUIDOption(nullptr) {};
  virtual ~ReadReq_Options_UUIDOption();

  ReadReq_Options_UUIDOption(const ReadReq_Options_UUIDOption& from);
  ReadReq_Options_UUIDOption(ReadReq_Options_UUIDOption&& from) noexcept
    : ReadReq_Options_UUIDOption() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options_UUIDOption& operator=(const ReadReq_Options_UUIDOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options_UUIDOption& operator=(ReadReq_Options_UUIDOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options_UUIDOption& default_instance();

  enum ContentCase {
    kStructured = 1,
    kString = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options_UUIDOption* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options_UUIDOption*>(
               &_ReadReq_Options_UUIDOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadReq_Options_UUIDOption& a, ReadReq_Options_UUIDOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options_UUIDOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options_UUIDOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options_UUIDOption* New() const final {
    return CreateMaybeMessage<ReadReq_Options_UUIDOption>(nullptr);
  }

  ReadReq_Options_UUIDOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options_UUIDOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options_UUIDOption& from);
  void MergeFrom(const ReadReq_Options_UUIDOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options_UUIDOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption";
  }
  protected:
  explicit ReadReq_Options_UUIDOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructuredFieldNumber = 1,
    kStringFieldNumber = 2,
  };
  // .event_store.client.Empty structured = 1;
  bool has_structured() const;
  private:
  bool _internal_has_structured() const;
  public:
  void clear_structured();
  const ::event_store::client::Empty& structured() const;
  ::event_store::client::Empty* release_structured();
  ::event_store::client::Empty* mutable_structured();
  void set_allocated_structured(::event_store::client::Empty* structured);
  private:
  const ::event_store::client::Empty& _internal_structured() const;
  ::event_store::client::Empty* _internal_mutable_structured();
  public:
  void unsafe_arena_set_allocated_structured(
      ::event_store::client::Empty* structured);
  ::event_store::client::Empty* unsafe_arena_release_structured();

  // .event_store.client.Empty string = 2;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::event_store::client::Empty& string() const;
  ::event_store::client::Empty* release_string();
  ::event_store::client::Empty* mutable_string();
  void set_allocated_string(::event_store::client::Empty* string);
  private:
  const ::event_store::client::Empty& _internal_string() const;
  ::event_store::client::Empty* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::event_store::client::Empty* string);
  ::event_store::client::Empty* unsafe_arena_release_string();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption)
 private:
  class _Internal;
  void set_has_structured();
  void set_has_string();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentUnion {
    ContentUnion() {}
    ::event_store::client::Empty* structured_;
    ::event_store::client::Empty* string_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadReq.Options) */ {
 public:
  inline ReadReq_Options() : ReadReq_Options(nullptr) {};
  virtual ~ReadReq_Options();

  ReadReq_Options(const ReadReq_Options& from);
  ReadReq_Options(ReadReq_Options&& from) noexcept
    : ReadReq_Options() {
    *this = ::std::move(from);
  }

  inline ReadReq_Options& operator=(const ReadReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Options& operator=(ReadReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Options& default_instance();

  enum StreamOptionCase {
    kStreamIdentifier = 1,
    kAll = 5,
    STREAM_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Options* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Options*>(
               &_ReadReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadReq_Options& a, ReadReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Options* New() const final {
    return CreateMaybeMessage<ReadReq_Options>(nullptr);
  }

  ReadReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Options& from);
  void MergeFrom(const ReadReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadReq.Options";
  }
  protected:
  explicit ReadReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadReq_Options_UUIDOption UUIDOption;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kUuidOptionFieldNumber = 4,
    kBufferSizeFieldNumber = 3,
    kStreamIdentifierFieldNumber = 1,
    kAllFieldNumber = 5,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_name(
      std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // .event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption uuid_option = 4;
  bool has_uuid_option() const;
  private:
  bool _internal_has_uuid_option() const;
  public:
  void clear_uuid_option();
  const ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption& uuid_option() const;
  ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* release_uuid_option();
  ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* mutable_uuid_option();
  void set_allocated_uuid_option(::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* uuid_option);
  private:
  const ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption& _internal_uuid_option() const;
  ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* _internal_mutable_uuid_option();
  public:
  void unsafe_arena_set_allocated_uuid_option(
      ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* uuid_option);
  ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* unsafe_arena_release_uuid_option();

  // int32 buffer_size = 3;
  void clear_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size() const;
  void set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer_size() const;
  void _internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // .event_store.client.Empty all = 5;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::Empty& all() const;
  ::event_store::client::Empty* release_all();
  ::event_store::client::Empty* mutable_all();
  void set_allocated_all(::event_store::client::Empty* all);
  private:
  const ::event_store::client::Empty& _internal_all() const;
  ::event_store::client::Empty* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::Empty* all);
  ::event_store::client::Empty* unsafe_arena_release_all();

  void clear_stream_option();
  StreamOptionCase stream_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadReq.Options)
 private:
  class _Internal;
  void set_has_stream_identifier();
  void set_has_all();

  inline bool has_stream_option() const;
  inline void clear_has_stream_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* uuid_option_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size_;
  union StreamOptionUnion {
    StreamOptionUnion() {}
    ::event_store::client::StreamIdentifier* stream_identifier_;
    ::event_store::client::Empty* all_;
  } stream_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Ack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadReq.Ack) */ {
 public:
  inline ReadReq_Ack() : ReadReq_Ack(nullptr) {};
  virtual ~ReadReq_Ack();

  ReadReq_Ack(const ReadReq_Ack& from);
  ReadReq_Ack(ReadReq_Ack&& from) noexcept
    : ReadReq_Ack() {
    *this = ::std::move(from);
  }

  inline ReadReq_Ack& operator=(const ReadReq_Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Ack& operator=(ReadReq_Ack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Ack* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Ack*>(
               &_ReadReq_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadReq_Ack& a, ReadReq_Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Ack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Ack* New() const final {
    return CreateMaybeMessage<ReadReq_Ack>(nullptr);
  }

  ReadReq_Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Ack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Ack& from);
  void MergeFrom(const ReadReq_Ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadReq.Ack";
  }
  protected:
  explicit ReadReq_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .event_store.client.UUID ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::event_store::client::UUID* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID >*
      mutable_ids();
  private:
  const ::event_store::client::UUID& _internal_ids(int index) const;
  ::event_store::client::UUID* _internal_add_ids();
  public:
  const ::event_store::client::UUID& ids(int index) const;
  ::event_store::client::UUID* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID >&
      ids() const;

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadReq.Ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID > ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReadReq_Nack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadReq.Nack) */ {
 public:
  inline ReadReq_Nack() : ReadReq_Nack(nullptr) {};
  virtual ~ReadReq_Nack();

  ReadReq_Nack(const ReadReq_Nack& from);
  ReadReq_Nack(ReadReq_Nack&& from) noexcept
    : ReadReq_Nack() {
    *this = ::std::move(from);
  }

  inline ReadReq_Nack& operator=(const ReadReq_Nack& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq_Nack& operator=(ReadReq_Nack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq_Nack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq_Nack* internal_default_instance() {
    return reinterpret_cast<const ReadReq_Nack*>(
               &_ReadReq_Nack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadReq_Nack& a, ReadReq_Nack& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq_Nack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq_Nack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq_Nack* New() const final {
    return CreateMaybeMessage<ReadReq_Nack>(nullptr);
  }

  ReadReq_Nack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq_Nack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq_Nack& from);
  void MergeFrom(const ReadReq_Nack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq_Nack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadReq.Nack";
  }
  protected:
  explicit ReadReq_Nack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadReq_Nack_Action Action;
  static constexpr Action Unknown =
    ReadReq_Nack_Action_Unknown;
  static constexpr Action Park =
    ReadReq_Nack_Action_Park;
  static constexpr Action Retry =
    ReadReq_Nack_Action_Retry;
  static constexpr Action Skip =
    ReadReq_Nack_Action_Skip;
  static constexpr Action Stop =
    ReadReq_Nack_Action_Stop;
  static inline bool Action_IsValid(int value) {
    return ReadReq_Nack_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    ReadReq_Nack_Action_Action_MIN;
  static constexpr Action Action_MAX =
    ReadReq_Nack_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    ReadReq_Nack_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return ReadReq_Nack_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return ReadReq_Nack_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return ReadReq_Nack_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kIdFieldNumber = 1,
    kReasonFieldNumber = 4,
    kActionFieldNumber = 3,
  };
  // repeated .event_store.client.UUID ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::event_store::client::UUID* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID >*
      mutable_ids();
  private:
  const ::event_store::client::UUID& _internal_ids(int index) const;
  ::event_store::client::UUID* _internal_add_ids();
  public:
  const ::event_store::client::UUID& ids(int index) const;
  ::event_store::client::UUID* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID >&
      ids() const;

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reason(
      std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .event_store.client.persistent_subscriptions.ReadReq.Nack.Action action = 3;
  void clear_action();
  ::event_store::client::persistent_subscriptions::ReadReq_Nack_Action action() const;
  void set_action(::event_store::client::persistent_subscriptions::ReadReq_Nack_Action value);
  private:
  ::event_store::client::persistent_subscriptions::ReadReq_Nack_Action _internal_action() const;
  void _internal_set_action(::event_store::client::persistent_subscriptions::ReadReq_Nack_Action value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadReq.Nack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID > ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReadReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadReq) */ {
 public:
  inline ReadReq() : ReadReq(nullptr) {};
  virtual ~ReadReq();

  ReadReq(const ReadReq& from);
  ReadReq(ReadReq&& from) noexcept
    : ReadReq() {
    *this = ::std::move(from);
  }

  inline ReadReq& operator=(const ReadReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReq& operator=(ReadReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReq& default_instance();

  enum ContentCase {
    kOptions = 1,
    kAck = 2,
    kNack = 3,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReq* internal_default_instance() {
    return reinterpret_cast<const ReadReq*>(
               &_ReadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadReq& a, ReadReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReq* New() const final {
    return CreateMaybeMessage<ReadReq>(nullptr);
  }

  ReadReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReq& from);
  void MergeFrom(const ReadReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadReq";
  }
  protected:
  explicit ReadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadReq_Options Options;
  typedef ReadReq_Ack Ack;
  typedef ReadReq_Nack Nack;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
    kAckFieldNumber = 2,
    kNackFieldNumber = 3,
  };
  // .event_store.client.persistent_subscriptions.ReadReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::persistent_subscriptions::ReadReq_Options& options() const;
  ::event_store::client::persistent_subscriptions::ReadReq_Options* release_options();
  ::event_store::client::persistent_subscriptions::ReadReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::persistent_subscriptions::ReadReq_Options* options);
  private:
  const ::event_store::client::persistent_subscriptions::ReadReq_Options& _internal_options() const;
  ::event_store::client::persistent_subscriptions::ReadReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::persistent_subscriptions::ReadReq_Options* options);
  ::event_store::client::persistent_subscriptions::ReadReq_Options* unsafe_arena_release_options();

  // .event_store.client.persistent_subscriptions.ReadReq.Ack ack = 2;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  const ::event_store::client::persistent_subscriptions::ReadReq_Ack& ack() const;
  ::event_store::client::persistent_subscriptions::ReadReq_Ack* release_ack();
  ::event_store::client::persistent_subscriptions::ReadReq_Ack* mutable_ack();
  void set_allocated_ack(::event_store::client::persistent_subscriptions::ReadReq_Ack* ack);
  private:
  const ::event_store::client::persistent_subscriptions::ReadReq_Ack& _internal_ack() const;
  ::event_store::client::persistent_subscriptions::ReadReq_Ack* _internal_mutable_ack();
  public:
  void unsafe_arena_set_allocated_ack(
      ::event_store::client::persistent_subscriptions::ReadReq_Ack* ack);
  ::event_store::client::persistent_subscriptions::ReadReq_Ack* unsafe_arena_release_ack();

  // .event_store.client.persistent_subscriptions.ReadReq.Nack nack = 3;
  bool has_nack() const;
  private:
  bool _internal_has_nack() const;
  public:
  void clear_nack();
  const ::event_store::client::persistent_subscriptions::ReadReq_Nack& nack() const;
  ::event_store::client::persistent_subscriptions::ReadReq_Nack* release_nack();
  ::event_store::client::persistent_subscriptions::ReadReq_Nack* mutable_nack();
  void set_allocated_nack(::event_store::client::persistent_subscriptions::ReadReq_Nack* nack);
  private:
  const ::event_store::client::persistent_subscriptions::ReadReq_Nack& _internal_nack() const;
  ::event_store::client::persistent_subscriptions::ReadReq_Nack* _internal_mutable_nack();
  public:
  void unsafe_arena_set_allocated_nack(
      ::event_store::client::persistent_subscriptions::ReadReq_Nack* nack);
  ::event_store::client::persistent_subscriptions::ReadReq_Nack* unsafe_arena_release_nack();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadReq)
 private:
  class _Internal;
  void set_has_options();
  void set_has_ack();
  void set_has_nack();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentUnion {
    ContentUnion() {}
    ::event_store::client::persistent_subscriptions::ReadReq_Options* options_;
    ::event_store::client::persistent_subscriptions::ReadReq_Ack* ack_;
    ::event_store::client::persistent_subscriptions::ReadReq_Nack* nack_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse();
  ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse& other);
  static const ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse*>(&_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class ReadResp_ReadEvent_RecordedEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent) */ {
 public:
  inline ReadResp_ReadEvent_RecordedEvent() : ReadResp_ReadEvent_RecordedEvent(nullptr) {};
  virtual ~ReadResp_ReadEvent_RecordedEvent();

  ReadResp_ReadEvent_RecordedEvent(const ReadResp_ReadEvent_RecordedEvent& from);
  ReadResp_ReadEvent_RecordedEvent(ReadResp_ReadEvent_RecordedEvent&& from) noexcept
    : ReadResp_ReadEvent_RecordedEvent() {
    *this = ::std::move(from);
  }

  inline ReadResp_ReadEvent_RecordedEvent& operator=(const ReadResp_ReadEvent_RecordedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp_ReadEvent_RecordedEvent& operator=(ReadResp_ReadEvent_RecordedEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp_ReadEvent_RecordedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp_ReadEvent_RecordedEvent* internal_default_instance() {
    return reinterpret_cast<const ReadResp_ReadEvent_RecordedEvent*>(
               &_ReadResp_ReadEvent_RecordedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadResp_ReadEvent_RecordedEvent& a, ReadResp_ReadEvent_RecordedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp_ReadEvent_RecordedEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp_ReadEvent_RecordedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp_ReadEvent_RecordedEvent* New() const final {
    return CreateMaybeMessage<ReadResp_ReadEvent_RecordedEvent>(nullptr);
  }

  ReadResp_ReadEvent_RecordedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp_ReadEvent_RecordedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp_ReadEvent_RecordedEvent& from);
  void MergeFrom(const ReadResp_ReadEvent_RecordedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp_ReadEvent_RecordedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent";
  }
  protected:
  explicit ReadResp_ReadEvent_RecordedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 6,
    kCustomMetadataFieldNumber = 7,
    kDataFieldNumber = 8,
    kIdFieldNumber = 1,
    kStreamIdentifierFieldNumber = 2,
    kStreamRevisionFieldNumber = 3,
    kPreparePositionFieldNumber = 4,
    kCommitPositionFieldNumber = 5,
  };
  // map<string, string> metadata = 6;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // bytes custom_metadata = 7;
  void clear_custom_metadata();
  const std::string& custom_metadata() const;
  void set_custom_metadata(const std::string& value);
  void set_custom_metadata(std::string&& value);
  void set_custom_metadata(const char* value);
  void set_custom_metadata(const void* value, size_t size);
  std::string* mutable_custom_metadata();
  std::string* release_custom_metadata();
  void set_allocated_custom_metadata(std::string* custom_metadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_custom_metadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_custom_metadata(
      std::string* custom_metadata);
  private:
  const std::string& _internal_custom_metadata() const;
  void _internal_set_custom_metadata(const std::string& value);
  std::string* _internal_mutable_custom_metadata();
  public:

  // bytes data = 8;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .event_store.client.UUID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::event_store::client::UUID& id() const;
  ::event_store::client::UUID* release_id();
  ::event_store::client::UUID* mutable_id();
  void set_allocated_id(::event_store::client::UUID* id);
  private:
  const ::event_store::client::UUID& _internal_id() const;
  ::event_store::client::UUID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::event_store::client::UUID* id);
  ::event_store::client::UUID* unsafe_arena_release_id();

  // .event_store.client.StreamIdentifier stream_identifier = 2;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // uint64 stream_revision = 3;
  void clear_stream_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_revision() const;
  void set_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stream_revision() const;
  void _internal_set_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 4;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 commit_position = 5;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::event_store::client::UUID* id_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_revision_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReadResp_ReadEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadResp.ReadEvent) */ {
 public:
  inline ReadResp_ReadEvent() : ReadResp_ReadEvent(nullptr) {};
  virtual ~ReadResp_ReadEvent();

  ReadResp_ReadEvent(const ReadResp_ReadEvent& from);
  ReadResp_ReadEvent(ReadResp_ReadEvent&& from) noexcept
    : ReadResp_ReadEvent() {
    *this = ::std::move(from);
  }

  inline ReadResp_ReadEvent& operator=(const ReadResp_ReadEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp_ReadEvent& operator=(ReadResp_ReadEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp_ReadEvent& default_instance();

  enum PositionCase {
    kCommitPosition = 3,
    kNoPosition = 4,
    POSITION_NOT_SET = 0,
  };

  enum CountCase {
    kRetryCount = 5,
    kNoRetryCount = 6,
    COUNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp_ReadEvent* internal_default_instance() {
    return reinterpret_cast<const ReadResp_ReadEvent*>(
               &_ReadResp_ReadEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadResp_ReadEvent& a, ReadResp_ReadEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp_ReadEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp_ReadEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp_ReadEvent* New() const final {
    return CreateMaybeMessage<ReadResp_ReadEvent>(nullptr);
  }

  ReadResp_ReadEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp_ReadEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp_ReadEvent& from);
  void MergeFrom(const ReadResp_ReadEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp_ReadEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadResp.ReadEvent";
  }
  protected:
  explicit ReadResp_ReadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadResp_ReadEvent_RecordedEvent RecordedEvent;

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kLinkFieldNumber = 2,
    kCommitPositionFieldNumber = 3,
    kNoPositionFieldNumber = 4,
    kRetryCountFieldNumber = 5,
    kNoRetryCountFieldNumber = 6,
  };
  // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& event() const;
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* release_event();
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* mutable_event();
  void set_allocated_event(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* event);
  private:
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& _internal_event() const;
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* event);
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* unsafe_arena_release_event();

  // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent link = 2;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& link() const;
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* release_link();
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* mutable_link();
  void set_allocated_link(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* link);
  private:
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& _internal_link() const;
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* link);
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* unsafe_arena_release_link();

  // uint64 commit_position = 3;
  private:
  bool _internal_has_commit_position() const;
  public:
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty no_position = 4;
  bool has_no_position() const;
  private:
  bool _internal_has_no_position() const;
  public:
  void clear_no_position();
  const ::event_store::client::Empty& no_position() const;
  ::event_store::client::Empty* release_no_position();
  ::event_store::client::Empty* mutable_no_position();
  void set_allocated_no_position(::event_store::client::Empty* no_position);
  private:
  const ::event_store::client::Empty& _internal_no_position() const;
  ::event_store::client::Empty* _internal_mutable_no_position();
  public:
  void unsafe_arena_set_allocated_no_position(
      ::event_store::client::Empty* no_position);
  ::event_store::client::Empty* unsafe_arena_release_no_position();

  // int32 retry_count = 5;
  private:
  bool _internal_has_retry_count() const;
  public:
  void clear_retry_count();
  ::PROTOBUF_NAMESPACE_ID::int32 retry_count() const;
  void set_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retry_count() const;
  void _internal_set_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .event_store.client.Empty no_retry_count = 6;
  bool has_no_retry_count() const;
  private:
  bool _internal_has_no_retry_count() const;
  public:
  void clear_no_retry_count();
  const ::event_store::client::Empty& no_retry_count() const;
  ::event_store::client::Empty* release_no_retry_count();
  ::event_store::client::Empty* mutable_no_retry_count();
  void set_allocated_no_retry_count(::event_store::client::Empty* no_retry_count);
  private:
  const ::event_store::client::Empty& _internal_no_retry_count() const;
  ::event_store::client::Empty* _internal_mutable_no_retry_count();
  public:
  void unsafe_arena_set_allocated_no_retry_count(
      ::event_store::client::Empty* no_retry_count);
  ::event_store::client::Empty* unsafe_arena_release_no_retry_count();

  void clear_position();
  PositionCase position_case() const;
  void clear_count();
  CountCase count_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadResp.ReadEvent)
 private:
  class _Internal;
  void set_has_commit_position();
  void set_has_no_position();
  void set_has_retry_count();
  void set_has_no_retry_count();

  inline bool has_position() const;
  inline void clear_has_position();

  inline bool has_count() const;
  inline void clear_has_count();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* event_;
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* link_;
  union PositionUnion {
    PositionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
    ::event_store::client::Empty* no_position_;
  } position_;
  union CountUnion {
    CountUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 retry_count_;
    ::event_store::client::Empty* no_retry_count_;
  } count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReadResp_SubscriptionConfirmation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation) */ {
 public:
  inline ReadResp_SubscriptionConfirmation() : ReadResp_SubscriptionConfirmation(nullptr) {};
  virtual ~ReadResp_SubscriptionConfirmation();

  ReadResp_SubscriptionConfirmation(const ReadResp_SubscriptionConfirmation& from);
  ReadResp_SubscriptionConfirmation(ReadResp_SubscriptionConfirmation&& from) noexcept
    : ReadResp_SubscriptionConfirmation() {
    *this = ::std::move(from);
  }

  inline ReadResp_SubscriptionConfirmation& operator=(const ReadResp_SubscriptionConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp_SubscriptionConfirmation& operator=(ReadResp_SubscriptionConfirmation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp_SubscriptionConfirmation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp_SubscriptionConfirmation* internal_default_instance() {
    return reinterpret_cast<const ReadResp_SubscriptionConfirmation*>(
               &_ReadResp_SubscriptionConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadResp_SubscriptionConfirmation& a, ReadResp_SubscriptionConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp_SubscriptionConfirmation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp_SubscriptionConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp_SubscriptionConfirmation* New() const final {
    return CreateMaybeMessage<ReadResp_SubscriptionConfirmation>(nullptr);
  }

  ReadResp_SubscriptionConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp_SubscriptionConfirmation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp_SubscriptionConfirmation& from);
  void MergeFrom(const ReadResp_SubscriptionConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp_SubscriptionConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation";
  }
  protected:
  explicit ReadResp_SubscriptionConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 1,
  };
  // string subscription_id = 1;
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subscription_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription_id(
      std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReadResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReadResp) */ {
 public:
  inline ReadResp() : ReadResp(nullptr) {};
  virtual ~ReadResp();

  ReadResp(const ReadResp& from);
  ReadResp(ReadResp&& from) noexcept
    : ReadResp() {
    *this = ::std::move(from);
  }

  inline ReadResp& operator=(const ReadResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResp& operator=(ReadResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResp& default_instance();

  enum ContentCase {
    kEvent = 1,
    kSubscriptionConfirmation = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResp* internal_default_instance() {
    return reinterpret_cast<const ReadResp*>(
               &_ReadResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadResp& a, ReadResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResp* New() const final {
    return CreateMaybeMessage<ReadResp>(nullptr);
  }

  ReadResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResp& from);
  void MergeFrom(const ReadResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReadResp";
  }
  protected:
  explicit ReadResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadResp_ReadEvent ReadEvent;
  typedef ReadResp_SubscriptionConfirmation SubscriptionConfirmation;

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
    kSubscriptionConfirmationFieldNumber = 2,
  };
  // .event_store.client.persistent_subscriptions.ReadResp.ReadEvent event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent& event() const;
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* release_event();
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* mutable_event();
  void set_allocated_event(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* event);
  private:
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent& _internal_event() const;
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* event);
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* unsafe_arena_release_event();

  // .event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation subscription_confirmation = 2;
  bool has_subscription_confirmation() const;
  private:
  bool _internal_has_subscription_confirmation() const;
  public:
  void clear_subscription_confirmation();
  const ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation& subscription_confirmation() const;
  ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* release_subscription_confirmation();
  ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* mutable_subscription_confirmation();
  void set_allocated_subscription_confirmation(::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* subscription_confirmation);
  private:
  const ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation& _internal_subscription_confirmation() const;
  ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* _internal_mutable_subscription_confirmation();
  public:
  void unsafe_arena_set_allocated_subscription_confirmation(
      ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* subscription_confirmation);
  ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* unsafe_arena_release_subscription_confirmation();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReadResp)
 private:
  class _Internal;
  void set_has_event();
  void set_has_subscription_confirmation();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentUnion {
    ContentUnion() {}
    ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* event_;
    ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* subscription_confirmation_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateReq.Options) */ {
 public:
  inline CreateReq_Options() : CreateReq_Options(nullptr) {};
  virtual ~CreateReq_Options();

  CreateReq_Options(const CreateReq_Options& from);
  CreateReq_Options(CreateReq_Options&& from) noexcept
    : CreateReq_Options() {
    *this = ::std::move(from);
  }

  inline CreateReq_Options& operator=(const CreateReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_Options& operator=(CreateReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_Options& default_instance();

  enum StreamOptionCase {
    kStream = 4,
    kAll = 5,
    STREAM_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_Options* internal_default_instance() {
    return reinterpret_cast<const CreateReq_Options*>(
               &_CreateReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateReq_Options& a, CreateReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_Options* New() const final {
    return CreateMaybeMessage<CreateReq_Options>(nullptr);
  }

  CreateReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_Options& from);
  void MergeFrom(const CreateReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateReq.Options";
  }
  protected:
  explicit CreateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kStreamIdentifierFieldNumber = 1,
    kSettingsFieldNumber = 3,
    kStreamFieldNumber = 4,
    kAllFieldNumber = 5,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_name(
      std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  PROTOBUF_DEPRECATED void clear_stream_identifier();
  PROTOBUF_DEPRECATED const ::event_store::client::StreamIdentifier& stream_identifier() const;
  PROTOBUF_DEPRECATED ::event_store::client::StreamIdentifier* release_stream_identifier();
  PROTOBUF_DEPRECATED ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  PROTOBUF_DEPRECATED void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  PROTOBUF_DEPRECATED ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // .event_store.client.persistent_subscriptions.CreateReq.Settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::event_store::client::persistent_subscriptions::CreateReq_Settings& settings() const;
  ::event_store::client::persistent_subscriptions::CreateReq_Settings* release_settings();
  ::event_store::client::persistent_subscriptions::CreateReq_Settings* mutable_settings();
  void set_allocated_settings(::event_store::client::persistent_subscriptions::CreateReq_Settings* settings);
  private:
  const ::event_store::client::persistent_subscriptions::CreateReq_Settings& _internal_settings() const;
  ::event_store::client::persistent_subscriptions::CreateReq_Settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::event_store::client::persistent_subscriptions::CreateReq_Settings* settings);
  ::event_store::client::persistent_subscriptions::CreateReq_Settings* unsafe_arena_release_settings();

  // .event_store.client.persistent_subscriptions.CreateReq.StreamOptions stream = 4;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions& stream() const;
  ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* release_stream();
  ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* mutable_stream();
  void set_allocated_stream(::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* stream);
  private:
  const ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions& _internal_stream() const;
  ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* stream);
  ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* unsafe_arena_release_stream();

  // .event_store.client.persistent_subscriptions.CreateReq.AllOptions all = 5;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions& all() const;
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* release_all();
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* mutable_all();
  void set_allocated_all(::event_store::client::persistent_subscriptions::CreateReq_AllOptions* all);
  private:
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions& _internal_all() const;
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* all);
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* unsafe_arena_release_all();

  void clear_stream_option();
  StreamOptionCase stream_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateReq.Options)
 private:
  class _Internal;
  void set_has_stream();
  void set_has_all();

  inline bool has_stream_option() const;
  inline void clear_has_stream_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  ::event_store::client::persistent_subscriptions::CreateReq_Settings* settings_;
  union StreamOptionUnion {
    StreamOptionUnion() {}
    ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* stream_;
    ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* all_;
  } stream_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_StreamOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateReq.StreamOptions) */ {
 public:
  inline CreateReq_StreamOptions() : CreateReq_StreamOptions(nullptr) {};
  virtual ~CreateReq_StreamOptions();

  CreateReq_StreamOptions(const CreateReq_StreamOptions& from);
  CreateReq_StreamOptions(CreateReq_StreamOptions&& from) noexcept
    : CreateReq_StreamOptions() {
    *this = ::std::move(from);
  }

  inline CreateReq_StreamOptions& operator=(const CreateReq_StreamOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_StreamOptions& operator=(CreateReq_StreamOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_StreamOptions& default_instance();

  enum RevisionOptionCase {
    kRevision = 2,
    kStart = 3,
    kEnd = 4,
    REVISION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_StreamOptions* internal_default_instance() {
    return reinterpret_cast<const CreateReq_StreamOptions*>(
               &_CreateReq_StreamOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateReq_StreamOptions& a, CreateReq_StreamOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_StreamOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_StreamOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_StreamOptions* New() const final {
    return CreateMaybeMessage<CreateReq_StreamOptions>(nullptr);
  }

  CreateReq_StreamOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_StreamOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_StreamOptions& from);
  void MergeFrom(const CreateReq_StreamOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_StreamOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateReq.StreamOptions";
  }
  protected:
  explicit CreateReq_StreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
    kRevisionFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // uint64 revision = 2;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::event_store::client::Empty& start() const;
  ::event_store::client::Empty* release_start();
  ::event_store::client::Empty* mutable_start();
  void set_allocated_start(::event_store::client::Empty* start);
  private:
  const ::event_store::client::Empty& _internal_start() const;
  ::event_store::client::Empty* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::event_store::client::Empty* start);
  ::event_store::client::Empty* unsafe_arena_release_start();

  // .event_store.client.Empty end = 4;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::event_store::client::Empty& end() const;
  ::event_store::client::Empty* release_end();
  ::event_store::client::Empty* mutable_end();
  void set_allocated_end(::event_store::client::Empty* end);
  private:
  const ::event_store::client::Empty& _internal_end() const;
  ::event_store::client::Empty* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::event_store::client::Empty* end);
  ::event_store::client::Empty* unsafe_arena_release_end();

  void clear_revision_option();
  RevisionOptionCase revision_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateReq.StreamOptions)
 private:
  class _Internal;
  void set_has_revision();
  void set_has_start();
  void set_has_end();

  inline bool has_revision_option() const;
  inline void clear_has_revision_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  union RevisionOptionUnion {
    RevisionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
    ::event_store::client::Empty* start_;
    ::event_store::client::Empty* end_;
  } revision_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_AllOptions_FilterOptions_Expression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression) */ {
 public:
  inline CreateReq_AllOptions_FilterOptions_Expression() : CreateReq_AllOptions_FilterOptions_Expression(nullptr) {};
  virtual ~CreateReq_AllOptions_FilterOptions_Expression();

  CreateReq_AllOptions_FilterOptions_Expression(const CreateReq_AllOptions_FilterOptions_Expression& from);
  CreateReq_AllOptions_FilterOptions_Expression(CreateReq_AllOptions_FilterOptions_Expression&& from) noexcept
    : CreateReq_AllOptions_FilterOptions_Expression() {
    *this = ::std::move(from);
  }

  inline CreateReq_AllOptions_FilterOptions_Expression& operator=(const CreateReq_AllOptions_FilterOptions_Expression& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_AllOptions_FilterOptions_Expression& operator=(CreateReq_AllOptions_FilterOptions_Expression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_AllOptions_FilterOptions_Expression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_AllOptions_FilterOptions_Expression* internal_default_instance() {
    return reinterpret_cast<const CreateReq_AllOptions_FilterOptions_Expression*>(
               &_CreateReq_AllOptions_FilterOptions_Expression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateReq_AllOptions_FilterOptions_Expression& a, CreateReq_AllOptions_FilterOptions_Expression& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_AllOptions_FilterOptions_Expression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_AllOptions_FilterOptions_Expression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_AllOptions_FilterOptions_Expression* New() const final {
    return CreateMaybeMessage<CreateReq_AllOptions_FilterOptions_Expression>(nullptr);
  }

  CreateReq_AllOptions_FilterOptions_Expression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_AllOptions_FilterOptions_Expression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_AllOptions_FilterOptions_Expression& from);
  void MergeFrom(const CreateReq_AllOptions_FilterOptions_Expression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_AllOptions_FilterOptions_Expression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression";
  }
  protected:
  explicit CreateReq_AllOptions_FilterOptions_Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 2,
    kRegexFieldNumber = 1,
  };
  // repeated string prefix = 2;
  int prefix_size() const;
  private:
  int _internal_prefix_size() const;
  public:
  void clear_prefix();
  const std::string& prefix(int index) const;
  std::string* mutable_prefix(int index);
  void set_prefix(int index, const std::string& value);
  void set_prefix(int index, std::string&& value);
  void set_prefix(int index, const char* value);
  void set_prefix(int index, const char* value, size_t size);
  std::string* add_prefix();
  void add_prefix(const std::string& value);
  void add_prefix(std::string&& value);
  void add_prefix(const char* value);
  void add_prefix(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prefix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prefix();
  private:
  const std::string& _internal_prefix(int index) const;
  std::string* _internal_add_prefix();
  public:

  // string regex = 1;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_regex();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_regex(
      std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_AllOptions_FilterOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions) */ {
 public:
  inline CreateReq_AllOptions_FilterOptions() : CreateReq_AllOptions_FilterOptions(nullptr) {};
  virtual ~CreateReq_AllOptions_FilterOptions();

  CreateReq_AllOptions_FilterOptions(const CreateReq_AllOptions_FilterOptions& from);
  CreateReq_AllOptions_FilterOptions(CreateReq_AllOptions_FilterOptions&& from) noexcept
    : CreateReq_AllOptions_FilterOptions() {
    *this = ::std::move(from);
  }

  inline CreateReq_AllOptions_FilterOptions& operator=(const CreateReq_AllOptions_FilterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_AllOptions_FilterOptions& operator=(CreateReq_AllOptions_FilterOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_AllOptions_FilterOptions& default_instance();

  enum FilterCase {
    kStreamIdentifier = 1,
    kEventType = 2,
    FILTER_NOT_SET = 0,
  };

  enum WindowCase {
    kMax = 3,
    kCount = 4,
    WINDOW_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_AllOptions_FilterOptions* internal_default_instance() {
    return reinterpret_cast<const CreateReq_AllOptions_FilterOptions*>(
               &_CreateReq_AllOptions_FilterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CreateReq_AllOptions_FilterOptions& a, CreateReq_AllOptions_FilterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_AllOptions_FilterOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_AllOptions_FilterOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_AllOptions_FilterOptions* New() const final {
    return CreateMaybeMessage<CreateReq_AllOptions_FilterOptions>(nullptr);
  }

  CreateReq_AllOptions_FilterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_AllOptions_FilterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_AllOptions_FilterOptions& from);
  void MergeFrom(const CreateReq_AllOptions_FilterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_AllOptions_FilterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions";
  }
  protected:
  explicit CreateReq_AllOptions_FilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateReq_AllOptions_FilterOptions_Expression Expression;

  // accessors -------------------------------------------------------

  enum : int {
    kCheckpointIntervalMultiplierFieldNumber = 5,
    kStreamIdentifierFieldNumber = 1,
    kEventTypeFieldNumber = 2,
    kMaxFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // uint32 checkpointIntervalMultiplier = 5;
  void clear_checkpointintervalmultiplier();
  ::PROTOBUF_NAMESPACE_ID::uint32 checkpointintervalmultiplier() const;
  void set_checkpointintervalmultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_checkpointintervalmultiplier() const;
  void _internal_set_checkpointintervalmultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& stream_identifier() const;
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* release_stream_identifier();
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* stream_identifier);
  private:
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& _internal_stream_identifier() const;
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* stream_identifier);
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* unsafe_arena_release_stream_identifier();

  // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression event_type = 2;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& event_type() const;
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* release_event_type();
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* mutable_event_type();
  void set_allocated_event_type(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* event_type);
  private:
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& _internal_event_type() const;
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* _internal_mutable_event_type();
  public:
  void unsafe_arena_set_allocated_event_type(
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* event_type);
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* unsafe_arena_release_event_type();

  // uint32 max = 3;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .event_store.client.Empty count = 4;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::event_store::client::Empty& count() const;
  ::event_store::client::Empty* release_count();
  ::event_store::client::Empty* mutable_count();
  void set_allocated_count(::event_store::client::Empty* count);
  private:
  const ::event_store::client::Empty& _internal_count() const;
  ::event_store::client::Empty* _internal_mutable_count();
  public:
  void unsafe_arena_set_allocated_count(
      ::event_store::client::Empty* count);
  ::event_store::client::Empty* unsafe_arena_release_count();

  void clear_filter();
  FilterCase filter_case() const;
  void clear_window();
  WindowCase window_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions)
 private:
  class _Internal;
  void set_has_stream_identifier();
  void set_has_event_type();
  void set_has_max();
  void set_has_count();

  inline bool has_filter() const;
  inline void clear_has_filter();

  inline bool has_window() const;
  inline void clear_has_window();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 checkpointintervalmultiplier_;
  union FilterUnion {
    FilterUnion() {}
    ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* stream_identifier_;
    ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* event_type_;
  } filter_;
  union WindowUnion {
    WindowUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 max_;
    ::event_store::client::Empty* count_;
  } window_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_AllOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateReq.AllOptions) */ {
 public:
  inline CreateReq_AllOptions() : CreateReq_AllOptions(nullptr) {};
  virtual ~CreateReq_AllOptions();

  CreateReq_AllOptions(const CreateReq_AllOptions& from);
  CreateReq_AllOptions(CreateReq_AllOptions&& from) noexcept
    : CreateReq_AllOptions() {
    *this = ::std::move(from);
  }

  inline CreateReq_AllOptions& operator=(const CreateReq_AllOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_AllOptions& operator=(CreateReq_AllOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_AllOptions& default_instance();

  enum AllOptionCase {
    kPosition = 1,
    kStart = 2,
    kEnd = 3,
    ALL_OPTION_NOT_SET = 0,
  };

  enum FilterOptionCase {
    kFilter = 4,
    kNoFilter = 5,
    FILTER_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_AllOptions* internal_default_instance() {
    return reinterpret_cast<const CreateReq_AllOptions*>(
               &_CreateReq_AllOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateReq_AllOptions& a, CreateReq_AllOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_AllOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_AllOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_AllOptions* New() const final {
    return CreateMaybeMessage<CreateReq_AllOptions>(nullptr);
  }

  CreateReq_AllOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_AllOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_AllOptions& from);
  void MergeFrom(const CreateReq_AllOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_AllOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateReq.AllOptions";
  }
  protected:
  explicit CreateReq_AllOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateReq_AllOptions_FilterOptions FilterOptions;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kFilterFieldNumber = 4,
    kNoFilterFieldNumber = 5,
  };
  // .event_store.client.persistent_subscriptions.CreateReq.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::event_store::client::persistent_subscriptions::CreateReq_Position& position() const;
  ::event_store::client::persistent_subscriptions::CreateReq_Position* release_position();
  ::event_store::client::persistent_subscriptions::CreateReq_Position* mutable_position();
  void set_allocated_position(::event_store::client::persistent_subscriptions::CreateReq_Position* position);
  private:
  const ::event_store::client::persistent_subscriptions::CreateReq_Position& _internal_position() const;
  ::event_store::client::persistent_subscriptions::CreateReq_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::event_store::client::persistent_subscriptions::CreateReq_Position* position);
  ::event_store::client::persistent_subscriptions::CreateReq_Position* unsafe_arena_release_position();

  // .event_store.client.Empty start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::event_store::client::Empty& start() const;
  ::event_store::client::Empty* release_start();
  ::event_store::client::Empty* mutable_start();
  void set_allocated_start(::event_store::client::Empty* start);
  private:
  const ::event_store::client::Empty& _internal_start() const;
  ::event_store::client::Empty* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::event_store::client::Empty* start);
  ::event_store::client::Empty* unsafe_arena_release_start();

  // .event_store.client.Empty end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::event_store::client::Empty& end() const;
  ::event_store::client::Empty* release_end();
  ::event_store::client::Empty* mutable_end();
  void set_allocated_end(::event_store::client::Empty* end);
  private:
  const ::event_store::client::Empty& _internal_end() const;
  ::event_store::client::Empty* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::event_store::client::Empty* end);
  ::event_store::client::Empty* unsafe_arena_release_end();

  // .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions filter = 4;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions& filter() const;
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* release_filter();
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* mutable_filter();
  void set_allocated_filter(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* filter);
  private:
  const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions& _internal_filter() const;
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* filter);
  ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* unsafe_arena_release_filter();

  // .event_store.client.Empty no_filter = 5;
  bool has_no_filter() const;
  private:
  bool _internal_has_no_filter() const;
  public:
  void clear_no_filter();
  const ::event_store::client::Empty& no_filter() const;
  ::event_store::client::Empty* release_no_filter();
  ::event_store::client::Empty* mutable_no_filter();
  void set_allocated_no_filter(::event_store::client::Empty* no_filter);
  private:
  const ::event_store::client::Empty& _internal_no_filter() const;
  ::event_store::client::Empty* _internal_mutable_no_filter();
  public:
  void unsafe_arena_set_allocated_no_filter(
      ::event_store::client::Empty* no_filter);
  ::event_store::client::Empty* unsafe_arena_release_no_filter();

  void clear_all_option();
  AllOptionCase all_option_case() const;
  void clear_filter_option();
  FilterOptionCase filter_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateReq.AllOptions)
 private:
  class _Internal;
  void set_has_position();
  void set_has_start();
  void set_has_end();
  void set_has_filter();
  void set_has_no_filter();

  inline bool has_all_option() const;
  inline void clear_has_all_option();

  inline bool has_filter_option() const;
  inline void clear_has_filter_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AllOptionUnion {
    AllOptionUnion() {}
    ::event_store::client::persistent_subscriptions::CreateReq_Position* position_;
    ::event_store::client::Empty* start_;
    ::event_store::client::Empty* end_;
  } all_option_;
  union FilterOptionUnion {
    FilterOptionUnion() {}
    ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* filter_;
    ::event_store::client::Empty* no_filter_;
  } filter_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateReq.Position) */ {
 public:
  inline CreateReq_Position() : CreateReq_Position(nullptr) {};
  virtual ~CreateReq_Position();

  CreateReq_Position(const CreateReq_Position& from);
  CreateReq_Position(CreateReq_Position&& from) noexcept
    : CreateReq_Position() {
    *this = ::std::move(from);
  }

  inline CreateReq_Position& operator=(const CreateReq_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_Position& operator=(CreateReq_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_Position* internal_default_instance() {
    return reinterpret_cast<const CreateReq_Position*>(
               &_CreateReq_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateReq_Position& a, CreateReq_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_Position* New() const final {
    return CreateMaybeMessage<CreateReq_Position>(nullptr);
  }

  CreateReq_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_Position& from);
  void MergeFrom(const CreateReq_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateReq.Position";
  }
  protected:
  explicit CreateReq_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
  };
  // uint64 commit_position = 1;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 2;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateReq.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateReq_Settings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateReq.Settings) */ {
 public:
  inline CreateReq_Settings() : CreateReq_Settings(nullptr) {};
  virtual ~CreateReq_Settings();

  CreateReq_Settings(const CreateReq_Settings& from);
  CreateReq_Settings(CreateReq_Settings&& from) noexcept
    : CreateReq_Settings() {
    *this = ::std::move(from);
  }

  inline CreateReq_Settings& operator=(const CreateReq_Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_Settings& operator=(CreateReq_Settings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_Settings& default_instance();

  enum MessageTimeoutCase {
    kMessageTimeoutTicks = 4,
    kMessageTimeoutMs = 14,
    MESSAGE_TIMEOUT_NOT_SET = 0,
  };

  enum CheckpointAfterCase {
    kCheckpointAfterTicks = 6,
    kCheckpointAfterMs = 15,
    CHECKPOINT_AFTER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_Settings* internal_default_instance() {
    return reinterpret_cast<const CreateReq_Settings*>(
               &_CreateReq_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CreateReq_Settings& a, CreateReq_Settings& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_Settings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_Settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_Settings* New() const final {
    return CreateMaybeMessage<CreateReq_Settings>(nullptr);
  }

  CreateReq_Settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_Settings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_Settings& from);
  void MergeFrom(const CreateReq_Settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_Settings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateReq.Settings";
  }
  protected:
  explicit CreateReq_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumerStrategyFieldNumber = 16,
    kRevisionFieldNumber = 2,
    kResolveLinksFieldNumber = 1,
    kExtraStatisticsFieldNumber = 3,
    kMaxRetryCountFieldNumber = 5,
    kMinCheckpointCountFieldNumber = 7,
    kMaxCheckpointCountFieldNumber = 8,
    kMaxSubscriberCountFieldNumber = 9,
    kLiveBufferSizeFieldNumber = 10,
    kReadBatchSizeFieldNumber = 11,
    kHistoryBufferSizeFieldNumber = 12,
    kNamedConsumerStrategyFieldNumber = 13,
    kMessageTimeoutTicksFieldNumber = 4,
    kMessageTimeoutMsFieldNumber = 14,
    kCheckpointAfterTicksFieldNumber = 6,
    kCheckpointAfterMsFieldNumber = 15,
  };
  // string consumer_strategy = 16;
  void clear_consumer_strategy();
  const std::string& consumer_strategy() const;
  void set_consumer_strategy(const std::string& value);
  void set_consumer_strategy(std::string&& value);
  void set_consumer_strategy(const char* value);
  void set_consumer_strategy(const char* value, size_t size);
  std::string* mutable_consumer_strategy();
  std::string* release_consumer_strategy();
  void set_allocated_consumer_strategy(std::string* consumer_strategy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_consumer_strategy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_consumer_strategy(
      std::string* consumer_strategy);
  private:
  const std::string& _internal_consumer_strategy() const;
  void _internal_set_consumer_strategy(const std::string& value);
  std::string* _internal_mutable_consumer_strategy();
  public:

  // uint64 revision = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_revision();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 revision() const;
  PROTOBUF_DEPRECATED void set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool resolve_links = 1;
  void clear_resolve_links();
  bool resolve_links() const;
  void set_resolve_links(bool value);
  private:
  bool _internal_resolve_links() const;
  void _internal_set_resolve_links(bool value);
  public:

  // bool extra_statistics = 3;
  void clear_extra_statistics();
  bool extra_statistics() const;
  void set_extra_statistics(bool value);
  private:
  bool _internal_extra_statistics() const;
  void _internal_set_extra_statistics(bool value);
  public:

  // int32 max_retry_count = 5;
  void clear_max_retry_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count() const;
  void set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_retry_count() const;
  void _internal_set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_checkpoint_count = 7;
  void clear_min_checkpoint_count();
  ::PROTOBUF_NAMESPACE_ID::int32 min_checkpoint_count() const;
  void set_min_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_checkpoint_count() const;
  void _internal_set_min_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_checkpoint_count = 8;
  void clear_max_checkpoint_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_checkpoint_count() const;
  void set_max_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_checkpoint_count() const;
  void _internal_set_max_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_subscriber_count = 9;
  void clear_max_subscriber_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_subscriber_count() const;
  void set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_subscriber_count() const;
  void _internal_set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 live_buffer_size = 10;
  void clear_live_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size() const;
  void set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_live_buffer_size() const;
  void _internal_set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 read_batch_size = 11;
  void clear_read_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size() const;
  void set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_read_batch_size() const;
  void _internal_set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 history_buffer_size = 12;
  void clear_history_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 history_buffer_size() const;
  void set_history_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_history_buffer_size() const;
  void _internal_set_history_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy named_consumer_strategy = 13 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_named_consumer_strategy();
  PROTOBUF_DEPRECATED ::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy named_consumer_strategy() const;
  PROTOBUF_DEPRECATED void set_named_consumer_strategy(::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy value);
  private:
  ::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy _internal_named_consumer_strategy() const;
  void _internal_set_named_consumer_strategy(::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy value);
  public:

  // int64 message_timeout_ticks = 4;
  private:
  bool _internal_has_message_timeout_ticks() const;
  public:
  void clear_message_timeout_ticks();
  ::PROTOBUF_NAMESPACE_ID::int64 message_timeout_ticks() const;
  void set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_timeout_ticks() const;
  void _internal_set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 message_timeout_ms = 14;
  private:
  bool _internal_has_message_timeout_ms() const;
  public:
  void clear_message_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_ms() const;
  void set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_timeout_ms() const;
  void _internal_set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 checkpoint_after_ticks = 6;
  private:
  bool _internal_has_checkpoint_after_ticks() const;
  public:
  void clear_checkpoint_after_ticks();
  ::PROTOBUF_NAMESPACE_ID::int64 checkpoint_after_ticks() const;
  void set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_checkpoint_after_ticks() const;
  void _internal_set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 checkpoint_after_ms = 15;
  private:
  bool _internal_has_checkpoint_after_ms() const;
  public:
  void clear_checkpoint_after_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_ms() const;
  void set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checkpoint_after_ms() const;
  void _internal_set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_message_timeout();
  MessageTimeoutCase message_timeout_case() const;
  void clear_checkpoint_after();
  CheckpointAfterCase checkpoint_after_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateReq.Settings)
 private:
  class _Internal;
  void set_has_message_timeout_ticks();
  void set_has_message_timeout_ms();
  void set_has_checkpoint_after_ticks();
  void set_has_checkpoint_after_ms();

  inline bool has_message_timeout() const;
  inline void clear_has_message_timeout();

  inline bool has_checkpoint_after() const;
  inline void clear_has_checkpoint_after();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_strategy_;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
  bool resolve_links_;
  bool extra_statistics_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_checkpoint_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_checkpoint_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_subscriber_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 history_buffer_size_;
  int named_consumer_strategy_;
  union MessageTimeoutUnion {
    MessageTimeoutUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 message_timeout_ticks_;
    ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_ms_;
  } message_timeout_;
  union CheckpointAfterUnion {
    CheckpointAfterUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 checkpoint_after_ticks_;
    ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_ms_;
  } checkpoint_after_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateReq) */ {
 public:
  inline CreateReq() : CreateReq(nullptr) {};
  virtual ~CreateReq();

  CreateReq(const CreateReq& from);
  CreateReq(CreateReq&& from) noexcept
    : CreateReq() {
    *this = ::std::move(from);
  }

  inline CreateReq& operator=(const CreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq& operator=(CreateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq* internal_default_instance() {
    return reinterpret_cast<const CreateReq*>(
               &_CreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateReq& a, CreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq* New() const final {
    return CreateMaybeMessage<CreateReq>(nullptr);
  }

  CreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq& from);
  void MergeFrom(const CreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateReq";
  }
  protected:
  explicit CreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateReq_Options Options;
  typedef CreateReq_StreamOptions StreamOptions;
  typedef CreateReq_AllOptions AllOptions;
  typedef CreateReq_Position Position;
  typedef CreateReq_Settings Settings;

  typedef CreateReq_ConsumerStrategy ConsumerStrategy;
  static constexpr ConsumerStrategy DispatchToSingle =
    CreateReq_ConsumerStrategy_DispatchToSingle;
  static constexpr ConsumerStrategy RoundRobin =
    CreateReq_ConsumerStrategy_RoundRobin;
  static constexpr ConsumerStrategy Pinned =
    CreateReq_ConsumerStrategy_Pinned;
  static inline bool ConsumerStrategy_IsValid(int value) {
    return CreateReq_ConsumerStrategy_IsValid(value);
  }
  static constexpr ConsumerStrategy ConsumerStrategy_MIN =
    CreateReq_ConsumerStrategy_ConsumerStrategy_MIN;
  static constexpr ConsumerStrategy ConsumerStrategy_MAX =
    CreateReq_ConsumerStrategy_ConsumerStrategy_MAX;
  static constexpr int ConsumerStrategy_ARRAYSIZE =
    CreateReq_ConsumerStrategy_ConsumerStrategy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConsumerStrategy_descriptor() {
    return CreateReq_ConsumerStrategy_descriptor();
  }
  template<typename T>
  static inline const std::string& ConsumerStrategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConsumerStrategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConsumerStrategy_Name.");
    return CreateReq_ConsumerStrategy_Name(enum_t_value);
  }
  static inline bool ConsumerStrategy_Parse(const std::string& name,
      ConsumerStrategy* value) {
    return CreateReq_ConsumerStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.persistent_subscriptions.CreateReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::persistent_subscriptions::CreateReq_Options& options() const;
  ::event_store::client::persistent_subscriptions::CreateReq_Options* release_options();
  ::event_store::client::persistent_subscriptions::CreateReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::persistent_subscriptions::CreateReq_Options* options);
  private:
  const ::event_store::client::persistent_subscriptions::CreateReq_Options& _internal_options() const;
  ::event_store::client::persistent_subscriptions::CreateReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::persistent_subscriptions::CreateReq_Options* options);
  ::event_store::client::persistent_subscriptions::CreateReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::persistent_subscriptions::CreateReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class CreateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.CreateResp) */ {
 public:
  inline CreateResp() : CreateResp(nullptr) {};
  virtual ~CreateResp();

  CreateResp(const CreateResp& from);
  CreateResp(CreateResp&& from) noexcept
    : CreateResp() {
    *this = ::std::move(from);
  }

  inline CreateResp& operator=(const CreateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResp& operator=(CreateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResp* internal_default_instance() {
    return reinterpret_cast<const CreateResp*>(
               &_CreateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CreateResp& a, CreateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResp* New() const final {
    return CreateMaybeMessage<CreateResp>(nullptr);
  }

  CreateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateResp& from);
  void MergeFrom(const CreateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.CreateResp";
  }
  protected:
  explicit CreateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.CreateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.UpdateReq.Options) */ {
 public:
  inline UpdateReq_Options() : UpdateReq_Options(nullptr) {};
  virtual ~UpdateReq_Options();

  UpdateReq_Options(const UpdateReq_Options& from);
  UpdateReq_Options(UpdateReq_Options&& from) noexcept
    : UpdateReq_Options() {
    *this = ::std::move(from);
  }

  inline UpdateReq_Options& operator=(const UpdateReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq_Options& operator=(UpdateReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq_Options& default_instance();

  enum StreamOptionCase {
    kStream = 4,
    kAll = 5,
    STREAM_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq_Options* internal_default_instance() {
    return reinterpret_cast<const UpdateReq_Options*>(
               &_UpdateReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateReq_Options& a, UpdateReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq_Options* New() const final {
    return CreateMaybeMessage<UpdateReq_Options>(nullptr);
  }

  UpdateReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq_Options& from);
  void MergeFrom(const UpdateReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.UpdateReq.Options";
  }
  protected:
  explicit UpdateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kStreamIdentifierFieldNumber = 1,
    kSettingsFieldNumber = 3,
    kStreamFieldNumber = 4,
    kAllFieldNumber = 5,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_name(
      std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  PROTOBUF_DEPRECATED void clear_stream_identifier();
  PROTOBUF_DEPRECATED const ::event_store::client::StreamIdentifier& stream_identifier() const;
  PROTOBUF_DEPRECATED ::event_store::client::StreamIdentifier* release_stream_identifier();
  PROTOBUF_DEPRECATED ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  PROTOBUF_DEPRECATED void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  PROTOBUF_DEPRECATED ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // .event_store.client.persistent_subscriptions.UpdateReq.Settings settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::event_store::client::persistent_subscriptions::UpdateReq_Settings& settings() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_Settings* release_settings();
  ::event_store::client::persistent_subscriptions::UpdateReq_Settings* mutable_settings();
  void set_allocated_settings(::event_store::client::persistent_subscriptions::UpdateReq_Settings* settings);
  private:
  const ::event_store::client::persistent_subscriptions::UpdateReq_Settings& _internal_settings() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_Settings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::event_store::client::persistent_subscriptions::UpdateReq_Settings* settings);
  ::event_store::client::persistent_subscriptions::UpdateReq_Settings* unsafe_arena_release_settings();

  // .event_store.client.persistent_subscriptions.UpdateReq.StreamOptions stream = 4;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions& stream() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* release_stream();
  ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* mutable_stream();
  void set_allocated_stream(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* stream);
  private:
  const ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions& _internal_stream() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* stream);
  ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* unsafe_arena_release_stream();

  // .event_store.client.persistent_subscriptions.UpdateReq.AllOptions all = 5;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions& all() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* release_all();
  ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* mutable_all();
  void set_allocated_all(::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* all);
  private:
  const ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions& _internal_all() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* all);
  ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* unsafe_arena_release_all();

  void clear_stream_option();
  StreamOptionCase stream_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.UpdateReq.Options)
 private:
  class _Internal;
  void set_has_stream();
  void set_has_all();

  inline bool has_stream_option() const;
  inline void clear_has_stream_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  ::event_store::client::persistent_subscriptions::UpdateReq_Settings* settings_;
  union StreamOptionUnion {
    StreamOptionUnion() {}
    ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* stream_;
    ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* all_;
  } stream_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq_StreamOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions) */ {
 public:
  inline UpdateReq_StreamOptions() : UpdateReq_StreamOptions(nullptr) {};
  virtual ~UpdateReq_StreamOptions();

  UpdateReq_StreamOptions(const UpdateReq_StreamOptions& from);
  UpdateReq_StreamOptions(UpdateReq_StreamOptions&& from) noexcept
    : UpdateReq_StreamOptions() {
    *this = ::std::move(from);
  }

  inline UpdateReq_StreamOptions& operator=(const UpdateReq_StreamOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq_StreamOptions& operator=(UpdateReq_StreamOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq_StreamOptions& default_instance();

  enum RevisionOptionCase {
    kRevision = 2,
    kStart = 3,
    kEnd = 4,
    REVISION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq_StreamOptions* internal_default_instance() {
    return reinterpret_cast<const UpdateReq_StreamOptions*>(
               &_UpdateReq_StreamOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UpdateReq_StreamOptions& a, UpdateReq_StreamOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq_StreamOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq_StreamOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq_StreamOptions* New() const final {
    return CreateMaybeMessage<UpdateReq_StreamOptions>(nullptr);
  }

  UpdateReq_StreamOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq_StreamOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq_StreamOptions& from);
  void MergeFrom(const UpdateReq_StreamOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq_StreamOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.UpdateReq.StreamOptions";
  }
  protected:
  explicit UpdateReq_StreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
    kRevisionFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // uint64 revision = 2;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event_store.client.Empty start = 3;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::event_store::client::Empty& start() const;
  ::event_store::client::Empty* release_start();
  ::event_store::client::Empty* mutable_start();
  void set_allocated_start(::event_store::client::Empty* start);
  private:
  const ::event_store::client::Empty& _internal_start() const;
  ::event_store::client::Empty* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::event_store::client::Empty* start);
  ::event_store::client::Empty* unsafe_arena_release_start();

  // .event_store.client.Empty end = 4;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::event_store::client::Empty& end() const;
  ::event_store::client::Empty* release_end();
  ::event_store::client::Empty* mutable_end();
  void set_allocated_end(::event_store::client::Empty* end);
  private:
  const ::event_store::client::Empty& _internal_end() const;
  ::event_store::client::Empty* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::event_store::client::Empty* end);
  ::event_store::client::Empty* unsafe_arena_release_end();

  void clear_revision_option();
  RevisionOptionCase revision_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions)
 private:
  class _Internal;
  void set_has_revision();
  void set_has_start();
  void set_has_end();

  inline bool has_revision_option() const;
  inline void clear_has_revision_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  union RevisionOptionUnion {
    RevisionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
    ::event_store::client::Empty* start_;
    ::event_store::client::Empty* end_;
  } revision_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq_AllOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.UpdateReq.AllOptions) */ {
 public:
  inline UpdateReq_AllOptions() : UpdateReq_AllOptions(nullptr) {};
  virtual ~UpdateReq_AllOptions();

  UpdateReq_AllOptions(const UpdateReq_AllOptions& from);
  UpdateReq_AllOptions(UpdateReq_AllOptions&& from) noexcept
    : UpdateReq_AllOptions() {
    *this = ::std::move(from);
  }

  inline UpdateReq_AllOptions& operator=(const UpdateReq_AllOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq_AllOptions& operator=(UpdateReq_AllOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq_AllOptions& default_instance();

  enum AllOptionCase {
    kPosition = 1,
    kStart = 2,
    kEnd = 3,
    ALL_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq_AllOptions* internal_default_instance() {
    return reinterpret_cast<const UpdateReq_AllOptions*>(
               &_UpdateReq_AllOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UpdateReq_AllOptions& a, UpdateReq_AllOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq_AllOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq_AllOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq_AllOptions* New() const final {
    return CreateMaybeMessage<UpdateReq_AllOptions>(nullptr);
  }

  UpdateReq_AllOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq_AllOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq_AllOptions& from);
  void MergeFrom(const UpdateReq_AllOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq_AllOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.UpdateReq.AllOptions";
  }
  protected:
  explicit UpdateReq_AllOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // .event_store.client.persistent_subscriptions.UpdateReq.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::event_store::client::persistent_subscriptions::UpdateReq_Position& position() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_Position* release_position();
  ::event_store::client::persistent_subscriptions::UpdateReq_Position* mutable_position();
  void set_allocated_position(::event_store::client::persistent_subscriptions::UpdateReq_Position* position);
  private:
  const ::event_store::client::persistent_subscriptions::UpdateReq_Position& _internal_position() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::event_store::client::persistent_subscriptions::UpdateReq_Position* position);
  ::event_store::client::persistent_subscriptions::UpdateReq_Position* unsafe_arena_release_position();

  // .event_store.client.Empty start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::event_store::client::Empty& start() const;
  ::event_store::client::Empty* release_start();
  ::event_store::client::Empty* mutable_start();
  void set_allocated_start(::event_store::client::Empty* start);
  private:
  const ::event_store::client::Empty& _internal_start() const;
  ::event_store::client::Empty* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::event_store::client::Empty* start);
  ::event_store::client::Empty* unsafe_arena_release_start();

  // .event_store.client.Empty end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::event_store::client::Empty& end() const;
  ::event_store::client::Empty* release_end();
  ::event_store::client::Empty* mutable_end();
  void set_allocated_end(::event_store::client::Empty* end);
  private:
  const ::event_store::client::Empty& _internal_end() const;
  ::event_store::client::Empty* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::event_store::client::Empty* end);
  ::event_store::client::Empty* unsafe_arena_release_end();

  void clear_all_option();
  AllOptionCase all_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.UpdateReq.AllOptions)
 private:
  class _Internal;
  void set_has_position();
  void set_has_start();
  void set_has_end();

  inline bool has_all_option() const;
  inline void clear_has_all_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AllOptionUnion {
    AllOptionUnion() {}
    ::event_store::client::persistent_subscriptions::UpdateReq_Position* position_;
    ::event_store::client::Empty* start_;
    ::event_store::client::Empty* end_;
  } all_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq_Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.UpdateReq.Position) */ {
 public:
  inline UpdateReq_Position() : UpdateReq_Position(nullptr) {};
  virtual ~UpdateReq_Position();

  UpdateReq_Position(const UpdateReq_Position& from);
  UpdateReq_Position(UpdateReq_Position&& from) noexcept
    : UpdateReq_Position() {
    *this = ::std::move(from);
  }

  inline UpdateReq_Position& operator=(const UpdateReq_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq_Position& operator=(UpdateReq_Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq_Position* internal_default_instance() {
    return reinterpret_cast<const UpdateReq_Position*>(
               &_UpdateReq_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdateReq_Position& a, UpdateReq_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq_Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq_Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq_Position* New() const final {
    return CreateMaybeMessage<UpdateReq_Position>(nullptr);
  }

  UpdateReq_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq_Position& from);
  void MergeFrom(const UpdateReq_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.UpdateReq.Position";
  }
  protected:
  explicit UpdateReq_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
  };
  // uint64 commit_position = 1;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 2;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.UpdateReq.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq_Settings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.UpdateReq.Settings) */ {
 public:
  inline UpdateReq_Settings() : UpdateReq_Settings(nullptr) {};
  virtual ~UpdateReq_Settings();

  UpdateReq_Settings(const UpdateReq_Settings& from);
  UpdateReq_Settings(UpdateReq_Settings&& from) noexcept
    : UpdateReq_Settings() {
    *this = ::std::move(from);
  }

  inline UpdateReq_Settings& operator=(const UpdateReq_Settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq_Settings& operator=(UpdateReq_Settings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq_Settings& default_instance();

  enum MessageTimeoutCase {
    kMessageTimeoutTicks = 4,
    kMessageTimeoutMs = 14,
    MESSAGE_TIMEOUT_NOT_SET = 0,
  };

  enum CheckpointAfterCase {
    kCheckpointAfterTicks = 6,
    kCheckpointAfterMs = 15,
    CHECKPOINT_AFTER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq_Settings* internal_default_instance() {
    return reinterpret_cast<const UpdateReq_Settings*>(
               &_UpdateReq_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdateReq_Settings& a, UpdateReq_Settings& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq_Settings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq_Settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq_Settings* New() const final {
    return CreateMaybeMessage<UpdateReq_Settings>(nullptr);
  }

  UpdateReq_Settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq_Settings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq_Settings& from);
  void MergeFrom(const UpdateReq_Settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq_Settings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.UpdateReq.Settings";
  }
  protected:
  explicit UpdateReq_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionFieldNumber = 2,
    kResolveLinksFieldNumber = 1,
    kExtraStatisticsFieldNumber = 3,
    kMaxRetryCountFieldNumber = 5,
    kMinCheckpointCountFieldNumber = 7,
    kMaxCheckpointCountFieldNumber = 8,
    kMaxSubscriberCountFieldNumber = 9,
    kLiveBufferSizeFieldNumber = 10,
    kReadBatchSizeFieldNumber = 11,
    kHistoryBufferSizeFieldNumber = 12,
    kNamedConsumerStrategyFieldNumber = 13,
    kMessageTimeoutTicksFieldNumber = 4,
    kMessageTimeoutMsFieldNumber = 14,
    kCheckpointAfterTicksFieldNumber = 6,
    kCheckpointAfterMsFieldNumber = 15,
  };
  // uint64 revision = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_revision();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 revision() const;
  PROTOBUF_DEPRECATED void set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool resolve_links = 1;
  void clear_resolve_links();
  bool resolve_links() const;
  void set_resolve_links(bool value);
  private:
  bool _internal_resolve_links() const;
  void _internal_set_resolve_links(bool value);
  public:

  // bool extra_statistics = 3;
  void clear_extra_statistics();
  bool extra_statistics() const;
  void set_extra_statistics(bool value);
  private:
  bool _internal_extra_statistics() const;
  void _internal_set_extra_statistics(bool value);
  public:

  // int32 max_retry_count = 5;
  void clear_max_retry_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count() const;
  void set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_retry_count() const;
  void _internal_set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_checkpoint_count = 7;
  void clear_min_checkpoint_count();
  ::PROTOBUF_NAMESPACE_ID::int32 min_checkpoint_count() const;
  void set_min_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_checkpoint_count() const;
  void _internal_set_min_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_checkpoint_count = 8;
  void clear_max_checkpoint_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_checkpoint_count() const;
  void set_max_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_checkpoint_count() const;
  void _internal_set_max_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_subscriber_count = 9;
  void clear_max_subscriber_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_subscriber_count() const;
  void set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_subscriber_count() const;
  void _internal_set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 live_buffer_size = 10;
  void clear_live_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size() const;
  void set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_live_buffer_size() const;
  void _internal_set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 read_batch_size = 11;
  void clear_read_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size() const;
  void set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_read_batch_size() const;
  void _internal_set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 history_buffer_size = 12;
  void clear_history_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 history_buffer_size() const;
  void set_history_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_history_buffer_size() const;
  void _internal_set_history_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy named_consumer_strategy = 13;
  void clear_named_consumer_strategy();
  ::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy named_consumer_strategy() const;
  void set_named_consumer_strategy(::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy value);
  private:
  ::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy _internal_named_consumer_strategy() const;
  void _internal_set_named_consumer_strategy(::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy value);
  public:

  // int64 message_timeout_ticks = 4;
  private:
  bool _internal_has_message_timeout_ticks() const;
  public:
  void clear_message_timeout_ticks();
  ::PROTOBUF_NAMESPACE_ID::int64 message_timeout_ticks() const;
  void set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_timeout_ticks() const;
  void _internal_set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 message_timeout_ms = 14;
  private:
  bool _internal_has_message_timeout_ms() const;
  public:
  void clear_message_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_ms() const;
  void set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_timeout_ms() const;
  void _internal_set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 checkpoint_after_ticks = 6;
  private:
  bool _internal_has_checkpoint_after_ticks() const;
  public:
  void clear_checkpoint_after_ticks();
  ::PROTOBUF_NAMESPACE_ID::int64 checkpoint_after_ticks() const;
  void set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_checkpoint_after_ticks() const;
  void _internal_set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 checkpoint_after_ms = 15;
  private:
  bool _internal_has_checkpoint_after_ms() const;
  public:
  void clear_checkpoint_after_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_ms() const;
  void set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checkpoint_after_ms() const;
  void _internal_set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_message_timeout();
  MessageTimeoutCase message_timeout_case() const;
  void clear_checkpoint_after();
  CheckpointAfterCase checkpoint_after_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.UpdateReq.Settings)
 private:
  class _Internal;
  void set_has_message_timeout_ticks();
  void set_has_message_timeout_ms();
  void set_has_checkpoint_after_ticks();
  void set_has_checkpoint_after_ms();

  inline bool has_message_timeout() const;
  inline void clear_has_message_timeout();

  inline bool has_checkpoint_after() const;
  inline void clear_has_checkpoint_after();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
  bool resolve_links_;
  bool extra_statistics_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_checkpoint_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_checkpoint_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_subscriber_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 history_buffer_size_;
  int named_consumer_strategy_;
  union MessageTimeoutUnion {
    MessageTimeoutUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 message_timeout_ticks_;
    ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_ms_;
  } message_timeout_;
  union CheckpointAfterUnion {
    CheckpointAfterUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 checkpoint_after_ticks_;
    ::PROTOBUF_NAMESPACE_ID::int32 checkpoint_after_ms_;
  } checkpoint_after_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.UpdateReq) */ {
 public:
  inline UpdateReq() : UpdateReq(nullptr) {};
  virtual ~UpdateReq();

  UpdateReq(const UpdateReq& from);
  UpdateReq(UpdateReq&& from) noexcept
    : UpdateReq() {
    *this = ::std::move(from);
  }

  inline UpdateReq& operator=(const UpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq& operator=(UpdateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq* internal_default_instance() {
    return reinterpret_cast<const UpdateReq*>(
               &_UpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UpdateReq& a, UpdateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq* New() const final {
    return CreateMaybeMessage<UpdateReq>(nullptr);
  }

  UpdateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq& from);
  void MergeFrom(const UpdateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.UpdateReq";
  }
  protected:
  explicit UpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateReq_Options Options;
  typedef UpdateReq_StreamOptions StreamOptions;
  typedef UpdateReq_AllOptions AllOptions;
  typedef UpdateReq_Position Position;
  typedef UpdateReq_Settings Settings;

  typedef UpdateReq_ConsumerStrategy ConsumerStrategy;
  static constexpr ConsumerStrategy DispatchToSingle =
    UpdateReq_ConsumerStrategy_DispatchToSingle;
  static constexpr ConsumerStrategy RoundRobin =
    UpdateReq_ConsumerStrategy_RoundRobin;
  static constexpr ConsumerStrategy Pinned =
    UpdateReq_ConsumerStrategy_Pinned;
  static inline bool ConsumerStrategy_IsValid(int value) {
    return UpdateReq_ConsumerStrategy_IsValid(value);
  }
  static constexpr ConsumerStrategy ConsumerStrategy_MIN =
    UpdateReq_ConsumerStrategy_ConsumerStrategy_MIN;
  static constexpr ConsumerStrategy ConsumerStrategy_MAX =
    UpdateReq_ConsumerStrategy_ConsumerStrategy_MAX;
  static constexpr int ConsumerStrategy_ARRAYSIZE =
    UpdateReq_ConsumerStrategy_ConsumerStrategy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConsumerStrategy_descriptor() {
    return UpdateReq_ConsumerStrategy_descriptor();
  }
  template<typename T>
  static inline const std::string& ConsumerStrategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConsumerStrategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConsumerStrategy_Name.");
    return UpdateReq_ConsumerStrategy_Name(enum_t_value);
  }
  static inline bool ConsumerStrategy_Parse(const std::string& name,
      ConsumerStrategy* value) {
    return UpdateReq_ConsumerStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.persistent_subscriptions.UpdateReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::persistent_subscriptions::UpdateReq_Options& options() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_Options* release_options();
  ::event_store::client::persistent_subscriptions::UpdateReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::persistent_subscriptions::UpdateReq_Options* options);
  private:
  const ::event_store::client::persistent_subscriptions::UpdateReq_Options& _internal_options() const;
  ::event_store::client::persistent_subscriptions::UpdateReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::persistent_subscriptions::UpdateReq_Options* options);
  ::event_store::client::persistent_subscriptions::UpdateReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.UpdateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::persistent_subscriptions::UpdateReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class UpdateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.UpdateResp) */ {
 public:
  inline UpdateResp() : UpdateResp(nullptr) {};
  virtual ~UpdateResp();

  UpdateResp(const UpdateResp& from);
  UpdateResp(UpdateResp&& from) noexcept
    : UpdateResp() {
    *this = ::std::move(from);
  }

  inline UpdateResp& operator=(const UpdateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResp& operator=(UpdateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateResp* internal_default_instance() {
    return reinterpret_cast<const UpdateResp*>(
               &_UpdateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UpdateResp& a, UpdateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResp* New() const final {
    return CreateMaybeMessage<UpdateResp>(nullptr);
  }

  UpdateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResp& from);
  void MergeFrom(const UpdateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.UpdateResp";
  }
  protected:
  explicit UpdateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.UpdateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.DeleteReq.Options) */ {
 public:
  inline DeleteReq_Options() : DeleteReq_Options(nullptr) {};
  virtual ~DeleteReq_Options();

  DeleteReq_Options(const DeleteReq_Options& from);
  DeleteReq_Options(DeleteReq_Options&& from) noexcept
    : DeleteReq_Options() {
    *this = ::std::move(from);
  }

  inline DeleteReq_Options& operator=(const DeleteReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq_Options& operator=(DeleteReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq_Options& default_instance();

  enum StreamOptionCase {
    kStreamIdentifier = 1,
    kAll = 3,
    STREAM_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReq_Options* internal_default_instance() {
    return reinterpret_cast<const DeleteReq_Options*>(
               &_DeleteReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeleteReq_Options& a, DeleteReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq_Options* New() const final {
    return CreateMaybeMessage<DeleteReq_Options>(nullptr);
  }

  DeleteReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq_Options& from);
  void MergeFrom(const DeleteReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.DeleteReq.Options";
  }
  protected:
  explicit DeleteReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kStreamIdentifierFieldNumber = 1,
    kAllFieldNumber = 3,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_name(
      std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // .event_store.client.Empty all = 3;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::Empty& all() const;
  ::event_store::client::Empty* release_all();
  ::event_store::client::Empty* mutable_all();
  void set_allocated_all(::event_store::client::Empty* all);
  private:
  const ::event_store::client::Empty& _internal_all() const;
  ::event_store::client::Empty* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::Empty* all);
  ::event_store::client::Empty* unsafe_arena_release_all();

  void clear_stream_option();
  StreamOptionCase stream_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.DeleteReq.Options)
 private:
  class _Internal;
  void set_has_stream_identifier();
  void set_has_all();

  inline bool has_stream_option() const;
  inline void clear_has_stream_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  union StreamOptionUnion {
    StreamOptionUnion() {}
    ::event_store::client::StreamIdentifier* stream_identifier_;
    ::event_store::client::Empty* all_;
  } stream_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.DeleteReq) */ {
 public:
  inline DeleteReq() : DeleteReq(nullptr) {};
  virtual ~DeleteReq();

  DeleteReq(const DeleteReq& from);
  DeleteReq(DeleteReq&& from) noexcept
    : DeleteReq() {
    *this = ::std::move(from);
  }

  inline DeleteReq& operator=(const DeleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq& operator=(DeleteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReq* internal_default_instance() {
    return reinterpret_cast<const DeleteReq*>(
               &_DeleteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DeleteReq& a, DeleteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq* New() const final {
    return CreateMaybeMessage<DeleteReq>(nullptr);
  }

  DeleteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq& from);
  void MergeFrom(const DeleteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.DeleteReq";
  }
  protected:
  explicit DeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.persistent_subscriptions.DeleteReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::persistent_subscriptions::DeleteReq_Options& options() const;
  ::event_store::client::persistent_subscriptions::DeleteReq_Options* release_options();
  ::event_store::client::persistent_subscriptions::DeleteReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::persistent_subscriptions::DeleteReq_Options* options);
  private:
  const ::event_store::client::persistent_subscriptions::DeleteReq_Options& _internal_options() const;
  ::event_store::client::persistent_subscriptions::DeleteReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::persistent_subscriptions::DeleteReq_Options* options);
  ::event_store::client::persistent_subscriptions::DeleteReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.DeleteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::persistent_subscriptions::DeleteReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.DeleteResp) */ {
 public:
  inline DeleteResp() : DeleteResp(nullptr) {};
  virtual ~DeleteResp();

  DeleteResp(const DeleteResp& from);
  DeleteResp(DeleteResp&& from) noexcept
    : DeleteResp() {
    *this = ::std::move(from);
  }

  inline DeleteResp& operator=(const DeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp& operator=(DeleteResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp* internal_default_instance() {
    return reinterpret_cast<const DeleteResp*>(
               &_DeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeleteResp& a, DeleteResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp* New() const final {
    return CreateMaybeMessage<DeleteResp>(nullptr);
  }

  DeleteResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp& from);
  void MergeFrom(const DeleteResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.DeleteResp";
  }
  protected:
  explicit DeleteResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.DeleteResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class GetInfoReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.GetInfoReq.Options) */ {
 public:
  inline GetInfoReq_Options() : GetInfoReq_Options(nullptr) {};
  virtual ~GetInfoReq_Options();

  GetInfoReq_Options(const GetInfoReq_Options& from);
  GetInfoReq_Options(GetInfoReq_Options&& from) noexcept
    : GetInfoReq_Options() {
    *this = ::std::move(from);
  }

  inline GetInfoReq_Options& operator=(const GetInfoReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoReq_Options& operator=(GetInfoReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoReq_Options& default_instance();

  enum StreamOptionCase {
    kStreamIdentifier = 1,
    kAll = 2,
    STREAM_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoReq_Options* internal_default_instance() {
    return reinterpret_cast<const GetInfoReq_Options*>(
               &_GetInfoReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetInfoReq_Options& a, GetInfoReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfoReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoReq_Options* New() const final {
    return CreateMaybeMessage<GetInfoReq_Options>(nullptr);
  }

  GetInfoReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoReq_Options& from);
  void MergeFrom(const GetInfoReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.GetInfoReq.Options";
  }
  protected:
  explicit GetInfoReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 3,
    kStreamIdentifierFieldNumber = 1,
    kAllFieldNumber = 2,
  };
  // string group_name = 3;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_name(
      std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // .event_store.client.Empty all = 2;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::Empty& all() const;
  ::event_store::client::Empty* release_all();
  ::event_store::client::Empty* mutable_all();
  void set_allocated_all(::event_store::client::Empty* all);
  private:
  const ::event_store::client::Empty& _internal_all() const;
  ::event_store::client::Empty* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::Empty* all);
  ::event_store::client::Empty* unsafe_arena_release_all();

  void clear_stream_option();
  StreamOptionCase stream_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.GetInfoReq.Options)
 private:
  class _Internal;
  void set_has_stream_identifier();
  void set_has_all();

  inline bool has_stream_option() const;
  inline void clear_has_stream_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  union StreamOptionUnion {
    StreamOptionUnion() {}
    ::event_store::client::StreamIdentifier* stream_identifier_;
    ::event_store::client::Empty* all_;
  } stream_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class GetInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.GetInfoReq) */ {
 public:
  inline GetInfoReq() : GetInfoReq(nullptr) {};
  virtual ~GetInfoReq();

  GetInfoReq(const GetInfoReq& from);
  GetInfoReq(GetInfoReq&& from) noexcept
    : GetInfoReq() {
    *this = ::std::move(from);
  }

  inline GetInfoReq& operator=(const GetInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoReq& operator=(GetInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetInfoReq*>(
               &_GetInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetInfoReq& a, GetInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoReq* New() const final {
    return CreateMaybeMessage<GetInfoReq>(nullptr);
  }

  GetInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoReq& from);
  void MergeFrom(const GetInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.GetInfoReq";
  }
  protected:
  explicit GetInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetInfoReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.persistent_subscriptions.GetInfoReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::persistent_subscriptions::GetInfoReq_Options& options() const;
  ::event_store::client::persistent_subscriptions::GetInfoReq_Options* release_options();
  ::event_store::client::persistent_subscriptions::GetInfoReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::persistent_subscriptions::GetInfoReq_Options* options);
  private:
  const ::event_store::client::persistent_subscriptions::GetInfoReq_Options& _internal_options() const;
  ::event_store::client::persistent_subscriptions::GetInfoReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::persistent_subscriptions::GetInfoReq_Options* options);
  ::event_store::client::persistent_subscriptions::GetInfoReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.GetInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::persistent_subscriptions::GetInfoReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class GetInfoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.GetInfoResp) */ {
 public:
  inline GetInfoResp() : GetInfoResp(nullptr) {};
  virtual ~GetInfoResp();

  GetInfoResp(const GetInfoResp& from);
  GetInfoResp(GetInfoResp&& from) noexcept
    : GetInfoResp() {
    *this = ::std::move(from);
  }

  inline GetInfoResp& operator=(const GetInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoResp& operator=(GetInfoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoResp* internal_default_instance() {
    return reinterpret_cast<const GetInfoResp*>(
               &_GetInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetInfoResp& a, GetInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResp* New() const final {
    return CreateMaybeMessage<GetInfoResp>(nullptr);
  }

  GetInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoResp& from);
  void MergeFrom(const GetInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.GetInfoResp";
  }
  protected:
  explicit GetInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionInfoFieldNumber = 1,
  };
  // .event_store.client.persistent_subscriptions.SubscriptionInfo subscription_info = 1;
  bool has_subscription_info() const;
  private:
  bool _internal_has_subscription_info() const;
  public:
  void clear_subscription_info();
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo& subscription_info() const;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* release_subscription_info();
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* mutable_subscription_info();
  void set_allocated_subscription_info(::event_store::client::persistent_subscriptions::SubscriptionInfo* subscription_info);
  private:
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo& _internal_subscription_info() const;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* _internal_mutable_subscription_info();
  public:
  void unsafe_arena_set_allocated_subscription_info(
      ::event_store::client::persistent_subscriptions::SubscriptionInfo* subscription_info);
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* unsafe_arena_release_subscription_info();

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.GetInfoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* subscription_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionInfo_ConnectionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo) */ {
 public:
  inline SubscriptionInfo_ConnectionInfo() : SubscriptionInfo_ConnectionInfo(nullptr) {};
  virtual ~SubscriptionInfo_ConnectionInfo();

  SubscriptionInfo_ConnectionInfo(const SubscriptionInfo_ConnectionInfo& from);
  SubscriptionInfo_ConnectionInfo(SubscriptionInfo_ConnectionInfo&& from) noexcept
    : SubscriptionInfo_ConnectionInfo() {
    *this = ::std::move(from);
  }

  inline SubscriptionInfo_ConnectionInfo& operator=(const SubscriptionInfo_ConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionInfo_ConnectionInfo& operator=(SubscriptionInfo_ConnectionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionInfo_ConnectionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionInfo_ConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const SubscriptionInfo_ConnectionInfo*>(
               &_SubscriptionInfo_ConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SubscriptionInfo_ConnectionInfo& a, SubscriptionInfo_ConnectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionInfo_ConnectionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionInfo_ConnectionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionInfo_ConnectionInfo* New() const final {
    return CreateMaybeMessage<SubscriptionInfo_ConnectionInfo>(nullptr);
  }

  SubscriptionInfo_ConnectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionInfo_ConnectionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionInfo_ConnectionInfo& from);
  void MergeFrom(const SubscriptionInfo_ConnectionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionInfo_ConnectionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo";
  }
  protected:
  explicit SubscriptionInfo_ConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObservedMeasurementsFieldNumber = 6,
    kFromFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kConnectionNameFieldNumber = 9,
    kTotalItemsFieldNumber = 4,
    kCountSinceLastMeasurementFieldNumber = 5,
    kAverageItemsPerSecondFieldNumber = 3,
    kAvailableSlotsFieldNumber = 7,
    kInFlightMessagesFieldNumber = 8,
  };
  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement observed_measurements = 6;
  int observed_measurements_size() const;
  private:
  int _internal_observed_measurements_size() const;
  public:
  void clear_observed_measurements();
  ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement* mutable_observed_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement >*
      mutable_observed_measurements();
  private:
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement& _internal_observed_measurements(int index) const;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement* _internal_add_observed_measurements();
  public:
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement& observed_measurements(int index) const;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement* add_observed_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement >&
      observed_measurements() const;

  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_from();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_from(
      std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string connection_name = 9;
  void clear_connection_name();
  const std::string& connection_name() const;
  void set_connection_name(const std::string& value);
  void set_connection_name(std::string&& value);
  void set_connection_name(const char* value);
  void set_connection_name(const char* value, size_t size);
  std::string* mutable_connection_name();
  std::string* release_connection_name();
  void set_allocated_connection_name(std::string* connection_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_connection_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_connection_name(
      std::string* connection_name);
  private:
  const std::string& _internal_connection_name() const;
  void _internal_set_connection_name(const std::string& value);
  std::string* _internal_mutable_connection_name();
  public:

  // int64 total_items = 4;
  void clear_total_items();
  ::PROTOBUF_NAMESPACE_ID::int64 total_items() const;
  void set_total_items(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_items() const;
  void _internal_set_total_items(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 count_since_last_measurement = 5;
  void clear_count_since_last_measurement();
  ::PROTOBUF_NAMESPACE_ID::int64 count_since_last_measurement() const;
  void set_count_since_last_measurement(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count_since_last_measurement() const;
  void _internal_set_count_since_last_measurement(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 average_items_per_second = 3;
  void clear_average_items_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 average_items_per_second() const;
  void set_average_items_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_items_per_second() const;
  void _internal_set_average_items_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 available_slots = 7;
  void clear_available_slots();
  ::PROTOBUF_NAMESPACE_ID::int32 available_slots() const;
  void set_available_slots(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_available_slots() const;
  void _internal_set_available_slots(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 in_flight_messages = 8;
  void clear_in_flight_messages();
  ::PROTOBUF_NAMESPACE_ID::int32 in_flight_messages() const;
  void set_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_flight_messages() const;
  void _internal_set_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement > observed_measurements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_items_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_since_last_measurement_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_items_per_second_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_slots_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_flight_messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionInfo_Measurement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement) */ {
 public:
  inline SubscriptionInfo_Measurement() : SubscriptionInfo_Measurement(nullptr) {};
  virtual ~SubscriptionInfo_Measurement();

  SubscriptionInfo_Measurement(const SubscriptionInfo_Measurement& from);
  SubscriptionInfo_Measurement(SubscriptionInfo_Measurement&& from) noexcept
    : SubscriptionInfo_Measurement() {
    *this = ::std::move(from);
  }

  inline SubscriptionInfo_Measurement& operator=(const SubscriptionInfo_Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionInfo_Measurement& operator=(SubscriptionInfo_Measurement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionInfo_Measurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionInfo_Measurement* internal_default_instance() {
    return reinterpret_cast<const SubscriptionInfo_Measurement*>(
               &_SubscriptionInfo_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SubscriptionInfo_Measurement& a, SubscriptionInfo_Measurement& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionInfo_Measurement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionInfo_Measurement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionInfo_Measurement* New() const final {
    return CreateMaybeMessage<SubscriptionInfo_Measurement>(nullptr);
  }

  SubscriptionInfo_Measurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionInfo_Measurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionInfo_Measurement& from);
  void MergeFrom(const SubscriptionInfo_Measurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionInfo_Measurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement";
  }
  protected:
  explicit SubscriptionInfo_Measurement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.SubscriptionInfo) */ {
 public:
  inline SubscriptionInfo() : SubscriptionInfo(nullptr) {};
  virtual ~SubscriptionInfo();

  SubscriptionInfo(const SubscriptionInfo& from);
  SubscriptionInfo(SubscriptionInfo&& from) noexcept
    : SubscriptionInfo() {
    *this = ::std::move(from);
  }

  inline SubscriptionInfo& operator=(const SubscriptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionInfo& operator=(SubscriptionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriptionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionInfo* internal_default_instance() {
    return reinterpret_cast<const SubscriptionInfo*>(
               &_SubscriptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SubscriptionInfo& a, SubscriptionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionInfo* New() const final {
    return CreateMaybeMessage<SubscriptionInfo>(nullptr);
  }

  SubscriptionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriptionInfo& from);
  void MergeFrom(const SubscriptionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.SubscriptionInfo";
  }
  protected:
  explicit SubscriptionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubscriptionInfo_ConnectionInfo ConnectionInfo;
  typedef SubscriptionInfo_Measurement Measurement;

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 4,
    kEventSourceFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kStatusFieldNumber = 3,
    kLastCheckpointedEventPositionFieldNumber = 8,
    kLastKnownEventPositionFieldNumber = 9,
    kStartFromFieldNumber = 11,
    kNamedConsumerStrategyFieldNumber = 26,
    kTotalItemsFieldNumber = 6,
    kCountSinceLastMeasurementFieldNumber = 7,
    kAveragePerSecondFieldNumber = 5,
    kResolveLinkTosFieldNumber = 10,
    kExtraStatisticsFieldNumber = 13,
    kMessageTimeoutMillisecondsFieldNumber = 12,
    kMaxRetryCountFieldNumber = 14,
    kLiveBufferSizeFieldNumber = 15,
    kBufferSizeFieldNumber = 16,
    kReadBatchSizeFieldNumber = 17,
    kCheckPointAfterMillisecondsFieldNumber = 18,
    kMinCheckPointCountFieldNumber = 19,
    kMaxCheckPointCountFieldNumber = 20,
    kLiveBufferCountFieldNumber = 22,
    kReadBufferCountFieldNumber = 21,
    kRetryBufferCountFieldNumber = 23,
    kTotalInFlightMessagesFieldNumber = 24,
    kOutstandingMessagesCountFieldNumber = 25,
    kParkedMessageCountFieldNumber = 28,
    kMaxSubscriberCountFieldNumber = 27,
  };
  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo connections = 4;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo >*
      mutable_connections();
  private:
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo& _internal_connections(int index) const;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo* _internal_add_connections();
  public:
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo& connections(int index) const;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo >&
      connections() const;

  // string event_source = 1;
  void clear_event_source();
  const std::string& event_source() const;
  void set_event_source(const std::string& value);
  void set_event_source(std::string&& value);
  void set_event_source(const char* value);
  void set_event_source(const char* value, size_t size);
  std::string* mutable_event_source();
  std::string* release_event_source();
  void set_allocated_event_source(std::string* event_source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_event_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_source(
      std::string* event_source);
  private:
  const std::string& _internal_event_source() const;
  void _internal_set_event_source(const std::string& value);
  std::string* _internal_mutable_event_source();
  public:

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_name(
      std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string status = 3;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string last_checkpointed_event_position = 8;
  void clear_last_checkpointed_event_position();
  const std::string& last_checkpointed_event_position() const;
  void set_last_checkpointed_event_position(const std::string& value);
  void set_last_checkpointed_event_position(std::string&& value);
  void set_last_checkpointed_event_position(const char* value);
  void set_last_checkpointed_event_position(const char* value, size_t size);
  std::string* mutable_last_checkpointed_event_position();
  std::string* release_last_checkpointed_event_position();
  void set_allocated_last_checkpointed_event_position(std::string* last_checkpointed_event_position);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_checkpointed_event_position();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_checkpointed_event_position(
      std::string* last_checkpointed_event_position);
  private:
  const std::string& _internal_last_checkpointed_event_position() const;
  void _internal_set_last_checkpointed_event_position(const std::string& value);
  std::string* _internal_mutable_last_checkpointed_event_position();
  public:

  // string last_known_event_position = 9;
  void clear_last_known_event_position();
  const std::string& last_known_event_position() const;
  void set_last_known_event_position(const std::string& value);
  void set_last_known_event_position(std::string&& value);
  void set_last_known_event_position(const char* value);
  void set_last_known_event_position(const char* value, size_t size);
  std::string* mutable_last_known_event_position();
  std::string* release_last_known_event_position();
  void set_allocated_last_known_event_position(std::string* last_known_event_position);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_known_event_position();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_known_event_position(
      std::string* last_known_event_position);
  private:
  const std::string& _internal_last_known_event_position() const;
  void _internal_set_last_known_event_position(const std::string& value);
  std::string* _internal_mutable_last_known_event_position();
  public:

  // string start_from = 11;
  void clear_start_from();
  const std::string& start_from() const;
  void set_start_from(const std::string& value);
  void set_start_from(std::string&& value);
  void set_start_from(const char* value);
  void set_start_from(const char* value, size_t size);
  std::string* mutable_start_from();
  std::string* release_start_from();
  void set_allocated_start_from(std::string* start_from);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_from();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_from(
      std::string* start_from);
  private:
  const std::string& _internal_start_from() const;
  void _internal_set_start_from(const std::string& value);
  std::string* _internal_mutable_start_from();
  public:

  // string named_consumer_strategy = 26;
  void clear_named_consumer_strategy();
  const std::string& named_consumer_strategy() const;
  void set_named_consumer_strategy(const std::string& value);
  void set_named_consumer_strategy(std::string&& value);
  void set_named_consumer_strategy(const char* value);
  void set_named_consumer_strategy(const char* value, size_t size);
  std::string* mutable_named_consumer_strategy();
  std::string* release_named_consumer_strategy();
  void set_allocated_named_consumer_strategy(std::string* named_consumer_strategy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_named_consumer_strategy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_named_consumer_strategy(
      std::string* named_consumer_strategy);
  private:
  const std::string& _internal_named_consumer_strategy() const;
  void _internal_set_named_consumer_strategy(const std::string& value);
  std::string* _internal_mutable_named_consumer_strategy();
  public:

  // int64 total_items = 6;
  void clear_total_items();
  ::PROTOBUF_NAMESPACE_ID::int64 total_items() const;
  void set_total_items(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_items() const;
  void _internal_set_total_items(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 count_since_last_measurement = 7;
  void clear_count_since_last_measurement();
  ::PROTOBUF_NAMESPACE_ID::int64 count_since_last_measurement() const;
  void set_count_since_last_measurement(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count_since_last_measurement() const;
  void _internal_set_count_since_last_measurement(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 average_per_second = 5;
  void clear_average_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 average_per_second() const;
  void set_average_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_per_second() const;
  void _internal_set_average_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool resolve_link_tos = 10;
  void clear_resolve_link_tos();
  bool resolve_link_tos() const;
  void set_resolve_link_tos(bool value);
  private:
  bool _internal_resolve_link_tos() const;
  void _internal_set_resolve_link_tos(bool value);
  public:

  // bool extra_statistics = 13;
  void clear_extra_statistics();
  bool extra_statistics() const;
  void set_extra_statistics(bool value);
  private:
  bool _internal_extra_statistics() const;
  void _internal_set_extra_statistics(bool value);
  public:

  // int32 message_timeout_milliseconds = 12;
  void clear_message_timeout_milliseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_milliseconds() const;
  void set_message_timeout_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_timeout_milliseconds() const;
  void _internal_set_message_timeout_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_retry_count = 14;
  void clear_max_retry_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count() const;
  void set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_retry_count() const;
  void _internal_set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 live_buffer_size = 15;
  void clear_live_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size() const;
  void set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_live_buffer_size() const;
  void _internal_set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buffer_size = 16;
  void clear_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size() const;
  void set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer_size() const;
  void _internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 read_batch_size = 17;
  void clear_read_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size() const;
  void set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_read_batch_size() const;
  void _internal_set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 check_point_after_milliseconds = 18;
  void clear_check_point_after_milliseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 check_point_after_milliseconds() const;
  void set_check_point_after_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_check_point_after_milliseconds() const;
  void _internal_set_check_point_after_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_check_point_count = 19;
  void clear_min_check_point_count();
  ::PROTOBUF_NAMESPACE_ID::int32 min_check_point_count() const;
  void set_min_check_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_check_point_count() const;
  void _internal_set_min_check_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_check_point_count = 20;
  void clear_max_check_point_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_check_point_count() const;
  void set_max_check_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_check_point_count() const;
  void _internal_set_max_check_point_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 live_buffer_count = 22;
  void clear_live_buffer_count();
  ::PROTOBUF_NAMESPACE_ID::int64 live_buffer_count() const;
  void set_live_buffer_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_live_buffer_count() const;
  void _internal_set_live_buffer_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 read_buffer_count = 21;
  void clear_read_buffer_count();
  ::PROTOBUF_NAMESPACE_ID::int32 read_buffer_count() const;
  void set_read_buffer_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_read_buffer_count() const;
  void _internal_set_read_buffer_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 retry_buffer_count = 23;
  void clear_retry_buffer_count();
  ::PROTOBUF_NAMESPACE_ID::int32 retry_buffer_count() const;
  void set_retry_buffer_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retry_buffer_count() const;
  void _internal_set_retry_buffer_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_in_flight_messages = 24;
  void clear_total_in_flight_messages();
  ::PROTOBUF_NAMESPACE_ID::int32 total_in_flight_messages() const;
  void set_total_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_in_flight_messages() const;
  void _internal_set_total_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 outstanding_messages_count = 25;
  void clear_outstanding_messages_count();
  ::PROTOBUF_NAMESPACE_ID::int32 outstanding_messages_count() const;
  void set_outstanding_messages_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outstanding_messages_count() const;
  void _internal_set_outstanding_messages_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 parked_message_count = 28;
  void clear_parked_message_count();
  ::PROTOBUF_NAMESPACE_ID::int64 parked_message_count() const;
  void set_parked_message_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_parked_message_count() const;
  void _internal_set_parked_message_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 max_subscriber_count = 27;
  void clear_max_subscriber_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_subscriber_count() const;
  void set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_subscriber_count() const;
  void _internal_set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.SubscriptionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo > connections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_checkpointed_event_position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_known_event_position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr named_consumer_strategy_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_items_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_since_last_measurement_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_per_second_;
  bool resolve_link_tos_;
  bool extra_statistics_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_timeout_milliseconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_retry_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 live_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 check_point_after_milliseconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_check_point_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_check_point_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 live_buffer_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_buffer_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 retry_buffer_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_in_flight_messages_;
  ::PROTOBUF_NAMESPACE_ID::int32 outstanding_messages_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 parked_message_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_subscriber_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReplayParkedReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReplayParkedReq.Options) */ {
 public:
  inline ReplayParkedReq_Options() : ReplayParkedReq_Options(nullptr) {};
  virtual ~ReplayParkedReq_Options();

  ReplayParkedReq_Options(const ReplayParkedReq_Options& from);
  ReplayParkedReq_Options(ReplayParkedReq_Options&& from) noexcept
    : ReplayParkedReq_Options() {
    *this = ::std::move(from);
  }

  inline ReplayParkedReq_Options& operator=(const ReplayParkedReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayParkedReq_Options& operator=(ReplayParkedReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayParkedReq_Options& default_instance();

  enum StreamOptionCase {
    kStreamIdentifier = 2,
    kAll = 3,
    STREAM_OPTION_NOT_SET = 0,
  };

  enum StopAtOptionCase {
    kStopAt = 4,
    kNoLimit = 5,
    STOP_AT_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplayParkedReq_Options* internal_default_instance() {
    return reinterpret_cast<const ReplayParkedReq_Options*>(
               &_ReplayParkedReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ReplayParkedReq_Options& a, ReplayParkedReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayParkedReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayParkedReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayParkedReq_Options* New() const final {
    return CreateMaybeMessage<ReplayParkedReq_Options>(nullptr);
  }

  ReplayParkedReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayParkedReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayParkedReq_Options& from);
  void MergeFrom(const ReplayParkedReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayParkedReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReplayParkedReq.Options";
  }
  protected:
  explicit ReplayParkedReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
    kStreamIdentifierFieldNumber = 2,
    kAllFieldNumber = 3,
    kStopAtFieldNumber = 4,
    kNoLimitFieldNumber = 5,
  };
  // string group_name = 1;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group_name(
      std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // .event_store.client.StreamIdentifier stream_identifier = 2;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // .event_store.client.Empty all = 3;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::Empty& all() const;
  ::event_store::client::Empty* release_all();
  ::event_store::client::Empty* mutable_all();
  void set_allocated_all(::event_store::client::Empty* all);
  private:
  const ::event_store::client::Empty& _internal_all() const;
  ::event_store::client::Empty* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::Empty* all);
  ::event_store::client::Empty* unsafe_arena_release_all();

  // int64 stop_at = 4;
  private:
  bool _internal_has_stop_at() const;
  public:
  void clear_stop_at();
  ::PROTOBUF_NAMESPACE_ID::int64 stop_at() const;
  void set_stop_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stop_at() const;
  void _internal_set_stop_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .event_store.client.Empty no_limit = 5;
  bool has_no_limit() const;
  private:
  bool _internal_has_no_limit() const;
  public:
  void clear_no_limit();
  const ::event_store::client::Empty& no_limit() const;
  ::event_store::client::Empty* release_no_limit();
  ::event_store::client::Empty* mutable_no_limit();
  void set_allocated_no_limit(::event_store::client::Empty* no_limit);
  private:
  const ::event_store::client::Empty& _internal_no_limit() const;
  ::event_store::client::Empty* _internal_mutable_no_limit();
  public:
  void unsafe_arena_set_allocated_no_limit(
      ::event_store::client::Empty* no_limit);
  ::event_store::client::Empty* unsafe_arena_release_no_limit();

  void clear_stream_option();
  StreamOptionCase stream_option_case() const;
  void clear_stop_at_option();
  StopAtOptionCase stop_at_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReplayParkedReq.Options)
 private:
  class _Internal;
  void set_has_stream_identifier();
  void set_has_all();
  void set_has_stop_at();
  void set_has_no_limit();

  inline bool has_stream_option() const;
  inline void clear_has_stream_option();

  inline bool has_stop_at_option() const;
  inline void clear_has_stop_at_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  union StreamOptionUnion {
    StreamOptionUnion() {}
    ::event_store::client::StreamIdentifier* stream_identifier_;
    ::event_store::client::Empty* all_;
  } stream_option_;
  union StopAtOptionUnion {
    StopAtOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 stop_at_;
    ::event_store::client::Empty* no_limit_;
  } stop_at_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReplayParkedReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReplayParkedReq) */ {
 public:
  inline ReplayParkedReq() : ReplayParkedReq(nullptr) {};
  virtual ~ReplayParkedReq();

  ReplayParkedReq(const ReplayParkedReq& from);
  ReplayParkedReq(ReplayParkedReq&& from) noexcept
    : ReplayParkedReq() {
    *this = ::std::move(from);
  }

  inline ReplayParkedReq& operator=(const ReplayParkedReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayParkedReq& operator=(ReplayParkedReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayParkedReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplayParkedReq* internal_default_instance() {
    return reinterpret_cast<const ReplayParkedReq*>(
               &_ReplayParkedReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ReplayParkedReq& a, ReplayParkedReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayParkedReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayParkedReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayParkedReq* New() const final {
    return CreateMaybeMessage<ReplayParkedReq>(nullptr);
  }

  ReplayParkedReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayParkedReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayParkedReq& from);
  void MergeFrom(const ReplayParkedReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayParkedReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReplayParkedReq";
  }
  protected:
  explicit ReplayParkedReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReplayParkedReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.persistent_subscriptions.ReplayParkedReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options& options() const;
  ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* release_options();
  ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* options);
  private:
  const ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options& _internal_options() const;
  ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* options);
  ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReplayParkedReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ReplayParkedResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ReplayParkedResp) */ {
 public:
  inline ReplayParkedResp() : ReplayParkedResp(nullptr) {};
  virtual ~ReplayParkedResp();

  ReplayParkedResp(const ReplayParkedResp& from);
  ReplayParkedResp(ReplayParkedResp&& from) noexcept
    : ReplayParkedResp() {
    *this = ::std::move(from);
  }

  inline ReplayParkedResp& operator=(const ReplayParkedResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayParkedResp& operator=(ReplayParkedResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayParkedResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplayParkedResp* internal_default_instance() {
    return reinterpret_cast<const ReplayParkedResp*>(
               &_ReplayParkedResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ReplayParkedResp& a, ReplayParkedResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayParkedResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayParkedResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayParkedResp* New() const final {
    return CreateMaybeMessage<ReplayParkedResp>(nullptr);
  }

  ReplayParkedResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayParkedResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayParkedResp& from);
  void MergeFrom(const ReplayParkedResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayParkedResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ReplayParkedResp";
  }
  protected:
  explicit ReplayParkedResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ReplayParkedResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ListReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ListReq.Options) */ {
 public:
  inline ListReq_Options() : ListReq_Options(nullptr) {};
  virtual ~ListReq_Options();

  ListReq_Options(const ListReq_Options& from);
  ListReq_Options(ListReq_Options&& from) noexcept
    : ListReq_Options() {
    *this = ::std::move(from);
  }

  inline ListReq_Options& operator=(const ListReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReq_Options& operator=(ListReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReq_Options& default_instance();

  enum ListOptionCase {
    kListAllSubscriptions = 1,
    kListForStream = 2,
    LIST_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReq_Options* internal_default_instance() {
    return reinterpret_cast<const ListReq_Options*>(
               &_ListReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ListReq_Options& a, ListReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReq_Options* New() const final {
    return CreateMaybeMessage<ListReq_Options>(nullptr);
  }

  ListReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReq_Options& from);
  void MergeFrom(const ListReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ListReq.Options";
  }
  protected:
  explicit ListReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListAllSubscriptionsFieldNumber = 1,
    kListForStreamFieldNumber = 2,
  };
  // .event_store.client.Empty list_all_subscriptions = 1;
  bool has_list_all_subscriptions() const;
  private:
  bool _internal_has_list_all_subscriptions() const;
  public:
  void clear_list_all_subscriptions();
  const ::event_store::client::Empty& list_all_subscriptions() const;
  ::event_store::client::Empty* release_list_all_subscriptions();
  ::event_store::client::Empty* mutable_list_all_subscriptions();
  void set_allocated_list_all_subscriptions(::event_store::client::Empty* list_all_subscriptions);
  private:
  const ::event_store::client::Empty& _internal_list_all_subscriptions() const;
  ::event_store::client::Empty* _internal_mutable_list_all_subscriptions();
  public:
  void unsafe_arena_set_allocated_list_all_subscriptions(
      ::event_store::client::Empty* list_all_subscriptions);
  ::event_store::client::Empty* unsafe_arena_release_list_all_subscriptions();

  // .event_store.client.persistent_subscriptions.ListReq.StreamOption list_for_stream = 2;
  bool has_list_for_stream() const;
  private:
  bool _internal_has_list_for_stream() const;
  public:
  void clear_list_for_stream();
  const ::event_store::client::persistent_subscriptions::ListReq_StreamOption& list_for_stream() const;
  ::event_store::client::persistent_subscriptions::ListReq_StreamOption* release_list_for_stream();
  ::event_store::client::persistent_subscriptions::ListReq_StreamOption* mutable_list_for_stream();
  void set_allocated_list_for_stream(::event_store::client::persistent_subscriptions::ListReq_StreamOption* list_for_stream);
  private:
  const ::event_store::client::persistent_subscriptions::ListReq_StreamOption& _internal_list_for_stream() const;
  ::event_store::client::persistent_subscriptions::ListReq_StreamOption* _internal_mutable_list_for_stream();
  public:
  void unsafe_arena_set_allocated_list_for_stream(
      ::event_store::client::persistent_subscriptions::ListReq_StreamOption* list_for_stream);
  ::event_store::client::persistent_subscriptions::ListReq_StreamOption* unsafe_arena_release_list_for_stream();

  void clear_list_option();
  ListOptionCase list_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ListReq.Options)
 private:
  class _Internal;
  void set_has_list_all_subscriptions();
  void set_has_list_for_stream();

  inline bool has_list_option() const;
  inline void clear_has_list_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ListOptionUnion {
    ListOptionUnion() {}
    ::event_store::client::Empty* list_all_subscriptions_;
    ::event_store::client::persistent_subscriptions::ListReq_StreamOption* list_for_stream_;
  } list_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ListReq_StreamOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ListReq.StreamOption) */ {
 public:
  inline ListReq_StreamOption() : ListReq_StreamOption(nullptr) {};
  virtual ~ListReq_StreamOption();

  ListReq_StreamOption(const ListReq_StreamOption& from);
  ListReq_StreamOption(ListReq_StreamOption&& from) noexcept
    : ListReq_StreamOption() {
    *this = ::std::move(from);
  }

  inline ListReq_StreamOption& operator=(const ListReq_StreamOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReq_StreamOption& operator=(ListReq_StreamOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReq_StreamOption& default_instance();

  enum StreamOptionCase {
    kStream = 1,
    kAll = 2,
    STREAM_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReq_StreamOption* internal_default_instance() {
    return reinterpret_cast<const ListReq_StreamOption*>(
               &_ListReq_StreamOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ListReq_StreamOption& a, ListReq_StreamOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReq_StreamOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReq_StreamOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReq_StreamOption* New() const final {
    return CreateMaybeMessage<ListReq_StreamOption>(nullptr);
  }

  ListReq_StreamOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReq_StreamOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReq_StreamOption& from);
  void MergeFrom(const ListReq_StreamOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReq_StreamOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ListReq.StreamOption";
  }
  protected:
  explicit ListReq_StreamOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kAllFieldNumber = 2,
  };
  // .event_store.client.StreamIdentifier stream = 1;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::event_store::client::StreamIdentifier& stream() const;
  ::event_store::client::StreamIdentifier* release_stream();
  ::event_store::client::StreamIdentifier* mutable_stream();
  void set_allocated_stream(::event_store::client::StreamIdentifier* stream);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::event_store::client::StreamIdentifier* stream);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream();

  // .event_store.client.Empty all = 2;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::event_store::client::Empty& all() const;
  ::event_store::client::Empty* release_all();
  ::event_store::client::Empty* mutable_all();
  void set_allocated_all(::event_store::client::Empty* all);
  private:
  const ::event_store::client::Empty& _internal_all() const;
  ::event_store::client::Empty* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::event_store::client::Empty* all);
  ::event_store::client::Empty* unsafe_arena_release_all();

  void clear_stream_option();
  StreamOptionCase stream_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ListReq.StreamOption)
 private:
  class _Internal;
  void set_has_stream();
  void set_has_all();

  inline bool has_stream_option() const;
  inline void clear_has_stream_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamOptionUnion {
    StreamOptionUnion() {}
    ::event_store::client::StreamIdentifier* stream_;
    ::event_store::client::Empty* all_;
  } stream_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ListReq) */ {
 public:
  inline ListReq() : ListReq(nullptr) {};
  virtual ~ListReq();

  ListReq(const ListReq& from);
  ListReq(ListReq&& from) noexcept
    : ListReq() {
    *this = ::std::move(from);
  }

  inline ListReq& operator=(const ListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReq& operator=(ListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReq* internal_default_instance() {
    return reinterpret_cast<const ListReq*>(
               &_ListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ListReq& a, ListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReq* New() const final {
    return CreateMaybeMessage<ListReq>(nullptr);
  }

  ListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReq& from);
  void MergeFrom(const ListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ListReq";
  }
  protected:
  explicit ListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListReq_Options Options;
  typedef ListReq_StreamOption StreamOption;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.persistent_subscriptions.ListReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::persistent_subscriptions::ListReq_Options& options() const;
  ::event_store::client::persistent_subscriptions::ListReq_Options* release_options();
  ::event_store::client::persistent_subscriptions::ListReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::persistent_subscriptions::ListReq_Options* options);
  private:
  const ::event_store::client::persistent_subscriptions::ListReq_Options& _internal_options() const;
  ::event_store::client::persistent_subscriptions::ListReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::persistent_subscriptions::ListReq_Options* options);
  ::event_store::client::persistent_subscriptions::ListReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::persistent_subscriptions::ListReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// -------------------------------------------------------------------

class ListResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.persistent_subscriptions.ListResp) */ {
 public:
  inline ListResp() : ListResp(nullptr) {};
  virtual ~ListResp();

  ListResp(const ListResp& from);
  ListResp(ListResp&& from) noexcept
    : ListResp() {
    *this = ::std::move(from);
  }

  inline ListResp& operator=(const ListResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResp& operator=(ListResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListResp* internal_default_instance() {
    return reinterpret_cast<const ListResp*>(
               &_ListResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ListResp& a, ListResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListResp* New() const final {
    return CreateMaybeMessage<ListResp>(nullptr);
  }

  ListResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListResp& from);
  void MergeFrom(const ListResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.persistent_subscriptions.ListResp";
  }
  protected:
  explicit ListResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistent_2eproto);
    return ::descriptor_table_persistent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
  };
  // repeated .event_store.client.persistent_subscriptions.SubscriptionInfo subscriptions = 1;
  int subscriptions_size() const;
  private:
  int _internal_subscriptions_size() const;
  public:
  void clear_subscriptions();
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo >*
      mutable_subscriptions();
  private:
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo& _internal_subscriptions(int index) const;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* _internal_add_subscriptions();
  public:
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo& subscriptions(int index) const;
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo >&
      subscriptions() const;

  // @@protoc_insertion_point(class_scope:event_store.client.persistent_subscriptions.ListResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo > subscriptions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadReq_Options_UUIDOption

// .event_store.client.Empty structured = 1;
inline bool ReadReq_Options_UUIDOption::_internal_has_structured() const {
  return content_case() == kStructured;
}
inline bool ReadReq_Options_UUIDOption::has_structured() const {
  return _internal_has_structured();
}
inline void ReadReq_Options_UUIDOption::set_has_structured() {
  _oneof_case_[0] = kStructured;
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::release_structured() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.structured)
  if (_internal_has_structured()) {
    clear_has_content();
      ::event_store::client::Empty* temp = content_.structured_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.structured_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_UUIDOption::_internal_structured() const {
  return _internal_has_structured()
      ? *content_.structured_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_UUIDOption::structured() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.structured)
  return _internal_structured();
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::unsafe_arena_release_structured() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.structured)
  if (_internal_has_structured()) {
    clear_has_content();
    ::event_store::client::Empty* temp = content_.structured_;
    content_.structured_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_UUIDOption::unsafe_arena_set_allocated_structured(::event_store::client::Empty* structured) {
  clear_content();
  if (structured) {
    set_has_structured();
    content_.structured_ = structured;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.structured)
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::_internal_mutable_structured() {
  if (!_internal_has_structured()) {
    clear_content();
    set_has_structured();
    content_.structured_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return content_.structured_;
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::mutable_structured() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.structured)
  return _internal_mutable_structured();
}

// .event_store.client.Empty string = 2;
inline bool ReadReq_Options_UUIDOption::_internal_has_string() const {
  return content_case() == kString;
}
inline bool ReadReq_Options_UUIDOption::has_string() const {
  return _internal_has_string();
}
inline void ReadReq_Options_UUIDOption::set_has_string() {
  _oneof_case_[0] = kString;
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::release_string() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.string)
  if (_internal_has_string()) {
    clear_has_content();
      ::event_store::client::Empty* temp = content_.string_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options_UUIDOption::_internal_string() const {
  return _internal_has_string()
      ? *content_.string_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options_UUIDOption::string() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.string)
  return _internal_string();
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.string)
  if (_internal_has_string()) {
    clear_has_content();
    ::event_store::client::Empty* temp = content_.string_;
    content_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options_UUIDOption::unsafe_arena_set_allocated_string(::event_store::client::Empty* string) {
  clear_content();
  if (string) {
    set_has_string();
    content_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.string)
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_content();
    set_has_string();
    content_.string_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return content_.string_;
}
inline ::event_store::client::Empty* ReadReq_Options_UUIDOption::mutable_string() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption.string)
  return _internal_mutable_string();
}

inline bool ReadReq_Options_UUIDOption::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ReadReq_Options_UUIDOption::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ReadReq_Options_UUIDOption::ContentCase ReadReq_Options_UUIDOption::content_case() const {
  return ReadReq_Options_UUIDOption::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadReq_Options

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool ReadReq_Options::_internal_has_stream_identifier() const {
  return stream_option_case() == kStreamIdentifier;
}
inline bool ReadReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline void ReadReq_Options::set_has_stream_identifier() {
  _oneof_case_[0] = kStreamIdentifier;
}
inline ::event_store::client::StreamIdentifier* ReadReq_Options::release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Options.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_stream_option();
      ::event_store::client::StreamIdentifier* temp = stream_option_.stream_identifier_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::StreamIdentifier& ReadReq_Options::_internal_stream_identifier() const {
  return _internal_has_stream_identifier()
      ? *stream_option_.stream_identifier_
      : *reinterpret_cast< ::event_store::client::StreamIdentifier*>(&::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& ReadReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline ::event_store::client::StreamIdentifier* ReadReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.Options.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_stream_option();
    ::event_store::client::StreamIdentifier* temp = stream_option_.stream_identifier_;
    stream_option_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options::unsafe_arena_set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  clear_stream_option();
  if (stream_identifier) {
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* ReadReq_Options::_internal_mutable_stream_identifier() {
  if (!_internal_has_stream_identifier()) {
    clear_stream_option();
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = CreateMaybeMessage< ::event_store::client::StreamIdentifier >(GetArena());
  }
  return stream_option_.stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* ReadReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}

// .event_store.client.Empty all = 5;
inline bool ReadReq_Options::_internal_has_all() const {
  return stream_option_case() == kAll;
}
inline bool ReadReq_Options::has_all() const {
  return _internal_has_all();
}
inline void ReadReq_Options::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline ::event_store::client::Empty* ReadReq_Options::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
      ::event_store::client::Empty* temp = stream_option_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadReq_Options::_internal_all() const {
  return _internal_has_all()
      ? *stream_option_.all_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadReq_Options::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Options.all)
  return _internal_all();
}
inline ::event_store::client::Empty* ReadReq_Options::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
    ::event_store::client::Empty* temp = stream_option_.all_;
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq_Options::unsafe_arena_set_allocated_all(::event_store::client::Empty* all) {
  clear_stream_option();
  if (all) {
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.all)
}
inline ::event_store::client::Empty* ReadReq_Options::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_stream_option();
    set_has_all();
    stream_option_.all_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return stream_option_.all_;
}
inline ::event_store::client::Empty* ReadReq_Options::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Options.all)
  return _internal_mutable_all();
}

// string group_name = 2;
inline void ReadReq_Options::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadReq_Options::group_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
  return _internal_group_name();
}
inline void ReadReq_Options::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
}
inline std::string* ReadReq_Options::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& ReadReq_Options::_internal_group_name() const {
  return group_name_.Get();
}
inline void ReadReq_Options::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadReq_Options::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
}
inline void ReadReq_Options::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
}
inline void ReadReq_Options::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
}
inline std::string* ReadReq_Options::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadReq_Options::release_group_name() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadReq_Options::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
}
inline std::string* ReadReq_Options::unsafe_arena_release_group_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadReq_Options::unsafe_arena_set_allocated_group_name(
    std::string* group_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.group_name)
}

// int32 buffer_size = 3;
inline void ReadReq_Options::clear_buffer_size() {
  buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadReq_Options::_internal_buffer_size() const {
  return buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadReq_Options::buffer_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Options.buffer_size)
  return _internal_buffer_size();
}
inline void ReadReq_Options::_internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffer_size_ = value;
}
inline void ReadReq_Options::set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffer_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadReq.Options.buffer_size)
}

// .event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption uuid_option = 4;
inline bool ReadReq_Options::_internal_has_uuid_option() const {
  return this != internal_default_instance() && uuid_option_ != nullptr;
}
inline bool ReadReq_Options::has_uuid_option() const {
  return _internal_has_uuid_option();
}
inline void ReadReq_Options::clear_uuid_option() {
  if (GetArena() == nullptr && uuid_option_ != nullptr) {
    delete uuid_option_;
  }
  uuid_option_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption& ReadReq_Options::_internal_uuid_option() const {
  const ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* p = uuid_option_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption*>(
      &::event_store::client::persistent_subscriptions::_ReadReq_Options_UUIDOption_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption& ReadReq_Options::uuid_option() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Options.uuid_option)
  return _internal_uuid_option();
}
inline void ReadReq_Options::unsafe_arena_set_allocated_uuid_option(
    ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* uuid_option) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_option_);
  }
  uuid_option_ = uuid_option;
  if (uuid_option) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.uuid_option)
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* ReadReq_Options::release_uuid_option() {
  auto temp = unsafe_arena_release_uuid_option();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* ReadReq_Options::unsafe_arena_release_uuid_option() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Options.uuid_option)
  
  ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* temp = uuid_option_;
  uuid_option_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* ReadReq_Options::_internal_mutable_uuid_option() {
  
  if (uuid_option_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption>(GetArena());
    uuid_option_ = p;
  }
  return uuid_option_;
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* ReadReq_Options::mutable_uuid_option() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Options.uuid_option)
  return _internal_mutable_uuid_option();
}
inline void ReadReq_Options::set_allocated_uuid_option(::event_store::client::persistent_subscriptions::ReadReq_Options_UUIDOption* uuid_option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uuid_option_;
  }
  if (uuid_option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uuid_option);
    if (message_arena != submessage_arena) {
      uuid_option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid_option, submessage_arena);
    }
    
  } else {
    
  }
  uuid_option_ = uuid_option;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Options.uuid_option)
}

inline bool ReadReq_Options::has_stream_option() const {
  return stream_option_case() != STREAM_OPTION_NOT_SET;
}
inline void ReadReq_Options::clear_has_stream_option() {
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}
inline ReadReq_Options::StreamOptionCase ReadReq_Options::stream_option_case() const {
  return ReadReq_Options::StreamOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadReq_Ack

// bytes id = 1;
inline void ReadReq_Ack::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadReq_Ack::id() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
  return _internal_id();
}
inline void ReadReq_Ack::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
}
inline std::string* ReadReq_Ack::mutable_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
  return _internal_mutable_id();
}
inline const std::string& ReadReq_Ack::_internal_id() const {
  return id_.Get();
}
inline void ReadReq_Ack::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadReq_Ack::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
}
inline void ReadReq_Ack::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
}
inline void ReadReq_Ack::set_id(const void* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
}
inline std::string* ReadReq_Ack::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadReq_Ack::release_id() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadReq_Ack::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
}
inline std::string* ReadReq_Ack::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadReq_Ack::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Ack.id)
}

// repeated .event_store.client.UUID ids = 2;
inline int ReadReq_Ack::_internal_ids_size() const {
  return ids_.size();
}
inline int ReadReq_Ack::ids_size() const {
  return _internal_ids_size();
}
inline ::event_store::client::UUID* ReadReq_Ack::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Ack.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID >*
ReadReq_Ack::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.persistent_subscriptions.ReadReq.Ack.ids)
  return &ids_;
}
inline const ::event_store::client::UUID& ReadReq_Ack::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::event_store::client::UUID& ReadReq_Ack::ids(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Ack.ids)
  return _internal_ids(index);
}
inline ::event_store::client::UUID* ReadReq_Ack::_internal_add_ids() {
  return ids_.Add();
}
inline ::event_store::client::UUID* ReadReq_Ack::add_ids() {
  // @@protoc_insertion_point(field_add:event_store.client.persistent_subscriptions.ReadReq.Ack.ids)
  return _internal_add_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID >&
ReadReq_Ack::ids() const {
  // @@protoc_insertion_point(field_list:event_store.client.persistent_subscriptions.ReadReq.Ack.ids)
  return ids_;
}

// -------------------------------------------------------------------

// ReadReq_Nack

// bytes id = 1;
inline void ReadReq_Nack::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadReq_Nack::id() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
  return _internal_id();
}
inline void ReadReq_Nack::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
}
inline std::string* ReadReq_Nack::mutable_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
  return _internal_mutable_id();
}
inline const std::string& ReadReq_Nack::_internal_id() const {
  return id_.Get();
}
inline void ReadReq_Nack::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadReq_Nack::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
}
inline void ReadReq_Nack::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
}
inline void ReadReq_Nack::set_id(const void* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
}
inline std::string* ReadReq_Nack::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadReq_Nack::release_id() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadReq_Nack::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
}
inline std::string* ReadReq_Nack::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadReq_Nack::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Nack.id)
}

// repeated .event_store.client.UUID ids = 2;
inline int ReadReq_Nack::_internal_ids_size() const {
  return ids_.size();
}
inline int ReadReq_Nack::ids_size() const {
  return _internal_ids_size();
}
inline ::event_store::client::UUID* ReadReq_Nack::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Nack.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID >*
ReadReq_Nack::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.persistent_subscriptions.ReadReq.Nack.ids)
  return &ids_;
}
inline const ::event_store::client::UUID& ReadReq_Nack::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::event_store::client::UUID& ReadReq_Nack::ids(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Nack.ids)
  return _internal_ids(index);
}
inline ::event_store::client::UUID* ReadReq_Nack::_internal_add_ids() {
  return ids_.Add();
}
inline ::event_store::client::UUID* ReadReq_Nack::add_ids() {
  // @@protoc_insertion_point(field_add:event_store.client.persistent_subscriptions.ReadReq.Nack.ids)
  return _internal_add_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::UUID >&
ReadReq_Nack::ids() const {
  // @@protoc_insertion_point(field_list:event_store.client.persistent_subscriptions.ReadReq.Nack.ids)
  return ids_;
}

// .event_store.client.persistent_subscriptions.ReadReq.Nack.Action action = 3;
inline void ReadReq_Nack::clear_action() {
  action_ = 0;
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Nack_Action ReadReq_Nack::_internal_action() const {
  return static_cast< ::event_store::client::persistent_subscriptions::ReadReq_Nack_Action >(action_);
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Nack_Action ReadReq_Nack::action() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Nack.action)
  return _internal_action();
}
inline void ReadReq_Nack::_internal_set_action(::event_store::client::persistent_subscriptions::ReadReq_Nack_Action value) {
  
  action_ = value;
}
inline void ReadReq_Nack::set_action(::event_store::client::persistent_subscriptions::ReadReq_Nack_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadReq.Nack.action)
}

// string reason = 4;
inline void ReadReq_Nack::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadReq_Nack::reason() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
  return _internal_reason();
}
inline void ReadReq_Nack::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
}
inline std::string* ReadReq_Nack::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
  return _internal_mutable_reason();
}
inline const std::string& ReadReq_Nack::_internal_reason() const {
  return reason_.Get();
}
inline void ReadReq_Nack::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadReq_Nack::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
}
inline void ReadReq_Nack::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
}
inline void ReadReq_Nack::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
}
inline std::string* ReadReq_Nack::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadReq_Nack::release_reason() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadReq_Nack::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
}
inline std::string* ReadReq_Nack::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadReq_Nack::unsafe_arena_set_allocated_reason(
    std::string* reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.Nack.reason)
}

// -------------------------------------------------------------------

// ReadReq

// .event_store.client.persistent_subscriptions.ReadReq.Options options = 1;
inline bool ReadReq::_internal_has_options() const {
  return content_case() == kOptions;
}
inline bool ReadReq::has_options() const {
  return _internal_has_options();
}
inline void ReadReq::set_has_options() {
  _oneof_case_[0] = kOptions;
}
inline void ReadReq::clear_options() {
  if (_internal_has_options()) {
    if (GetArena() == nullptr) {
      delete content_.options_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Options* ReadReq::release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.options)
  if (_internal_has_options()) {
    clear_has_content();
      ::event_store::client::persistent_subscriptions::ReadReq_Options* temp = content_.options_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::ReadReq_Options& ReadReq::_internal_options() const {
  return _internal_has_options()
      ? *content_.options_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::ReadReq_Options*>(&::event_store::client::persistent_subscriptions::_ReadReq_Options_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReadReq_Options& ReadReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.options)
  return _internal_options();
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Options* ReadReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.options)
  if (_internal_has_options()) {
    clear_has_content();
    ::event_store::client::persistent_subscriptions::ReadReq_Options* temp = content_.options_;
    content_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq::unsafe_arena_set_allocated_options(::event_store::client::persistent_subscriptions::ReadReq_Options* options) {
  clear_content();
  if (options) {
    set_has_options();
    content_.options_ = options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.options)
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Options* ReadReq::_internal_mutable_options() {
  if (!_internal_has_options()) {
    clear_content();
    set_has_options();
    content_.options_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadReq_Options >(GetArena());
  }
  return content_.options_;
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Options* ReadReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.options)
  return _internal_mutable_options();
}

// .event_store.client.persistent_subscriptions.ReadReq.Ack ack = 2;
inline bool ReadReq::_internal_has_ack() const {
  return content_case() == kAck;
}
inline bool ReadReq::has_ack() const {
  return _internal_has_ack();
}
inline void ReadReq::set_has_ack() {
  _oneof_case_[0] = kAck;
}
inline void ReadReq::clear_ack() {
  if (_internal_has_ack()) {
    if (GetArena() == nullptr) {
      delete content_.ack_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Ack* ReadReq::release_ack() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.ack)
  if (_internal_has_ack()) {
    clear_has_content();
      ::event_store::client::persistent_subscriptions::ReadReq_Ack* temp = content_.ack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::ReadReq_Ack& ReadReq::_internal_ack() const {
  return _internal_has_ack()
      ? *content_.ack_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::ReadReq_Ack*>(&::event_store::client::persistent_subscriptions::_ReadReq_Ack_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReadReq_Ack& ReadReq::ack() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.ack)
  return _internal_ack();
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Ack* ReadReq::unsafe_arena_release_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.ack)
  if (_internal_has_ack()) {
    clear_has_content();
    ::event_store::client::persistent_subscriptions::ReadReq_Ack* temp = content_.ack_;
    content_.ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq::unsafe_arena_set_allocated_ack(::event_store::client::persistent_subscriptions::ReadReq_Ack* ack) {
  clear_content();
  if (ack) {
    set_has_ack();
    content_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.ack)
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Ack* ReadReq::_internal_mutable_ack() {
  if (!_internal_has_ack()) {
    clear_content();
    set_has_ack();
    content_.ack_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadReq_Ack >(GetArena());
  }
  return content_.ack_;
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Ack* ReadReq::mutable_ack() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.ack)
  return _internal_mutable_ack();
}

// .event_store.client.persistent_subscriptions.ReadReq.Nack nack = 3;
inline bool ReadReq::_internal_has_nack() const {
  return content_case() == kNack;
}
inline bool ReadReq::has_nack() const {
  return _internal_has_nack();
}
inline void ReadReq::set_has_nack() {
  _oneof_case_[0] = kNack;
}
inline void ReadReq::clear_nack() {
  if (_internal_has_nack()) {
    if (GetArena() == nullptr) {
      delete content_.nack_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Nack* ReadReq::release_nack() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadReq.nack)
  if (_internal_has_nack()) {
    clear_has_content();
      ::event_store::client::persistent_subscriptions::ReadReq_Nack* temp = content_.nack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.nack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::ReadReq_Nack& ReadReq::_internal_nack() const {
  return _internal_has_nack()
      ? *content_.nack_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::ReadReq_Nack*>(&::event_store::client::persistent_subscriptions::_ReadReq_Nack_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReadReq_Nack& ReadReq::nack() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadReq.nack)
  return _internal_nack();
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Nack* ReadReq::unsafe_arena_release_nack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadReq.nack)
  if (_internal_has_nack()) {
    clear_has_content();
    ::event_store::client::persistent_subscriptions::ReadReq_Nack* temp = content_.nack_;
    content_.nack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadReq::unsafe_arena_set_allocated_nack(::event_store::client::persistent_subscriptions::ReadReq_Nack* nack) {
  clear_content();
  if (nack) {
    set_has_nack();
    content_.nack_ = nack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadReq.nack)
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Nack* ReadReq::_internal_mutable_nack() {
  if (!_internal_has_nack()) {
    clear_content();
    set_has_nack();
    content_.nack_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadReq_Nack >(GetArena());
  }
  return content_.nack_;
}
inline ::event_store::client::persistent_subscriptions::ReadReq_Nack* ReadReq::mutable_nack() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadReq.nack)
  return _internal_mutable_nack();
}

inline bool ReadReq::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ReadReq::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ReadReq::ContentCase ReadReq::content_case() const {
  return ReadReq::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ReadResp_ReadEvent_RecordedEvent

// .event_store.client.UUID id = 1;
inline bool ReadResp_ReadEvent_RecordedEvent::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReadResp_ReadEvent_RecordedEvent::has_id() const {
  return _internal_has_id();
}
inline const ::event_store::client::UUID& ReadResp_ReadEvent_RecordedEvent::_internal_id() const {
  const ::event_store::client::UUID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& ReadResp_ReadEvent_RecordedEvent::id() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.id)
  return _internal_id();
}
inline void ReadResp_ReadEvent_RecordedEvent::unsafe_arena_set_allocated_id(
    ::event_store::client::UUID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.id)
}
inline ::event_store::client::UUID* ReadResp_ReadEvent_RecordedEvent::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* ReadResp_ReadEvent_RecordedEvent::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.id)
  
  ::event_store::client::UUID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* ReadResp_ReadEvent_RecordedEvent::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::event_store::client::UUID* ReadResp_ReadEvent_RecordedEvent::mutable_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.id)
  return _internal_mutable_id();
}
inline void ReadResp_ReadEvent_RecordedEvent::set_allocated_id(::event_store::client::UUID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.id)
}

// .event_store.client.StreamIdentifier stream_identifier = 2;
inline bool ReadResp_ReadEvent_RecordedEvent::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool ReadResp_ReadEvent_RecordedEvent::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& ReadResp_ReadEvent_RecordedEvent::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& ReadResp_ReadEvent_RecordedEvent::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
  return _internal_stream_identifier();
}
inline void ReadResp_ReadEvent_RecordedEvent::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* ReadResp_ReadEvent_RecordedEvent::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* ReadResp_ReadEvent_RecordedEvent::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* ReadResp_ReadEvent_RecordedEvent::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* ReadResp_ReadEvent_RecordedEvent::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void ReadResp_ReadEvent_RecordedEvent::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.stream_identifier)
}

// uint64 stream_revision = 3;
inline void ReadResp_ReadEvent_RecordedEvent::clear_stream_revision() {
  stream_revision_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::_internal_stream_revision() const {
  return stream_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::stream_revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.stream_revision)
  return _internal_stream_revision();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stream_revision_ = value;
}
inline void ReadResp_ReadEvent_RecordedEvent::set_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stream_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.stream_revision)
}

// uint64 prepare_position = 4;
inline void ReadResp_ReadEvent_RecordedEvent::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.prepare_position)
  return _internal_prepare_position();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void ReadResp_ReadEvent_RecordedEvent::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.prepare_position)
}

// uint64 commit_position = 5;
inline void ReadResp_ReadEvent_RecordedEvent::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent_RecordedEvent::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.commit_position)
  return _internal_commit_position();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void ReadResp_ReadEvent_RecordedEvent::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.commit_position)
}

// map<string, string> metadata = 6;
inline int ReadResp_ReadEvent_RecordedEvent::_internal_metadata_size() const {
  return metadata_.size();
}
inline int ReadResp_ReadEvent_RecordedEvent::metadata_size() const {
  return _internal_metadata_size();
}
inline void ReadResp_ReadEvent_RecordedEvent::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ReadResp_ReadEvent_RecordedEvent::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ReadResp_ReadEvent_RecordedEvent::metadata() const {
  // @@protoc_insertion_point(field_map:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ReadResp_ReadEvent_RecordedEvent::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ReadResp_ReadEvent_RecordedEvent::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.metadata)
  return _internal_mutable_metadata();
}

// bytes custom_metadata = 7;
inline void ReadResp_ReadEvent_RecordedEvent::clear_custom_metadata() {
  custom_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadResp_ReadEvent_RecordedEvent::custom_metadata() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
  return _internal_custom_metadata();
}
inline void ReadResp_ReadEvent_RecordedEvent::set_custom_metadata(const std::string& value) {
  _internal_set_custom_metadata(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::mutable_custom_metadata() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
  return _internal_mutable_custom_metadata();
}
inline const std::string& ReadResp_ReadEvent_RecordedEvent::_internal_custom_metadata() const {
  return custom_metadata_.Get();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_custom_metadata(const std::string& value) {
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::set_custom_metadata(std::string&& value) {
  
  custom_metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline void ReadResp_ReadEvent_RecordedEvent::set_custom_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline void ReadResp_ReadEvent_RecordedEvent::set_custom_metadata(const void* value,
    size_t size) {
  
  custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::_internal_mutable_custom_metadata() {
  
  return custom_metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::release_custom_metadata() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
  return custom_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::set_allocated_custom_metadata(std::string* custom_metadata) {
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::unsafe_arena_release_custom_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return custom_metadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::unsafe_arena_set_allocated_custom_metadata(
    std::string* custom_metadata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (custom_metadata != nullptr) {
    
  } else {
    
  }
  custom_metadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      custom_metadata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.custom_metadata)
}

// bytes data = 8;
inline void ReadResp_ReadEvent_RecordedEvent::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadResp_ReadEvent_RecordedEvent::data() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
  return _internal_data();
}
inline void ReadResp_ReadEvent_RecordedEvent::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::mutable_data() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
  return _internal_mutable_data();
}
inline const std::string& ReadResp_ReadEvent_RecordedEvent::_internal_data() const {
  return data_.Get();
}
inline void ReadResp_ReadEvent_RecordedEvent::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
}
inline void ReadResp_ReadEvent_RecordedEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
}
inline void ReadResp_ReadEvent_RecordedEvent::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::release_data() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
}
inline std::string* ReadResp_ReadEvent_RecordedEvent::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadResp_ReadEvent_RecordedEvent::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent.data)
}

// -------------------------------------------------------------------

// ReadResp_ReadEvent

// .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent event = 1;
inline bool ReadResp_ReadEvent::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool ReadResp_ReadEvent::has_event() const {
  return _internal_has_event();
}
inline void ReadResp_ReadEvent::clear_event() {
  if (GetArena() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent::_internal_event() const {
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* p = event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent*>(
      &::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_RecordedEvent_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent::event() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.event)
  return _internal_event();
}
inline void ReadResp_ReadEvent::unsafe_arena_set_allocated_event(
    ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.event)
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::release_event() {
  auto temp = unsafe_arena_release_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.event)
  
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent>(GetArena());
    event_ = p;
  }
  return event_;
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::mutable_event() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.event)
  return _internal_mutable_event();
}
inline void ReadResp_ReadEvent::set_allocated_event(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.event)
}

// .event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent link = 2;
inline bool ReadResp_ReadEvent::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool ReadResp_ReadEvent::has_link() const {
  return _internal_has_link();
}
inline void ReadResp_ReadEvent::clear_link() {
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent::_internal_link() const {
  const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent*>(
      &::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_RecordedEvent_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent::link() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.link)
  return _internal_link();
}
inline void ReadResp_ReadEvent::unsafe_arena_set_allocated_link(
    ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.link)
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::release_link() {
  auto temp = unsafe_arena_release_link();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.link)
  
  ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* ReadResp_ReadEvent::mutable_link() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.link)
  return _internal_mutable_link();
}
inline void ReadResp_ReadEvent::set_allocated_link(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent_RecordedEvent* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.link)
}

// uint64 commit_position = 3;
inline bool ReadResp_ReadEvent::_internal_has_commit_position() const {
  return position_case() == kCommitPosition;
}
inline void ReadResp_ReadEvent::set_has_commit_position() {
  _oneof_case_[0] = kCommitPosition;
}
inline void ReadResp_ReadEvent::clear_commit_position() {
  if (_internal_has_commit_position()) {
    position_.commit_position_ = PROTOBUF_ULONGLONG(0);
    clear_has_position();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent::_internal_commit_position() const {
  if (_internal_has_commit_position()) {
    return position_.commit_position_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void ReadResp_ReadEvent::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_commit_position()) {
    clear_position();
    set_has_commit_position();
  }
  position_.commit_position_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadResp_ReadEvent::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.commit_position)
  return _internal_commit_position();
}
inline void ReadResp_ReadEvent::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.commit_position)
}

// .event_store.client.Empty no_position = 4;
inline bool ReadResp_ReadEvent::_internal_has_no_position() const {
  return position_case() == kNoPosition;
}
inline bool ReadResp_ReadEvent::has_no_position() const {
  return _internal_has_no_position();
}
inline void ReadResp_ReadEvent::set_has_no_position() {
  _oneof_case_[0] = kNoPosition;
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::release_no_position() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_position)
  if (_internal_has_no_position()) {
    clear_has_position();
      ::event_store::client::Empty* temp = position_.no_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    position_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadResp_ReadEvent::_internal_no_position() const {
  return _internal_has_no_position()
      ? *position_.no_position_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadResp_ReadEvent::no_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_position)
  return _internal_no_position();
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::unsafe_arena_release_no_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_position)
  if (_internal_has_no_position()) {
    clear_has_position();
    ::event_store::client::Empty* temp = position_.no_position_;
    position_.no_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp_ReadEvent::unsafe_arena_set_allocated_no_position(::event_store::client::Empty* no_position) {
  clear_position();
  if (no_position) {
    set_has_no_position();
    position_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_position)
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::_internal_mutable_no_position() {
  if (!_internal_has_no_position()) {
    clear_position();
    set_has_no_position();
    position_.no_position_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return position_.no_position_;
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::mutable_no_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_position)
  return _internal_mutable_no_position();
}

// int32 retry_count = 5;
inline bool ReadResp_ReadEvent::_internal_has_retry_count() const {
  return count_case() == kRetryCount;
}
inline void ReadResp_ReadEvent::set_has_retry_count() {
  _oneof_case_[1] = kRetryCount;
}
inline void ReadResp_ReadEvent::clear_retry_count() {
  if (_internal_has_retry_count()) {
    count_.retry_count_ = 0;
    clear_has_count();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadResp_ReadEvent::_internal_retry_count() const {
  if (_internal_has_retry_count()) {
    return count_.retry_count_;
  }
  return 0;
}
inline void ReadResp_ReadEvent::_internal_set_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_retry_count()) {
    clear_count();
    set_has_retry_count();
  }
  count_.retry_count_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadResp_ReadEvent::retry_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.retry_count)
  return _internal_retry_count();
}
inline void ReadResp_ReadEvent::set_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retry_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.retry_count)
}

// .event_store.client.Empty no_retry_count = 6;
inline bool ReadResp_ReadEvent::_internal_has_no_retry_count() const {
  return count_case() == kNoRetryCount;
}
inline bool ReadResp_ReadEvent::has_no_retry_count() const {
  return _internal_has_no_retry_count();
}
inline void ReadResp_ReadEvent::set_has_no_retry_count() {
  _oneof_case_[1] = kNoRetryCount;
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::release_no_retry_count() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_retry_count)
  if (_internal_has_no_retry_count()) {
    clear_has_count();
      ::event_store::client::Empty* temp = count_.no_retry_count_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    count_.no_retry_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReadResp_ReadEvent::_internal_no_retry_count() const {
  return _internal_has_no_retry_count()
      ? *count_.no_retry_count_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReadResp_ReadEvent::no_retry_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_retry_count)
  return _internal_no_retry_count();
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::unsafe_arena_release_no_retry_count() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_retry_count)
  if (_internal_has_no_retry_count()) {
    clear_has_count();
    ::event_store::client::Empty* temp = count_.no_retry_count_;
    count_.no_retry_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp_ReadEvent::unsafe_arena_set_allocated_no_retry_count(::event_store::client::Empty* no_retry_count) {
  clear_count();
  if (no_retry_count) {
    set_has_no_retry_count();
    count_.no_retry_count_ = no_retry_count;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_retry_count)
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::_internal_mutable_no_retry_count() {
  if (!_internal_has_no_retry_count()) {
    clear_count();
    set_has_no_retry_count();
    count_.no_retry_count_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return count_.no_retry_count_;
}
inline ::event_store::client::Empty* ReadResp_ReadEvent::mutable_no_retry_count() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.ReadEvent.no_retry_count)
  return _internal_mutable_no_retry_count();
}

inline bool ReadResp_ReadEvent::has_position() const {
  return position_case() != POSITION_NOT_SET;
}
inline void ReadResp_ReadEvent::clear_has_position() {
  _oneof_case_[0] = POSITION_NOT_SET;
}
inline bool ReadResp_ReadEvent::has_count() const {
  return count_case() != COUNT_NOT_SET;
}
inline void ReadResp_ReadEvent::clear_has_count() {
  _oneof_case_[1] = COUNT_NOT_SET;
}
inline ReadResp_ReadEvent::PositionCase ReadResp_ReadEvent::position_case() const {
  return ReadResp_ReadEvent::PositionCase(_oneof_case_[0]);
}
inline ReadResp_ReadEvent::CountCase ReadResp_ReadEvent::count_case() const {
  return ReadResp_ReadEvent::CountCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// ReadResp_SubscriptionConfirmation

// string subscription_id = 1;
inline void ReadResp_SubscriptionConfirmation::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadResp_SubscriptionConfirmation::subscription_id() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
  return _internal_subscription_id();
}
inline void ReadResp_SubscriptionConfirmation::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline std::string* ReadResp_SubscriptionConfirmation::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& ReadResp_SubscriptionConfirmation::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void ReadResp_SubscriptionConfirmation::_internal_set_subscription_id(const std::string& value) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadResp_SubscriptionConfirmation::set_subscription_id(std::string&& value) {
  
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline void ReadResp_SubscriptionConfirmation::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline void ReadResp_SubscriptionConfirmation::set_subscription_id(const char* value,
    size_t size) {
  
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline std::string* ReadResp_SubscriptionConfirmation::_internal_mutable_subscription_id() {
  
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadResp_SubscriptionConfirmation::release_subscription_id() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
  return subscription_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadResp_SubscriptionConfirmation::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
}
inline std::string* ReadResp_SubscriptionConfirmation::unsafe_arena_release_subscription_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subscription_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadResp_SubscriptionConfirmation::unsafe_arena_set_allocated_subscription_id(
    std::string* subscription_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subscription_id != nullptr) {
    
  } else {
    
  }
  subscription_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subscription_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation.subscription_id)
}

// -------------------------------------------------------------------

// ReadResp

// .event_store.client.persistent_subscriptions.ReadResp.ReadEvent event = 1;
inline bool ReadResp::_internal_has_event() const {
  return content_case() == kEvent;
}
inline bool ReadResp::has_event() const {
  return _internal_has_event();
}
inline void ReadResp::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void ReadResp::clear_event() {
  if (_internal_has_event()) {
    if (GetArena() == nullptr) {
      delete content_.event_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* ReadResp::release_event() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.event)
  if (_internal_has_event()) {
    clear_has_content();
      ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* temp = content_.event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent& ReadResp::_internal_event() const {
  return _internal_has_event()
      ? *content_.event_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent*>(&::event_store::client::persistent_subscriptions::_ReadResp_ReadEvent_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent& ReadResp::event() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.event)
  return _internal_event();
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* ReadResp::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadResp.event)
  if (_internal_has_event()) {
    clear_has_content();
    ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* temp = content_.event_;
    content_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp::unsafe_arena_set_allocated_event(::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* event) {
  clear_content();
  if (event) {
    set_has_event();
    content_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.event)
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* ReadResp::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_content();
    set_has_event();
    content_.event_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent >(GetArena());
  }
  return content_.event_;
}
inline ::event_store::client::persistent_subscriptions::ReadResp_ReadEvent* ReadResp::mutable_event() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.event)
  return _internal_mutable_event();
}

// .event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation subscription_confirmation = 2;
inline bool ReadResp::_internal_has_subscription_confirmation() const {
  return content_case() == kSubscriptionConfirmation;
}
inline bool ReadResp::has_subscription_confirmation() const {
  return _internal_has_subscription_confirmation();
}
inline void ReadResp::set_has_subscription_confirmation() {
  _oneof_case_[0] = kSubscriptionConfirmation;
}
inline void ReadResp::clear_subscription_confirmation() {
  if (_internal_has_subscription_confirmation()) {
    if (GetArena() == nullptr) {
      delete content_.subscription_confirmation_;
    }
    clear_has_content();
  }
}
inline ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* ReadResp::release_subscription_confirmation() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReadResp.subscription_confirmation)
  if (_internal_has_subscription_confirmation()) {
    clear_has_content();
      ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* temp = content_.subscription_confirmation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    content_.subscription_confirmation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation& ReadResp::_internal_subscription_confirmation() const {
  return _internal_has_subscription_confirmation()
      ? *content_.subscription_confirmation_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation*>(&::event_store::client::persistent_subscriptions::_ReadResp_SubscriptionConfirmation_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation& ReadResp::subscription_confirmation() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReadResp.subscription_confirmation)
  return _internal_subscription_confirmation();
}
inline ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* ReadResp::unsafe_arena_release_subscription_confirmation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReadResp.subscription_confirmation)
  if (_internal_has_subscription_confirmation()) {
    clear_has_content();
    ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* temp = content_.subscription_confirmation_;
    content_.subscription_confirmation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadResp::unsafe_arena_set_allocated_subscription_confirmation(::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* subscription_confirmation) {
  clear_content();
  if (subscription_confirmation) {
    set_has_subscription_confirmation();
    content_.subscription_confirmation_ = subscription_confirmation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReadResp.subscription_confirmation)
}
inline ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* ReadResp::_internal_mutable_subscription_confirmation() {
  if (!_internal_has_subscription_confirmation()) {
    clear_content();
    set_has_subscription_confirmation();
    content_.subscription_confirmation_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation >(GetArena());
  }
  return content_.subscription_confirmation_;
}
inline ::event_store::client::persistent_subscriptions::ReadResp_SubscriptionConfirmation* ReadResp::mutable_subscription_confirmation() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReadResp.subscription_confirmation)
  return _internal_mutable_subscription_confirmation();
}

inline bool ReadResp::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void ReadResp::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ReadResp::ContentCase ReadResp::content_case() const {
  return ReadResp::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateReq_Options

// .event_store.client.persistent_subscriptions.CreateReq.StreamOptions stream = 4;
inline bool CreateReq_Options::_internal_has_stream() const {
  return stream_option_case() == kStream;
}
inline bool CreateReq_Options::has_stream() const {
  return _internal_has_stream();
}
inline void CreateReq_Options::set_has_stream() {
  _oneof_case_[0] = kStream;
}
inline void CreateReq_Options::clear_stream() {
  if (_internal_has_stream()) {
    if (GetArena() == nullptr) {
      delete stream_option_.stream_;
    }
    clear_has_stream_option();
  }
}
inline ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* CreateReq_Options::release_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.Options.stream)
  if (_internal_has_stream()) {
    clear_has_stream_option();
      ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* temp = stream_option_.stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions& CreateReq_Options::_internal_stream() const {
  return _internal_has_stream()
      ? *stream_option_.stream_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions*>(&::event_store::client::persistent_subscriptions::_CreateReq_StreamOptions_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions& CreateReq_Options::stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Options.stream)
  return _internal_stream();
}
inline ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* CreateReq_Options::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.Options.stream)
  if (_internal_has_stream()) {
    clear_has_stream_option();
    ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* temp = stream_option_.stream_;
    stream_option_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_Options::unsafe_arena_set_allocated_stream(::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* stream) {
  clear_stream_option();
  if (stream) {
    set_has_stream();
    stream_option_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.stream)
}
inline ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* CreateReq_Options::_internal_mutable_stream() {
  if (!_internal_has_stream()) {
    clear_stream_option();
    set_has_stream();
    stream_option_.stream_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions >(GetArena());
  }
  return stream_option_.stream_;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_StreamOptions* CreateReq_Options::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.Options.stream)
  return _internal_mutable_stream();
}

// .event_store.client.persistent_subscriptions.CreateReq.AllOptions all = 5;
inline bool CreateReq_Options::_internal_has_all() const {
  return stream_option_case() == kAll;
}
inline bool CreateReq_Options::has_all() const {
  return _internal_has_all();
}
inline void CreateReq_Options::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline void CreateReq_Options::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete stream_option_.all_;
    }
    clear_has_stream_option();
  }
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* CreateReq_Options::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* temp = stream_option_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions& CreateReq_Options::_internal_all() const {
  return _internal_has_all()
      ? *stream_option_.all_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions*>(&::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions& CreateReq_Options::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Options.all)
  return _internal_all();
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* CreateReq_Options::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
    ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* temp = stream_option_.all_;
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_Options::unsafe_arena_set_allocated_all(::event_store::client::persistent_subscriptions::CreateReq_AllOptions* all) {
  clear_stream_option();
  if (all) {
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.all)
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* CreateReq_Options::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_stream_option();
    set_has_all();
    stream_option_.all_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions >(GetArena());
  }
  return stream_option_.all_;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions* CreateReq_Options::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.Options.all)
  return _internal_mutable_all();
}

// .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
inline bool CreateReq_Options::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool CreateReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& CreateReq_Options::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& CreateReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline void CreateReq_Options::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* CreateReq_Options::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* CreateReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.Options.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* CreateReq_Options::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* CreateReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void CreateReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.stream_identifier)
}

// string group_name = 2;
inline void CreateReq_Options::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_Options::group_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
  return _internal_group_name();
}
inline void CreateReq_Options::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
}
inline std::string* CreateReq_Options::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& CreateReq_Options::_internal_group_name() const {
  return group_name_.Get();
}
inline void CreateReq_Options::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_Options::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
}
inline void CreateReq_Options::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
}
inline void CreateReq_Options::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
}
inline std::string* CreateReq_Options::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_Options::release_group_name() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_Options::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
}
inline std::string* CreateReq_Options::unsafe_arena_release_group_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_Options::unsafe_arena_set_allocated_group_name(
    std::string* group_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.group_name)
}

// .event_store.client.persistent_subscriptions.CreateReq.Settings settings = 3;
inline bool CreateReq_Options::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool CreateReq_Options::has_settings() const {
  return _internal_has_settings();
}
inline void CreateReq_Options::clear_settings() {
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_Settings& CreateReq_Options::_internal_settings() const {
  const ::event_store::client::persistent_subscriptions::CreateReq_Settings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::CreateReq_Settings*>(
      &::event_store::client::persistent_subscriptions::_CreateReq_Settings_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_Settings& CreateReq_Options::settings() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Options.settings)
  return _internal_settings();
}
inline void CreateReq_Options::unsafe_arena_set_allocated_settings(
    ::event_store::client::persistent_subscriptions::CreateReq_Settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.settings)
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Settings* CreateReq_Options::release_settings() {
  auto temp = unsafe_arena_release_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Settings* CreateReq_Options::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.Options.settings)
  
  ::event_store::client::persistent_subscriptions::CreateReq_Settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Settings* CreateReq_Options::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_Settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Settings* CreateReq_Options::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.Options.settings)
  return _internal_mutable_settings();
}
inline void CreateReq_Options::set_allocated_settings(::event_store::client::persistent_subscriptions::CreateReq_Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Options.settings)
}

inline bool CreateReq_Options::has_stream_option() const {
  return stream_option_case() != STREAM_OPTION_NOT_SET;
}
inline void CreateReq_Options::clear_has_stream_option() {
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}
inline CreateReq_Options::StreamOptionCase CreateReq_Options::stream_option_case() const {
  return CreateReq_Options::StreamOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateReq_StreamOptions

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool CreateReq_StreamOptions::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool CreateReq_StreamOptions::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& CreateReq_StreamOptions::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& CreateReq_StreamOptions::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.stream_identifier)
  return _internal_stream_identifier();
}
inline void CreateReq_StreamOptions::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* CreateReq_StreamOptions::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* CreateReq_StreamOptions::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* CreateReq_StreamOptions::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* CreateReq_StreamOptions::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void CreateReq_StreamOptions::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.stream_identifier)
}

// uint64 revision = 2;
inline bool CreateReq_StreamOptions::_internal_has_revision() const {
  return revision_option_case() == kRevision;
}
inline void CreateReq_StreamOptions::set_has_revision() {
  _oneof_case_[0] = kRevision;
}
inline void CreateReq_StreamOptions::clear_revision() {
  if (_internal_has_revision()) {
    revision_option_.revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_revision_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateReq_StreamOptions::_internal_revision() const {
  if (_internal_has_revision()) {
    return revision_option_.revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void CreateReq_StreamOptions::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_revision()) {
    clear_revision_option();
    set_has_revision();
  }
  revision_option_.revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateReq_StreamOptions::revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.revision)
  return _internal_revision();
}
inline void CreateReq_StreamOptions::set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.revision)
}

// .event_store.client.Empty start = 3;
inline bool CreateReq_StreamOptions::_internal_has_start() const {
  return revision_option_case() == kStart;
}
inline bool CreateReq_StreamOptions::has_start() const {
  return _internal_has_start();
}
inline void CreateReq_StreamOptions::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline ::event_store::client::Empty* CreateReq_StreamOptions::release_start() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.start)
  if (_internal_has_start()) {
    clear_has_revision_option();
      ::event_store::client::Empty* temp = revision_option_.start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    revision_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& CreateReq_StreamOptions::_internal_start() const {
  return _internal_has_start()
      ? *revision_option_.start_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& CreateReq_StreamOptions::start() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.start)
  return _internal_start();
}
inline ::event_store::client::Empty* CreateReq_StreamOptions::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.start)
  if (_internal_has_start()) {
    clear_has_revision_option();
    ::event_store::client::Empty* temp = revision_option_.start_;
    revision_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_StreamOptions::unsafe_arena_set_allocated_start(::event_store::client::Empty* start) {
  clear_revision_option();
  if (start) {
    set_has_start();
    revision_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.start)
}
inline ::event_store::client::Empty* CreateReq_StreamOptions::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_revision_option();
    set_has_start();
    revision_option_.start_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return revision_option_.start_;
}
inline ::event_store::client::Empty* CreateReq_StreamOptions::mutable_start() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.start)
  return _internal_mutable_start();
}

// .event_store.client.Empty end = 4;
inline bool CreateReq_StreamOptions::_internal_has_end() const {
  return revision_option_case() == kEnd;
}
inline bool CreateReq_StreamOptions::has_end() const {
  return _internal_has_end();
}
inline void CreateReq_StreamOptions::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline ::event_store::client::Empty* CreateReq_StreamOptions::release_end() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.end)
  if (_internal_has_end()) {
    clear_has_revision_option();
      ::event_store::client::Empty* temp = revision_option_.end_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    revision_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& CreateReq_StreamOptions::_internal_end() const {
  return _internal_has_end()
      ? *revision_option_.end_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& CreateReq_StreamOptions::end() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.end)
  return _internal_end();
}
inline ::event_store::client::Empty* CreateReq_StreamOptions::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.end)
  if (_internal_has_end()) {
    clear_has_revision_option();
    ::event_store::client::Empty* temp = revision_option_.end_;
    revision_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_StreamOptions::unsafe_arena_set_allocated_end(::event_store::client::Empty* end) {
  clear_revision_option();
  if (end) {
    set_has_end();
    revision_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.end)
}
inline ::event_store::client::Empty* CreateReq_StreamOptions::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_revision_option();
    set_has_end();
    revision_option_.end_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return revision_option_.end_;
}
inline ::event_store::client::Empty* CreateReq_StreamOptions::mutable_end() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.StreamOptions.end)
  return _internal_mutable_end();
}

inline bool CreateReq_StreamOptions::has_revision_option() const {
  return revision_option_case() != REVISION_OPTION_NOT_SET;
}
inline void CreateReq_StreamOptions::clear_has_revision_option() {
  _oneof_case_[0] = REVISION_OPTION_NOT_SET;
}
inline CreateReq_StreamOptions::RevisionOptionCase CreateReq_StreamOptions::revision_option_case() const {
  return CreateReq_StreamOptions::RevisionOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateReq_AllOptions_FilterOptions_Expression

// string regex = 1;
inline void CreateReq_AllOptions_FilterOptions_Expression::clear_regex() {
  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_AllOptions_FilterOptions_Expression::regex() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
  return _internal_regex();
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
}
inline std::string* CreateReq_AllOptions_FilterOptions_Expression::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
  return _internal_mutable_regex();
}
inline const std::string& CreateReq_AllOptions_FilterOptions_Expression::_internal_regex() const {
  return regex_.Get();
}
inline void CreateReq_AllOptions_FilterOptions_Expression::_internal_set_regex(const std::string& value) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_regex(std::string&& value) {
  
  regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
}
inline std::string* CreateReq_AllOptions_FilterOptions_Expression::_internal_mutable_regex() {
  
  return regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_AllOptions_FilterOptions_Expression::release_regex() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
  return regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
}
inline std::string* CreateReq_AllOptions_FilterOptions_Expression::unsafe_arena_release_regex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return regex_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_AllOptions_FilterOptions_Expression::unsafe_arena_set_allocated_regex(
    std::string* regex) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      regex, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.regex)
}

// repeated string prefix = 2;
inline int CreateReq_AllOptions_FilterOptions_Expression::_internal_prefix_size() const {
  return prefix_.size();
}
inline int CreateReq_AllOptions_FilterOptions_Expression::prefix_size() const {
  return _internal_prefix_size();
}
inline void CreateReq_AllOptions_FilterOptions_Expression::clear_prefix() {
  prefix_.Clear();
}
inline std::string* CreateReq_AllOptions_FilterOptions_Expression::add_prefix() {
  // @@protoc_insertion_point(field_add_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
  return _internal_add_prefix();
}
inline const std::string& CreateReq_AllOptions_FilterOptions_Expression::_internal_prefix(int index) const {
  return prefix_.Get(index);
}
inline const std::string& CreateReq_AllOptions_FilterOptions_Expression::prefix(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
  return _internal_prefix(index);
}
inline std::string* CreateReq_AllOptions_FilterOptions_Expression::mutable_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
  return prefix_.Mutable(index);
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_prefix(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
  prefix_.Mutable(index)->assign(value);
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_prefix(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
  prefix_.Mutable(index)->assign(std::move(value));
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_prefix(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
}
inline void CreateReq_AllOptions_FilterOptions_Expression::set_prefix(int index, const char* value, size_t size) {
  prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
}
inline std::string* CreateReq_AllOptions_FilterOptions_Expression::_internal_add_prefix() {
  return prefix_.Add();
}
inline void CreateReq_AllOptions_FilterOptions_Expression::add_prefix(const std::string& value) {
  prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
}
inline void CreateReq_AllOptions_FilterOptions_Expression::add_prefix(std::string&& value) {
  prefix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
}
inline void CreateReq_AllOptions_FilterOptions_Expression::add_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
}
inline void CreateReq_AllOptions_FilterOptions_Expression::add_prefix(const char* value, size_t size) {
  prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateReq_AllOptions_FilterOptions_Expression::prefix() const {
  // @@protoc_insertion_point(field_list:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
  return prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateReq_AllOptions_FilterOptions_Expression::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression.prefix)
  return &prefix_;
}

// -------------------------------------------------------------------

// CreateReq_AllOptions_FilterOptions

// .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression stream_identifier = 1;
inline bool CreateReq_AllOptions_FilterOptions::_internal_has_stream_identifier() const {
  return filter_case() == kStreamIdentifier;
}
inline bool CreateReq_AllOptions_FilterOptions::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline void CreateReq_AllOptions_FilterOptions::set_has_stream_identifier() {
  _oneof_case_[0] = kStreamIdentifier;
}
inline void CreateReq_AllOptions_FilterOptions::clear_stream_identifier() {
  if (_internal_has_stream_identifier()) {
    if (GetArena() == nullptr) {
      delete filter_.stream_identifier_;
    }
    clear_has_filter();
  }
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* CreateReq_AllOptions_FilterOptions::release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_filter();
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* temp = filter_.stream_identifier_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& CreateReq_AllOptions_FilterOptions::_internal_stream_identifier() const {
  return _internal_has_stream_identifier()
      ? *filter_.stream_identifier_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression*>(&::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_Expression_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& CreateReq_AllOptions_FilterOptions::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.stream_identifier)
  return _internal_stream_identifier();
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* CreateReq_AllOptions_FilterOptions::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_filter();
    ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* temp = filter_.stream_identifier_;
    filter_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_AllOptions_FilterOptions::unsafe_arena_set_allocated_stream_identifier(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* stream_identifier) {
  clear_filter();
  if (stream_identifier) {
    set_has_stream_identifier();
    filter_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.stream_identifier)
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* CreateReq_AllOptions_FilterOptions::_internal_mutable_stream_identifier() {
  if (!_internal_has_stream_identifier()) {
    clear_filter();
    set_has_stream_identifier();
    filter_.stream_identifier_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression >(GetArena());
  }
  return filter_.stream_identifier_;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* CreateReq_AllOptions_FilterOptions::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.stream_identifier)
  return _internal_mutable_stream_identifier();
}

// .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression event_type = 2;
inline bool CreateReq_AllOptions_FilterOptions::_internal_has_event_type() const {
  return filter_case() == kEventType;
}
inline bool CreateReq_AllOptions_FilterOptions::has_event_type() const {
  return _internal_has_event_type();
}
inline void CreateReq_AllOptions_FilterOptions::set_has_event_type() {
  _oneof_case_[0] = kEventType;
}
inline void CreateReq_AllOptions_FilterOptions::clear_event_type() {
  if (_internal_has_event_type()) {
    if (GetArena() == nullptr) {
      delete filter_.event_type_;
    }
    clear_has_filter();
  }
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* CreateReq_AllOptions_FilterOptions::release_event_type() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.event_type)
  if (_internal_has_event_type()) {
    clear_has_filter();
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* temp = filter_.event_type_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.event_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& CreateReq_AllOptions_FilterOptions::_internal_event_type() const {
  return _internal_has_event_type()
      ? *filter_.event_type_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression*>(&::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_Expression_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression& CreateReq_AllOptions_FilterOptions::event_type() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.event_type)
  return _internal_event_type();
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* CreateReq_AllOptions_FilterOptions::unsafe_arena_release_event_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.event_type)
  if (_internal_has_event_type()) {
    clear_has_filter();
    ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* temp = filter_.event_type_;
    filter_.event_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_AllOptions_FilterOptions::unsafe_arena_set_allocated_event_type(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* event_type) {
  clear_filter();
  if (event_type) {
    set_has_event_type();
    filter_.event_type_ = event_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.event_type)
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* CreateReq_AllOptions_FilterOptions::_internal_mutable_event_type() {
  if (!_internal_has_event_type()) {
    clear_filter();
    set_has_event_type();
    filter_.event_type_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression >(GetArena());
  }
  return filter_.event_type_;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions_Expression* CreateReq_AllOptions_FilterOptions::mutable_event_type() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.event_type)
  return _internal_mutable_event_type();
}

// uint32 max = 3;
inline bool CreateReq_AllOptions_FilterOptions::_internal_has_max() const {
  return window_case() == kMax;
}
inline void CreateReq_AllOptions_FilterOptions::set_has_max() {
  _oneof_case_[1] = kMax;
}
inline void CreateReq_AllOptions_FilterOptions::clear_max() {
  if (_internal_has_max()) {
    window_.max_ = 0u;
    clear_has_window();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateReq_AllOptions_FilterOptions::_internal_max() const {
  if (_internal_has_max()) {
    return window_.max_;
  }
  return 0u;
}
inline void CreateReq_AllOptions_FilterOptions::_internal_set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_max()) {
    clear_window();
    set_has_max();
  }
  window_.max_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateReq_AllOptions_FilterOptions::max() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.max)
  return _internal_max();
}
inline void CreateReq_AllOptions_FilterOptions::set_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.max)
}

// .event_store.client.Empty count = 4;
inline bool CreateReq_AllOptions_FilterOptions::_internal_has_count() const {
  return window_case() == kCount;
}
inline bool CreateReq_AllOptions_FilterOptions::has_count() const {
  return _internal_has_count();
}
inline void CreateReq_AllOptions_FilterOptions::set_has_count() {
  _oneof_case_[1] = kCount;
}
inline ::event_store::client::Empty* CreateReq_AllOptions_FilterOptions::release_count() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.count)
  if (_internal_has_count()) {
    clear_has_window();
      ::event_store::client::Empty* temp = window_.count_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    window_.count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& CreateReq_AllOptions_FilterOptions::_internal_count() const {
  return _internal_has_count()
      ? *window_.count_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& CreateReq_AllOptions_FilterOptions::count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.count)
  return _internal_count();
}
inline ::event_store::client::Empty* CreateReq_AllOptions_FilterOptions::unsafe_arena_release_count() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.count)
  if (_internal_has_count()) {
    clear_has_window();
    ::event_store::client::Empty* temp = window_.count_;
    window_.count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_AllOptions_FilterOptions::unsafe_arena_set_allocated_count(::event_store::client::Empty* count) {
  clear_window();
  if (count) {
    set_has_count();
    window_.count_ = count;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.count)
}
inline ::event_store::client::Empty* CreateReq_AllOptions_FilterOptions::_internal_mutable_count() {
  if (!_internal_has_count()) {
    clear_window();
    set_has_count();
    window_.count_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return window_.count_;
}
inline ::event_store::client::Empty* CreateReq_AllOptions_FilterOptions::mutable_count() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.count)
  return _internal_mutable_count();
}

// uint32 checkpointIntervalMultiplier = 5;
inline void CreateReq_AllOptions_FilterOptions::clear_checkpointintervalmultiplier() {
  checkpointintervalmultiplier_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateReq_AllOptions_FilterOptions::_internal_checkpointintervalmultiplier() const {
  return checkpointintervalmultiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateReq_AllOptions_FilterOptions::checkpointintervalmultiplier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.checkpointIntervalMultiplier)
  return _internal_checkpointintervalmultiplier();
}
inline void CreateReq_AllOptions_FilterOptions::_internal_set_checkpointintervalmultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  checkpointintervalmultiplier_ = value;
}
inline void CreateReq_AllOptions_FilterOptions::set_checkpointintervalmultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_checkpointintervalmultiplier(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.checkpointIntervalMultiplier)
}

inline bool CreateReq_AllOptions_FilterOptions::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void CreateReq_AllOptions_FilterOptions::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
inline bool CreateReq_AllOptions_FilterOptions::has_window() const {
  return window_case() != WINDOW_NOT_SET;
}
inline void CreateReq_AllOptions_FilterOptions::clear_has_window() {
  _oneof_case_[1] = WINDOW_NOT_SET;
}
inline CreateReq_AllOptions_FilterOptions::FilterCase CreateReq_AllOptions_FilterOptions::filter_case() const {
  return CreateReq_AllOptions_FilterOptions::FilterCase(_oneof_case_[0]);
}
inline CreateReq_AllOptions_FilterOptions::WindowCase CreateReq_AllOptions_FilterOptions::window_case() const {
  return CreateReq_AllOptions_FilterOptions::WindowCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// CreateReq_AllOptions

// .event_store.client.persistent_subscriptions.CreateReq.Position position = 1;
inline bool CreateReq_AllOptions::_internal_has_position() const {
  return all_option_case() == kPosition;
}
inline bool CreateReq_AllOptions::has_position() const {
  return _internal_has_position();
}
inline void CreateReq_AllOptions::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void CreateReq_AllOptions::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete all_option_.position_;
    }
    clear_has_all_option();
  }
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Position* CreateReq_AllOptions::release_position() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.position)
  if (_internal_has_position()) {
    clear_has_all_option();
      ::event_store::client::persistent_subscriptions::CreateReq_Position* temp = all_option_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_Position& CreateReq_AllOptions::_internal_position() const {
  return _internal_has_position()
      ? *all_option_.position_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::CreateReq_Position*>(&::event_store::client::persistent_subscriptions::_CreateReq_Position_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_Position& CreateReq_AllOptions::position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.position)
  return _internal_position();
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Position* CreateReq_AllOptions::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.position)
  if (_internal_has_position()) {
    clear_has_all_option();
    ::event_store::client::persistent_subscriptions::CreateReq_Position* temp = all_option_.position_;
    all_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_AllOptions::unsafe_arena_set_allocated_position(::event_store::client::persistent_subscriptions::CreateReq_Position* position) {
  clear_all_option();
  if (position) {
    set_has_position();
    all_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.position)
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Position* CreateReq_AllOptions::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_all_option();
    set_has_position();
    all_option_.position_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_Position >(GetArena());
  }
  return all_option_.position_;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Position* CreateReq_AllOptions::mutable_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.position)
  return _internal_mutable_position();
}

// .event_store.client.Empty start = 2;
inline bool CreateReq_AllOptions::_internal_has_start() const {
  return all_option_case() == kStart;
}
inline bool CreateReq_AllOptions::has_start() const {
  return _internal_has_start();
}
inline void CreateReq_AllOptions::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline ::event_store::client::Empty* CreateReq_AllOptions::release_start() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.start)
  if (_internal_has_start()) {
    clear_has_all_option();
      ::event_store::client::Empty* temp = all_option_.start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& CreateReq_AllOptions::_internal_start() const {
  return _internal_has_start()
      ? *all_option_.start_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& CreateReq_AllOptions::start() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.start)
  return _internal_start();
}
inline ::event_store::client::Empty* CreateReq_AllOptions::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.start)
  if (_internal_has_start()) {
    clear_has_all_option();
    ::event_store::client::Empty* temp = all_option_.start_;
    all_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_AllOptions::unsafe_arena_set_allocated_start(::event_store::client::Empty* start) {
  clear_all_option();
  if (start) {
    set_has_start();
    all_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.start)
}
inline ::event_store::client::Empty* CreateReq_AllOptions::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_all_option();
    set_has_start();
    all_option_.start_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return all_option_.start_;
}
inline ::event_store::client::Empty* CreateReq_AllOptions::mutable_start() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.start)
  return _internal_mutable_start();
}

// .event_store.client.Empty end = 3;
inline bool CreateReq_AllOptions::_internal_has_end() const {
  return all_option_case() == kEnd;
}
inline bool CreateReq_AllOptions::has_end() const {
  return _internal_has_end();
}
inline void CreateReq_AllOptions::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline ::event_store::client::Empty* CreateReq_AllOptions::release_end() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.end)
  if (_internal_has_end()) {
    clear_has_all_option();
      ::event_store::client::Empty* temp = all_option_.end_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& CreateReq_AllOptions::_internal_end() const {
  return _internal_has_end()
      ? *all_option_.end_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& CreateReq_AllOptions::end() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.end)
  return _internal_end();
}
inline ::event_store::client::Empty* CreateReq_AllOptions::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.end)
  if (_internal_has_end()) {
    clear_has_all_option();
    ::event_store::client::Empty* temp = all_option_.end_;
    all_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_AllOptions::unsafe_arena_set_allocated_end(::event_store::client::Empty* end) {
  clear_all_option();
  if (end) {
    set_has_end();
    all_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.end)
}
inline ::event_store::client::Empty* CreateReq_AllOptions::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_all_option();
    set_has_end();
    all_option_.end_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return all_option_.end_;
}
inline ::event_store::client::Empty* CreateReq_AllOptions::mutable_end() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.end)
  return _internal_mutable_end();
}

// .event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions filter = 4;
inline bool CreateReq_AllOptions::_internal_has_filter() const {
  return filter_option_case() == kFilter;
}
inline bool CreateReq_AllOptions::has_filter() const {
  return _internal_has_filter();
}
inline void CreateReq_AllOptions::set_has_filter() {
  _oneof_case_[1] = kFilter;
}
inline void CreateReq_AllOptions::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArena() == nullptr) {
      delete filter_option_.filter_;
    }
    clear_has_filter_option();
  }
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* CreateReq_AllOptions::release_filter() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.filter)
  if (_internal_has_filter()) {
    clear_has_filter_option();
      ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* temp = filter_option_.filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_option_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions& CreateReq_AllOptions::_internal_filter() const {
  return _internal_has_filter()
      ? *filter_option_.filter_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions*>(&::event_store::client::persistent_subscriptions::_CreateReq_AllOptions_FilterOptions_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions& CreateReq_AllOptions::filter() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.filter)
  return _internal_filter();
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* CreateReq_AllOptions::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.filter)
  if (_internal_has_filter()) {
    clear_has_filter_option();
    ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* temp = filter_option_.filter_;
    filter_option_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_AllOptions::unsafe_arena_set_allocated_filter(::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* filter) {
  clear_filter_option();
  if (filter) {
    set_has_filter();
    filter_option_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.filter)
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* CreateReq_AllOptions::_internal_mutable_filter() {
  if (!_internal_has_filter()) {
    clear_filter_option();
    set_has_filter();
    filter_option_.filter_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions >(GetArena());
  }
  return filter_option_.filter_;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_AllOptions_FilterOptions* CreateReq_AllOptions::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.filter)
  return _internal_mutable_filter();
}

// .event_store.client.Empty no_filter = 5;
inline bool CreateReq_AllOptions::_internal_has_no_filter() const {
  return filter_option_case() == kNoFilter;
}
inline bool CreateReq_AllOptions::has_no_filter() const {
  return _internal_has_no_filter();
}
inline void CreateReq_AllOptions::set_has_no_filter() {
  _oneof_case_[1] = kNoFilter;
}
inline ::event_store::client::Empty* CreateReq_AllOptions::release_no_filter() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.no_filter)
  if (_internal_has_no_filter()) {
    clear_has_filter_option();
      ::event_store::client::Empty* temp = filter_option_.no_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_option_.no_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& CreateReq_AllOptions::_internal_no_filter() const {
  return _internal_has_no_filter()
      ? *filter_option_.no_filter_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& CreateReq_AllOptions::no_filter() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.AllOptions.no_filter)
  return _internal_no_filter();
}
inline ::event_store::client::Empty* CreateReq_AllOptions::unsafe_arena_release_no_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.AllOptions.no_filter)
  if (_internal_has_no_filter()) {
    clear_has_filter_option();
    ::event_store::client::Empty* temp = filter_option_.no_filter_;
    filter_option_.no_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreateReq_AllOptions::unsafe_arena_set_allocated_no_filter(::event_store::client::Empty* no_filter) {
  clear_filter_option();
  if (no_filter) {
    set_has_no_filter();
    filter_option_.no_filter_ = no_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.AllOptions.no_filter)
}
inline ::event_store::client::Empty* CreateReq_AllOptions::_internal_mutable_no_filter() {
  if (!_internal_has_no_filter()) {
    clear_filter_option();
    set_has_no_filter();
    filter_option_.no_filter_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return filter_option_.no_filter_;
}
inline ::event_store::client::Empty* CreateReq_AllOptions::mutable_no_filter() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.AllOptions.no_filter)
  return _internal_mutable_no_filter();
}

inline bool CreateReq_AllOptions::has_all_option() const {
  return all_option_case() != ALL_OPTION_NOT_SET;
}
inline void CreateReq_AllOptions::clear_has_all_option() {
  _oneof_case_[0] = ALL_OPTION_NOT_SET;
}
inline bool CreateReq_AllOptions::has_filter_option() const {
  return filter_option_case() != FILTER_OPTION_NOT_SET;
}
inline void CreateReq_AllOptions::clear_has_filter_option() {
  _oneof_case_[1] = FILTER_OPTION_NOT_SET;
}
inline CreateReq_AllOptions::AllOptionCase CreateReq_AllOptions::all_option_case() const {
  return CreateReq_AllOptions::AllOptionCase(_oneof_case_[0]);
}
inline CreateReq_AllOptions::FilterOptionCase CreateReq_AllOptions::filter_option_case() const {
  return CreateReq_AllOptions::FilterOptionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// CreateReq_Position

// uint64 commit_position = 1;
inline void CreateReq_Position::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateReq_Position::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateReq_Position::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Position.commit_position)
  return _internal_commit_position();
}
inline void CreateReq_Position::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void CreateReq_Position::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Position.commit_position)
}

// uint64 prepare_position = 2;
inline void CreateReq_Position::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateReq_Position::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateReq_Position::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Position.prepare_position)
  return _internal_prepare_position();
}
inline void CreateReq_Position::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void CreateReq_Position::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Position.prepare_position)
}

// -------------------------------------------------------------------

// CreateReq_Settings

// bool resolve_links = 1;
inline void CreateReq_Settings::clear_resolve_links() {
  resolve_links_ = false;
}
inline bool CreateReq_Settings::_internal_resolve_links() const {
  return resolve_links_;
}
inline bool CreateReq_Settings::resolve_links() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.resolve_links)
  return _internal_resolve_links();
}
inline void CreateReq_Settings::_internal_set_resolve_links(bool value) {
  
  resolve_links_ = value;
}
inline void CreateReq_Settings::set_resolve_links(bool value) {
  _internal_set_resolve_links(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.resolve_links)
}

// uint64 revision = 2 [deprecated = true];
inline void CreateReq_Settings::clear_revision() {
  revision_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateReq_Settings::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateReq_Settings::revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.revision)
  return _internal_revision();
}
inline void CreateReq_Settings::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  revision_ = value;
}
inline void CreateReq_Settings::set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.revision)
}

// bool extra_statistics = 3;
inline void CreateReq_Settings::clear_extra_statistics() {
  extra_statistics_ = false;
}
inline bool CreateReq_Settings::_internal_extra_statistics() const {
  return extra_statistics_;
}
inline bool CreateReq_Settings::extra_statistics() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.extra_statistics)
  return _internal_extra_statistics();
}
inline void CreateReq_Settings::_internal_set_extra_statistics(bool value) {
  
  extra_statistics_ = value;
}
inline void CreateReq_Settings::set_extra_statistics(bool value) {
  _internal_set_extra_statistics(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.extra_statistics)
}

// int32 max_retry_count = 5;
inline void CreateReq_Settings::clear_max_retry_count() {
  max_retry_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_max_retry_count() const {
  return max_retry_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::max_retry_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.max_retry_count)
  return _internal_max_retry_count();
}
inline void CreateReq_Settings::_internal_set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_retry_count_ = value;
}
inline void CreateReq_Settings::set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_retry_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.max_retry_count)
}

// int32 min_checkpoint_count = 7;
inline void CreateReq_Settings::clear_min_checkpoint_count() {
  min_checkpoint_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_min_checkpoint_count() const {
  return min_checkpoint_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::min_checkpoint_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.min_checkpoint_count)
  return _internal_min_checkpoint_count();
}
inline void CreateReq_Settings::_internal_set_min_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_checkpoint_count_ = value;
}
inline void CreateReq_Settings::set_min_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_checkpoint_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.min_checkpoint_count)
}

// int32 max_checkpoint_count = 8;
inline void CreateReq_Settings::clear_max_checkpoint_count() {
  max_checkpoint_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_max_checkpoint_count() const {
  return max_checkpoint_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::max_checkpoint_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.max_checkpoint_count)
  return _internal_max_checkpoint_count();
}
inline void CreateReq_Settings::_internal_set_max_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_checkpoint_count_ = value;
}
inline void CreateReq_Settings::set_max_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_checkpoint_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.max_checkpoint_count)
}

// int32 max_subscriber_count = 9;
inline void CreateReq_Settings::clear_max_subscriber_count() {
  max_subscriber_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_max_subscriber_count() const {
  return max_subscriber_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::max_subscriber_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.max_subscriber_count)
  return _internal_max_subscriber_count();
}
inline void CreateReq_Settings::_internal_set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_subscriber_count_ = value;
}
inline void CreateReq_Settings::set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_subscriber_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.max_subscriber_count)
}

// int32 live_buffer_size = 10;
inline void CreateReq_Settings::clear_live_buffer_size() {
  live_buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_live_buffer_size() const {
  return live_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::live_buffer_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.live_buffer_size)
  return _internal_live_buffer_size();
}
inline void CreateReq_Settings::_internal_set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  live_buffer_size_ = value;
}
inline void CreateReq_Settings::set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_live_buffer_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.live_buffer_size)
}

// int32 read_batch_size = 11;
inline void CreateReq_Settings::clear_read_batch_size() {
  read_batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_read_batch_size() const {
  return read_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::read_batch_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.read_batch_size)
  return _internal_read_batch_size();
}
inline void CreateReq_Settings::_internal_set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_batch_size_ = value;
}
inline void CreateReq_Settings::set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_read_batch_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.read_batch_size)
}

// int32 history_buffer_size = 12;
inline void CreateReq_Settings::clear_history_buffer_size() {
  history_buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_history_buffer_size() const {
  return history_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::history_buffer_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.history_buffer_size)
  return _internal_history_buffer_size();
}
inline void CreateReq_Settings::_internal_set_history_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  history_buffer_size_ = value;
}
inline void CreateReq_Settings::set_history_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_history_buffer_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.history_buffer_size)
}

// .event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy named_consumer_strategy = 13 [deprecated = true];
inline void CreateReq_Settings::clear_named_consumer_strategy() {
  named_consumer_strategy_ = 0;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy CreateReq_Settings::_internal_named_consumer_strategy() const {
  return static_cast< ::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy >(named_consumer_strategy_);
}
inline ::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy CreateReq_Settings::named_consumer_strategy() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.named_consumer_strategy)
  return _internal_named_consumer_strategy();
}
inline void CreateReq_Settings::_internal_set_named_consumer_strategy(::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy value) {
  
  named_consumer_strategy_ = value;
}
inline void CreateReq_Settings::set_named_consumer_strategy(::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy value) {
  _internal_set_named_consumer_strategy(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.named_consumer_strategy)
}

// int64 message_timeout_ticks = 4;
inline bool CreateReq_Settings::_internal_has_message_timeout_ticks() const {
  return message_timeout_case() == kMessageTimeoutTicks;
}
inline void CreateReq_Settings::set_has_message_timeout_ticks() {
  _oneof_case_[0] = kMessageTimeoutTicks;
}
inline void CreateReq_Settings::clear_message_timeout_ticks() {
  if (_internal_has_message_timeout_ticks()) {
    message_timeout_.message_timeout_ticks_ = PROTOBUF_LONGLONG(0);
    clear_has_message_timeout();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateReq_Settings::_internal_message_timeout_ticks() const {
  if (_internal_has_message_timeout_ticks()) {
    return message_timeout_.message_timeout_ticks_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void CreateReq_Settings::_internal_set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_message_timeout_ticks()) {
    clear_message_timeout();
    set_has_message_timeout_ticks();
  }
  message_timeout_.message_timeout_ticks_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateReq_Settings::message_timeout_ticks() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.message_timeout_ticks)
  return _internal_message_timeout_ticks();
}
inline void CreateReq_Settings::set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_timeout_ticks(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.message_timeout_ticks)
}

// int32 message_timeout_ms = 14;
inline bool CreateReq_Settings::_internal_has_message_timeout_ms() const {
  return message_timeout_case() == kMessageTimeoutMs;
}
inline void CreateReq_Settings::set_has_message_timeout_ms() {
  _oneof_case_[0] = kMessageTimeoutMs;
}
inline void CreateReq_Settings::clear_message_timeout_ms() {
  if (_internal_has_message_timeout_ms()) {
    message_timeout_.message_timeout_ms_ = 0;
    clear_has_message_timeout();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_message_timeout_ms() const {
  if (_internal_has_message_timeout_ms()) {
    return message_timeout_.message_timeout_ms_;
  }
  return 0;
}
inline void CreateReq_Settings::_internal_set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_message_timeout_ms()) {
    clear_message_timeout();
    set_has_message_timeout_ms();
  }
  message_timeout_.message_timeout_ms_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::message_timeout_ms() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.message_timeout_ms)
  return _internal_message_timeout_ms();
}
inline void CreateReq_Settings::set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_timeout_ms(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.message_timeout_ms)
}

// int64 checkpoint_after_ticks = 6;
inline bool CreateReq_Settings::_internal_has_checkpoint_after_ticks() const {
  return checkpoint_after_case() == kCheckpointAfterTicks;
}
inline void CreateReq_Settings::set_has_checkpoint_after_ticks() {
  _oneof_case_[1] = kCheckpointAfterTicks;
}
inline void CreateReq_Settings::clear_checkpoint_after_ticks() {
  if (_internal_has_checkpoint_after_ticks()) {
    checkpoint_after_.checkpoint_after_ticks_ = PROTOBUF_LONGLONG(0);
    clear_has_checkpoint_after();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateReq_Settings::_internal_checkpoint_after_ticks() const {
  if (_internal_has_checkpoint_after_ticks()) {
    return checkpoint_after_.checkpoint_after_ticks_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void CreateReq_Settings::_internal_set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_checkpoint_after_ticks()) {
    clear_checkpoint_after();
    set_has_checkpoint_after_ticks();
  }
  checkpoint_after_.checkpoint_after_ticks_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateReq_Settings::checkpoint_after_ticks() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.checkpoint_after_ticks)
  return _internal_checkpoint_after_ticks();
}
inline void CreateReq_Settings::set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_checkpoint_after_ticks(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.checkpoint_after_ticks)
}

// int32 checkpoint_after_ms = 15;
inline bool CreateReq_Settings::_internal_has_checkpoint_after_ms() const {
  return checkpoint_after_case() == kCheckpointAfterMs;
}
inline void CreateReq_Settings::set_has_checkpoint_after_ms() {
  _oneof_case_[1] = kCheckpointAfterMs;
}
inline void CreateReq_Settings::clear_checkpoint_after_ms() {
  if (_internal_has_checkpoint_after_ms()) {
    checkpoint_after_.checkpoint_after_ms_ = 0;
    clear_has_checkpoint_after();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::_internal_checkpoint_after_ms() const {
  if (_internal_has_checkpoint_after_ms()) {
    return checkpoint_after_.checkpoint_after_ms_;
  }
  return 0;
}
inline void CreateReq_Settings::_internal_set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_checkpoint_after_ms()) {
    clear_checkpoint_after();
    set_has_checkpoint_after_ms();
  }
  checkpoint_after_.checkpoint_after_ms_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateReq_Settings::checkpoint_after_ms() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.checkpoint_after_ms)
  return _internal_checkpoint_after_ms();
}
inline void CreateReq_Settings::set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checkpoint_after_ms(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.checkpoint_after_ms)
}

// string consumer_strategy = 16;
inline void CreateReq_Settings::clear_consumer_strategy() {
  consumer_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_Settings::consumer_strategy() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
  return _internal_consumer_strategy();
}
inline void CreateReq_Settings::set_consumer_strategy(const std::string& value) {
  _internal_set_consumer_strategy(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
}
inline std::string* CreateReq_Settings::mutable_consumer_strategy() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
  return _internal_mutable_consumer_strategy();
}
inline const std::string& CreateReq_Settings::_internal_consumer_strategy() const {
  return consumer_strategy_.Get();
}
inline void CreateReq_Settings::_internal_set_consumer_strategy(const std::string& value) {
  
  consumer_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_Settings::set_consumer_strategy(std::string&& value) {
  
  consumer_strategy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
}
inline void CreateReq_Settings::set_consumer_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consumer_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
}
inline void CreateReq_Settings::set_consumer_strategy(const char* value,
    size_t size) {
  
  consumer_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
}
inline std::string* CreateReq_Settings::_internal_mutable_consumer_strategy() {
  
  return consumer_strategy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_Settings::release_consumer_strategy() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
  return consumer_strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_Settings::set_allocated_consumer_strategy(std::string* consumer_strategy) {
  if (consumer_strategy != nullptr) {
    
  } else {
    
  }
  consumer_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_strategy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
}
inline std::string* CreateReq_Settings::unsafe_arena_release_consumer_strategy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return consumer_strategy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_Settings::unsafe_arena_set_allocated_consumer_strategy(
    std::string* consumer_strategy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (consumer_strategy != nullptr) {
    
  } else {
    
  }
  consumer_strategy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      consumer_strategy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.Settings.consumer_strategy)
}

inline bool CreateReq_Settings::has_message_timeout() const {
  return message_timeout_case() != MESSAGE_TIMEOUT_NOT_SET;
}
inline void CreateReq_Settings::clear_has_message_timeout() {
  _oneof_case_[0] = MESSAGE_TIMEOUT_NOT_SET;
}
inline bool CreateReq_Settings::has_checkpoint_after() const {
  return checkpoint_after_case() != CHECKPOINT_AFTER_NOT_SET;
}
inline void CreateReq_Settings::clear_has_checkpoint_after() {
  _oneof_case_[1] = CHECKPOINT_AFTER_NOT_SET;
}
inline CreateReq_Settings::MessageTimeoutCase CreateReq_Settings::message_timeout_case() const {
  return CreateReq_Settings::MessageTimeoutCase(_oneof_case_[0]);
}
inline CreateReq_Settings::CheckpointAfterCase CreateReq_Settings::checkpoint_after_case() const {
  return CreateReq_Settings::CheckpointAfterCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// CreateReq

// .event_store.client.persistent_subscriptions.CreateReq.Options options = 1;
inline bool CreateReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool CreateReq::has_options() const {
  return _internal_has_options();
}
inline void CreateReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_Options& CreateReq::_internal_options() const {
  const ::event_store::client::persistent_subscriptions::CreateReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::CreateReq_Options*>(
      &::event_store::client::persistent_subscriptions::_CreateReq_Options_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::CreateReq_Options& CreateReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.CreateReq.options)
  return _internal_options();
}
inline void CreateReq::unsafe_arena_set_allocated_options(
    ::event_store::client::persistent_subscriptions::CreateReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.CreateReq.options)
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Options* CreateReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Options* CreateReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.CreateReq.options)
  
  ::event_store::client::persistent_subscriptions::CreateReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Options* CreateReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::CreateReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::persistent_subscriptions::CreateReq_Options* CreateReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.CreateReq.options)
  return _internal_mutable_options();
}
inline void CreateReq::set_allocated_options(::event_store::client::persistent_subscriptions::CreateReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.CreateReq.options)
}

// -------------------------------------------------------------------

// CreateResp

// -------------------------------------------------------------------

// UpdateReq_Options

// .event_store.client.persistent_subscriptions.UpdateReq.StreamOptions stream = 4;
inline bool UpdateReq_Options::_internal_has_stream() const {
  return stream_option_case() == kStream;
}
inline bool UpdateReq_Options::has_stream() const {
  return _internal_has_stream();
}
inline void UpdateReq_Options::set_has_stream() {
  _oneof_case_[0] = kStream;
}
inline void UpdateReq_Options::clear_stream() {
  if (_internal_has_stream()) {
    if (GetArena() == nullptr) {
      delete stream_option_.stream_;
    }
    clear_has_stream_option();
  }
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* UpdateReq_Options::release_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.Options.stream)
  if (_internal_has_stream()) {
    clear_has_stream_option();
      ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* temp = stream_option_.stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions& UpdateReq_Options::_internal_stream() const {
  return _internal_has_stream()
      ? *stream_option_.stream_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions*>(&::event_store::client::persistent_subscriptions::_UpdateReq_StreamOptions_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions& UpdateReq_Options::stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Options.stream)
  return _internal_stream();
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* UpdateReq_Options::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.UpdateReq.Options.stream)
  if (_internal_has_stream()) {
    clear_has_stream_option();
    ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* temp = stream_option_.stream_;
    stream_option_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_stream(::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* stream) {
  clear_stream_option();
  if (stream) {
    set_has_stream();
    stream_option_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.stream)
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* UpdateReq_Options::_internal_mutable_stream() {
  if (!_internal_has_stream()) {
    clear_stream_option();
    set_has_stream();
    stream_option_.stream_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions >(GetArena());
  }
  return stream_option_.stream_;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_StreamOptions* UpdateReq_Options::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.Options.stream)
  return _internal_mutable_stream();
}

// .event_store.client.persistent_subscriptions.UpdateReq.AllOptions all = 5;
inline bool UpdateReq_Options::_internal_has_all() const {
  return stream_option_case() == kAll;
}
inline bool UpdateReq_Options::has_all() const {
  return _internal_has_all();
}
inline void UpdateReq_Options::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline void UpdateReq_Options::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete stream_option_.all_;
    }
    clear_has_stream_option();
  }
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* UpdateReq_Options::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
      ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* temp = stream_option_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions& UpdateReq_Options::_internal_all() const {
  return _internal_has_all()
      ? *stream_option_.all_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions*>(&::event_store::client::persistent_subscriptions::_UpdateReq_AllOptions_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions& UpdateReq_Options::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Options.all)
  return _internal_all();
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* UpdateReq_Options::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.UpdateReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
    ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* temp = stream_option_.all_;
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_all(::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* all) {
  clear_stream_option();
  if (all) {
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.all)
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* UpdateReq_Options::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_stream_option();
    set_has_all();
    stream_option_.all_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions >(GetArena());
  }
  return stream_option_.all_;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_AllOptions* UpdateReq_Options::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.Options.all)
  return _internal_mutable_all();
}

// .event_store.client.StreamIdentifier stream_identifier = 1 [deprecated = true];
inline bool UpdateReq_Options::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool UpdateReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& UpdateReq_Options::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& UpdateReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* UpdateReq_Options::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* UpdateReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.Options.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* UpdateReq_Options::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* UpdateReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void UpdateReq_Options::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.stream_identifier)
}

// string group_name = 2;
inline void UpdateReq_Options::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateReq_Options::group_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
  return _internal_group_name();
}
inline void UpdateReq_Options::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
}
inline std::string* UpdateReq_Options::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& UpdateReq_Options::_internal_group_name() const {
  return group_name_.Get();
}
inline void UpdateReq_Options::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateReq_Options::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
}
inline void UpdateReq_Options::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
}
inline void UpdateReq_Options::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
}
inline std::string* UpdateReq_Options::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateReq_Options::release_group_name() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateReq_Options::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
}
inline std::string* UpdateReq_Options::unsafe_arena_release_group_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_group_name(
    std::string* group_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.group_name)
}

// .event_store.client.persistent_subscriptions.UpdateReq.Settings settings = 3;
inline bool UpdateReq_Options::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool UpdateReq_Options::has_settings() const {
  return _internal_has_settings();
}
inline void UpdateReq_Options::clear_settings() {
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_Settings& UpdateReq_Options::_internal_settings() const {
  const ::event_store::client::persistent_subscriptions::UpdateReq_Settings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::UpdateReq_Settings*>(
      &::event_store::client::persistent_subscriptions::_UpdateReq_Settings_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_Settings& UpdateReq_Options::settings() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Options.settings)
  return _internal_settings();
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_settings(
    ::event_store::client::persistent_subscriptions::UpdateReq_Settings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.settings)
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Settings* UpdateReq_Options::release_settings() {
  auto temp = unsafe_arena_release_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Settings* UpdateReq_Options::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.Options.settings)
  
  ::event_store::client::persistent_subscriptions::UpdateReq_Settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Settings* UpdateReq_Options::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateReq_Settings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Settings* UpdateReq_Options::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.Options.settings)
  return _internal_mutable_settings();
}
inline void UpdateReq_Options::set_allocated_settings(::event_store::client::persistent_subscriptions::UpdateReq_Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.Options.settings)
}

inline bool UpdateReq_Options::has_stream_option() const {
  return stream_option_case() != STREAM_OPTION_NOT_SET;
}
inline void UpdateReq_Options::clear_has_stream_option() {
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}
inline UpdateReq_Options::StreamOptionCase UpdateReq_Options::stream_option_case() const {
  return UpdateReq_Options::StreamOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateReq_StreamOptions

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool UpdateReq_StreamOptions::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool UpdateReq_StreamOptions::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline const ::event_store::client::StreamIdentifier& UpdateReq_StreamOptions::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& UpdateReq_StreamOptions::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.stream_identifier)
  return _internal_stream_identifier();
}
inline void UpdateReq_StreamOptions::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* UpdateReq_StreamOptions::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* UpdateReq_StreamOptions::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* UpdateReq_StreamOptions::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* UpdateReq_StreamOptions::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void UpdateReq_StreamOptions::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.stream_identifier)
}

// uint64 revision = 2;
inline bool UpdateReq_StreamOptions::_internal_has_revision() const {
  return revision_option_case() == kRevision;
}
inline void UpdateReq_StreamOptions::set_has_revision() {
  _oneof_case_[0] = kRevision;
}
inline void UpdateReq_StreamOptions::clear_revision() {
  if (_internal_has_revision()) {
    revision_option_.revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_revision_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateReq_StreamOptions::_internal_revision() const {
  if (_internal_has_revision()) {
    return revision_option_.revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void UpdateReq_StreamOptions::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_revision()) {
    clear_revision_option();
    set_has_revision();
  }
  revision_option_.revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateReq_StreamOptions::revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.revision)
  return _internal_revision();
}
inline void UpdateReq_StreamOptions::set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.revision)
}

// .event_store.client.Empty start = 3;
inline bool UpdateReq_StreamOptions::_internal_has_start() const {
  return revision_option_case() == kStart;
}
inline bool UpdateReq_StreamOptions::has_start() const {
  return _internal_has_start();
}
inline void UpdateReq_StreamOptions::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline ::event_store::client::Empty* UpdateReq_StreamOptions::release_start() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.start)
  if (_internal_has_start()) {
    clear_has_revision_option();
      ::event_store::client::Empty* temp = revision_option_.start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    revision_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& UpdateReq_StreamOptions::_internal_start() const {
  return _internal_has_start()
      ? *revision_option_.start_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& UpdateReq_StreamOptions::start() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.start)
  return _internal_start();
}
inline ::event_store::client::Empty* UpdateReq_StreamOptions::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.start)
  if (_internal_has_start()) {
    clear_has_revision_option();
    ::event_store::client::Empty* temp = revision_option_.start_;
    revision_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateReq_StreamOptions::unsafe_arena_set_allocated_start(::event_store::client::Empty* start) {
  clear_revision_option();
  if (start) {
    set_has_start();
    revision_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.start)
}
inline ::event_store::client::Empty* UpdateReq_StreamOptions::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_revision_option();
    set_has_start();
    revision_option_.start_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return revision_option_.start_;
}
inline ::event_store::client::Empty* UpdateReq_StreamOptions::mutable_start() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.start)
  return _internal_mutable_start();
}

// .event_store.client.Empty end = 4;
inline bool UpdateReq_StreamOptions::_internal_has_end() const {
  return revision_option_case() == kEnd;
}
inline bool UpdateReq_StreamOptions::has_end() const {
  return _internal_has_end();
}
inline void UpdateReq_StreamOptions::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline ::event_store::client::Empty* UpdateReq_StreamOptions::release_end() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.end)
  if (_internal_has_end()) {
    clear_has_revision_option();
      ::event_store::client::Empty* temp = revision_option_.end_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    revision_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& UpdateReq_StreamOptions::_internal_end() const {
  return _internal_has_end()
      ? *revision_option_.end_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& UpdateReq_StreamOptions::end() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.end)
  return _internal_end();
}
inline ::event_store::client::Empty* UpdateReq_StreamOptions::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.end)
  if (_internal_has_end()) {
    clear_has_revision_option();
    ::event_store::client::Empty* temp = revision_option_.end_;
    revision_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateReq_StreamOptions::unsafe_arena_set_allocated_end(::event_store::client::Empty* end) {
  clear_revision_option();
  if (end) {
    set_has_end();
    revision_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.end)
}
inline ::event_store::client::Empty* UpdateReq_StreamOptions::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_revision_option();
    set_has_end();
    revision_option_.end_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return revision_option_.end_;
}
inline ::event_store::client::Empty* UpdateReq_StreamOptions::mutable_end() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.StreamOptions.end)
  return _internal_mutable_end();
}

inline bool UpdateReq_StreamOptions::has_revision_option() const {
  return revision_option_case() != REVISION_OPTION_NOT_SET;
}
inline void UpdateReq_StreamOptions::clear_has_revision_option() {
  _oneof_case_[0] = REVISION_OPTION_NOT_SET;
}
inline UpdateReq_StreamOptions::RevisionOptionCase UpdateReq_StreamOptions::revision_option_case() const {
  return UpdateReq_StreamOptions::RevisionOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateReq_AllOptions

// .event_store.client.persistent_subscriptions.UpdateReq.Position position = 1;
inline bool UpdateReq_AllOptions::_internal_has_position() const {
  return all_option_case() == kPosition;
}
inline bool UpdateReq_AllOptions::has_position() const {
  return _internal_has_position();
}
inline void UpdateReq_AllOptions::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void UpdateReq_AllOptions::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete all_option_.position_;
    }
    clear_has_all_option();
  }
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Position* UpdateReq_AllOptions::release_position() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.position)
  if (_internal_has_position()) {
    clear_has_all_option();
      ::event_store::client::persistent_subscriptions::UpdateReq_Position* temp = all_option_.position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_Position& UpdateReq_AllOptions::_internal_position() const {
  return _internal_has_position()
      ? *all_option_.position_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::UpdateReq_Position*>(&::event_store::client::persistent_subscriptions::_UpdateReq_Position_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_Position& UpdateReq_AllOptions::position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.position)
  return _internal_position();
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Position* UpdateReq_AllOptions::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.position)
  if (_internal_has_position()) {
    clear_has_all_option();
    ::event_store::client::persistent_subscriptions::UpdateReq_Position* temp = all_option_.position_;
    all_option_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateReq_AllOptions::unsafe_arena_set_allocated_position(::event_store::client::persistent_subscriptions::UpdateReq_Position* position) {
  clear_all_option();
  if (position) {
    set_has_position();
    all_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.position)
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Position* UpdateReq_AllOptions::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_all_option();
    set_has_position();
    all_option_.position_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::UpdateReq_Position >(GetArena());
  }
  return all_option_.position_;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Position* UpdateReq_AllOptions::mutable_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.position)
  return _internal_mutable_position();
}

// .event_store.client.Empty start = 2;
inline bool UpdateReq_AllOptions::_internal_has_start() const {
  return all_option_case() == kStart;
}
inline bool UpdateReq_AllOptions::has_start() const {
  return _internal_has_start();
}
inline void UpdateReq_AllOptions::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline ::event_store::client::Empty* UpdateReq_AllOptions::release_start() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.start)
  if (_internal_has_start()) {
    clear_has_all_option();
      ::event_store::client::Empty* temp = all_option_.start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& UpdateReq_AllOptions::_internal_start() const {
  return _internal_has_start()
      ? *all_option_.start_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& UpdateReq_AllOptions::start() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.start)
  return _internal_start();
}
inline ::event_store::client::Empty* UpdateReq_AllOptions::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.start)
  if (_internal_has_start()) {
    clear_has_all_option();
    ::event_store::client::Empty* temp = all_option_.start_;
    all_option_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateReq_AllOptions::unsafe_arena_set_allocated_start(::event_store::client::Empty* start) {
  clear_all_option();
  if (start) {
    set_has_start();
    all_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.start)
}
inline ::event_store::client::Empty* UpdateReq_AllOptions::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_all_option();
    set_has_start();
    all_option_.start_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return all_option_.start_;
}
inline ::event_store::client::Empty* UpdateReq_AllOptions::mutable_start() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.start)
  return _internal_mutable_start();
}

// .event_store.client.Empty end = 3;
inline bool UpdateReq_AllOptions::_internal_has_end() const {
  return all_option_case() == kEnd;
}
inline bool UpdateReq_AllOptions::has_end() const {
  return _internal_has_end();
}
inline void UpdateReq_AllOptions::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline ::event_store::client::Empty* UpdateReq_AllOptions::release_end() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.end)
  if (_internal_has_end()) {
    clear_has_all_option();
      ::event_store::client::Empty* temp = all_option_.end_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    all_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& UpdateReq_AllOptions::_internal_end() const {
  return _internal_has_end()
      ? *all_option_.end_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& UpdateReq_AllOptions::end() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.end)
  return _internal_end();
}
inline ::event_store::client::Empty* UpdateReq_AllOptions::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.end)
  if (_internal_has_end()) {
    clear_has_all_option();
    ::event_store::client::Empty* temp = all_option_.end_;
    all_option_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateReq_AllOptions::unsafe_arena_set_allocated_end(::event_store::client::Empty* end) {
  clear_all_option();
  if (end) {
    set_has_end();
    all_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.end)
}
inline ::event_store::client::Empty* UpdateReq_AllOptions::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_all_option();
    set_has_end();
    all_option_.end_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return all_option_.end_;
}
inline ::event_store::client::Empty* UpdateReq_AllOptions::mutable_end() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.AllOptions.end)
  return _internal_mutable_end();
}

inline bool UpdateReq_AllOptions::has_all_option() const {
  return all_option_case() != ALL_OPTION_NOT_SET;
}
inline void UpdateReq_AllOptions::clear_has_all_option() {
  _oneof_case_[0] = ALL_OPTION_NOT_SET;
}
inline UpdateReq_AllOptions::AllOptionCase UpdateReq_AllOptions::all_option_case() const {
  return UpdateReq_AllOptions::AllOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateReq_Position

// uint64 commit_position = 1;
inline void UpdateReq_Position::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateReq_Position::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateReq_Position::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Position.commit_position)
  return _internal_commit_position();
}
inline void UpdateReq_Position::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void UpdateReq_Position::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Position.commit_position)
}

// uint64 prepare_position = 2;
inline void UpdateReq_Position::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateReq_Position::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateReq_Position::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Position.prepare_position)
  return _internal_prepare_position();
}
inline void UpdateReq_Position::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void UpdateReq_Position::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Position.prepare_position)
}

// -------------------------------------------------------------------

// UpdateReq_Settings

// bool resolve_links = 1;
inline void UpdateReq_Settings::clear_resolve_links() {
  resolve_links_ = false;
}
inline bool UpdateReq_Settings::_internal_resolve_links() const {
  return resolve_links_;
}
inline bool UpdateReq_Settings::resolve_links() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.resolve_links)
  return _internal_resolve_links();
}
inline void UpdateReq_Settings::_internal_set_resolve_links(bool value) {
  
  resolve_links_ = value;
}
inline void UpdateReq_Settings::set_resolve_links(bool value) {
  _internal_set_resolve_links(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.resolve_links)
}

// uint64 revision = 2 [deprecated = true];
inline void UpdateReq_Settings::clear_revision() {
  revision_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateReq_Settings::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateReq_Settings::revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.revision)
  return _internal_revision();
}
inline void UpdateReq_Settings::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  revision_ = value;
}
inline void UpdateReq_Settings::set_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.revision)
}

// bool extra_statistics = 3;
inline void UpdateReq_Settings::clear_extra_statistics() {
  extra_statistics_ = false;
}
inline bool UpdateReq_Settings::_internal_extra_statistics() const {
  return extra_statistics_;
}
inline bool UpdateReq_Settings::extra_statistics() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.extra_statistics)
  return _internal_extra_statistics();
}
inline void UpdateReq_Settings::_internal_set_extra_statistics(bool value) {
  
  extra_statistics_ = value;
}
inline void UpdateReq_Settings::set_extra_statistics(bool value) {
  _internal_set_extra_statistics(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.extra_statistics)
}

// int32 max_retry_count = 5;
inline void UpdateReq_Settings::clear_max_retry_count() {
  max_retry_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_max_retry_count() const {
  return max_retry_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::max_retry_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.max_retry_count)
  return _internal_max_retry_count();
}
inline void UpdateReq_Settings::_internal_set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_retry_count_ = value;
}
inline void UpdateReq_Settings::set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_retry_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.max_retry_count)
}

// int32 min_checkpoint_count = 7;
inline void UpdateReq_Settings::clear_min_checkpoint_count() {
  min_checkpoint_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_min_checkpoint_count() const {
  return min_checkpoint_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::min_checkpoint_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.min_checkpoint_count)
  return _internal_min_checkpoint_count();
}
inline void UpdateReq_Settings::_internal_set_min_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_checkpoint_count_ = value;
}
inline void UpdateReq_Settings::set_min_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_checkpoint_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.min_checkpoint_count)
}

// int32 max_checkpoint_count = 8;
inline void UpdateReq_Settings::clear_max_checkpoint_count() {
  max_checkpoint_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_max_checkpoint_count() const {
  return max_checkpoint_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::max_checkpoint_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.max_checkpoint_count)
  return _internal_max_checkpoint_count();
}
inline void UpdateReq_Settings::_internal_set_max_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_checkpoint_count_ = value;
}
inline void UpdateReq_Settings::set_max_checkpoint_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_checkpoint_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.max_checkpoint_count)
}

// int32 max_subscriber_count = 9;
inline void UpdateReq_Settings::clear_max_subscriber_count() {
  max_subscriber_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_max_subscriber_count() const {
  return max_subscriber_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::max_subscriber_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.max_subscriber_count)
  return _internal_max_subscriber_count();
}
inline void UpdateReq_Settings::_internal_set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_subscriber_count_ = value;
}
inline void UpdateReq_Settings::set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_subscriber_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.max_subscriber_count)
}

// int32 live_buffer_size = 10;
inline void UpdateReq_Settings::clear_live_buffer_size() {
  live_buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_live_buffer_size() const {
  return live_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::live_buffer_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.live_buffer_size)
  return _internal_live_buffer_size();
}
inline void UpdateReq_Settings::_internal_set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  live_buffer_size_ = value;
}
inline void UpdateReq_Settings::set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_live_buffer_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.live_buffer_size)
}

// int32 read_batch_size = 11;
inline void UpdateReq_Settings::clear_read_batch_size() {
  read_batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_read_batch_size() const {
  return read_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::read_batch_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.read_batch_size)
  return _internal_read_batch_size();
}
inline void UpdateReq_Settings::_internal_set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_batch_size_ = value;
}
inline void UpdateReq_Settings::set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_read_batch_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.read_batch_size)
}

// int32 history_buffer_size = 12;
inline void UpdateReq_Settings::clear_history_buffer_size() {
  history_buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_history_buffer_size() const {
  return history_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::history_buffer_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.history_buffer_size)
  return _internal_history_buffer_size();
}
inline void UpdateReq_Settings::_internal_set_history_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  history_buffer_size_ = value;
}
inline void UpdateReq_Settings::set_history_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_history_buffer_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.history_buffer_size)
}

// .event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy named_consumer_strategy = 13;
inline void UpdateReq_Settings::clear_named_consumer_strategy() {
  named_consumer_strategy_ = 0;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy UpdateReq_Settings::_internal_named_consumer_strategy() const {
  return static_cast< ::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy >(named_consumer_strategy_);
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy UpdateReq_Settings::named_consumer_strategy() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.named_consumer_strategy)
  return _internal_named_consumer_strategy();
}
inline void UpdateReq_Settings::_internal_set_named_consumer_strategy(::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy value) {
  
  named_consumer_strategy_ = value;
}
inline void UpdateReq_Settings::set_named_consumer_strategy(::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy value) {
  _internal_set_named_consumer_strategy(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.named_consumer_strategy)
}

// int64 message_timeout_ticks = 4;
inline bool UpdateReq_Settings::_internal_has_message_timeout_ticks() const {
  return message_timeout_case() == kMessageTimeoutTicks;
}
inline void UpdateReq_Settings::set_has_message_timeout_ticks() {
  _oneof_case_[0] = kMessageTimeoutTicks;
}
inline void UpdateReq_Settings::clear_message_timeout_ticks() {
  if (_internal_has_message_timeout_ticks()) {
    message_timeout_.message_timeout_ticks_ = PROTOBUF_LONGLONG(0);
    clear_has_message_timeout();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateReq_Settings::_internal_message_timeout_ticks() const {
  if (_internal_has_message_timeout_ticks()) {
    return message_timeout_.message_timeout_ticks_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void UpdateReq_Settings::_internal_set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_message_timeout_ticks()) {
    clear_message_timeout();
    set_has_message_timeout_ticks();
  }
  message_timeout_.message_timeout_ticks_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateReq_Settings::message_timeout_ticks() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.message_timeout_ticks)
  return _internal_message_timeout_ticks();
}
inline void UpdateReq_Settings::set_message_timeout_ticks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_timeout_ticks(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.message_timeout_ticks)
}

// int32 message_timeout_ms = 14;
inline bool UpdateReq_Settings::_internal_has_message_timeout_ms() const {
  return message_timeout_case() == kMessageTimeoutMs;
}
inline void UpdateReq_Settings::set_has_message_timeout_ms() {
  _oneof_case_[0] = kMessageTimeoutMs;
}
inline void UpdateReq_Settings::clear_message_timeout_ms() {
  if (_internal_has_message_timeout_ms()) {
    message_timeout_.message_timeout_ms_ = 0;
    clear_has_message_timeout();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_message_timeout_ms() const {
  if (_internal_has_message_timeout_ms()) {
    return message_timeout_.message_timeout_ms_;
  }
  return 0;
}
inline void UpdateReq_Settings::_internal_set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_message_timeout_ms()) {
    clear_message_timeout();
    set_has_message_timeout_ms();
  }
  message_timeout_.message_timeout_ms_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::message_timeout_ms() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.message_timeout_ms)
  return _internal_message_timeout_ms();
}
inline void UpdateReq_Settings::set_message_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_timeout_ms(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.message_timeout_ms)
}

// int64 checkpoint_after_ticks = 6;
inline bool UpdateReq_Settings::_internal_has_checkpoint_after_ticks() const {
  return checkpoint_after_case() == kCheckpointAfterTicks;
}
inline void UpdateReq_Settings::set_has_checkpoint_after_ticks() {
  _oneof_case_[1] = kCheckpointAfterTicks;
}
inline void UpdateReq_Settings::clear_checkpoint_after_ticks() {
  if (_internal_has_checkpoint_after_ticks()) {
    checkpoint_after_.checkpoint_after_ticks_ = PROTOBUF_LONGLONG(0);
    clear_has_checkpoint_after();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateReq_Settings::_internal_checkpoint_after_ticks() const {
  if (_internal_has_checkpoint_after_ticks()) {
    return checkpoint_after_.checkpoint_after_ticks_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void UpdateReq_Settings::_internal_set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_checkpoint_after_ticks()) {
    clear_checkpoint_after();
    set_has_checkpoint_after_ticks();
  }
  checkpoint_after_.checkpoint_after_ticks_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateReq_Settings::checkpoint_after_ticks() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.checkpoint_after_ticks)
  return _internal_checkpoint_after_ticks();
}
inline void UpdateReq_Settings::set_checkpoint_after_ticks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_checkpoint_after_ticks(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.checkpoint_after_ticks)
}

// int32 checkpoint_after_ms = 15;
inline bool UpdateReq_Settings::_internal_has_checkpoint_after_ms() const {
  return checkpoint_after_case() == kCheckpointAfterMs;
}
inline void UpdateReq_Settings::set_has_checkpoint_after_ms() {
  _oneof_case_[1] = kCheckpointAfterMs;
}
inline void UpdateReq_Settings::clear_checkpoint_after_ms() {
  if (_internal_has_checkpoint_after_ms()) {
    checkpoint_after_.checkpoint_after_ms_ = 0;
    clear_has_checkpoint_after();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::_internal_checkpoint_after_ms() const {
  if (_internal_has_checkpoint_after_ms()) {
    return checkpoint_after_.checkpoint_after_ms_;
  }
  return 0;
}
inline void UpdateReq_Settings::_internal_set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_checkpoint_after_ms()) {
    clear_checkpoint_after();
    set_has_checkpoint_after_ms();
  }
  checkpoint_after_.checkpoint_after_ms_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateReq_Settings::checkpoint_after_ms() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.Settings.checkpoint_after_ms)
  return _internal_checkpoint_after_ms();
}
inline void UpdateReq_Settings::set_checkpoint_after_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checkpoint_after_ms(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.UpdateReq.Settings.checkpoint_after_ms)
}

inline bool UpdateReq_Settings::has_message_timeout() const {
  return message_timeout_case() != MESSAGE_TIMEOUT_NOT_SET;
}
inline void UpdateReq_Settings::clear_has_message_timeout() {
  _oneof_case_[0] = MESSAGE_TIMEOUT_NOT_SET;
}
inline bool UpdateReq_Settings::has_checkpoint_after() const {
  return checkpoint_after_case() != CHECKPOINT_AFTER_NOT_SET;
}
inline void UpdateReq_Settings::clear_has_checkpoint_after() {
  _oneof_case_[1] = CHECKPOINT_AFTER_NOT_SET;
}
inline UpdateReq_Settings::MessageTimeoutCase UpdateReq_Settings::message_timeout_case() const {
  return UpdateReq_Settings::MessageTimeoutCase(_oneof_case_[0]);
}
inline UpdateReq_Settings::CheckpointAfterCase UpdateReq_Settings::checkpoint_after_case() const {
  return UpdateReq_Settings::CheckpointAfterCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// UpdateReq

// .event_store.client.persistent_subscriptions.UpdateReq.Options options = 1;
inline bool UpdateReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UpdateReq::has_options() const {
  return _internal_has_options();
}
inline void UpdateReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_Options& UpdateReq::_internal_options() const {
  const ::event_store::client::persistent_subscriptions::UpdateReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::UpdateReq_Options*>(
      &::event_store::client::persistent_subscriptions::_UpdateReq_Options_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::UpdateReq_Options& UpdateReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.UpdateReq.options)
  return _internal_options();
}
inline void UpdateReq::unsafe_arena_set_allocated_options(
    ::event_store::client::persistent_subscriptions::UpdateReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.options)
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Options* UpdateReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Options* UpdateReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.UpdateReq.options)
  
  ::event_store::client::persistent_subscriptions::UpdateReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Options* UpdateReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::UpdateReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::persistent_subscriptions::UpdateReq_Options* UpdateReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.UpdateReq.options)
  return _internal_mutable_options();
}
inline void UpdateReq::set_allocated_options(::event_store::client::persistent_subscriptions::UpdateReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.UpdateReq.options)
}

// -------------------------------------------------------------------

// UpdateResp

// -------------------------------------------------------------------

// DeleteReq_Options

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool DeleteReq_Options::_internal_has_stream_identifier() const {
  return stream_option_case() == kStreamIdentifier;
}
inline bool DeleteReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline void DeleteReq_Options::set_has_stream_identifier() {
  _oneof_case_[0] = kStreamIdentifier;
}
inline ::event_store::client::StreamIdentifier* DeleteReq_Options::release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.DeleteReq.Options.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_stream_option();
      ::event_store::client::StreamIdentifier* temp = stream_option_.stream_identifier_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::StreamIdentifier& DeleteReq_Options::_internal_stream_identifier() const {
  return _internal_has_stream_identifier()
      ? *stream_option_.stream_identifier_
      : *reinterpret_cast< ::event_store::client::StreamIdentifier*>(&::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& DeleteReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.DeleteReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline ::event_store::client::StreamIdentifier* DeleteReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.DeleteReq.Options.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_stream_option();
    ::event_store::client::StreamIdentifier* temp = stream_option_.stream_identifier_;
    stream_option_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  clear_stream_option();
  if (stream_identifier) {
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.DeleteReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* DeleteReq_Options::_internal_mutable_stream_identifier() {
  if (!_internal_has_stream_identifier()) {
    clear_stream_option();
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = CreateMaybeMessage< ::event_store::client::StreamIdentifier >(GetArena());
  }
  return stream_option_.stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* DeleteReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.DeleteReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}

// .event_store.client.Empty all = 3;
inline bool DeleteReq_Options::_internal_has_all() const {
  return stream_option_case() == kAll;
}
inline bool DeleteReq_Options::has_all() const {
  return _internal_has_all();
}
inline void DeleteReq_Options::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline ::event_store::client::Empty* DeleteReq_Options::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.DeleteReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
      ::event_store::client::Empty* temp = stream_option_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& DeleteReq_Options::_internal_all() const {
  return _internal_has_all()
      ? *stream_option_.all_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& DeleteReq_Options::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.DeleteReq.Options.all)
  return _internal_all();
}
inline ::event_store::client::Empty* DeleteReq_Options::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.DeleteReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
    ::event_store::client::Empty* temp = stream_option_.all_;
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_all(::event_store::client::Empty* all) {
  clear_stream_option();
  if (all) {
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.DeleteReq.Options.all)
}
inline ::event_store::client::Empty* DeleteReq_Options::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_stream_option();
    set_has_all();
    stream_option_.all_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return stream_option_.all_;
}
inline ::event_store::client::Empty* DeleteReq_Options::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.DeleteReq.Options.all)
  return _internal_mutable_all();
}

// string group_name = 2;
inline void DeleteReq_Options::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteReq_Options::group_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
  return _internal_group_name();
}
inline void DeleteReq_Options::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
}
inline std::string* DeleteReq_Options::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& DeleteReq_Options::_internal_group_name() const {
  return group_name_.Get();
}
inline void DeleteReq_Options::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteReq_Options::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
}
inline void DeleteReq_Options::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
}
inline void DeleteReq_Options::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
}
inline std::string* DeleteReq_Options::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteReq_Options::release_group_name() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteReq_Options::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
}
inline std::string* DeleteReq_Options::unsafe_arena_release_group_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_group_name(
    std::string* group_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.DeleteReq.Options.group_name)
}

inline bool DeleteReq_Options::has_stream_option() const {
  return stream_option_case() != STREAM_OPTION_NOT_SET;
}
inline void DeleteReq_Options::clear_has_stream_option() {
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}
inline DeleteReq_Options::StreamOptionCase DeleteReq_Options::stream_option_case() const {
  return DeleteReq_Options::StreamOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteReq

// .event_store.client.persistent_subscriptions.DeleteReq.Options options = 1;
inline bool DeleteReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DeleteReq::has_options() const {
  return _internal_has_options();
}
inline void DeleteReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::DeleteReq_Options& DeleteReq::_internal_options() const {
  const ::event_store::client::persistent_subscriptions::DeleteReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::DeleteReq_Options*>(
      &::event_store::client::persistent_subscriptions::_DeleteReq_Options_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::DeleteReq_Options& DeleteReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.DeleteReq.options)
  return _internal_options();
}
inline void DeleteReq::unsafe_arena_set_allocated_options(
    ::event_store::client::persistent_subscriptions::DeleteReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.DeleteReq.options)
}
inline ::event_store::client::persistent_subscriptions::DeleteReq_Options* DeleteReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::DeleteReq_Options* DeleteReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.DeleteReq.options)
  
  ::event_store::client::persistent_subscriptions::DeleteReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::DeleteReq_Options* DeleteReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::DeleteReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::persistent_subscriptions::DeleteReq_Options* DeleteReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.DeleteReq.options)
  return _internal_mutable_options();
}
inline void DeleteReq::set_allocated_options(::event_store::client::persistent_subscriptions::DeleteReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.DeleteReq.options)
}

// -------------------------------------------------------------------

// DeleteResp

// -------------------------------------------------------------------

// GetInfoReq_Options

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool GetInfoReq_Options::_internal_has_stream_identifier() const {
  return stream_option_case() == kStreamIdentifier;
}
inline bool GetInfoReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline void GetInfoReq_Options::set_has_stream_identifier() {
  _oneof_case_[0] = kStreamIdentifier;
}
inline ::event_store::client::StreamIdentifier* GetInfoReq_Options::release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.GetInfoReq.Options.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_stream_option();
      ::event_store::client::StreamIdentifier* temp = stream_option_.stream_identifier_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::StreamIdentifier& GetInfoReq_Options::_internal_stream_identifier() const {
  return _internal_has_stream_identifier()
      ? *stream_option_.stream_identifier_
      : *reinterpret_cast< ::event_store::client::StreamIdentifier*>(&::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& GetInfoReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.GetInfoReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline ::event_store::client::StreamIdentifier* GetInfoReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.GetInfoReq.Options.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_stream_option();
    ::event_store::client::StreamIdentifier* temp = stream_option_.stream_identifier_;
    stream_option_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetInfoReq_Options::unsafe_arena_set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  clear_stream_option();
  if (stream_identifier) {
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.GetInfoReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* GetInfoReq_Options::_internal_mutable_stream_identifier() {
  if (!_internal_has_stream_identifier()) {
    clear_stream_option();
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = CreateMaybeMessage< ::event_store::client::StreamIdentifier >(GetArena());
  }
  return stream_option_.stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* GetInfoReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.GetInfoReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}

// .event_store.client.Empty all = 2;
inline bool GetInfoReq_Options::_internal_has_all() const {
  return stream_option_case() == kAll;
}
inline bool GetInfoReq_Options::has_all() const {
  return _internal_has_all();
}
inline void GetInfoReq_Options::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline ::event_store::client::Empty* GetInfoReq_Options::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.GetInfoReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
      ::event_store::client::Empty* temp = stream_option_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& GetInfoReq_Options::_internal_all() const {
  return _internal_has_all()
      ? *stream_option_.all_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& GetInfoReq_Options::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.GetInfoReq.Options.all)
  return _internal_all();
}
inline ::event_store::client::Empty* GetInfoReq_Options::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.GetInfoReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
    ::event_store::client::Empty* temp = stream_option_.all_;
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetInfoReq_Options::unsafe_arena_set_allocated_all(::event_store::client::Empty* all) {
  clear_stream_option();
  if (all) {
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.GetInfoReq.Options.all)
}
inline ::event_store::client::Empty* GetInfoReq_Options::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_stream_option();
    set_has_all();
    stream_option_.all_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return stream_option_.all_;
}
inline ::event_store::client::Empty* GetInfoReq_Options::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.GetInfoReq.Options.all)
  return _internal_mutable_all();
}

// string group_name = 3;
inline void GetInfoReq_Options::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetInfoReq_Options::group_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
  return _internal_group_name();
}
inline void GetInfoReq_Options::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
}
inline std::string* GetInfoReq_Options::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& GetInfoReq_Options::_internal_group_name() const {
  return group_name_.Get();
}
inline void GetInfoReq_Options::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetInfoReq_Options::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
}
inline void GetInfoReq_Options::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
}
inline void GetInfoReq_Options::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
}
inline std::string* GetInfoReq_Options::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetInfoReq_Options::release_group_name() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInfoReq_Options::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
}
inline std::string* GetInfoReq_Options::unsafe_arena_release_group_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetInfoReq_Options::unsafe_arena_set_allocated_group_name(
    std::string* group_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.GetInfoReq.Options.group_name)
}

inline bool GetInfoReq_Options::has_stream_option() const {
  return stream_option_case() != STREAM_OPTION_NOT_SET;
}
inline void GetInfoReq_Options::clear_has_stream_option() {
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}
inline GetInfoReq_Options::StreamOptionCase GetInfoReq_Options::stream_option_case() const {
  return GetInfoReq_Options::StreamOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetInfoReq

// .event_store.client.persistent_subscriptions.GetInfoReq.Options options = 1;
inline bool GetInfoReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool GetInfoReq::has_options() const {
  return _internal_has_options();
}
inline void GetInfoReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::GetInfoReq_Options& GetInfoReq::_internal_options() const {
  const ::event_store::client::persistent_subscriptions::GetInfoReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::GetInfoReq_Options*>(
      &::event_store::client::persistent_subscriptions::_GetInfoReq_Options_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::GetInfoReq_Options& GetInfoReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.GetInfoReq.options)
  return _internal_options();
}
inline void GetInfoReq::unsafe_arena_set_allocated_options(
    ::event_store::client::persistent_subscriptions::GetInfoReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.GetInfoReq.options)
}
inline ::event_store::client::persistent_subscriptions::GetInfoReq_Options* GetInfoReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::GetInfoReq_Options* GetInfoReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.GetInfoReq.options)
  
  ::event_store::client::persistent_subscriptions::GetInfoReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::GetInfoReq_Options* GetInfoReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::GetInfoReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::persistent_subscriptions::GetInfoReq_Options* GetInfoReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.GetInfoReq.options)
  return _internal_mutable_options();
}
inline void GetInfoReq::set_allocated_options(::event_store::client::persistent_subscriptions::GetInfoReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.GetInfoReq.options)
}

// -------------------------------------------------------------------

// GetInfoResp

// .event_store.client.persistent_subscriptions.SubscriptionInfo subscription_info = 1;
inline bool GetInfoResp::_internal_has_subscription_info() const {
  return this != internal_default_instance() && subscription_info_ != nullptr;
}
inline bool GetInfoResp::has_subscription_info() const {
  return _internal_has_subscription_info();
}
inline void GetInfoResp::clear_subscription_info() {
  if (GetArena() == nullptr && subscription_info_ != nullptr) {
    delete subscription_info_;
  }
  subscription_info_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::SubscriptionInfo& GetInfoResp::_internal_subscription_info() const {
  const ::event_store::client::persistent_subscriptions::SubscriptionInfo* p = subscription_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::SubscriptionInfo*>(
      &::event_store::client::persistent_subscriptions::_SubscriptionInfo_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::SubscriptionInfo& GetInfoResp::subscription_info() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.GetInfoResp.subscription_info)
  return _internal_subscription_info();
}
inline void GetInfoResp::unsafe_arena_set_allocated_subscription_info(
    ::event_store::client::persistent_subscriptions::SubscriptionInfo* subscription_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscription_info_);
  }
  subscription_info_ = subscription_info;
  if (subscription_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.GetInfoResp.subscription_info)
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo* GetInfoResp::release_subscription_info() {
  auto temp = unsafe_arena_release_subscription_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo* GetInfoResp::unsafe_arena_release_subscription_info() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.GetInfoResp.subscription_info)
  
  ::event_store::client::persistent_subscriptions::SubscriptionInfo* temp = subscription_info_;
  subscription_info_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo* GetInfoResp::_internal_mutable_subscription_info() {
  
  if (subscription_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::SubscriptionInfo>(GetArena());
    subscription_info_ = p;
  }
  return subscription_info_;
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo* GetInfoResp::mutable_subscription_info() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.GetInfoResp.subscription_info)
  return _internal_mutable_subscription_info();
}
inline void GetInfoResp::set_allocated_subscription_info(::event_store::client::persistent_subscriptions::SubscriptionInfo* subscription_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subscription_info_;
  }
  if (subscription_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscription_info);
    if (message_arena != submessage_arena) {
      subscription_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_info, submessage_arena);
    }
    
  } else {
    
  }
  subscription_info_ = subscription_info;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.GetInfoResp.subscription_info)
}

// -------------------------------------------------------------------

// SubscriptionInfo_ConnectionInfo

// string from = 1;
inline void SubscriptionInfo_ConnectionInfo::clear_from() {
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo_ConnectionInfo::from() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
  return _internal_from();
}
inline void SubscriptionInfo_ConnectionInfo::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
}
inline std::string* SubscriptionInfo_ConnectionInfo::mutable_from() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
  return _internal_mutable_from();
}
inline const std::string& SubscriptionInfo_ConnectionInfo::_internal_from() const {
  return from_.Get();
}
inline void SubscriptionInfo_ConnectionInfo::_internal_set_from(const std::string& value) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::set_from(std::string&& value) {
  
  from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
}
inline void SubscriptionInfo_ConnectionInfo::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
}
inline void SubscriptionInfo_ConnectionInfo::set_from(const char* value,
    size_t size) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
}
inline std::string* SubscriptionInfo_ConnectionInfo::_internal_mutable_from() {
  
  return from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo_ConnectionInfo::release_from() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
}
inline std::string* SubscriptionInfo_ConnectionInfo::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return from_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::unsafe_arena_set_allocated_from(
    std::string* from) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (from != nullptr) {
    
  } else {
    
  }
  from_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      from, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.from)
}

// string username = 2;
inline void SubscriptionInfo_ConnectionInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo_ConnectionInfo::username() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
  return _internal_username();
}
inline void SubscriptionInfo_ConnectionInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
}
inline std::string* SubscriptionInfo_ConnectionInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
  return _internal_mutable_username();
}
inline const std::string& SubscriptionInfo_ConnectionInfo::_internal_username() const {
  return username_.Get();
}
inline void SubscriptionInfo_ConnectionInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
}
inline void SubscriptionInfo_ConnectionInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
}
inline void SubscriptionInfo_ConnectionInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
}
inline std::string* SubscriptionInfo_ConnectionInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo_ConnectionInfo::release_username() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
}
inline std::string* SubscriptionInfo_ConnectionInfo::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.username)
}

// int32 average_items_per_second = 3;
inline void SubscriptionInfo_ConnectionInfo::clear_average_items_per_second() {
  average_items_per_second_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo_ConnectionInfo::_internal_average_items_per_second() const {
  return average_items_per_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo_ConnectionInfo::average_items_per_second() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.average_items_per_second)
  return _internal_average_items_per_second();
}
inline void SubscriptionInfo_ConnectionInfo::_internal_set_average_items_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_items_per_second_ = value;
}
inline void SubscriptionInfo_ConnectionInfo::set_average_items_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_items_per_second(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.average_items_per_second)
}

// int64 total_items = 4;
inline void SubscriptionInfo_ConnectionInfo::clear_total_items() {
  total_items_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo_ConnectionInfo::_internal_total_items() const {
  return total_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo_ConnectionInfo::total_items() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.total_items)
  return _internal_total_items();
}
inline void SubscriptionInfo_ConnectionInfo::_internal_set_total_items(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_items_ = value;
}
inline void SubscriptionInfo_ConnectionInfo::set_total_items(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_items(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.total_items)
}

// int64 count_since_last_measurement = 5;
inline void SubscriptionInfo_ConnectionInfo::clear_count_since_last_measurement() {
  count_since_last_measurement_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo_ConnectionInfo::_internal_count_since_last_measurement() const {
  return count_since_last_measurement_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo_ConnectionInfo::count_since_last_measurement() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.count_since_last_measurement)
  return _internal_count_since_last_measurement();
}
inline void SubscriptionInfo_ConnectionInfo::_internal_set_count_since_last_measurement(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_since_last_measurement_ = value;
}
inline void SubscriptionInfo_ConnectionInfo::set_count_since_last_measurement(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count_since_last_measurement(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.count_since_last_measurement)
}

// repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement observed_measurements = 6;
inline int SubscriptionInfo_ConnectionInfo::_internal_observed_measurements_size() const {
  return observed_measurements_.size();
}
inline int SubscriptionInfo_ConnectionInfo::observed_measurements_size() const {
  return _internal_observed_measurements_size();
}
inline void SubscriptionInfo_ConnectionInfo::clear_observed_measurements() {
  observed_measurements_.Clear();
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement* SubscriptionInfo_ConnectionInfo::mutable_observed_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.observed_measurements)
  return observed_measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement >*
SubscriptionInfo_ConnectionInfo::mutable_observed_measurements() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.observed_measurements)
  return &observed_measurements_;
}
inline const ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement& SubscriptionInfo_ConnectionInfo::_internal_observed_measurements(int index) const {
  return observed_measurements_.Get(index);
}
inline const ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement& SubscriptionInfo_ConnectionInfo::observed_measurements(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.observed_measurements)
  return _internal_observed_measurements(index);
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement* SubscriptionInfo_ConnectionInfo::_internal_add_observed_measurements() {
  return observed_measurements_.Add();
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement* SubscriptionInfo_ConnectionInfo::add_observed_measurements() {
  // @@protoc_insertion_point(field_add:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.observed_measurements)
  return _internal_add_observed_measurements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_Measurement >&
SubscriptionInfo_ConnectionInfo::observed_measurements() const {
  // @@protoc_insertion_point(field_list:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.observed_measurements)
  return observed_measurements_;
}

// int32 available_slots = 7;
inline void SubscriptionInfo_ConnectionInfo::clear_available_slots() {
  available_slots_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo_ConnectionInfo::_internal_available_slots() const {
  return available_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo_ConnectionInfo::available_slots() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.available_slots)
  return _internal_available_slots();
}
inline void SubscriptionInfo_ConnectionInfo::_internal_set_available_slots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_slots_ = value;
}
inline void SubscriptionInfo_ConnectionInfo::set_available_slots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_available_slots(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.available_slots)
}

// int32 in_flight_messages = 8;
inline void SubscriptionInfo_ConnectionInfo::clear_in_flight_messages() {
  in_flight_messages_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo_ConnectionInfo::_internal_in_flight_messages() const {
  return in_flight_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo_ConnectionInfo::in_flight_messages() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.in_flight_messages)
  return _internal_in_flight_messages();
}
inline void SubscriptionInfo_ConnectionInfo::_internal_set_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  in_flight_messages_ = value;
}
inline void SubscriptionInfo_ConnectionInfo::set_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_flight_messages(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.in_flight_messages)
}

// string connection_name = 9;
inline void SubscriptionInfo_ConnectionInfo::clear_connection_name() {
  connection_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo_ConnectionInfo::connection_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
  return _internal_connection_name();
}
inline void SubscriptionInfo_ConnectionInfo::set_connection_name(const std::string& value) {
  _internal_set_connection_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
}
inline std::string* SubscriptionInfo_ConnectionInfo::mutable_connection_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
  return _internal_mutable_connection_name();
}
inline const std::string& SubscriptionInfo_ConnectionInfo::_internal_connection_name() const {
  return connection_name_.Get();
}
inline void SubscriptionInfo_ConnectionInfo::_internal_set_connection_name(const std::string& value) {
  
  connection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::set_connection_name(std::string&& value) {
  
  connection_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
}
inline void SubscriptionInfo_ConnectionInfo::set_connection_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
}
inline void SubscriptionInfo_ConnectionInfo::set_connection_name(const char* value,
    size_t size) {
  
  connection_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
}
inline std::string* SubscriptionInfo_ConnectionInfo::_internal_mutable_connection_name() {
  
  return connection_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo_ConnectionInfo::release_connection_name() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
  return connection_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::set_allocated_connection_name(std::string* connection_name) {
  if (connection_name != nullptr) {
    
  } else {
    
  }
  connection_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
}
inline std::string* SubscriptionInfo_ConnectionInfo::unsafe_arena_release_connection_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return connection_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo_ConnectionInfo::unsafe_arena_set_allocated_connection_name(
    std::string* connection_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (connection_name != nullptr) {
    
  } else {
    
  }
  connection_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      connection_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo.connection_name)
}

// -------------------------------------------------------------------

// SubscriptionInfo_Measurement

// string key = 1;
inline void SubscriptionInfo_Measurement::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo_Measurement::key() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
  return _internal_key();
}
inline void SubscriptionInfo_Measurement::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
}
inline std::string* SubscriptionInfo_Measurement::mutable_key() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
  return _internal_mutable_key();
}
inline const std::string& SubscriptionInfo_Measurement::_internal_key() const {
  return key_.Get();
}
inline void SubscriptionInfo_Measurement::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo_Measurement::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
}
inline void SubscriptionInfo_Measurement::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
}
inline void SubscriptionInfo_Measurement::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
}
inline std::string* SubscriptionInfo_Measurement::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo_Measurement::release_key() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo_Measurement::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
}
inline std::string* SubscriptionInfo_Measurement::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo_Measurement::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.key)
}

// int64 value = 2;
inline void SubscriptionInfo_Measurement::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo_Measurement::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo_Measurement::value() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.value)
  return _internal_value();
}
inline void SubscriptionInfo_Measurement::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void SubscriptionInfo_Measurement::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement.value)
}

// -------------------------------------------------------------------

// SubscriptionInfo

// string event_source = 1;
inline void SubscriptionInfo::clear_event_source() {
  event_source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo::event_source() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
  return _internal_event_source();
}
inline void SubscriptionInfo::set_event_source(const std::string& value) {
  _internal_set_event_source(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
}
inline std::string* SubscriptionInfo::mutable_event_source() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
  return _internal_mutable_event_source();
}
inline const std::string& SubscriptionInfo::_internal_event_source() const {
  return event_source_.Get();
}
inline void SubscriptionInfo::_internal_set_event_source(const std::string& value) {
  
  event_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo::set_event_source(std::string&& value) {
  
  event_source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
}
inline void SubscriptionInfo::set_event_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
}
inline void SubscriptionInfo::set_event_source(const char* value,
    size_t size) {
  
  event_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
}
inline std::string* SubscriptionInfo::_internal_mutable_event_source() {
  
  return event_source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo::release_event_source() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
  return event_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo::set_allocated_event_source(std::string* event_source) {
  if (event_source != nullptr) {
    
  } else {
    
  }
  event_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
}
inline std::string* SubscriptionInfo::unsafe_arena_release_event_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return event_source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo::unsafe_arena_set_allocated_event_source(
    std::string* event_source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (event_source != nullptr) {
    
  } else {
    
  }
  event_source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      event_source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.event_source)
}

// string group_name = 2;
inline void SubscriptionInfo::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo::group_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
  return _internal_group_name();
}
inline void SubscriptionInfo::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
}
inline std::string* SubscriptionInfo::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& SubscriptionInfo::_internal_group_name() const {
  return group_name_.Get();
}
inline void SubscriptionInfo::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
}
inline void SubscriptionInfo::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
}
inline void SubscriptionInfo::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
}
inline std::string* SubscriptionInfo::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo::release_group_name() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
}
inline std::string* SubscriptionInfo::unsafe_arena_release_group_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo::unsafe_arena_set_allocated_group_name(
    std::string* group_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.group_name)
}

// string status = 3;
inline void SubscriptionInfo::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo::status() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
  return _internal_status();
}
inline void SubscriptionInfo::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
}
inline std::string* SubscriptionInfo::mutable_status() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
  return _internal_mutable_status();
}
inline const std::string& SubscriptionInfo::_internal_status() const {
  return status_.Get();
}
inline void SubscriptionInfo::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
}
inline void SubscriptionInfo::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
}
inline void SubscriptionInfo::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
}
inline std::string* SubscriptionInfo::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo::release_status() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
}
inline std::string* SubscriptionInfo::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.status)
}

// repeated .event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo connections = 4;
inline int SubscriptionInfo::_internal_connections_size() const {
  return connections_.size();
}
inline int SubscriptionInfo::connections_size() const {
  return _internal_connections_size();
}
inline void SubscriptionInfo::clear_connections() {
  connections_.Clear();
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo* SubscriptionInfo::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo >*
SubscriptionInfo::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.persistent_subscriptions.SubscriptionInfo.connections)
  return &connections_;
}
inline const ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo& SubscriptionInfo::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo& SubscriptionInfo::connections(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.connections)
  return _internal_connections(index);
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo* SubscriptionInfo::_internal_add_connections() {
  return connections_.Add();
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo* SubscriptionInfo::add_connections() {
  // @@protoc_insertion_point(field_add:event_store.client.persistent_subscriptions.SubscriptionInfo.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo_ConnectionInfo >&
SubscriptionInfo::connections() const {
  // @@protoc_insertion_point(field_list:event_store.client.persistent_subscriptions.SubscriptionInfo.connections)
  return connections_;
}

// int32 average_per_second = 5;
inline void SubscriptionInfo::clear_average_per_second() {
  average_per_second_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_average_per_second() const {
  return average_per_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::average_per_second() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.average_per_second)
  return _internal_average_per_second();
}
inline void SubscriptionInfo::_internal_set_average_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_per_second_ = value;
}
inline void SubscriptionInfo::set_average_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_per_second(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.average_per_second)
}

// int64 total_items = 6;
inline void SubscriptionInfo::clear_total_items() {
  total_items_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo::_internal_total_items() const {
  return total_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo::total_items() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.total_items)
  return _internal_total_items();
}
inline void SubscriptionInfo::_internal_set_total_items(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_items_ = value;
}
inline void SubscriptionInfo::set_total_items(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_items(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.total_items)
}

// int64 count_since_last_measurement = 7;
inline void SubscriptionInfo::clear_count_since_last_measurement() {
  count_since_last_measurement_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo::_internal_count_since_last_measurement() const {
  return count_since_last_measurement_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo::count_since_last_measurement() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.count_since_last_measurement)
  return _internal_count_since_last_measurement();
}
inline void SubscriptionInfo::_internal_set_count_since_last_measurement(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_since_last_measurement_ = value;
}
inline void SubscriptionInfo::set_count_since_last_measurement(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count_since_last_measurement(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.count_since_last_measurement)
}

// string last_checkpointed_event_position = 8;
inline void SubscriptionInfo::clear_last_checkpointed_event_position() {
  last_checkpointed_event_position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo::last_checkpointed_event_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
  return _internal_last_checkpointed_event_position();
}
inline void SubscriptionInfo::set_last_checkpointed_event_position(const std::string& value) {
  _internal_set_last_checkpointed_event_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
}
inline std::string* SubscriptionInfo::mutable_last_checkpointed_event_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
  return _internal_mutable_last_checkpointed_event_position();
}
inline const std::string& SubscriptionInfo::_internal_last_checkpointed_event_position() const {
  return last_checkpointed_event_position_.Get();
}
inline void SubscriptionInfo::_internal_set_last_checkpointed_event_position(const std::string& value) {
  
  last_checkpointed_event_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo::set_last_checkpointed_event_position(std::string&& value) {
  
  last_checkpointed_event_position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
}
inline void SubscriptionInfo::set_last_checkpointed_event_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_checkpointed_event_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
}
inline void SubscriptionInfo::set_last_checkpointed_event_position(const char* value,
    size_t size) {
  
  last_checkpointed_event_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
}
inline std::string* SubscriptionInfo::_internal_mutable_last_checkpointed_event_position() {
  
  return last_checkpointed_event_position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo::release_last_checkpointed_event_position() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
  return last_checkpointed_event_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo::set_allocated_last_checkpointed_event_position(std::string* last_checkpointed_event_position) {
  if (last_checkpointed_event_position != nullptr) {
    
  } else {
    
  }
  last_checkpointed_event_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_checkpointed_event_position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
}
inline std::string* SubscriptionInfo::unsafe_arena_release_last_checkpointed_event_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_checkpointed_event_position_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo::unsafe_arena_set_allocated_last_checkpointed_event_position(
    std::string* last_checkpointed_event_position) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_checkpointed_event_position != nullptr) {
    
  } else {
    
  }
  last_checkpointed_event_position_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_checkpointed_event_position, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.last_checkpointed_event_position)
}

// string last_known_event_position = 9;
inline void SubscriptionInfo::clear_last_known_event_position() {
  last_known_event_position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo::last_known_event_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
  return _internal_last_known_event_position();
}
inline void SubscriptionInfo::set_last_known_event_position(const std::string& value) {
  _internal_set_last_known_event_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
}
inline std::string* SubscriptionInfo::mutable_last_known_event_position() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
  return _internal_mutable_last_known_event_position();
}
inline const std::string& SubscriptionInfo::_internal_last_known_event_position() const {
  return last_known_event_position_.Get();
}
inline void SubscriptionInfo::_internal_set_last_known_event_position(const std::string& value) {
  
  last_known_event_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo::set_last_known_event_position(std::string&& value) {
  
  last_known_event_position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
}
inline void SubscriptionInfo::set_last_known_event_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_known_event_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
}
inline void SubscriptionInfo::set_last_known_event_position(const char* value,
    size_t size) {
  
  last_known_event_position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
}
inline std::string* SubscriptionInfo::_internal_mutable_last_known_event_position() {
  
  return last_known_event_position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo::release_last_known_event_position() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
  return last_known_event_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo::set_allocated_last_known_event_position(std::string* last_known_event_position) {
  if (last_known_event_position != nullptr) {
    
  } else {
    
  }
  last_known_event_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_known_event_position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
}
inline std::string* SubscriptionInfo::unsafe_arena_release_last_known_event_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_known_event_position_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo::unsafe_arena_set_allocated_last_known_event_position(
    std::string* last_known_event_position) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_known_event_position != nullptr) {
    
  } else {
    
  }
  last_known_event_position_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_known_event_position, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.last_known_event_position)
}

// bool resolve_link_tos = 10;
inline void SubscriptionInfo::clear_resolve_link_tos() {
  resolve_link_tos_ = false;
}
inline bool SubscriptionInfo::_internal_resolve_link_tos() const {
  return resolve_link_tos_;
}
inline bool SubscriptionInfo::resolve_link_tos() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.resolve_link_tos)
  return _internal_resolve_link_tos();
}
inline void SubscriptionInfo::_internal_set_resolve_link_tos(bool value) {
  
  resolve_link_tos_ = value;
}
inline void SubscriptionInfo::set_resolve_link_tos(bool value) {
  _internal_set_resolve_link_tos(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.resolve_link_tos)
}

// string start_from = 11;
inline void SubscriptionInfo::clear_start_from() {
  start_from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo::start_from() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
  return _internal_start_from();
}
inline void SubscriptionInfo::set_start_from(const std::string& value) {
  _internal_set_start_from(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
}
inline std::string* SubscriptionInfo::mutable_start_from() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
  return _internal_mutable_start_from();
}
inline const std::string& SubscriptionInfo::_internal_start_from() const {
  return start_from_.Get();
}
inline void SubscriptionInfo::_internal_set_start_from(const std::string& value) {
  
  start_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo::set_start_from(std::string&& value) {
  
  start_from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
}
inline void SubscriptionInfo::set_start_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
}
inline void SubscriptionInfo::set_start_from(const char* value,
    size_t size) {
  
  start_from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
}
inline std::string* SubscriptionInfo::_internal_mutable_start_from() {
  
  return start_from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo::release_start_from() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
  return start_from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo::set_allocated_start_from(std::string* start_from) {
  if (start_from != nullptr) {
    
  } else {
    
  }
  start_from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
}
inline std::string* SubscriptionInfo::unsafe_arena_release_start_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_from_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo::unsafe_arena_set_allocated_start_from(
    std::string* start_from) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_from != nullptr) {
    
  } else {
    
  }
  start_from_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_from, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.start_from)
}

// int32 message_timeout_milliseconds = 12;
inline void SubscriptionInfo::clear_message_timeout_milliseconds() {
  message_timeout_milliseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_message_timeout_milliseconds() const {
  return message_timeout_milliseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::message_timeout_milliseconds() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.message_timeout_milliseconds)
  return _internal_message_timeout_milliseconds();
}
inline void SubscriptionInfo::_internal_set_message_timeout_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  message_timeout_milliseconds_ = value;
}
inline void SubscriptionInfo::set_message_timeout_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_timeout_milliseconds(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.message_timeout_milliseconds)
}

// bool extra_statistics = 13;
inline void SubscriptionInfo::clear_extra_statistics() {
  extra_statistics_ = false;
}
inline bool SubscriptionInfo::_internal_extra_statistics() const {
  return extra_statistics_;
}
inline bool SubscriptionInfo::extra_statistics() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.extra_statistics)
  return _internal_extra_statistics();
}
inline void SubscriptionInfo::_internal_set_extra_statistics(bool value) {
  
  extra_statistics_ = value;
}
inline void SubscriptionInfo::set_extra_statistics(bool value) {
  _internal_set_extra_statistics(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.extra_statistics)
}

// int32 max_retry_count = 14;
inline void SubscriptionInfo::clear_max_retry_count() {
  max_retry_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_max_retry_count() const {
  return max_retry_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::max_retry_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.max_retry_count)
  return _internal_max_retry_count();
}
inline void SubscriptionInfo::_internal_set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_retry_count_ = value;
}
inline void SubscriptionInfo::set_max_retry_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_retry_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.max_retry_count)
}

// int32 live_buffer_size = 15;
inline void SubscriptionInfo::clear_live_buffer_size() {
  live_buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_live_buffer_size() const {
  return live_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::live_buffer_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.live_buffer_size)
  return _internal_live_buffer_size();
}
inline void SubscriptionInfo::_internal_set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  live_buffer_size_ = value;
}
inline void SubscriptionInfo::set_live_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_live_buffer_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.live_buffer_size)
}

// int32 buffer_size = 16;
inline void SubscriptionInfo::clear_buffer_size() {
  buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_buffer_size() const {
  return buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::buffer_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.buffer_size)
  return _internal_buffer_size();
}
inline void SubscriptionInfo::_internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffer_size_ = value;
}
inline void SubscriptionInfo::set_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffer_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.buffer_size)
}

// int32 read_batch_size = 17;
inline void SubscriptionInfo::clear_read_batch_size() {
  read_batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_read_batch_size() const {
  return read_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::read_batch_size() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.read_batch_size)
  return _internal_read_batch_size();
}
inline void SubscriptionInfo::_internal_set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_batch_size_ = value;
}
inline void SubscriptionInfo::set_read_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_read_batch_size(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.read_batch_size)
}

// int32 check_point_after_milliseconds = 18;
inline void SubscriptionInfo::clear_check_point_after_milliseconds() {
  check_point_after_milliseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_check_point_after_milliseconds() const {
  return check_point_after_milliseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::check_point_after_milliseconds() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.check_point_after_milliseconds)
  return _internal_check_point_after_milliseconds();
}
inline void SubscriptionInfo::_internal_set_check_point_after_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  check_point_after_milliseconds_ = value;
}
inline void SubscriptionInfo::set_check_point_after_milliseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_check_point_after_milliseconds(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.check_point_after_milliseconds)
}

// int32 min_check_point_count = 19;
inline void SubscriptionInfo::clear_min_check_point_count() {
  min_check_point_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_min_check_point_count() const {
  return min_check_point_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::min_check_point_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.min_check_point_count)
  return _internal_min_check_point_count();
}
inline void SubscriptionInfo::_internal_set_min_check_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_check_point_count_ = value;
}
inline void SubscriptionInfo::set_min_check_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_check_point_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.min_check_point_count)
}

// int32 max_check_point_count = 20;
inline void SubscriptionInfo::clear_max_check_point_count() {
  max_check_point_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_max_check_point_count() const {
  return max_check_point_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::max_check_point_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.max_check_point_count)
  return _internal_max_check_point_count();
}
inline void SubscriptionInfo::_internal_set_max_check_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_check_point_count_ = value;
}
inline void SubscriptionInfo::set_max_check_point_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_check_point_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.max_check_point_count)
}

// int32 read_buffer_count = 21;
inline void SubscriptionInfo::clear_read_buffer_count() {
  read_buffer_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_read_buffer_count() const {
  return read_buffer_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::read_buffer_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.read_buffer_count)
  return _internal_read_buffer_count();
}
inline void SubscriptionInfo::_internal_set_read_buffer_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_buffer_count_ = value;
}
inline void SubscriptionInfo::set_read_buffer_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_read_buffer_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.read_buffer_count)
}

// int64 live_buffer_count = 22;
inline void SubscriptionInfo::clear_live_buffer_count() {
  live_buffer_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo::_internal_live_buffer_count() const {
  return live_buffer_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo::live_buffer_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.live_buffer_count)
  return _internal_live_buffer_count();
}
inline void SubscriptionInfo::_internal_set_live_buffer_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  live_buffer_count_ = value;
}
inline void SubscriptionInfo::set_live_buffer_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_live_buffer_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.live_buffer_count)
}

// int32 retry_buffer_count = 23;
inline void SubscriptionInfo::clear_retry_buffer_count() {
  retry_buffer_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_retry_buffer_count() const {
  return retry_buffer_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::retry_buffer_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.retry_buffer_count)
  return _internal_retry_buffer_count();
}
inline void SubscriptionInfo::_internal_set_retry_buffer_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retry_buffer_count_ = value;
}
inline void SubscriptionInfo::set_retry_buffer_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retry_buffer_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.retry_buffer_count)
}

// int32 total_in_flight_messages = 24;
inline void SubscriptionInfo::clear_total_in_flight_messages() {
  total_in_flight_messages_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_total_in_flight_messages() const {
  return total_in_flight_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::total_in_flight_messages() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.total_in_flight_messages)
  return _internal_total_in_flight_messages();
}
inline void SubscriptionInfo::_internal_set_total_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_in_flight_messages_ = value;
}
inline void SubscriptionInfo::set_total_in_flight_messages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_in_flight_messages(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.total_in_flight_messages)
}

// int32 outstanding_messages_count = 25;
inline void SubscriptionInfo::clear_outstanding_messages_count() {
  outstanding_messages_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_outstanding_messages_count() const {
  return outstanding_messages_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::outstanding_messages_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.outstanding_messages_count)
  return _internal_outstanding_messages_count();
}
inline void SubscriptionInfo::_internal_set_outstanding_messages_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  outstanding_messages_count_ = value;
}
inline void SubscriptionInfo::set_outstanding_messages_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_outstanding_messages_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.outstanding_messages_count)
}

// string named_consumer_strategy = 26;
inline void SubscriptionInfo::clear_named_consumer_strategy() {
  named_consumer_strategy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscriptionInfo::named_consumer_strategy() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
  return _internal_named_consumer_strategy();
}
inline void SubscriptionInfo::set_named_consumer_strategy(const std::string& value) {
  _internal_set_named_consumer_strategy(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
}
inline std::string* SubscriptionInfo::mutable_named_consumer_strategy() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
  return _internal_mutable_named_consumer_strategy();
}
inline const std::string& SubscriptionInfo::_internal_named_consumer_strategy() const {
  return named_consumer_strategy_.Get();
}
inline void SubscriptionInfo::_internal_set_named_consumer_strategy(const std::string& value) {
  
  named_consumer_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscriptionInfo::set_named_consumer_strategy(std::string&& value) {
  
  named_consumer_strategy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
}
inline void SubscriptionInfo::set_named_consumer_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  named_consumer_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
}
inline void SubscriptionInfo::set_named_consumer_strategy(const char* value,
    size_t size) {
  
  named_consumer_strategy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
}
inline std::string* SubscriptionInfo::_internal_mutable_named_consumer_strategy() {
  
  return named_consumer_strategy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscriptionInfo::release_named_consumer_strategy() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
  return named_consumer_strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriptionInfo::set_allocated_named_consumer_strategy(std::string* named_consumer_strategy) {
  if (named_consumer_strategy != nullptr) {
    
  } else {
    
  }
  named_consumer_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), named_consumer_strategy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
}
inline std::string* SubscriptionInfo::unsafe_arena_release_named_consumer_strategy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return named_consumer_strategy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscriptionInfo::unsafe_arena_set_allocated_named_consumer_strategy(
    std::string* named_consumer_strategy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (named_consumer_strategy != nullptr) {
    
  } else {
    
  }
  named_consumer_strategy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      named_consumer_strategy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.SubscriptionInfo.named_consumer_strategy)
}

// int32 max_subscriber_count = 27;
inline void SubscriptionInfo::clear_max_subscriber_count() {
  max_subscriber_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::_internal_max_subscriber_count() const {
  return max_subscriber_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubscriptionInfo::max_subscriber_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.max_subscriber_count)
  return _internal_max_subscriber_count();
}
inline void SubscriptionInfo::_internal_set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_subscriber_count_ = value;
}
inline void SubscriptionInfo::set_max_subscriber_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_subscriber_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.max_subscriber_count)
}

// int64 parked_message_count = 28;
inline void SubscriptionInfo::clear_parked_message_count() {
  parked_message_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo::_internal_parked_message_count() const {
  return parked_message_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SubscriptionInfo::parked_message_count() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.SubscriptionInfo.parked_message_count)
  return _internal_parked_message_count();
}
inline void SubscriptionInfo::_internal_set_parked_message_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parked_message_count_ = value;
}
inline void SubscriptionInfo::set_parked_message_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_parked_message_count(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.SubscriptionInfo.parked_message_count)
}

// -------------------------------------------------------------------

// ReplayParkedReq_Options

// string group_name = 1;
inline void ReplayParkedReq_Options::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReplayParkedReq_Options::group_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
  return _internal_group_name();
}
inline void ReplayParkedReq_Options::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
}
inline std::string* ReplayParkedReq_Options::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& ReplayParkedReq_Options::_internal_group_name() const {
  return group_name_.Get();
}
inline void ReplayParkedReq_Options::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReplayParkedReq_Options::set_group_name(std::string&& value) {
  
  group_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
}
inline void ReplayParkedReq_Options::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
}
inline void ReplayParkedReq_Options::set_group_name(const char* value,
    size_t size) {
  
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
}
inline std::string* ReplayParkedReq_Options::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReplayParkedReq_Options::release_group_name() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayParkedReq_Options::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
}
inline std::string* ReplayParkedReq_Options::unsafe_arena_release_group_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReplayParkedReq_Options::unsafe_arena_set_allocated_group_name(
    std::string* group_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.group_name)
}

// .event_store.client.StreamIdentifier stream_identifier = 2;
inline bool ReplayParkedReq_Options::_internal_has_stream_identifier() const {
  return stream_option_case() == kStreamIdentifier;
}
inline bool ReplayParkedReq_Options::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline void ReplayParkedReq_Options::set_has_stream_identifier() {
  _oneof_case_[0] = kStreamIdentifier;
}
inline ::event_store::client::StreamIdentifier* ReplayParkedReq_Options::release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_stream_option();
      ::event_store::client::StreamIdentifier* temp = stream_option_.stream_identifier_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::StreamIdentifier& ReplayParkedReq_Options::_internal_stream_identifier() const {
  return _internal_has_stream_identifier()
      ? *stream_option_.stream_identifier_
      : *reinterpret_cast< ::event_store::client::StreamIdentifier*>(&::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& ReplayParkedReq_Options::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.stream_identifier)
  return _internal_stream_identifier();
}
inline ::event_store::client::StreamIdentifier* ReplayParkedReq_Options::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.stream_identifier)
  if (_internal_has_stream_identifier()) {
    clear_has_stream_option();
    ::event_store::client::StreamIdentifier* temp = stream_option_.stream_identifier_;
    stream_option_.stream_identifier_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayParkedReq_Options::unsafe_arena_set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  clear_stream_option();
  if (stream_identifier) {
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* ReplayParkedReq_Options::_internal_mutable_stream_identifier() {
  if (!_internal_has_stream_identifier()) {
    clear_stream_option();
    set_has_stream_identifier();
    stream_option_.stream_identifier_ = CreateMaybeMessage< ::event_store::client::StreamIdentifier >(GetArena());
  }
  return stream_option_.stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* ReplayParkedReq_Options::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.stream_identifier)
  return _internal_mutable_stream_identifier();
}

// .event_store.client.Empty all = 3;
inline bool ReplayParkedReq_Options::_internal_has_all() const {
  return stream_option_case() == kAll;
}
inline bool ReplayParkedReq_Options::has_all() const {
  return _internal_has_all();
}
inline void ReplayParkedReq_Options::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline ::event_store::client::Empty* ReplayParkedReq_Options::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
      ::event_store::client::Empty* temp = stream_option_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReplayParkedReq_Options::_internal_all() const {
  return _internal_has_all()
      ? *stream_option_.all_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReplayParkedReq_Options::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.all)
  return _internal_all();
}
inline ::event_store::client::Empty* ReplayParkedReq_Options::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
    ::event_store::client::Empty* temp = stream_option_.all_;
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayParkedReq_Options::unsafe_arena_set_allocated_all(::event_store::client::Empty* all) {
  clear_stream_option();
  if (all) {
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.all)
}
inline ::event_store::client::Empty* ReplayParkedReq_Options::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_stream_option();
    set_has_all();
    stream_option_.all_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return stream_option_.all_;
}
inline ::event_store::client::Empty* ReplayParkedReq_Options::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.all)
  return _internal_mutable_all();
}

// int64 stop_at = 4;
inline bool ReplayParkedReq_Options::_internal_has_stop_at() const {
  return stop_at_option_case() == kStopAt;
}
inline void ReplayParkedReq_Options::set_has_stop_at() {
  _oneof_case_[1] = kStopAt;
}
inline void ReplayParkedReq_Options::clear_stop_at() {
  if (_internal_has_stop_at()) {
    stop_at_option_.stop_at_ = PROTOBUF_LONGLONG(0);
    clear_has_stop_at_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplayParkedReq_Options::_internal_stop_at() const {
  if (_internal_has_stop_at()) {
    return stop_at_option_.stop_at_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void ReplayParkedReq_Options::_internal_set_stop_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_stop_at()) {
    clear_stop_at_option();
    set_has_stop_at();
  }
  stop_at_option_.stop_at_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplayParkedReq_Options::stop_at() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.stop_at)
  return _internal_stop_at();
}
inline void ReplayParkedReq_Options::set_stop_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stop_at(value);
  // @@protoc_insertion_point(field_set:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.stop_at)
}

// .event_store.client.Empty no_limit = 5;
inline bool ReplayParkedReq_Options::_internal_has_no_limit() const {
  return stop_at_option_case() == kNoLimit;
}
inline bool ReplayParkedReq_Options::has_no_limit() const {
  return _internal_has_no_limit();
}
inline void ReplayParkedReq_Options::set_has_no_limit() {
  _oneof_case_[1] = kNoLimit;
}
inline ::event_store::client::Empty* ReplayParkedReq_Options::release_no_limit() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.no_limit)
  if (_internal_has_no_limit()) {
    clear_has_stop_at_option();
      ::event_store::client::Empty* temp = stop_at_option_.no_limit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stop_at_option_.no_limit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ReplayParkedReq_Options::_internal_no_limit() const {
  return _internal_has_no_limit()
      ? *stop_at_option_.no_limit_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ReplayParkedReq_Options::no_limit() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.no_limit)
  return _internal_no_limit();
}
inline ::event_store::client::Empty* ReplayParkedReq_Options::unsafe_arena_release_no_limit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.no_limit)
  if (_internal_has_no_limit()) {
    clear_has_stop_at_option();
    ::event_store::client::Empty* temp = stop_at_option_.no_limit_;
    stop_at_option_.no_limit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplayParkedReq_Options::unsafe_arena_set_allocated_no_limit(::event_store::client::Empty* no_limit) {
  clear_stop_at_option();
  if (no_limit) {
    set_has_no_limit();
    stop_at_option_.no_limit_ = no_limit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.no_limit)
}
inline ::event_store::client::Empty* ReplayParkedReq_Options::_internal_mutable_no_limit() {
  if (!_internal_has_no_limit()) {
    clear_stop_at_option();
    set_has_no_limit();
    stop_at_option_.no_limit_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return stop_at_option_.no_limit_;
}
inline ::event_store::client::Empty* ReplayParkedReq_Options::mutable_no_limit() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReplayParkedReq.Options.no_limit)
  return _internal_mutable_no_limit();
}

inline bool ReplayParkedReq_Options::has_stream_option() const {
  return stream_option_case() != STREAM_OPTION_NOT_SET;
}
inline void ReplayParkedReq_Options::clear_has_stream_option() {
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}
inline bool ReplayParkedReq_Options::has_stop_at_option() const {
  return stop_at_option_case() != STOP_AT_OPTION_NOT_SET;
}
inline void ReplayParkedReq_Options::clear_has_stop_at_option() {
  _oneof_case_[1] = STOP_AT_OPTION_NOT_SET;
}
inline ReplayParkedReq_Options::StreamOptionCase ReplayParkedReq_Options::stream_option_case() const {
  return ReplayParkedReq_Options::StreamOptionCase(_oneof_case_[0]);
}
inline ReplayParkedReq_Options::StopAtOptionCase ReplayParkedReq_Options::stop_at_option_case() const {
  return ReplayParkedReq_Options::StopAtOptionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// ReplayParkedReq

// .event_store.client.persistent_subscriptions.ReplayParkedReq.Options options = 1;
inline bool ReplayParkedReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ReplayParkedReq::has_options() const {
  return _internal_has_options();
}
inline void ReplayParkedReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options& ReplayParkedReq::_internal_options() const {
  const ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options*>(
      &::event_store::client::persistent_subscriptions::_ReplayParkedReq_Options_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options& ReplayParkedReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ReplayParkedReq.options)
  return _internal_options();
}
inline void ReplayParkedReq::unsafe_arena_set_allocated_options(
    ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.options)
}
inline ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* ReplayParkedReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* ReplayParkedReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ReplayParkedReq.options)
  
  ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* ReplayParkedReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::ReplayParkedReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* ReplayParkedReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ReplayParkedReq.options)
  return _internal_mutable_options();
}
inline void ReplayParkedReq::set_allocated_options(::event_store::client::persistent_subscriptions::ReplayParkedReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ReplayParkedReq.options)
}

// -------------------------------------------------------------------

// ReplayParkedResp

// -------------------------------------------------------------------

// ListReq_Options

// .event_store.client.Empty list_all_subscriptions = 1;
inline bool ListReq_Options::_internal_has_list_all_subscriptions() const {
  return list_option_case() == kListAllSubscriptions;
}
inline bool ListReq_Options::has_list_all_subscriptions() const {
  return _internal_has_list_all_subscriptions();
}
inline void ListReq_Options::set_has_list_all_subscriptions() {
  _oneof_case_[0] = kListAllSubscriptions;
}
inline ::event_store::client::Empty* ListReq_Options::release_list_all_subscriptions() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ListReq.Options.list_all_subscriptions)
  if (_internal_has_list_all_subscriptions()) {
    clear_has_list_option();
      ::event_store::client::Empty* temp = list_option_.list_all_subscriptions_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    list_option_.list_all_subscriptions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ListReq_Options::_internal_list_all_subscriptions() const {
  return _internal_has_list_all_subscriptions()
      ? *list_option_.list_all_subscriptions_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ListReq_Options::list_all_subscriptions() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ListReq.Options.list_all_subscriptions)
  return _internal_list_all_subscriptions();
}
inline ::event_store::client::Empty* ListReq_Options::unsafe_arena_release_list_all_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ListReq.Options.list_all_subscriptions)
  if (_internal_has_list_all_subscriptions()) {
    clear_has_list_option();
    ::event_store::client::Empty* temp = list_option_.list_all_subscriptions_;
    list_option_.list_all_subscriptions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListReq_Options::unsafe_arena_set_allocated_list_all_subscriptions(::event_store::client::Empty* list_all_subscriptions) {
  clear_list_option();
  if (list_all_subscriptions) {
    set_has_list_all_subscriptions();
    list_option_.list_all_subscriptions_ = list_all_subscriptions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ListReq.Options.list_all_subscriptions)
}
inline ::event_store::client::Empty* ListReq_Options::_internal_mutable_list_all_subscriptions() {
  if (!_internal_has_list_all_subscriptions()) {
    clear_list_option();
    set_has_list_all_subscriptions();
    list_option_.list_all_subscriptions_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return list_option_.list_all_subscriptions_;
}
inline ::event_store::client::Empty* ListReq_Options::mutable_list_all_subscriptions() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ListReq.Options.list_all_subscriptions)
  return _internal_mutable_list_all_subscriptions();
}

// .event_store.client.persistent_subscriptions.ListReq.StreamOption list_for_stream = 2;
inline bool ListReq_Options::_internal_has_list_for_stream() const {
  return list_option_case() == kListForStream;
}
inline bool ListReq_Options::has_list_for_stream() const {
  return _internal_has_list_for_stream();
}
inline void ListReq_Options::set_has_list_for_stream() {
  _oneof_case_[0] = kListForStream;
}
inline void ListReq_Options::clear_list_for_stream() {
  if (_internal_has_list_for_stream()) {
    if (GetArena() == nullptr) {
      delete list_option_.list_for_stream_;
    }
    clear_has_list_option();
  }
}
inline ::event_store::client::persistent_subscriptions::ListReq_StreamOption* ListReq_Options::release_list_for_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ListReq.Options.list_for_stream)
  if (_internal_has_list_for_stream()) {
    clear_has_list_option();
      ::event_store::client::persistent_subscriptions::ListReq_StreamOption* temp = list_option_.list_for_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    list_option_.list_for_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::persistent_subscriptions::ListReq_StreamOption& ListReq_Options::_internal_list_for_stream() const {
  return _internal_has_list_for_stream()
      ? *list_option_.list_for_stream_
      : *reinterpret_cast< ::event_store::client::persistent_subscriptions::ListReq_StreamOption*>(&::event_store::client::persistent_subscriptions::_ListReq_StreamOption_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ListReq_StreamOption& ListReq_Options::list_for_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ListReq.Options.list_for_stream)
  return _internal_list_for_stream();
}
inline ::event_store::client::persistent_subscriptions::ListReq_StreamOption* ListReq_Options::unsafe_arena_release_list_for_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ListReq.Options.list_for_stream)
  if (_internal_has_list_for_stream()) {
    clear_has_list_option();
    ::event_store::client::persistent_subscriptions::ListReq_StreamOption* temp = list_option_.list_for_stream_;
    list_option_.list_for_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListReq_Options::unsafe_arena_set_allocated_list_for_stream(::event_store::client::persistent_subscriptions::ListReq_StreamOption* list_for_stream) {
  clear_list_option();
  if (list_for_stream) {
    set_has_list_for_stream();
    list_option_.list_for_stream_ = list_for_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ListReq.Options.list_for_stream)
}
inline ::event_store::client::persistent_subscriptions::ListReq_StreamOption* ListReq_Options::_internal_mutable_list_for_stream() {
  if (!_internal_has_list_for_stream()) {
    clear_list_option();
    set_has_list_for_stream();
    list_option_.list_for_stream_ = CreateMaybeMessage< ::event_store::client::persistent_subscriptions::ListReq_StreamOption >(GetArena());
  }
  return list_option_.list_for_stream_;
}
inline ::event_store::client::persistent_subscriptions::ListReq_StreamOption* ListReq_Options::mutable_list_for_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ListReq.Options.list_for_stream)
  return _internal_mutable_list_for_stream();
}

inline bool ListReq_Options::has_list_option() const {
  return list_option_case() != LIST_OPTION_NOT_SET;
}
inline void ListReq_Options::clear_has_list_option() {
  _oneof_case_[0] = LIST_OPTION_NOT_SET;
}
inline ListReq_Options::ListOptionCase ListReq_Options::list_option_case() const {
  return ListReq_Options::ListOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListReq_StreamOption

// .event_store.client.StreamIdentifier stream = 1;
inline bool ListReq_StreamOption::_internal_has_stream() const {
  return stream_option_case() == kStream;
}
inline bool ListReq_StreamOption::has_stream() const {
  return _internal_has_stream();
}
inline void ListReq_StreamOption::set_has_stream() {
  _oneof_case_[0] = kStream;
}
inline ::event_store::client::StreamIdentifier* ListReq_StreamOption::release_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ListReq.StreamOption.stream)
  if (_internal_has_stream()) {
    clear_has_stream_option();
      ::event_store::client::StreamIdentifier* temp = stream_option_.stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::StreamIdentifier& ListReq_StreamOption::_internal_stream() const {
  return _internal_has_stream()
      ? *stream_option_.stream_
      : *reinterpret_cast< ::event_store::client::StreamIdentifier*>(&::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& ListReq_StreamOption::stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ListReq.StreamOption.stream)
  return _internal_stream();
}
inline ::event_store::client::StreamIdentifier* ListReq_StreamOption::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ListReq.StreamOption.stream)
  if (_internal_has_stream()) {
    clear_has_stream_option();
    ::event_store::client::StreamIdentifier* temp = stream_option_.stream_;
    stream_option_.stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListReq_StreamOption::unsafe_arena_set_allocated_stream(::event_store::client::StreamIdentifier* stream) {
  clear_stream_option();
  if (stream) {
    set_has_stream();
    stream_option_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ListReq.StreamOption.stream)
}
inline ::event_store::client::StreamIdentifier* ListReq_StreamOption::_internal_mutable_stream() {
  if (!_internal_has_stream()) {
    clear_stream_option();
    set_has_stream();
    stream_option_.stream_ = CreateMaybeMessage< ::event_store::client::StreamIdentifier >(GetArena());
  }
  return stream_option_.stream_;
}
inline ::event_store::client::StreamIdentifier* ListReq_StreamOption::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ListReq.StreamOption.stream)
  return _internal_mutable_stream();
}

// .event_store.client.Empty all = 2;
inline bool ListReq_StreamOption::_internal_has_all() const {
  return stream_option_case() == kAll;
}
inline bool ListReq_StreamOption::has_all() const {
  return _internal_has_all();
}
inline void ListReq_StreamOption::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline ::event_store::client::Empty* ListReq_StreamOption::release_all() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ListReq.StreamOption.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
      ::event_store::client::Empty* temp = stream_option_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::Empty& ListReq_StreamOption::_internal_all() const {
  return _internal_has_all()
      ? *stream_option_.all_
      : *reinterpret_cast< ::event_store::client::Empty*>(&::event_store::client::_Empty_default_instance_);
}
inline const ::event_store::client::Empty& ListReq_StreamOption::all() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ListReq.StreamOption.all)
  return _internal_all();
}
inline ::event_store::client::Empty* ListReq_StreamOption::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.persistent_subscriptions.ListReq.StreamOption.all)
  if (_internal_has_all()) {
    clear_has_stream_option();
    ::event_store::client::Empty* temp = stream_option_.all_;
    stream_option_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListReq_StreamOption::unsafe_arena_set_allocated_all(::event_store::client::Empty* all) {
  clear_stream_option();
  if (all) {
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ListReq.StreamOption.all)
}
inline ::event_store::client::Empty* ListReq_StreamOption::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_stream_option();
    set_has_all();
    stream_option_.all_ = CreateMaybeMessage< ::event_store::client::Empty >(GetArena());
  }
  return stream_option_.all_;
}
inline ::event_store::client::Empty* ListReq_StreamOption::mutable_all() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ListReq.StreamOption.all)
  return _internal_mutable_all();
}

inline bool ListReq_StreamOption::has_stream_option() const {
  return stream_option_case() != STREAM_OPTION_NOT_SET;
}
inline void ListReq_StreamOption::clear_has_stream_option() {
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}
inline ListReq_StreamOption::StreamOptionCase ListReq_StreamOption::stream_option_case() const {
  return ListReq_StreamOption::StreamOptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListReq

// .event_store.client.persistent_subscriptions.ListReq.Options options = 1;
inline bool ListReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ListReq::has_options() const {
  return _internal_has_options();
}
inline void ListReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::persistent_subscriptions::ListReq_Options& ListReq::_internal_options() const {
  const ::event_store::client::persistent_subscriptions::ListReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::persistent_subscriptions::ListReq_Options*>(
      &::event_store::client::persistent_subscriptions::_ListReq_Options_default_instance_);
}
inline const ::event_store::client::persistent_subscriptions::ListReq_Options& ListReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ListReq.options)
  return _internal_options();
}
inline void ListReq::unsafe_arena_set_allocated_options(
    ::event_store::client::persistent_subscriptions::ListReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.persistent_subscriptions.ListReq.options)
}
inline ::event_store::client::persistent_subscriptions::ListReq_Options* ListReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ListReq_Options* ListReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.persistent_subscriptions.ListReq.options)
  
  ::event_store::client::persistent_subscriptions::ListReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::persistent_subscriptions::ListReq_Options* ListReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::persistent_subscriptions::ListReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::persistent_subscriptions::ListReq_Options* ListReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ListReq.options)
  return _internal_mutable_options();
}
inline void ListReq::set_allocated_options(::event_store::client::persistent_subscriptions::ListReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.persistent_subscriptions.ListReq.options)
}

// -------------------------------------------------------------------

// ListResp

// repeated .event_store.client.persistent_subscriptions.SubscriptionInfo subscriptions = 1;
inline int ListResp::_internal_subscriptions_size() const {
  return subscriptions_.size();
}
inline int ListResp::subscriptions_size() const {
  return _internal_subscriptions_size();
}
inline void ListResp::clear_subscriptions() {
  subscriptions_.Clear();
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo* ListResp::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.persistent_subscriptions.ListResp.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo >*
ListResp::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.persistent_subscriptions.ListResp.subscriptions)
  return &subscriptions_;
}
inline const ::event_store::client::persistent_subscriptions::SubscriptionInfo& ListResp::_internal_subscriptions(int index) const {
  return subscriptions_.Get(index);
}
inline const ::event_store::client::persistent_subscriptions::SubscriptionInfo& ListResp::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.persistent_subscriptions.ListResp.subscriptions)
  return _internal_subscriptions(index);
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo* ListResp::_internal_add_subscriptions() {
  return subscriptions_.Add();
}
inline ::event_store::client::persistent_subscriptions::SubscriptionInfo* ListResp::add_subscriptions() {
  // @@protoc_insertion_point(field_add:event_store.client.persistent_subscriptions.ListResp.subscriptions)
  return _internal_add_subscriptions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::persistent_subscriptions::SubscriptionInfo >&
ListResp::subscriptions() const {
  // @@protoc_insertion_point(field_list:event_store.client.persistent_subscriptions.ListResp.subscriptions)
  return subscriptions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace persistent_subscriptions
}  // namespace client
}  // namespace event_store

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::event_store::client::persistent_subscriptions::ReadReq_Nack_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event_store::client::persistent_subscriptions::ReadReq_Nack_Action>() {
  return ::event_store::client::persistent_subscriptions::ReadReq_Nack_Action_descriptor();
}
template <> struct is_proto_enum< ::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy>() {
  return ::event_store::client::persistent_subscriptions::CreateReq_ConsumerStrategy_descriptor();
}
template <> struct is_proto_enum< ::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy>() {
  return ::event_store::client::persistent_subscriptions::UpdateReq_ConsumerStrategy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_persistent_2eproto

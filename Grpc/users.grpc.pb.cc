// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: users.proto

#include "users.pb.h"
#include "users.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace event_store {
namespace client {
namespace users {

static const char* Users_method_names[] = {
  "/event_store.client.users.Users/Create",
  "/event_store.client.users.Users/Update",
  "/event_store.client.users.Users/Delete",
  "/event_store.client.users.Users/Disable",
  "/event_store.client.users.Users/Enable",
  "/event_store.client.users.Users/Details",
  "/event_store.client.users.Users/ChangePassword",
  "/event_store.client.users.Users/ResetPassword",
};

std::unique_ptr< Users::Stub> Users::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Users::Stub> stub(new Users::Stub(channel));
  return stub;
}

Users::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(Users_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Users_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Users_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disable_(Users_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(Users_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Details_(Users_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ChangePassword_(Users_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPassword_(Users_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Users::Stub::Create(::grpc::ClientContext* context, const ::event_store::client::users::CreateReq& request, ::event_store::client::users::CreateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Users::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::event_store::client::users::CreateReq* request, ::event_store::client::users::CreateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::CreateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::event_store::client::users::CreateReq* request, ::event_store::client::users::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

void Users::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::CreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::CreateResp>* Users::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::users::CreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::CreateResp>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::CreateResp>* Users::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::event_store::client::users::CreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::CreateResp>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status Users::Stub::Update(::grpc::ClientContext* context, const ::event_store::client::users::UpdateReq& request, ::event_store::client::users::UpdateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Users::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::event_store::client::users::UpdateReq* request, ::event_store::client::users::UpdateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::UpdateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::event_store::client::users::UpdateReq* request, ::event_store::client::users::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

void Users::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::UpdateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::UpdateResp>* Users::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::users::UpdateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::UpdateResp>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::UpdateResp>* Users::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::event_store::client::users::UpdateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::UpdateResp>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status Users::Stub::Delete(::grpc::ClientContext* context, const ::event_store::client::users::DeleteReq& request, ::event_store::client::users::DeleteResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Users::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::event_store::client::users::DeleteReq* request, ::event_store::client::users::DeleteResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::DeleteResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::event_store::client::users::DeleteReq* request, ::event_store::client::users::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void Users::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::DeleteResp>* Users::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::users::DeleteReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::DeleteResp>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::DeleteResp>* Users::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::users::DeleteReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::DeleteResp>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status Users::Stub::Disable(::grpc::ClientContext* context, const ::event_store::client::users::DisableReq& request, ::event_store::client::users::DisableResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void Users::Stub::experimental_async::Disable(::grpc::ClientContext* context, const ::event_store::client::users::DisableReq* request, ::event_store::client::users::DisableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::DisableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Disable(::grpc::ClientContext* context, const ::event_store::client::users::DisableReq* request, ::event_store::client::users::DisableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

void Users::Stub::experimental_async::Disable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::DisableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::DisableResp>* Users::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::event_store::client::users::DisableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::DisableResp>::Create(channel_.get(), cq, rpcmethod_Disable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::DisableResp>* Users::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::event_store::client::users::DisableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::DisableResp>::Create(channel_.get(), cq, rpcmethod_Disable_, context, request, false);
}

::grpc::Status Users::Stub::Enable(::grpc::ClientContext* context, const ::event_store::client::users::EnableReq& request, ::event_store::client::users::EnableResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void Users::Stub::experimental_async::Enable(::grpc::ClientContext* context, const ::event_store::client::users::EnableReq* request, ::event_store::client::users::EnableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::EnableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::Enable(::grpc::ClientContext* context, const ::event_store::client::users::EnableReq* request, ::event_store::client::users::EnableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

void Users::Stub::experimental_async::Enable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::EnableResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::EnableResp>* Users::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::event_store::client::users::EnableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::EnableResp>::Create(channel_.get(), cq, rpcmethod_Enable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::EnableResp>* Users::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::event_store::client::users::EnableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::EnableResp>::Create(channel_.get(), cq, rpcmethod_Enable_, context, request, false);
}

::grpc::ClientReader< ::event_store::client::users::DetailsResp>* Users::Stub::DetailsRaw(::grpc::ClientContext* context, const ::event_store::client::users::DetailsReq& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::event_store::client::users::DetailsResp>::Create(channel_.get(), rpcmethod_Details_, context, request);
}

void Users::Stub::experimental_async::Details(::grpc::ClientContext* context, ::event_store::client::users::DetailsReq* request, ::grpc::experimental::ClientReadReactor< ::event_store::client::users::DetailsResp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::event_store::client::users::DetailsResp>::Create(stub_->channel_.get(), stub_->rpcmethod_Details_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::event_store::client::users::DetailsResp>* Users::Stub::AsyncDetailsRaw(::grpc::ClientContext* context, const ::event_store::client::users::DetailsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::event_store::client::users::DetailsResp>::Create(channel_.get(), cq, rpcmethod_Details_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::event_store::client::users::DetailsResp>* Users::Stub::PrepareAsyncDetailsRaw(::grpc::ClientContext* context, const ::event_store::client::users::DetailsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::event_store::client::users::DetailsResp>::Create(channel_.get(), cq, rpcmethod_Details_, context, request, false, nullptr);
}

::grpc::Status Users::Stub::ChangePassword(::grpc::ClientContext* context, const ::event_store::client::users::ChangePasswordReq& request, ::event_store::client::users::ChangePasswordResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void Users::Stub::experimental_async::ChangePassword(::grpc::ClientContext* context, const ::event_store::client::users::ChangePasswordReq* request, ::event_store::client::users::ChangePasswordResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::ChangePassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::ChangePasswordResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::ChangePassword(::grpc::ClientContext* context, const ::event_store::client::users::ChangePasswordReq* request, ::event_store::client::users::ChangePasswordResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

void Users::Stub::experimental_async::ChangePassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::ChangePasswordResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::ChangePasswordResp>* Users::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::event_store::client::users::ChangePasswordReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::ChangePasswordResp>::Create(channel_.get(), cq, rpcmethod_ChangePassword_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::ChangePasswordResp>* Users::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::event_store::client::users::ChangePasswordReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::ChangePasswordResp>::Create(channel_.get(), cq, rpcmethod_ChangePassword_, context, request, false);
}

::grpc::Status Users::Stub::ResetPassword(::grpc::ClientContext* context, const ::event_store::client::users::ResetPasswordReq& request, ::event_store::client::users::ResetPasswordResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetPassword_, context, request, response);
}

void Users::Stub::experimental_async::ResetPassword(::grpc::ClientContext* context, const ::event_store::client::users::ResetPasswordReq* request, ::event_store::client::users::ResetPasswordResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::ResetPassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::ResetPasswordResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void Users::Stub::experimental_async::ResetPassword(::grpc::ClientContext* context, const ::event_store::client::users::ResetPasswordReq* request, ::event_store::client::users::ResetPasswordResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

void Users::Stub::experimental_async::ResetPassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::users::ResetPasswordResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::ResetPasswordResp>* Users::Stub::AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::event_store::client::users::ResetPasswordReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::ResetPasswordResp>::Create(channel_.get(), cq, rpcmethod_ResetPassword_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::users::ResetPasswordResp>* Users::Stub::PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::event_store::client::users::ResetPasswordReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::users::ResetPasswordResp>::Create(channel_.get(), cq, rpcmethod_ResetPassword_, context, request, false);
}

Users::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Users_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Users::Service, ::event_store::client::users::CreateReq, ::event_store::client::users::CreateResp>(
          [](Users::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::users::CreateReq* req,
             ::event_store::client::users::CreateResp* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Users_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Users::Service, ::event_store::client::users::UpdateReq, ::event_store::client::users::UpdateResp>(
          [](Users::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::users::UpdateReq* req,
             ::event_store::client::users::UpdateResp* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Users_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Users::Service, ::event_store::client::users::DeleteReq, ::event_store::client::users::DeleteResp>(
          [](Users::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::users::DeleteReq* req,
             ::event_store::client::users::DeleteResp* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Users_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Users::Service, ::event_store::client::users::DisableReq, ::event_store::client::users::DisableResp>(
          [](Users::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::users::DisableReq* req,
             ::event_store::client::users::DisableResp* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Users_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Users::Service, ::event_store::client::users::EnableReq, ::event_store::client::users::EnableResp>(
          [](Users::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::users::EnableReq* req,
             ::event_store::client::users::EnableResp* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Users_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Users::Service, ::event_store::client::users::DetailsReq, ::event_store::client::users::DetailsResp>(
          [](Users::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::users::DetailsReq* req,
             ::grpc_impl::ServerWriter<::event_store::client::users::DetailsResp>* writer) {
               return service->Details(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Users_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Users::Service, ::event_store::client::users::ChangePasswordReq, ::event_store::client::users::ChangePasswordResp>(
          [](Users::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::users::ChangePasswordReq* req,
             ::event_store::client::users::ChangePasswordResp* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Users_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Users::Service, ::event_store::client::users::ResetPasswordReq, ::event_store::client::users::ResetPasswordResp>(
          [](Users::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::users::ResetPasswordReq* req,
             ::event_store::client::users::ResetPasswordResp* resp) {
               return service->ResetPassword(ctx, req, resp);
             }, this)));
}

Users::Service::~Service() {
}

::grpc::Status Users::Service::Create(::grpc::ServerContext* context, const ::event_store::client::users::CreateReq* request, ::event_store::client::users::CreateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Users::Service::Update(::grpc::ServerContext* context, const ::event_store::client::users::UpdateReq* request, ::event_store::client::users::UpdateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Users::Service::Delete(::grpc::ServerContext* context, const ::event_store::client::users::DeleteReq* request, ::event_store::client::users::DeleteResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Users::Service::Disable(::grpc::ServerContext* context, const ::event_store::client::users::DisableReq* request, ::event_store::client::users::DisableResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Users::Service::Enable(::grpc::ServerContext* context, const ::event_store::client::users::EnableReq* request, ::event_store::client::users::EnableResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Users::Service::Details(::grpc::ServerContext* context, const ::event_store::client::users::DetailsReq* request, ::grpc::ServerWriter< ::event_store::client::users::DetailsResp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Users::Service::ChangePassword(::grpc::ServerContext* context, const ::event_store::client::users::ChangePasswordReq* request, ::event_store::client::users::ChangePasswordResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Users::Service::ResetPassword(::grpc::ServerContext* context, const ::event_store::client::users::ResetPasswordReq* request, ::event_store::client::users::ResetPasswordResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace event_store
}  // namespace client
}  // namespace users


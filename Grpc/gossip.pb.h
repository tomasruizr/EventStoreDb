// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gossip.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gossip_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gossip_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "shared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gossip_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gossip_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gossip_2eproto;
namespace event_store {
namespace client {
namespace gossip {
class ClusterInfo;
class ClusterInfoDefaultTypeInternal;
extern ClusterInfoDefaultTypeInternal _ClusterInfo_default_instance_;
class EndPoint;
class EndPointDefaultTypeInternal;
extern EndPointDefaultTypeInternal _EndPoint_default_instance_;
class MemberInfo;
class MemberInfoDefaultTypeInternal;
extern MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
}  // namespace gossip
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::client::gossip::ClusterInfo* Arena::CreateMaybeMessage<::event_store::client::gossip::ClusterInfo>(Arena*);
template<> ::event_store::client::gossip::EndPoint* Arena::CreateMaybeMessage<::event_store::client::gossip::EndPoint>(Arena*);
template<> ::event_store::client::gossip::MemberInfo* Arena::CreateMaybeMessage<::event_store::client::gossip::MemberInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace client {
namespace gossip {

enum MemberInfo_VNodeState : int {
  MemberInfo_VNodeState_Initializing = 0,
  MemberInfo_VNodeState_DiscoverLeader = 1,
  MemberInfo_VNodeState_Unknown = 2,
  MemberInfo_VNodeState_PreReplica = 3,
  MemberInfo_VNodeState_CatchingUp = 4,
  MemberInfo_VNodeState_Clone = 5,
  MemberInfo_VNodeState_Follower = 6,
  MemberInfo_VNodeState_PreLeader = 7,
  MemberInfo_VNodeState_Leader = 8,
  MemberInfo_VNodeState_Manager = 9,
  MemberInfo_VNodeState_ShuttingDown = 10,
  MemberInfo_VNodeState_Shutdown = 11,
  MemberInfo_VNodeState_ReadOnlyLeaderless = 12,
  MemberInfo_VNodeState_PreReadOnlyReplica = 13,
  MemberInfo_VNodeState_ReadOnlyReplica = 14,
  MemberInfo_VNodeState_ResigningLeader = 15,
  MemberInfo_VNodeState_MemberInfo_VNodeState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MemberInfo_VNodeState_MemberInfo_VNodeState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MemberInfo_VNodeState_IsValid(int value);
constexpr MemberInfo_VNodeState MemberInfo_VNodeState_VNodeState_MIN = MemberInfo_VNodeState_Initializing;
constexpr MemberInfo_VNodeState MemberInfo_VNodeState_VNodeState_MAX = MemberInfo_VNodeState_ResigningLeader;
constexpr int MemberInfo_VNodeState_VNodeState_ARRAYSIZE = MemberInfo_VNodeState_VNodeState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberInfo_VNodeState_descriptor();
template<typename T>
inline const std::string& MemberInfo_VNodeState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemberInfo_VNodeState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemberInfo_VNodeState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MemberInfo_VNodeState_descriptor(), enum_t_value);
}
inline bool MemberInfo_VNodeState_Parse(
    const std::string& name, MemberInfo_VNodeState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MemberInfo_VNodeState>(
    MemberInfo_VNodeState_descriptor(), name, value);
}
// ===================================================================

class ClusterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.gossip.ClusterInfo) */ {
 public:
  inline ClusterInfo() : ClusterInfo(nullptr) {};
  virtual ~ClusterInfo();

  ClusterInfo(const ClusterInfo& from);
  ClusterInfo(ClusterInfo&& from) noexcept
    : ClusterInfo() {
    *this = ::std::move(from);
  }

  inline ClusterInfo& operator=(const ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterInfo& operator=(ClusterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterInfo* internal_default_instance() {
    return reinterpret_cast<const ClusterInfo*>(
               &_ClusterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClusterInfo& a, ClusterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfo* New() const final {
    return CreateMaybeMessage<ClusterInfo>(nullptr);
  }

  ClusterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterInfo& from);
  void MergeFrom(const ClusterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.gossip.ClusterInfo";
  }
  protected:
  explicit ClusterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gossip_2eproto);
    return ::descriptor_table_gossip_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .event_store.client.gossip.MemberInfo members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::event_store::client::gossip::MemberInfo* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::gossip::MemberInfo >*
      mutable_members();
  private:
  const ::event_store::client::gossip::MemberInfo& _internal_members(int index) const;
  ::event_store::client::gossip::MemberInfo* _internal_add_members();
  public:
  const ::event_store::client::gossip::MemberInfo& members(int index) const;
  ::event_store::client::gossip::MemberInfo* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::gossip::MemberInfo >&
      members() const;

  // @@protoc_insertion_point(class_scope:event_store.client.gossip.ClusterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::gossip::MemberInfo > members_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gossip_2eproto;
};
// -------------------------------------------------------------------

class EndPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.gossip.EndPoint) */ {
 public:
  inline EndPoint() : EndPoint(nullptr) {};
  virtual ~EndPoint();

  EndPoint(const EndPoint& from);
  EndPoint(EndPoint&& from) noexcept
    : EndPoint() {
    *this = ::std::move(from);
  }

  inline EndPoint& operator=(const EndPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPoint& operator=(EndPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPoint* internal_default_instance() {
    return reinterpret_cast<const EndPoint*>(
               &_EndPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EndPoint& a, EndPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPoint* New() const final {
    return CreateMaybeMessage<EndPoint>(nullptr);
  }

  EndPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPoint& from);
  void MergeFrom(const EndPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.gossip.EndPoint";
  }
  protected:
  explicit EndPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gossip_2eproto);
    return ::descriptor_table_gossip_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.gossip.EndPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gossip_2eproto;
};
// -------------------------------------------------------------------

class MemberInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.gossip.MemberInfo) */ {
 public:
  inline MemberInfo() : MemberInfo(nullptr) {};
  virtual ~MemberInfo();

  MemberInfo(const MemberInfo& from);
  MemberInfo(MemberInfo&& from) noexcept
    : MemberInfo() {
    *this = ::std::move(from);
  }

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberInfo& operator=(MemberInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberInfo* internal_default_instance() {
    return reinterpret_cast<const MemberInfo*>(
               &_MemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemberInfo& a, MemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberInfo* New() const final {
    return CreateMaybeMessage<MemberInfo>(nullptr);
  }

  MemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberInfo& from);
  void MergeFrom(const MemberInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.gossip.MemberInfo";
  }
  protected:
  explicit MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gossip_2eproto);
    return ::descriptor_table_gossip_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MemberInfo_VNodeState VNodeState;
  static constexpr VNodeState Initializing =
    MemberInfo_VNodeState_Initializing;
  static constexpr VNodeState DiscoverLeader =
    MemberInfo_VNodeState_DiscoverLeader;
  static constexpr VNodeState Unknown =
    MemberInfo_VNodeState_Unknown;
  static constexpr VNodeState PreReplica =
    MemberInfo_VNodeState_PreReplica;
  static constexpr VNodeState CatchingUp =
    MemberInfo_VNodeState_CatchingUp;
  static constexpr VNodeState Clone =
    MemberInfo_VNodeState_Clone;
  static constexpr VNodeState Follower =
    MemberInfo_VNodeState_Follower;
  static constexpr VNodeState PreLeader =
    MemberInfo_VNodeState_PreLeader;
  static constexpr VNodeState Leader =
    MemberInfo_VNodeState_Leader;
  static constexpr VNodeState Manager =
    MemberInfo_VNodeState_Manager;
  static constexpr VNodeState ShuttingDown =
    MemberInfo_VNodeState_ShuttingDown;
  static constexpr VNodeState Shutdown =
    MemberInfo_VNodeState_Shutdown;
  static constexpr VNodeState ReadOnlyLeaderless =
    MemberInfo_VNodeState_ReadOnlyLeaderless;
  static constexpr VNodeState PreReadOnlyReplica =
    MemberInfo_VNodeState_PreReadOnlyReplica;
  static constexpr VNodeState ReadOnlyReplica =
    MemberInfo_VNodeState_ReadOnlyReplica;
  static constexpr VNodeState ResigningLeader =
    MemberInfo_VNodeState_ResigningLeader;
  static inline bool VNodeState_IsValid(int value) {
    return MemberInfo_VNodeState_IsValid(value);
  }
  static constexpr VNodeState VNodeState_MIN =
    MemberInfo_VNodeState_VNodeState_MIN;
  static constexpr VNodeState VNodeState_MAX =
    MemberInfo_VNodeState_VNodeState_MAX;
  static constexpr int VNodeState_ARRAYSIZE =
    MemberInfo_VNodeState_VNodeState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VNodeState_descriptor() {
    return MemberInfo_VNodeState_descriptor();
  }
  template<typename T>
  static inline const std::string& VNodeState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VNodeState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VNodeState_Name.");
    return MemberInfo_VNodeState_Name(enum_t_value);
  }
  static inline bool VNodeState_Parse(const std::string& name,
      VNodeState* value) {
    return MemberInfo_VNodeState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kHttpEndPointFieldNumber = 5,
    kTimeStampFieldNumber = 2,
    kStateFieldNumber = 3,
    kIsAliveFieldNumber = 4,
  };
  // .event_store.client.UUID instance_id = 1;
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  const ::event_store::client::UUID& instance_id() const;
  ::event_store::client::UUID* release_instance_id();
  ::event_store::client::UUID* mutable_instance_id();
  void set_allocated_instance_id(::event_store::client::UUID* instance_id);
  private:
  const ::event_store::client::UUID& _internal_instance_id() const;
  ::event_store::client::UUID* _internal_mutable_instance_id();
  public:
  void unsafe_arena_set_allocated_instance_id(
      ::event_store::client::UUID* instance_id);
  ::event_store::client::UUID* unsafe_arena_release_instance_id();

  // .event_store.client.gossip.EndPoint http_end_point = 5;
  bool has_http_end_point() const;
  private:
  bool _internal_has_http_end_point() const;
  public:
  void clear_http_end_point();
  const ::event_store::client::gossip::EndPoint& http_end_point() const;
  ::event_store::client::gossip::EndPoint* release_http_end_point();
  ::event_store::client::gossip::EndPoint* mutable_http_end_point();
  void set_allocated_http_end_point(::event_store::client::gossip::EndPoint* http_end_point);
  private:
  const ::event_store::client::gossip::EndPoint& _internal_http_end_point() const;
  ::event_store::client::gossip::EndPoint* _internal_mutable_http_end_point();
  public:
  void unsafe_arena_set_allocated_http_end_point(
      ::event_store::client::gossip::EndPoint* http_end_point);
  ::event_store::client::gossip::EndPoint* unsafe_arena_release_http_end_point();

  // int64 time_stamp = 2;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .event_store.client.gossip.MemberInfo.VNodeState state = 3;
  void clear_state();
  ::event_store::client::gossip::MemberInfo_VNodeState state() const;
  void set_state(::event_store::client::gossip::MemberInfo_VNodeState value);
  private:
  ::event_store::client::gossip::MemberInfo_VNodeState _internal_state() const;
  void _internal_set_state(::event_store::client::gossip::MemberInfo_VNodeState value);
  public:

  // bool is_alive = 4;
  void clear_is_alive();
  bool is_alive() const;
  void set_is_alive(bool value);
  private:
  bool _internal_is_alive() const;
  void _internal_set_is_alive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.gossip.MemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::UUID* instance_id_;
  ::event_store::client::gossip::EndPoint* http_end_point_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  int state_;
  bool is_alive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gossip_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClusterInfo

// repeated .event_store.client.gossip.MemberInfo members = 1;
inline int ClusterInfo::_internal_members_size() const {
  return members_.size();
}
inline int ClusterInfo::members_size() const {
  return _internal_members_size();
}
inline void ClusterInfo::clear_members() {
  members_.Clear();
}
inline ::event_store::client::gossip::MemberInfo* ClusterInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.gossip.ClusterInfo.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::gossip::MemberInfo >*
ClusterInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.gossip.ClusterInfo.members)
  return &members_;
}
inline const ::event_store::client::gossip::MemberInfo& ClusterInfo::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::event_store::client::gossip::MemberInfo& ClusterInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.gossip.ClusterInfo.members)
  return _internal_members(index);
}
inline ::event_store::client::gossip::MemberInfo* ClusterInfo::_internal_add_members() {
  return members_.Add();
}
inline ::event_store::client::gossip::MemberInfo* ClusterInfo::add_members() {
  // @@protoc_insertion_point(field_add:event_store.client.gossip.ClusterInfo.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_store::client::gossip::MemberInfo >&
ClusterInfo::members() const {
  // @@protoc_insertion_point(field_list:event_store.client.gossip.ClusterInfo.members)
  return members_;
}

// -------------------------------------------------------------------

// EndPoint

// string address = 1;
inline void EndPoint::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndPoint::address() const {
  // @@protoc_insertion_point(field_get:event_store.client.gossip.EndPoint.address)
  return _internal_address();
}
inline void EndPoint::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:event_store.client.gossip.EndPoint.address)
}
inline std::string* EndPoint::mutable_address() {
  // @@protoc_insertion_point(field_mutable:event_store.client.gossip.EndPoint.address)
  return _internal_mutable_address();
}
inline const std::string& EndPoint::_internal_address() const {
  return address_.Get();
}
inline void EndPoint::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndPoint::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.gossip.EndPoint.address)
}
inline void EndPoint::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.gossip.EndPoint.address)
}
inline void EndPoint::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.gossip.EndPoint.address)
}
inline std::string* EndPoint::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndPoint::release_address() {
  // @@protoc_insertion_point(field_release:event_store.client.gossip.EndPoint.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndPoint::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.gossip.EndPoint.address)
}
inline std::string* EndPoint::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.gossip.EndPoint.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndPoint::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.gossip.EndPoint.address)
}

// uint32 port = 2;
inline void EndPoint::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPoint::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPoint::port() const {
  // @@protoc_insertion_point(field_get:event_store.client.gossip.EndPoint.port)
  return _internal_port();
}
inline void EndPoint::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void EndPoint::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:event_store.client.gossip.EndPoint.port)
}

// -------------------------------------------------------------------

// MemberInfo

// .event_store.client.UUID instance_id = 1;
inline bool MemberInfo::_internal_has_instance_id() const {
  return this != internal_default_instance() && instance_id_ != nullptr;
}
inline bool MemberInfo::has_instance_id() const {
  return _internal_has_instance_id();
}
inline const ::event_store::client::UUID& MemberInfo::_internal_instance_id() const {
  const ::event_store::client::UUID* p = instance_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::UUID*>(
      &::event_store::client::_UUID_default_instance_);
}
inline const ::event_store::client::UUID& MemberInfo::instance_id() const {
  // @@protoc_insertion_point(field_get:event_store.client.gossip.MemberInfo.instance_id)
  return _internal_instance_id();
}
inline void MemberInfo::unsafe_arena_set_allocated_instance_id(
    ::event_store::client::UUID* instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_id_);
  }
  instance_id_ = instance_id;
  if (instance_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.gossip.MemberInfo.instance_id)
}
inline ::event_store::client::UUID* MemberInfo::release_instance_id() {
  auto temp = unsafe_arena_release_instance_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::UUID* MemberInfo::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_release:event_store.client.gossip.MemberInfo.instance_id)
  
  ::event_store::client::UUID* temp = instance_id_;
  instance_id_ = nullptr;
  return temp;
}
inline ::event_store::client::UUID* MemberInfo::_internal_mutable_instance_id() {
  
  if (instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::UUID>(GetArena());
    instance_id_ = p;
  }
  return instance_id_;
}
inline ::event_store::client::UUID* MemberInfo::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:event_store.client.gossip.MemberInfo.instance_id)
  return _internal_mutable_instance_id();
}
inline void MemberInfo::set_allocated_instance_id(::event_store::client::UUID* instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_id_);
  }
  if (instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_id, submessage_arena);
    }
    
  } else {
    
  }
  instance_id_ = instance_id;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.gossip.MemberInfo.instance_id)
}

// int64 time_stamp = 2;
inline void MemberInfo::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemberInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:event_store.client.gossip.MemberInfo.time_stamp)
  return _internal_time_stamp();
}
inline void MemberInfo::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_stamp_ = value;
}
inline void MemberInfo::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:event_store.client.gossip.MemberInfo.time_stamp)
}

// .event_store.client.gossip.MemberInfo.VNodeState state = 3;
inline void MemberInfo::clear_state() {
  state_ = 0;
}
inline ::event_store::client::gossip::MemberInfo_VNodeState MemberInfo::_internal_state() const {
  return static_cast< ::event_store::client::gossip::MemberInfo_VNodeState >(state_);
}
inline ::event_store::client::gossip::MemberInfo_VNodeState MemberInfo::state() const {
  // @@protoc_insertion_point(field_get:event_store.client.gossip.MemberInfo.state)
  return _internal_state();
}
inline void MemberInfo::_internal_set_state(::event_store::client::gossip::MemberInfo_VNodeState value) {
  
  state_ = value;
}
inline void MemberInfo::set_state(::event_store::client::gossip::MemberInfo_VNodeState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:event_store.client.gossip.MemberInfo.state)
}

// bool is_alive = 4;
inline void MemberInfo::clear_is_alive() {
  is_alive_ = false;
}
inline bool MemberInfo::_internal_is_alive() const {
  return is_alive_;
}
inline bool MemberInfo::is_alive() const {
  // @@protoc_insertion_point(field_get:event_store.client.gossip.MemberInfo.is_alive)
  return _internal_is_alive();
}
inline void MemberInfo::_internal_set_is_alive(bool value) {
  
  is_alive_ = value;
}
inline void MemberInfo::set_is_alive(bool value) {
  _internal_set_is_alive(value);
  // @@protoc_insertion_point(field_set:event_store.client.gossip.MemberInfo.is_alive)
}

// .event_store.client.gossip.EndPoint http_end_point = 5;
inline bool MemberInfo::_internal_has_http_end_point() const {
  return this != internal_default_instance() && http_end_point_ != nullptr;
}
inline bool MemberInfo::has_http_end_point() const {
  return _internal_has_http_end_point();
}
inline void MemberInfo::clear_http_end_point() {
  if (GetArena() == nullptr && http_end_point_ != nullptr) {
    delete http_end_point_;
  }
  http_end_point_ = nullptr;
}
inline const ::event_store::client::gossip::EndPoint& MemberInfo::_internal_http_end_point() const {
  const ::event_store::client::gossip::EndPoint* p = http_end_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::gossip::EndPoint*>(
      &::event_store::client::gossip::_EndPoint_default_instance_);
}
inline const ::event_store::client::gossip::EndPoint& MemberInfo::http_end_point() const {
  // @@protoc_insertion_point(field_get:event_store.client.gossip.MemberInfo.http_end_point)
  return _internal_http_end_point();
}
inline void MemberInfo::unsafe_arena_set_allocated_http_end_point(
    ::event_store::client::gossip::EndPoint* http_end_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_end_point_);
  }
  http_end_point_ = http_end_point;
  if (http_end_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.gossip.MemberInfo.http_end_point)
}
inline ::event_store::client::gossip::EndPoint* MemberInfo::release_http_end_point() {
  auto temp = unsafe_arena_release_http_end_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::gossip::EndPoint* MemberInfo::unsafe_arena_release_http_end_point() {
  // @@protoc_insertion_point(field_release:event_store.client.gossip.MemberInfo.http_end_point)
  
  ::event_store::client::gossip::EndPoint* temp = http_end_point_;
  http_end_point_ = nullptr;
  return temp;
}
inline ::event_store::client::gossip::EndPoint* MemberInfo::_internal_mutable_http_end_point() {
  
  if (http_end_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::gossip::EndPoint>(GetArena());
    http_end_point_ = p;
  }
  return http_end_point_;
}
inline ::event_store::client::gossip::EndPoint* MemberInfo::mutable_http_end_point() {
  // @@protoc_insertion_point(field_mutable:event_store.client.gossip.MemberInfo.http_end_point)
  return _internal_mutable_http_end_point();
}
inline void MemberInfo::set_allocated_http_end_point(::event_store::client::gossip::EndPoint* http_end_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete http_end_point_;
  }
  if (http_end_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(http_end_point);
    if (message_arena != submessage_arena) {
      http_end_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http_end_point, submessage_arena);
    }
    
  } else {
    
  }
  http_end_point_ = http_end_point;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.gossip.MemberInfo.http_end_point)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gossip
}  // namespace client
}  // namespace event_store

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::event_store::client::gossip::MemberInfo_VNodeState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event_store::client::gossip::MemberInfo_VNodeState>() {
  return ::event_store::client::gossip::MemberInfo_VNodeState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gossip_2eproto

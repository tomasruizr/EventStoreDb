// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: users.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_users_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_users_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_users_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_users_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_users_2eproto;
namespace event_store {
namespace client {
namespace users {
class ChangePasswordReq;
class ChangePasswordReqDefaultTypeInternal;
extern ChangePasswordReqDefaultTypeInternal _ChangePasswordReq_default_instance_;
class ChangePasswordReq_Options;
class ChangePasswordReq_OptionsDefaultTypeInternal;
extern ChangePasswordReq_OptionsDefaultTypeInternal _ChangePasswordReq_Options_default_instance_;
class ChangePasswordResp;
class ChangePasswordRespDefaultTypeInternal;
extern ChangePasswordRespDefaultTypeInternal _ChangePasswordResp_default_instance_;
class CreateReq;
class CreateReqDefaultTypeInternal;
extern CreateReqDefaultTypeInternal _CreateReq_default_instance_;
class CreateReq_Options;
class CreateReq_OptionsDefaultTypeInternal;
extern CreateReq_OptionsDefaultTypeInternal _CreateReq_Options_default_instance_;
class CreateResp;
class CreateRespDefaultTypeInternal;
extern CreateRespDefaultTypeInternal _CreateResp_default_instance_;
class DeleteReq;
class DeleteReqDefaultTypeInternal;
extern DeleteReqDefaultTypeInternal _DeleteReq_default_instance_;
class DeleteReq_Options;
class DeleteReq_OptionsDefaultTypeInternal;
extern DeleteReq_OptionsDefaultTypeInternal _DeleteReq_Options_default_instance_;
class DeleteResp;
class DeleteRespDefaultTypeInternal;
extern DeleteRespDefaultTypeInternal _DeleteResp_default_instance_;
class DetailsReq;
class DetailsReqDefaultTypeInternal;
extern DetailsReqDefaultTypeInternal _DetailsReq_default_instance_;
class DetailsReq_Options;
class DetailsReq_OptionsDefaultTypeInternal;
extern DetailsReq_OptionsDefaultTypeInternal _DetailsReq_Options_default_instance_;
class DetailsResp;
class DetailsRespDefaultTypeInternal;
extern DetailsRespDefaultTypeInternal _DetailsResp_default_instance_;
class DetailsResp_UserDetails;
class DetailsResp_UserDetailsDefaultTypeInternal;
extern DetailsResp_UserDetailsDefaultTypeInternal _DetailsResp_UserDetails_default_instance_;
class DetailsResp_UserDetails_DateTime;
class DetailsResp_UserDetails_DateTimeDefaultTypeInternal;
extern DetailsResp_UserDetails_DateTimeDefaultTypeInternal _DetailsResp_UserDetails_DateTime_default_instance_;
class DisableReq;
class DisableReqDefaultTypeInternal;
extern DisableReqDefaultTypeInternal _DisableReq_default_instance_;
class DisableReq_Options;
class DisableReq_OptionsDefaultTypeInternal;
extern DisableReq_OptionsDefaultTypeInternal _DisableReq_Options_default_instance_;
class DisableResp;
class DisableRespDefaultTypeInternal;
extern DisableRespDefaultTypeInternal _DisableResp_default_instance_;
class EnableReq;
class EnableReqDefaultTypeInternal;
extern EnableReqDefaultTypeInternal _EnableReq_default_instance_;
class EnableReq_Options;
class EnableReq_OptionsDefaultTypeInternal;
extern EnableReq_OptionsDefaultTypeInternal _EnableReq_Options_default_instance_;
class EnableResp;
class EnableRespDefaultTypeInternal;
extern EnableRespDefaultTypeInternal _EnableResp_default_instance_;
class ResetPasswordReq;
class ResetPasswordReqDefaultTypeInternal;
extern ResetPasswordReqDefaultTypeInternal _ResetPasswordReq_default_instance_;
class ResetPasswordReq_Options;
class ResetPasswordReq_OptionsDefaultTypeInternal;
extern ResetPasswordReq_OptionsDefaultTypeInternal _ResetPasswordReq_Options_default_instance_;
class ResetPasswordResp;
class ResetPasswordRespDefaultTypeInternal;
extern ResetPasswordRespDefaultTypeInternal _ResetPasswordResp_default_instance_;
class UpdateReq;
class UpdateReqDefaultTypeInternal;
extern UpdateReqDefaultTypeInternal _UpdateReq_default_instance_;
class UpdateReq_Options;
class UpdateReq_OptionsDefaultTypeInternal;
extern UpdateReq_OptionsDefaultTypeInternal _UpdateReq_Options_default_instance_;
class UpdateResp;
class UpdateRespDefaultTypeInternal;
extern UpdateRespDefaultTypeInternal _UpdateResp_default_instance_;
}  // namespace users
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::client::users::ChangePasswordReq* Arena::CreateMaybeMessage<::event_store::client::users::ChangePasswordReq>(Arena*);
template<> ::event_store::client::users::ChangePasswordReq_Options* Arena::CreateMaybeMessage<::event_store::client::users::ChangePasswordReq_Options>(Arena*);
template<> ::event_store::client::users::ChangePasswordResp* Arena::CreateMaybeMessage<::event_store::client::users::ChangePasswordResp>(Arena*);
template<> ::event_store::client::users::CreateReq* Arena::CreateMaybeMessage<::event_store::client::users::CreateReq>(Arena*);
template<> ::event_store::client::users::CreateReq_Options* Arena::CreateMaybeMessage<::event_store::client::users::CreateReq_Options>(Arena*);
template<> ::event_store::client::users::CreateResp* Arena::CreateMaybeMessage<::event_store::client::users::CreateResp>(Arena*);
template<> ::event_store::client::users::DeleteReq* Arena::CreateMaybeMessage<::event_store::client::users::DeleteReq>(Arena*);
template<> ::event_store::client::users::DeleteReq_Options* Arena::CreateMaybeMessage<::event_store::client::users::DeleteReq_Options>(Arena*);
template<> ::event_store::client::users::DeleteResp* Arena::CreateMaybeMessage<::event_store::client::users::DeleteResp>(Arena*);
template<> ::event_store::client::users::DetailsReq* Arena::CreateMaybeMessage<::event_store::client::users::DetailsReq>(Arena*);
template<> ::event_store::client::users::DetailsReq_Options* Arena::CreateMaybeMessage<::event_store::client::users::DetailsReq_Options>(Arena*);
template<> ::event_store::client::users::DetailsResp* Arena::CreateMaybeMessage<::event_store::client::users::DetailsResp>(Arena*);
template<> ::event_store::client::users::DetailsResp_UserDetails* Arena::CreateMaybeMessage<::event_store::client::users::DetailsResp_UserDetails>(Arena*);
template<> ::event_store::client::users::DetailsResp_UserDetails_DateTime* Arena::CreateMaybeMessage<::event_store::client::users::DetailsResp_UserDetails_DateTime>(Arena*);
template<> ::event_store::client::users::DisableReq* Arena::CreateMaybeMessage<::event_store::client::users::DisableReq>(Arena*);
template<> ::event_store::client::users::DisableReq_Options* Arena::CreateMaybeMessage<::event_store::client::users::DisableReq_Options>(Arena*);
template<> ::event_store::client::users::DisableResp* Arena::CreateMaybeMessage<::event_store::client::users::DisableResp>(Arena*);
template<> ::event_store::client::users::EnableReq* Arena::CreateMaybeMessage<::event_store::client::users::EnableReq>(Arena*);
template<> ::event_store::client::users::EnableReq_Options* Arena::CreateMaybeMessage<::event_store::client::users::EnableReq_Options>(Arena*);
template<> ::event_store::client::users::EnableResp* Arena::CreateMaybeMessage<::event_store::client::users::EnableResp>(Arena*);
template<> ::event_store::client::users::ResetPasswordReq* Arena::CreateMaybeMessage<::event_store::client::users::ResetPasswordReq>(Arena*);
template<> ::event_store::client::users::ResetPasswordReq_Options* Arena::CreateMaybeMessage<::event_store::client::users::ResetPasswordReq_Options>(Arena*);
template<> ::event_store::client::users::ResetPasswordResp* Arena::CreateMaybeMessage<::event_store::client::users::ResetPasswordResp>(Arena*);
template<> ::event_store::client::users::UpdateReq* Arena::CreateMaybeMessage<::event_store::client::users::UpdateReq>(Arena*);
template<> ::event_store::client::users::UpdateReq_Options* Arena::CreateMaybeMessage<::event_store::client::users::UpdateReq_Options>(Arena*);
template<> ::event_store::client::users::UpdateResp* Arena::CreateMaybeMessage<::event_store::client::users::UpdateResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace client {
namespace users {

// ===================================================================

class CreateReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.CreateReq.Options) */ {
 public:
  inline CreateReq_Options() : CreateReq_Options(nullptr) {};
  virtual ~CreateReq_Options();

  CreateReq_Options(const CreateReq_Options& from);
  CreateReq_Options(CreateReq_Options&& from) noexcept
    : CreateReq_Options() {
    *this = ::std::move(from);
  }

  inline CreateReq_Options& operator=(const CreateReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq_Options& operator=(CreateReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq_Options* internal_default_instance() {
    return reinterpret_cast<const CreateReq_Options*>(
               &_CreateReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateReq_Options& a, CreateReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq_Options* New() const final {
    return CreateMaybeMessage<CreateReq_Options>(nullptr);
  }

  CreateReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq_Options& from);
  void MergeFrom(const CreateReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.CreateReq.Options";
  }
  protected:
  explicit CreateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 4,
    kLoginNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kFullNameFieldNumber = 3,
  };
  // repeated string groups = 4;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  const std::string& groups(int index) const;
  std::string* mutable_groups(int index);
  void set_groups(int index, const std::string& value);
  void set_groups(int index, std::string&& value);
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  std::string* add_groups();
  void add_groups(const std::string& value);
  void add_groups(std::string&& value);
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groups();
  private:
  const std::string& _internal_groups(int index) const;
  std::string* _internal_add_groups();
  public:

  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string full_name = 3;
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_full_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_name(
      std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.CreateReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class CreateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.CreateReq) */ {
 public:
  inline CreateReq() : CreateReq(nullptr) {};
  virtual ~CreateReq();

  CreateReq(const CreateReq& from);
  CreateReq(CreateReq&& from) noexcept
    : CreateReq() {
    *this = ::std::move(from);
  }

  inline CreateReq& operator=(const CreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateReq& operator=(CreateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateReq* internal_default_instance() {
    return reinterpret_cast<const CreateReq*>(
               &_CreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateReq& a, CreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateReq* New() const final {
    return CreateMaybeMessage<CreateReq>(nullptr);
  }

  CreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateReq& from);
  void MergeFrom(const CreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.CreateReq";
  }
  protected:
  explicit CreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.users.CreateReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::users::CreateReq_Options& options() const;
  ::event_store::client::users::CreateReq_Options* release_options();
  ::event_store::client::users::CreateReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::users::CreateReq_Options* options);
  private:
  const ::event_store::client::users::CreateReq_Options& _internal_options() const;
  ::event_store::client::users::CreateReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::users::CreateReq_Options* options);
  ::event_store::client::users::CreateReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.users.CreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::CreateReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class CreateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.CreateResp) */ {
 public:
  inline CreateResp() : CreateResp(nullptr) {};
  virtual ~CreateResp();

  CreateResp(const CreateResp& from);
  CreateResp(CreateResp&& from) noexcept
    : CreateResp() {
    *this = ::std::move(from);
  }

  inline CreateResp& operator=(const CreateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResp& operator=(CreateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResp* internal_default_instance() {
    return reinterpret_cast<const CreateResp*>(
               &_CreateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateResp& a, CreateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResp* New() const final {
    return CreateMaybeMessage<CreateResp>(nullptr);
  }

  CreateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateResp& from);
  void MergeFrom(const CreateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.CreateResp";
  }
  protected:
  explicit CreateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.users.CreateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.UpdateReq.Options) */ {
 public:
  inline UpdateReq_Options() : UpdateReq_Options(nullptr) {};
  virtual ~UpdateReq_Options();

  UpdateReq_Options(const UpdateReq_Options& from);
  UpdateReq_Options(UpdateReq_Options&& from) noexcept
    : UpdateReq_Options() {
    *this = ::std::move(from);
  }

  inline UpdateReq_Options& operator=(const UpdateReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq_Options& operator=(UpdateReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq_Options* internal_default_instance() {
    return reinterpret_cast<const UpdateReq_Options*>(
               &_UpdateReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateReq_Options& a, UpdateReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq_Options* New() const final {
    return CreateMaybeMessage<UpdateReq_Options>(nullptr);
  }

  UpdateReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq_Options& from);
  void MergeFrom(const UpdateReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.UpdateReq.Options";
  }
  protected:
  explicit UpdateReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 4,
    kLoginNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kFullNameFieldNumber = 3,
  };
  // repeated string groups = 4;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  const std::string& groups(int index) const;
  std::string* mutable_groups(int index);
  void set_groups(int index, const std::string& value);
  void set_groups(int index, std::string&& value);
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  std::string* add_groups();
  void add_groups(const std::string& value);
  void add_groups(std::string&& value);
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groups();
  private:
  const std::string& _internal_groups(int index) const;
  std::string* _internal_add_groups();
  public:

  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string full_name = 3;
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_full_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_name(
      std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.UpdateReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class UpdateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.UpdateReq) */ {
 public:
  inline UpdateReq() : UpdateReq(nullptr) {};
  virtual ~UpdateReq();

  UpdateReq(const UpdateReq& from);
  UpdateReq(UpdateReq&& from) noexcept
    : UpdateReq() {
    *this = ::std::move(from);
  }

  inline UpdateReq& operator=(const UpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateReq& operator=(UpdateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateReq* internal_default_instance() {
    return reinterpret_cast<const UpdateReq*>(
               &_UpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateReq& a, UpdateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateReq* New() const final {
    return CreateMaybeMessage<UpdateReq>(nullptr);
  }

  UpdateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateReq& from);
  void MergeFrom(const UpdateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.UpdateReq";
  }
  protected:
  explicit UpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.users.UpdateReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::users::UpdateReq_Options& options() const;
  ::event_store::client::users::UpdateReq_Options* release_options();
  ::event_store::client::users::UpdateReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::users::UpdateReq_Options* options);
  private:
  const ::event_store::client::users::UpdateReq_Options& _internal_options() const;
  ::event_store::client::users::UpdateReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::users::UpdateReq_Options* options);
  ::event_store::client::users::UpdateReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.users.UpdateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::UpdateReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class UpdateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.UpdateResp) */ {
 public:
  inline UpdateResp() : UpdateResp(nullptr) {};
  virtual ~UpdateResp();

  UpdateResp(const UpdateResp& from);
  UpdateResp(UpdateResp&& from) noexcept
    : UpdateResp() {
    *this = ::std::move(from);
  }

  inline UpdateResp& operator=(const UpdateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResp& operator=(UpdateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateResp* internal_default_instance() {
    return reinterpret_cast<const UpdateResp*>(
               &_UpdateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateResp& a, UpdateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResp* New() const final {
    return CreateMaybeMessage<UpdateResp>(nullptr);
  }

  UpdateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResp& from);
  void MergeFrom(const UpdateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.UpdateResp";
  }
  protected:
  explicit UpdateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.users.UpdateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DeleteReq.Options) */ {
 public:
  inline DeleteReq_Options() : DeleteReq_Options(nullptr) {};
  virtual ~DeleteReq_Options();

  DeleteReq_Options(const DeleteReq_Options& from);
  DeleteReq_Options(DeleteReq_Options&& from) noexcept
    : DeleteReq_Options() {
    *this = ::std::move(from);
  }

  inline DeleteReq_Options& operator=(const DeleteReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq_Options& operator=(DeleteReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReq_Options* internal_default_instance() {
    return reinterpret_cast<const DeleteReq_Options*>(
               &_DeleteReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteReq_Options& a, DeleteReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq_Options* New() const final {
    return CreateMaybeMessage<DeleteReq_Options>(nullptr);
  }

  DeleteReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq_Options& from);
  void MergeFrom(const DeleteReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DeleteReq.Options";
  }
  protected:
  explicit DeleteReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
  };
  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.DeleteReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DeleteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DeleteReq) */ {
 public:
  inline DeleteReq() : DeleteReq(nullptr) {};
  virtual ~DeleteReq();

  DeleteReq(const DeleteReq& from);
  DeleteReq(DeleteReq&& from) noexcept
    : DeleteReq() {
    *this = ::std::move(from);
  }

  inline DeleteReq& operator=(const DeleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteReq& operator=(DeleteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteReq* internal_default_instance() {
    return reinterpret_cast<const DeleteReq*>(
               &_DeleteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteReq& a, DeleteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteReq* New() const final {
    return CreateMaybeMessage<DeleteReq>(nullptr);
  }

  DeleteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteReq& from);
  void MergeFrom(const DeleteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DeleteReq";
  }
  protected:
  explicit DeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeleteReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.users.DeleteReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::users::DeleteReq_Options& options() const;
  ::event_store::client::users::DeleteReq_Options* release_options();
  ::event_store::client::users::DeleteReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::users::DeleteReq_Options* options);
  private:
  const ::event_store::client::users::DeleteReq_Options& _internal_options() const;
  ::event_store::client::users::DeleteReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::users::DeleteReq_Options* options);
  ::event_store::client::users::DeleteReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.users.DeleteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::DeleteReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DeleteResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DeleteResp) */ {
 public:
  inline DeleteResp() : DeleteResp(nullptr) {};
  virtual ~DeleteResp();

  DeleteResp(const DeleteResp& from);
  DeleteResp(DeleteResp&& from) noexcept
    : DeleteResp() {
    *this = ::std::move(from);
  }

  inline DeleteResp& operator=(const DeleteResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResp& operator=(DeleteResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResp* internal_default_instance() {
    return reinterpret_cast<const DeleteResp*>(
               &_DeleteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteResp& a, DeleteResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResp* New() const final {
    return CreateMaybeMessage<DeleteResp>(nullptr);
  }

  DeleteResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResp& from);
  void MergeFrom(const DeleteResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DeleteResp";
  }
  protected:
  explicit DeleteResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.users.DeleteResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class EnableReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.EnableReq.Options) */ {
 public:
  inline EnableReq_Options() : EnableReq_Options(nullptr) {};
  virtual ~EnableReq_Options();

  EnableReq_Options(const EnableReq_Options& from);
  EnableReq_Options(EnableReq_Options&& from) noexcept
    : EnableReq_Options() {
    *this = ::std::move(from);
  }

  inline EnableReq_Options& operator=(const EnableReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableReq_Options& operator=(EnableReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableReq_Options* internal_default_instance() {
    return reinterpret_cast<const EnableReq_Options*>(
               &_EnableReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EnableReq_Options& a, EnableReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableReq_Options* New() const final {
    return CreateMaybeMessage<EnableReq_Options>(nullptr);
  }

  EnableReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableReq_Options& from);
  void MergeFrom(const EnableReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.EnableReq.Options";
  }
  protected:
  explicit EnableReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
  };
  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.EnableReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class EnableReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.EnableReq) */ {
 public:
  inline EnableReq() : EnableReq(nullptr) {};
  virtual ~EnableReq();

  EnableReq(const EnableReq& from);
  EnableReq(EnableReq&& from) noexcept
    : EnableReq() {
    *this = ::std::move(from);
  }

  inline EnableReq& operator=(const EnableReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableReq& operator=(EnableReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableReq* internal_default_instance() {
    return reinterpret_cast<const EnableReq*>(
               &_EnableReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EnableReq& a, EnableReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableReq* New() const final {
    return CreateMaybeMessage<EnableReq>(nullptr);
  }

  EnableReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableReq& from);
  void MergeFrom(const EnableReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.EnableReq";
  }
  protected:
  explicit EnableReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnableReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.users.EnableReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::users::EnableReq_Options& options() const;
  ::event_store::client::users::EnableReq_Options* release_options();
  ::event_store::client::users::EnableReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::users::EnableReq_Options* options);
  private:
  const ::event_store::client::users::EnableReq_Options& _internal_options() const;
  ::event_store::client::users::EnableReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::users::EnableReq_Options* options);
  ::event_store::client::users::EnableReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.users.EnableReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::EnableReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class EnableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.EnableResp) */ {
 public:
  inline EnableResp() : EnableResp(nullptr) {};
  virtual ~EnableResp();

  EnableResp(const EnableResp& from);
  EnableResp(EnableResp&& from) noexcept
    : EnableResp() {
    *this = ::std::move(from);
  }

  inline EnableResp& operator=(const EnableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableResp& operator=(EnableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableResp* internal_default_instance() {
    return reinterpret_cast<const EnableResp*>(
               &_EnableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EnableResp& a, EnableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableResp* New() const final {
    return CreateMaybeMessage<EnableResp>(nullptr);
  }

  EnableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableResp& from);
  void MergeFrom(const EnableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.EnableResp";
  }
  protected:
  explicit EnableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.users.EnableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DisableReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DisableReq.Options) */ {
 public:
  inline DisableReq_Options() : DisableReq_Options(nullptr) {};
  virtual ~DisableReq_Options();

  DisableReq_Options(const DisableReq_Options& from);
  DisableReq_Options(DisableReq_Options&& from) noexcept
    : DisableReq_Options() {
    *this = ::std::move(from);
  }

  inline DisableReq_Options& operator=(const DisableReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableReq_Options& operator=(DisableReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableReq_Options* internal_default_instance() {
    return reinterpret_cast<const DisableReq_Options*>(
               &_DisableReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DisableReq_Options& a, DisableReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableReq_Options* New() const final {
    return CreateMaybeMessage<DisableReq_Options>(nullptr);
  }

  DisableReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableReq_Options& from);
  void MergeFrom(const DisableReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DisableReq.Options";
  }
  protected:
  explicit DisableReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
  };
  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.DisableReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DisableReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DisableReq) */ {
 public:
  inline DisableReq() : DisableReq(nullptr) {};
  virtual ~DisableReq();

  DisableReq(const DisableReq& from);
  DisableReq(DisableReq&& from) noexcept
    : DisableReq() {
    *this = ::std::move(from);
  }

  inline DisableReq& operator=(const DisableReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableReq& operator=(DisableReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableReq* internal_default_instance() {
    return reinterpret_cast<const DisableReq*>(
               &_DisableReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DisableReq& a, DisableReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableReq* New() const final {
    return CreateMaybeMessage<DisableReq>(nullptr);
  }

  DisableReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableReq& from);
  void MergeFrom(const DisableReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DisableReq";
  }
  protected:
  explicit DisableReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DisableReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.users.DisableReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::users::DisableReq_Options& options() const;
  ::event_store::client::users::DisableReq_Options* release_options();
  ::event_store::client::users::DisableReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::users::DisableReq_Options* options);
  private:
  const ::event_store::client::users::DisableReq_Options& _internal_options() const;
  ::event_store::client::users::DisableReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::users::DisableReq_Options* options);
  ::event_store::client::users::DisableReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.users.DisableReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::DisableReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DisableResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DisableResp) */ {
 public:
  inline DisableResp() : DisableResp(nullptr) {};
  virtual ~DisableResp();

  DisableResp(const DisableResp& from);
  DisableResp(DisableResp&& from) noexcept
    : DisableResp() {
    *this = ::std::move(from);
  }

  inline DisableResp& operator=(const DisableResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableResp& operator=(DisableResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableResp* internal_default_instance() {
    return reinterpret_cast<const DisableResp*>(
               &_DisableResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DisableResp& a, DisableResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableResp* New() const final {
    return CreateMaybeMessage<DisableResp>(nullptr);
  }

  DisableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableResp& from);
  void MergeFrom(const DisableResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DisableResp";
  }
  protected:
  explicit DisableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.users.DisableResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DetailsReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DetailsReq.Options) */ {
 public:
  inline DetailsReq_Options() : DetailsReq_Options(nullptr) {};
  virtual ~DetailsReq_Options();

  DetailsReq_Options(const DetailsReq_Options& from);
  DetailsReq_Options(DetailsReq_Options&& from) noexcept
    : DetailsReq_Options() {
    *this = ::std::move(from);
  }

  inline DetailsReq_Options& operator=(const DetailsReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailsReq_Options& operator=(DetailsReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailsReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailsReq_Options* internal_default_instance() {
    return reinterpret_cast<const DetailsReq_Options*>(
               &_DetailsReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DetailsReq_Options& a, DetailsReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailsReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailsReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailsReq_Options* New() const final {
    return CreateMaybeMessage<DetailsReq_Options>(nullptr);
  }

  DetailsReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailsReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailsReq_Options& from);
  void MergeFrom(const DetailsReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailsReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DetailsReq.Options";
  }
  protected:
  explicit DetailsReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
  };
  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.DetailsReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DetailsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DetailsReq) */ {
 public:
  inline DetailsReq() : DetailsReq(nullptr) {};
  virtual ~DetailsReq();

  DetailsReq(const DetailsReq& from);
  DetailsReq(DetailsReq&& from) noexcept
    : DetailsReq() {
    *this = ::std::move(from);
  }

  inline DetailsReq& operator=(const DetailsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailsReq& operator=(DetailsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailsReq* internal_default_instance() {
    return reinterpret_cast<const DetailsReq*>(
               &_DetailsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DetailsReq& a, DetailsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailsReq* New() const final {
    return CreateMaybeMessage<DetailsReq>(nullptr);
  }

  DetailsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailsReq& from);
  void MergeFrom(const DetailsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DetailsReq";
  }
  protected:
  explicit DetailsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetailsReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.users.DetailsReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::users::DetailsReq_Options& options() const;
  ::event_store::client::users::DetailsReq_Options* release_options();
  ::event_store::client::users::DetailsReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::users::DetailsReq_Options* options);
  private:
  const ::event_store::client::users::DetailsReq_Options& _internal_options() const;
  ::event_store::client::users::DetailsReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::users::DetailsReq_Options* options);
  ::event_store::client::users::DetailsReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.users.DetailsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::DetailsReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DetailsResp_UserDetails_DateTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DetailsResp.UserDetails.DateTime) */ {
 public:
  inline DetailsResp_UserDetails_DateTime() : DetailsResp_UserDetails_DateTime(nullptr) {};
  virtual ~DetailsResp_UserDetails_DateTime();

  DetailsResp_UserDetails_DateTime(const DetailsResp_UserDetails_DateTime& from);
  DetailsResp_UserDetails_DateTime(DetailsResp_UserDetails_DateTime&& from) noexcept
    : DetailsResp_UserDetails_DateTime() {
    *this = ::std::move(from);
  }

  inline DetailsResp_UserDetails_DateTime& operator=(const DetailsResp_UserDetails_DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailsResp_UserDetails_DateTime& operator=(DetailsResp_UserDetails_DateTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailsResp_UserDetails_DateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailsResp_UserDetails_DateTime* internal_default_instance() {
    return reinterpret_cast<const DetailsResp_UserDetails_DateTime*>(
               &_DetailsResp_UserDetails_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DetailsResp_UserDetails_DateTime& a, DetailsResp_UserDetails_DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailsResp_UserDetails_DateTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailsResp_UserDetails_DateTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailsResp_UserDetails_DateTime* New() const final {
    return CreateMaybeMessage<DetailsResp_UserDetails_DateTime>(nullptr);
  }

  DetailsResp_UserDetails_DateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailsResp_UserDetails_DateTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailsResp_UserDetails_DateTime& from);
  void MergeFrom(const DetailsResp_UserDetails_DateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailsResp_UserDetails_DateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DetailsResp.UserDetails.DateTime";
  }
  protected:
  explicit DetailsResp_UserDetails_DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicksSinceEpochFieldNumber = 1,
  };
  // int64 ticks_since_epoch = 1;
  void clear_ticks_since_epoch();
  ::PROTOBUF_NAMESPACE_ID::int64 ticks_since_epoch() const;
  void set_ticks_since_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ticks_since_epoch() const;
  void _internal_set_ticks_since_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.DetailsResp.UserDetails.DateTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 ticks_since_epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DetailsResp_UserDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DetailsResp.UserDetails) */ {
 public:
  inline DetailsResp_UserDetails() : DetailsResp_UserDetails(nullptr) {};
  virtual ~DetailsResp_UserDetails();

  DetailsResp_UserDetails(const DetailsResp_UserDetails& from);
  DetailsResp_UserDetails(DetailsResp_UserDetails&& from) noexcept
    : DetailsResp_UserDetails() {
    *this = ::std::move(from);
  }

  inline DetailsResp_UserDetails& operator=(const DetailsResp_UserDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailsResp_UserDetails& operator=(DetailsResp_UserDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailsResp_UserDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailsResp_UserDetails* internal_default_instance() {
    return reinterpret_cast<const DetailsResp_UserDetails*>(
               &_DetailsResp_UserDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DetailsResp_UserDetails& a, DetailsResp_UserDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailsResp_UserDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailsResp_UserDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailsResp_UserDetails* New() const final {
    return CreateMaybeMessage<DetailsResp_UserDetails>(nullptr);
  }

  DetailsResp_UserDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailsResp_UserDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailsResp_UserDetails& from);
  void MergeFrom(const DetailsResp_UserDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailsResp_UserDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DetailsResp.UserDetails";
  }
  protected:
  explicit DetailsResp_UserDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetailsResp_UserDetails_DateTime DateTime;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 3,
    kLoginNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
    kLastUpdatedFieldNumber = 4,
    kDisabledFieldNumber = 5,
  };
  // repeated string groups = 3;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  const std::string& groups(int index) const;
  std::string* mutable_groups(int index);
  void set_groups(int index, const std::string& value);
  void set_groups(int index, std::string&& value);
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  std::string* add_groups();
  void add_groups(const std::string& value);
  void add_groups(std::string&& value);
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groups();
  private:
  const std::string& _internal_groups(int index) const;
  std::string* _internal_add_groups();
  public:

  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // string full_name = 2;
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_full_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_name(
      std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // .event_store.client.users.DetailsResp.UserDetails.DateTime last_updated = 4;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const ::event_store::client::users::DetailsResp_UserDetails_DateTime& last_updated() const;
  ::event_store::client::users::DetailsResp_UserDetails_DateTime* release_last_updated();
  ::event_store::client::users::DetailsResp_UserDetails_DateTime* mutable_last_updated();
  void set_allocated_last_updated(::event_store::client::users::DetailsResp_UserDetails_DateTime* last_updated);
  private:
  const ::event_store::client::users::DetailsResp_UserDetails_DateTime& _internal_last_updated() const;
  ::event_store::client::users::DetailsResp_UserDetails_DateTime* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      ::event_store::client::users::DetailsResp_UserDetails_DateTime* last_updated);
  ::event_store::client::users::DetailsResp_UserDetails_DateTime* unsafe_arena_release_last_updated();

  // bool disabled = 5;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.DetailsResp.UserDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::event_store::client::users::DetailsResp_UserDetails_DateTime* last_updated_;
  bool disabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class DetailsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.DetailsResp) */ {
 public:
  inline DetailsResp() : DetailsResp(nullptr) {};
  virtual ~DetailsResp();

  DetailsResp(const DetailsResp& from);
  DetailsResp(DetailsResp&& from) noexcept
    : DetailsResp() {
    *this = ::std::move(from);
  }

  inline DetailsResp& operator=(const DetailsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailsResp& operator=(DetailsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailsResp* internal_default_instance() {
    return reinterpret_cast<const DetailsResp*>(
               &_DetailsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DetailsResp& a, DetailsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailsResp* New() const final {
    return CreateMaybeMessage<DetailsResp>(nullptr);
  }

  DetailsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailsResp& from);
  void MergeFrom(const DetailsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.DetailsResp";
  }
  protected:
  explicit DetailsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetailsResp_UserDetails UserDetails;

  // accessors -------------------------------------------------------

  enum : int {
    kUserDetailsFieldNumber = 1,
  };
  // .event_store.client.users.DetailsResp.UserDetails user_details = 1;
  bool has_user_details() const;
  private:
  bool _internal_has_user_details() const;
  public:
  void clear_user_details();
  const ::event_store::client::users::DetailsResp_UserDetails& user_details() const;
  ::event_store::client::users::DetailsResp_UserDetails* release_user_details();
  ::event_store::client::users::DetailsResp_UserDetails* mutable_user_details();
  void set_allocated_user_details(::event_store::client::users::DetailsResp_UserDetails* user_details);
  private:
  const ::event_store::client::users::DetailsResp_UserDetails& _internal_user_details() const;
  ::event_store::client::users::DetailsResp_UserDetails* _internal_mutable_user_details();
  public:
  void unsafe_arena_set_allocated_user_details(
      ::event_store::client::users::DetailsResp_UserDetails* user_details);
  ::event_store::client::users::DetailsResp_UserDetails* unsafe_arena_release_user_details();

  // @@protoc_insertion_point(class_scope:event_store.client.users.DetailsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::DetailsResp_UserDetails* user_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.ChangePasswordReq.Options) */ {
 public:
  inline ChangePasswordReq_Options() : ChangePasswordReq_Options(nullptr) {};
  virtual ~ChangePasswordReq_Options();

  ChangePasswordReq_Options(const ChangePasswordReq_Options& from);
  ChangePasswordReq_Options(ChangePasswordReq_Options&& from) noexcept
    : ChangePasswordReq_Options() {
    *this = ::std::move(from);
  }

  inline ChangePasswordReq_Options& operator=(const ChangePasswordReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordReq_Options& operator=(ChangePasswordReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePasswordReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePasswordReq_Options* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordReq_Options*>(
               &_ChangePasswordReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ChangePasswordReq_Options& a, ChangePasswordReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePasswordReq_Options* New() const final {
    return CreateMaybeMessage<ChangePasswordReq_Options>(nullptr);
  }

  ChangePasswordReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePasswordReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePasswordReq_Options& from);
  void MergeFrom(const ChangePasswordReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.ChangePasswordReq.Options";
  }
  protected:
  explicit ChangePasswordReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
    kCurrentPasswordFieldNumber = 2,
    kNewPasswordFieldNumber = 3,
  };
  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // string current_password = 2;
  void clear_current_password();
  const std::string& current_password() const;
  void set_current_password(const std::string& value);
  void set_current_password(std::string&& value);
  void set_current_password(const char* value);
  void set_current_password(const char* value, size_t size);
  std::string* mutable_current_password();
  std::string* release_current_password();
  void set_allocated_current_password(std::string* current_password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_current_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_current_password(
      std::string* current_password);
  private:
  const std::string& _internal_current_password() const;
  void _internal_set_current_password(const std::string& value);
  std::string* _internal_mutable_current_password();
  public:

  // string new_password = 3;
  void clear_new_password();
  const std::string& new_password() const;
  void set_new_password(const std::string& value);
  void set_new_password(std::string&& value);
  void set_new_password(const char* value);
  void set_new_password(const char* value, size_t size);
  std::string* mutable_new_password();
  std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_password(
      std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.ChangePasswordReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.ChangePasswordReq) */ {
 public:
  inline ChangePasswordReq() : ChangePasswordReq(nullptr) {};
  virtual ~ChangePasswordReq();

  ChangePasswordReq(const ChangePasswordReq& from);
  ChangePasswordReq(ChangePasswordReq&& from) noexcept
    : ChangePasswordReq() {
    *this = ::std::move(from);
  }

  inline ChangePasswordReq& operator=(const ChangePasswordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordReq& operator=(ChangePasswordReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePasswordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePasswordReq* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordReq*>(
               &_ChangePasswordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ChangePasswordReq& a, ChangePasswordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePasswordReq* New() const final {
    return CreateMaybeMessage<ChangePasswordReq>(nullptr);
  }

  ChangePasswordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePasswordReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePasswordReq& from);
  void MergeFrom(const ChangePasswordReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.ChangePasswordReq";
  }
  protected:
  explicit ChangePasswordReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChangePasswordReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.users.ChangePasswordReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::users::ChangePasswordReq_Options& options() const;
  ::event_store::client::users::ChangePasswordReq_Options* release_options();
  ::event_store::client::users::ChangePasswordReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::users::ChangePasswordReq_Options* options);
  private:
  const ::event_store::client::users::ChangePasswordReq_Options& _internal_options() const;
  ::event_store::client::users::ChangePasswordReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::users::ChangePasswordReq_Options* options);
  ::event_store::client::users::ChangePasswordReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.users.ChangePasswordReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::ChangePasswordReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.ChangePasswordResp) */ {
 public:
  inline ChangePasswordResp() : ChangePasswordResp(nullptr) {};
  virtual ~ChangePasswordResp();

  ChangePasswordResp(const ChangePasswordResp& from);
  ChangePasswordResp(ChangePasswordResp&& from) noexcept
    : ChangePasswordResp() {
    *this = ::std::move(from);
  }

  inline ChangePasswordResp& operator=(const ChangePasswordResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordResp& operator=(ChangePasswordResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePasswordResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePasswordResp* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordResp*>(
               &_ChangePasswordResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ChangePasswordResp& a, ChangePasswordResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePasswordResp* New() const final {
    return CreateMaybeMessage<ChangePasswordResp>(nullptr);
  }

  ChangePasswordResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePasswordResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePasswordResp& from);
  void MergeFrom(const ChangePasswordResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.ChangePasswordResp";
  }
  protected:
  explicit ChangePasswordResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.users.ChangePasswordResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class ResetPasswordReq_Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.ResetPasswordReq.Options) */ {
 public:
  inline ResetPasswordReq_Options() : ResetPasswordReq_Options(nullptr) {};
  virtual ~ResetPasswordReq_Options();

  ResetPasswordReq_Options(const ResetPasswordReq_Options& from);
  ResetPasswordReq_Options(ResetPasswordReq_Options&& from) noexcept
    : ResetPasswordReq_Options() {
    *this = ::std::move(from);
  }

  inline ResetPasswordReq_Options& operator=(const ResetPasswordReq_Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetPasswordReq_Options& operator=(ResetPasswordReq_Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetPasswordReq_Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetPasswordReq_Options* internal_default_instance() {
    return reinterpret_cast<const ResetPasswordReq_Options*>(
               &_ResetPasswordReq_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ResetPasswordReq_Options& a, ResetPasswordReq_Options& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetPasswordReq_Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetPasswordReq_Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetPasswordReq_Options* New() const final {
    return CreateMaybeMessage<ResetPasswordReq_Options>(nullptr);
  }

  ResetPasswordReq_Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetPasswordReq_Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetPasswordReq_Options& from);
  void MergeFrom(const ResetPasswordReq_Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetPasswordReq_Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.ResetPasswordReq.Options";
  }
  protected:
  explicit ResetPasswordReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
    kNewPasswordFieldNumber = 2,
  };
  // string login_name = 1;
  void clear_login_name();
  const std::string& login_name() const;
  void set_login_name(const std::string& value);
  void set_login_name(std::string&& value);
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  std::string* mutable_login_name();
  std::string* release_login_name();
  void set_allocated_login_name(std::string* login_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login_name(
      std::string* login_name);
  private:
  const std::string& _internal_login_name() const;
  void _internal_set_login_name(const std::string& value);
  std::string* _internal_mutable_login_name();
  public:

  // string new_password = 2;
  void clear_new_password();
  const std::string& new_password() const;
  void set_new_password(const std::string& value);
  void set_new_password(std::string&& value);
  void set_new_password(const char* value);
  void set_new_password(const char* value, size_t size);
  std::string* mutable_new_password();
  std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_password(
      std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.users.ResetPasswordReq.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class ResetPasswordReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.ResetPasswordReq) */ {
 public:
  inline ResetPasswordReq() : ResetPasswordReq(nullptr) {};
  virtual ~ResetPasswordReq();

  ResetPasswordReq(const ResetPasswordReq& from);
  ResetPasswordReq(ResetPasswordReq&& from) noexcept
    : ResetPasswordReq() {
    *this = ::std::move(from);
  }

  inline ResetPasswordReq& operator=(const ResetPasswordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetPasswordReq& operator=(ResetPasswordReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetPasswordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetPasswordReq* internal_default_instance() {
    return reinterpret_cast<const ResetPasswordReq*>(
               &_ResetPasswordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ResetPasswordReq& a, ResetPasswordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetPasswordReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetPasswordReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetPasswordReq* New() const final {
    return CreateMaybeMessage<ResetPasswordReq>(nullptr);
  }

  ResetPasswordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetPasswordReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetPasswordReq& from);
  void MergeFrom(const ResetPasswordReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetPasswordReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.ResetPasswordReq";
  }
  protected:
  explicit ResetPasswordReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetPasswordReq_Options Options;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .event_store.client.users.ResetPasswordReq.Options options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::event_store::client::users::ResetPasswordReq_Options& options() const;
  ::event_store::client::users::ResetPasswordReq_Options* release_options();
  ::event_store::client::users::ResetPasswordReq_Options* mutable_options();
  void set_allocated_options(::event_store::client::users::ResetPasswordReq_Options* options);
  private:
  const ::event_store::client::users::ResetPasswordReq_Options& _internal_options() const;
  ::event_store::client::users::ResetPasswordReq_Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::event_store::client::users::ResetPasswordReq_Options* options);
  ::event_store::client::users::ResetPasswordReq_Options* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:event_store.client.users.ResetPasswordReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::users::ResetPasswordReq_Options* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class ResetPasswordResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.users.ResetPasswordResp) */ {
 public:
  inline ResetPasswordResp() : ResetPasswordResp(nullptr) {};
  virtual ~ResetPasswordResp();

  ResetPasswordResp(const ResetPasswordResp& from);
  ResetPasswordResp(ResetPasswordResp&& from) noexcept
    : ResetPasswordResp() {
    *this = ::std::move(from);
  }

  inline ResetPasswordResp& operator=(const ResetPasswordResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetPasswordResp& operator=(ResetPasswordResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetPasswordResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetPasswordResp* internal_default_instance() {
    return reinterpret_cast<const ResetPasswordResp*>(
               &_ResetPasswordResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ResetPasswordResp& a, ResetPasswordResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetPasswordResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetPasswordResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetPasswordResp* New() const final {
    return CreateMaybeMessage<ResetPasswordResp>(nullptr);
  }

  ResetPasswordResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetPasswordResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetPasswordResp& from);
  void MergeFrom(const ResetPasswordResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetPasswordResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.users.ResetPasswordResp";
  }
  protected:
  explicit ResetPasswordResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.users.ResetPasswordResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateReq_Options

// string login_name = 1;
inline void CreateReq_Options::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_Options::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.CreateReq.Options.login_name)
  return _internal_login_name();
}
inline void CreateReq_Options::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.CreateReq.Options.login_name)
}
inline std::string* CreateReq_Options::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.CreateReq.Options.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& CreateReq_Options::_internal_login_name() const {
  return login_name_.Get();
}
inline void CreateReq_Options::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_Options::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.CreateReq.Options.login_name)
}
inline void CreateReq_Options::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.CreateReq.Options.login_name)
}
inline void CreateReq_Options::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.CreateReq.Options.login_name)
}
inline std::string* CreateReq_Options::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_Options::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.CreateReq.Options.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_Options::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.CreateReq.Options.login_name)
}
inline std::string* CreateReq_Options::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.CreateReq.Options.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_Options::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.CreateReq.Options.login_name)
}

// string password = 2;
inline void CreateReq_Options::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_Options::password() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.CreateReq.Options.password)
  return _internal_password();
}
inline void CreateReq_Options::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.CreateReq.Options.password)
}
inline std::string* CreateReq_Options::mutable_password() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.CreateReq.Options.password)
  return _internal_mutable_password();
}
inline const std::string& CreateReq_Options::_internal_password() const {
  return password_.Get();
}
inline void CreateReq_Options::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_Options::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.CreateReq.Options.password)
}
inline void CreateReq_Options::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.CreateReq.Options.password)
}
inline void CreateReq_Options::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.CreateReq.Options.password)
}
inline std::string* CreateReq_Options::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_Options::release_password() {
  // @@protoc_insertion_point(field_release:event_store.client.users.CreateReq.Options.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_Options::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.CreateReq.Options.password)
}
inline std::string* CreateReq_Options::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.CreateReq.Options.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_Options::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.CreateReq.Options.password)
}

// string full_name = 3;
inline void CreateReq_Options::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateReq_Options::full_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.CreateReq.Options.full_name)
  return _internal_full_name();
}
inline void CreateReq_Options::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.CreateReq.Options.full_name)
}
inline std::string* CreateReq_Options::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.CreateReq.Options.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& CreateReq_Options::_internal_full_name() const {
  return full_name_.Get();
}
inline void CreateReq_Options::_internal_set_full_name(const std::string& value) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateReq_Options::set_full_name(std::string&& value) {
  
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.CreateReq.Options.full_name)
}
inline void CreateReq_Options::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.CreateReq.Options.full_name)
}
inline void CreateReq_Options::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.CreateReq.Options.full_name)
}
inline std::string* CreateReq_Options::_internal_mutable_full_name() {
  
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateReq_Options::release_full_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.CreateReq.Options.full_name)
  return full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateReq_Options::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.CreateReq.Options.full_name)
}
inline std::string* CreateReq_Options::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.CreateReq.Options.full_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return full_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateReq_Options::unsafe_arena_set_allocated_full_name(
    std::string* full_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      full_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.CreateReq.Options.full_name)
}

// repeated string groups = 4;
inline int CreateReq_Options::_internal_groups_size() const {
  return groups_.size();
}
inline int CreateReq_Options::groups_size() const {
  return _internal_groups_size();
}
inline void CreateReq_Options::clear_groups() {
  groups_.Clear();
}
inline std::string* CreateReq_Options::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:event_store.client.users.CreateReq.Options.groups)
  return _internal_add_groups();
}
inline const std::string& CreateReq_Options::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const std::string& CreateReq_Options::groups(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.users.CreateReq.Options.groups)
  return _internal_groups(index);
}
inline std::string* CreateReq_Options::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.CreateReq.Options.groups)
  return groups_.Mutable(index);
}
inline void CreateReq_Options::set_groups(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:event_store.client.users.CreateReq.Options.groups)
  groups_.Mutable(index)->assign(value);
}
inline void CreateReq_Options::set_groups(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:event_store.client.users.CreateReq.Options.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
inline void CreateReq_Options::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_store.client.users.CreateReq.Options.groups)
}
inline void CreateReq_Options::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.CreateReq.Options.groups)
}
inline std::string* CreateReq_Options::_internal_add_groups() {
  return groups_.Add();
}
inline void CreateReq_Options::add_groups(const std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_store.client.users.CreateReq.Options.groups)
}
inline void CreateReq_Options::add_groups(std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_store.client.users.CreateReq.Options.groups)
}
inline void CreateReq_Options::add_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_store.client.users.CreateReq.Options.groups)
}
inline void CreateReq_Options::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_store.client.users.CreateReq.Options.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateReq_Options::groups() const {
  // @@protoc_insertion_point(field_list:event_store.client.users.CreateReq.Options.groups)
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateReq_Options::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.users.CreateReq.Options.groups)
  return &groups_;
}

// -------------------------------------------------------------------

// CreateReq

// .event_store.client.users.CreateReq.Options options = 1;
inline bool CreateReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool CreateReq::has_options() const {
  return _internal_has_options();
}
inline void CreateReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::users::CreateReq_Options& CreateReq::_internal_options() const {
  const ::event_store::client::users::CreateReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::CreateReq_Options*>(
      &::event_store::client::users::_CreateReq_Options_default_instance_);
}
inline const ::event_store::client::users::CreateReq_Options& CreateReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.CreateReq.options)
  return _internal_options();
}
inline void CreateReq::unsafe_arena_set_allocated_options(
    ::event_store::client::users::CreateReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.CreateReq.options)
}
inline ::event_store::client::users::CreateReq_Options* CreateReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::CreateReq_Options* CreateReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.users.CreateReq.options)
  
  ::event_store::client::users::CreateReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::users::CreateReq_Options* CreateReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::CreateReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::users::CreateReq_Options* CreateReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.CreateReq.options)
  return _internal_mutable_options();
}
inline void CreateReq::set_allocated_options(::event_store::client::users::CreateReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.CreateReq.options)
}

// -------------------------------------------------------------------

// CreateResp

// -------------------------------------------------------------------

// UpdateReq_Options

// string login_name = 1;
inline void UpdateReq_Options::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateReq_Options::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.UpdateReq.Options.login_name)
  return _internal_login_name();
}
inline void UpdateReq_Options::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.UpdateReq.Options.login_name)
}
inline std::string* UpdateReq_Options::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.UpdateReq.Options.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& UpdateReq_Options::_internal_login_name() const {
  return login_name_.Get();
}
inline void UpdateReq_Options::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateReq_Options::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.UpdateReq.Options.login_name)
}
inline void UpdateReq_Options::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.UpdateReq.Options.login_name)
}
inline void UpdateReq_Options::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.UpdateReq.Options.login_name)
}
inline std::string* UpdateReq_Options::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateReq_Options::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.UpdateReq.Options.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateReq_Options::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.UpdateReq.Options.login_name)
}
inline std::string* UpdateReq_Options::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.UpdateReq.Options.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.UpdateReq.Options.login_name)
}

// string password = 2;
inline void UpdateReq_Options::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateReq_Options::password() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.UpdateReq.Options.password)
  return _internal_password();
}
inline void UpdateReq_Options::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.UpdateReq.Options.password)
}
inline std::string* UpdateReq_Options::mutable_password() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.UpdateReq.Options.password)
  return _internal_mutable_password();
}
inline const std::string& UpdateReq_Options::_internal_password() const {
  return password_.Get();
}
inline void UpdateReq_Options::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateReq_Options::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.UpdateReq.Options.password)
}
inline void UpdateReq_Options::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.UpdateReq.Options.password)
}
inline void UpdateReq_Options::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.UpdateReq.Options.password)
}
inline std::string* UpdateReq_Options::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateReq_Options::release_password() {
  // @@protoc_insertion_point(field_release:event_store.client.users.UpdateReq.Options.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateReq_Options::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.UpdateReq.Options.password)
}
inline std::string* UpdateReq_Options::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.UpdateReq.Options.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.UpdateReq.Options.password)
}

// string full_name = 3;
inline void UpdateReq_Options::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateReq_Options::full_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.UpdateReq.Options.full_name)
  return _internal_full_name();
}
inline void UpdateReq_Options::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.UpdateReq.Options.full_name)
}
inline std::string* UpdateReq_Options::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.UpdateReq.Options.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& UpdateReq_Options::_internal_full_name() const {
  return full_name_.Get();
}
inline void UpdateReq_Options::_internal_set_full_name(const std::string& value) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateReq_Options::set_full_name(std::string&& value) {
  
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.UpdateReq.Options.full_name)
}
inline void UpdateReq_Options::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.UpdateReq.Options.full_name)
}
inline void UpdateReq_Options::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.UpdateReq.Options.full_name)
}
inline std::string* UpdateReq_Options::_internal_mutable_full_name() {
  
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateReq_Options::release_full_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.UpdateReq.Options.full_name)
  return full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateReq_Options::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.UpdateReq.Options.full_name)
}
inline std::string* UpdateReq_Options::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.UpdateReq.Options.full_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return full_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateReq_Options::unsafe_arena_set_allocated_full_name(
    std::string* full_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      full_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.UpdateReq.Options.full_name)
}

// repeated string groups = 4;
inline int UpdateReq_Options::_internal_groups_size() const {
  return groups_.size();
}
inline int UpdateReq_Options::groups_size() const {
  return _internal_groups_size();
}
inline void UpdateReq_Options::clear_groups() {
  groups_.Clear();
}
inline std::string* UpdateReq_Options::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:event_store.client.users.UpdateReq.Options.groups)
  return _internal_add_groups();
}
inline const std::string& UpdateReq_Options::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const std::string& UpdateReq_Options::groups(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.users.UpdateReq.Options.groups)
  return _internal_groups(index);
}
inline std::string* UpdateReq_Options::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.UpdateReq.Options.groups)
  return groups_.Mutable(index);
}
inline void UpdateReq_Options::set_groups(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:event_store.client.users.UpdateReq.Options.groups)
  groups_.Mutable(index)->assign(value);
}
inline void UpdateReq_Options::set_groups(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:event_store.client.users.UpdateReq.Options.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
inline void UpdateReq_Options::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_store.client.users.UpdateReq.Options.groups)
}
inline void UpdateReq_Options::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.UpdateReq.Options.groups)
}
inline std::string* UpdateReq_Options::_internal_add_groups() {
  return groups_.Add();
}
inline void UpdateReq_Options::add_groups(const std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_store.client.users.UpdateReq.Options.groups)
}
inline void UpdateReq_Options::add_groups(std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_store.client.users.UpdateReq.Options.groups)
}
inline void UpdateReq_Options::add_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_store.client.users.UpdateReq.Options.groups)
}
inline void UpdateReq_Options::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_store.client.users.UpdateReq.Options.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateReq_Options::groups() const {
  // @@protoc_insertion_point(field_list:event_store.client.users.UpdateReq.Options.groups)
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateReq_Options::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.users.UpdateReq.Options.groups)
  return &groups_;
}

// -------------------------------------------------------------------

// UpdateReq

// .event_store.client.users.UpdateReq.Options options = 1;
inline bool UpdateReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UpdateReq::has_options() const {
  return _internal_has_options();
}
inline void UpdateReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::users::UpdateReq_Options& UpdateReq::_internal_options() const {
  const ::event_store::client::users::UpdateReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::UpdateReq_Options*>(
      &::event_store::client::users::_UpdateReq_Options_default_instance_);
}
inline const ::event_store::client::users::UpdateReq_Options& UpdateReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.UpdateReq.options)
  return _internal_options();
}
inline void UpdateReq::unsafe_arena_set_allocated_options(
    ::event_store::client::users::UpdateReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.UpdateReq.options)
}
inline ::event_store::client::users::UpdateReq_Options* UpdateReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::UpdateReq_Options* UpdateReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.users.UpdateReq.options)
  
  ::event_store::client::users::UpdateReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::users::UpdateReq_Options* UpdateReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::UpdateReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::users::UpdateReq_Options* UpdateReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.UpdateReq.options)
  return _internal_mutable_options();
}
inline void UpdateReq::set_allocated_options(::event_store::client::users::UpdateReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.UpdateReq.options)
}

// -------------------------------------------------------------------

// UpdateResp

// -------------------------------------------------------------------

// DeleteReq_Options

// string login_name = 1;
inline void DeleteReq_Options::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteReq_Options::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DeleteReq.Options.login_name)
  return _internal_login_name();
}
inline void DeleteReq_Options::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.DeleteReq.Options.login_name)
}
inline std::string* DeleteReq_Options::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DeleteReq.Options.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& DeleteReq_Options::_internal_login_name() const {
  return login_name_.Get();
}
inline void DeleteReq_Options::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteReq_Options::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.DeleteReq.Options.login_name)
}
inline void DeleteReq_Options::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.DeleteReq.Options.login_name)
}
inline void DeleteReq_Options::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.DeleteReq.Options.login_name)
}
inline std::string* DeleteReq_Options::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteReq_Options::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DeleteReq.Options.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteReq_Options::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DeleteReq.Options.login_name)
}
inline std::string* DeleteReq_Options::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.DeleteReq.Options.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteReq_Options::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DeleteReq.Options.login_name)
}

// -------------------------------------------------------------------

// DeleteReq

// .event_store.client.users.DeleteReq.Options options = 1;
inline bool DeleteReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DeleteReq::has_options() const {
  return _internal_has_options();
}
inline void DeleteReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::users::DeleteReq_Options& DeleteReq::_internal_options() const {
  const ::event_store::client::users::DeleteReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::DeleteReq_Options*>(
      &::event_store::client::users::_DeleteReq_Options_default_instance_);
}
inline const ::event_store::client::users::DeleteReq_Options& DeleteReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DeleteReq.options)
  return _internal_options();
}
inline void DeleteReq::unsafe_arena_set_allocated_options(
    ::event_store::client::users::DeleteReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DeleteReq.options)
}
inline ::event_store::client::users::DeleteReq_Options* DeleteReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::DeleteReq_Options* DeleteReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DeleteReq.options)
  
  ::event_store::client::users::DeleteReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::users::DeleteReq_Options* DeleteReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::DeleteReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::users::DeleteReq_Options* DeleteReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DeleteReq.options)
  return _internal_mutable_options();
}
inline void DeleteReq::set_allocated_options(::event_store::client::users::DeleteReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DeleteReq.options)
}

// -------------------------------------------------------------------

// DeleteResp

// -------------------------------------------------------------------

// EnableReq_Options

// string login_name = 1;
inline void EnableReq_Options::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EnableReq_Options::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.EnableReq.Options.login_name)
  return _internal_login_name();
}
inline void EnableReq_Options::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.EnableReq.Options.login_name)
}
inline std::string* EnableReq_Options::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.EnableReq.Options.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& EnableReq_Options::_internal_login_name() const {
  return login_name_.Get();
}
inline void EnableReq_Options::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnableReq_Options::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.EnableReq.Options.login_name)
}
inline void EnableReq_Options::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.EnableReq.Options.login_name)
}
inline void EnableReq_Options::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.EnableReq.Options.login_name)
}
inline std::string* EnableReq_Options::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnableReq_Options::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.EnableReq.Options.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnableReq_Options::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.EnableReq.Options.login_name)
}
inline std::string* EnableReq_Options::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.EnableReq.Options.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EnableReq_Options::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.EnableReq.Options.login_name)
}

// -------------------------------------------------------------------

// EnableReq

// .event_store.client.users.EnableReq.Options options = 1;
inline bool EnableReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool EnableReq::has_options() const {
  return _internal_has_options();
}
inline void EnableReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::users::EnableReq_Options& EnableReq::_internal_options() const {
  const ::event_store::client::users::EnableReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::EnableReq_Options*>(
      &::event_store::client::users::_EnableReq_Options_default_instance_);
}
inline const ::event_store::client::users::EnableReq_Options& EnableReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.EnableReq.options)
  return _internal_options();
}
inline void EnableReq::unsafe_arena_set_allocated_options(
    ::event_store::client::users::EnableReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.EnableReq.options)
}
inline ::event_store::client::users::EnableReq_Options* EnableReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::EnableReq_Options* EnableReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.users.EnableReq.options)
  
  ::event_store::client::users::EnableReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::users::EnableReq_Options* EnableReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::EnableReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::users::EnableReq_Options* EnableReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.EnableReq.options)
  return _internal_mutable_options();
}
inline void EnableReq::set_allocated_options(::event_store::client::users::EnableReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.EnableReq.options)
}

// -------------------------------------------------------------------

// EnableResp

// -------------------------------------------------------------------

// DisableReq_Options

// string login_name = 1;
inline void DisableReq_Options::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DisableReq_Options::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DisableReq.Options.login_name)
  return _internal_login_name();
}
inline void DisableReq_Options::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.DisableReq.Options.login_name)
}
inline std::string* DisableReq_Options::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DisableReq.Options.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& DisableReq_Options::_internal_login_name() const {
  return login_name_.Get();
}
inline void DisableReq_Options::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisableReq_Options::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.DisableReq.Options.login_name)
}
inline void DisableReq_Options::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.DisableReq.Options.login_name)
}
inline void DisableReq_Options::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.DisableReq.Options.login_name)
}
inline std::string* DisableReq_Options::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisableReq_Options::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DisableReq.Options.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisableReq_Options::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DisableReq.Options.login_name)
}
inline std::string* DisableReq_Options::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.DisableReq.Options.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DisableReq_Options::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DisableReq.Options.login_name)
}

// -------------------------------------------------------------------

// DisableReq

// .event_store.client.users.DisableReq.Options options = 1;
inline bool DisableReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DisableReq::has_options() const {
  return _internal_has_options();
}
inline void DisableReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::users::DisableReq_Options& DisableReq::_internal_options() const {
  const ::event_store::client::users::DisableReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::DisableReq_Options*>(
      &::event_store::client::users::_DisableReq_Options_default_instance_);
}
inline const ::event_store::client::users::DisableReq_Options& DisableReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DisableReq.options)
  return _internal_options();
}
inline void DisableReq::unsafe_arena_set_allocated_options(
    ::event_store::client::users::DisableReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DisableReq.options)
}
inline ::event_store::client::users::DisableReq_Options* DisableReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::DisableReq_Options* DisableReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DisableReq.options)
  
  ::event_store::client::users::DisableReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::users::DisableReq_Options* DisableReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::DisableReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::users::DisableReq_Options* DisableReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DisableReq.options)
  return _internal_mutable_options();
}
inline void DisableReq::set_allocated_options(::event_store::client::users::DisableReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DisableReq.options)
}

// -------------------------------------------------------------------

// DisableResp

// -------------------------------------------------------------------

// DetailsReq_Options

// string login_name = 1;
inline void DetailsReq_Options::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DetailsReq_Options::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsReq.Options.login_name)
  return _internal_login_name();
}
inline void DetailsReq_Options::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.DetailsReq.Options.login_name)
}
inline std::string* DetailsReq_Options::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DetailsReq.Options.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& DetailsReq_Options::_internal_login_name() const {
  return login_name_.Get();
}
inline void DetailsReq_Options::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailsReq_Options::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.DetailsReq.Options.login_name)
}
inline void DetailsReq_Options::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.DetailsReq.Options.login_name)
}
inline void DetailsReq_Options::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.DetailsReq.Options.login_name)
}
inline std::string* DetailsReq_Options::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailsReq_Options::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DetailsReq.Options.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailsReq_Options::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DetailsReq.Options.login_name)
}
inline std::string* DetailsReq_Options::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.DetailsReq.Options.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DetailsReq_Options::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DetailsReq.Options.login_name)
}

// -------------------------------------------------------------------

// DetailsReq

// .event_store.client.users.DetailsReq.Options options = 1;
inline bool DetailsReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DetailsReq::has_options() const {
  return _internal_has_options();
}
inline void DetailsReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::users::DetailsReq_Options& DetailsReq::_internal_options() const {
  const ::event_store::client::users::DetailsReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::DetailsReq_Options*>(
      &::event_store::client::users::_DetailsReq_Options_default_instance_);
}
inline const ::event_store::client::users::DetailsReq_Options& DetailsReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsReq.options)
  return _internal_options();
}
inline void DetailsReq::unsafe_arena_set_allocated_options(
    ::event_store::client::users::DetailsReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DetailsReq.options)
}
inline ::event_store::client::users::DetailsReq_Options* DetailsReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::DetailsReq_Options* DetailsReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DetailsReq.options)
  
  ::event_store::client::users::DetailsReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::users::DetailsReq_Options* DetailsReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::DetailsReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::users::DetailsReq_Options* DetailsReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DetailsReq.options)
  return _internal_mutable_options();
}
inline void DetailsReq::set_allocated_options(::event_store::client::users::DetailsReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DetailsReq.options)
}

// -------------------------------------------------------------------

// DetailsResp_UserDetails_DateTime

// int64 ticks_since_epoch = 1;
inline void DetailsResp_UserDetails_DateTime::clear_ticks_since_epoch() {
  ticks_since_epoch_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DetailsResp_UserDetails_DateTime::_internal_ticks_since_epoch() const {
  return ticks_since_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DetailsResp_UserDetails_DateTime::ticks_since_epoch() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsResp.UserDetails.DateTime.ticks_since_epoch)
  return _internal_ticks_since_epoch();
}
inline void DetailsResp_UserDetails_DateTime::_internal_set_ticks_since_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ticks_since_epoch_ = value;
}
inline void DetailsResp_UserDetails_DateTime::set_ticks_since_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ticks_since_epoch(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.DetailsResp.UserDetails.DateTime.ticks_since_epoch)
}

// -------------------------------------------------------------------

// DetailsResp_UserDetails

// string login_name = 1;
inline void DetailsResp_UserDetails::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DetailsResp_UserDetails::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsResp.UserDetails.login_name)
  return _internal_login_name();
}
inline void DetailsResp_UserDetails::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.DetailsResp.UserDetails.login_name)
}
inline std::string* DetailsResp_UserDetails::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DetailsResp.UserDetails.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& DetailsResp_UserDetails::_internal_login_name() const {
  return login_name_.Get();
}
inline void DetailsResp_UserDetails::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailsResp_UserDetails::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.DetailsResp.UserDetails.login_name)
}
inline void DetailsResp_UserDetails::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.DetailsResp.UserDetails.login_name)
}
inline void DetailsResp_UserDetails::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.DetailsResp.UserDetails.login_name)
}
inline std::string* DetailsResp_UserDetails::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailsResp_UserDetails::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DetailsResp.UserDetails.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailsResp_UserDetails::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DetailsResp.UserDetails.login_name)
}
inline std::string* DetailsResp_UserDetails::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.DetailsResp.UserDetails.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DetailsResp_UserDetails::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DetailsResp.UserDetails.login_name)
}

// string full_name = 2;
inline void DetailsResp_UserDetails::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DetailsResp_UserDetails::full_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsResp.UserDetails.full_name)
  return _internal_full_name();
}
inline void DetailsResp_UserDetails::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.DetailsResp.UserDetails.full_name)
}
inline std::string* DetailsResp_UserDetails::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DetailsResp.UserDetails.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& DetailsResp_UserDetails::_internal_full_name() const {
  return full_name_.Get();
}
inline void DetailsResp_UserDetails::_internal_set_full_name(const std::string& value) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailsResp_UserDetails::set_full_name(std::string&& value) {
  
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.DetailsResp.UserDetails.full_name)
}
inline void DetailsResp_UserDetails::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.DetailsResp.UserDetails.full_name)
}
inline void DetailsResp_UserDetails::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.DetailsResp.UserDetails.full_name)
}
inline std::string* DetailsResp_UserDetails::_internal_mutable_full_name() {
  
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailsResp_UserDetails::release_full_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DetailsResp.UserDetails.full_name)
  return full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailsResp_UserDetails::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DetailsResp.UserDetails.full_name)
}
inline std::string* DetailsResp_UserDetails::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.DetailsResp.UserDetails.full_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return full_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DetailsResp_UserDetails::unsafe_arena_set_allocated_full_name(
    std::string* full_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      full_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DetailsResp.UserDetails.full_name)
}

// repeated string groups = 3;
inline int DetailsResp_UserDetails::_internal_groups_size() const {
  return groups_.size();
}
inline int DetailsResp_UserDetails::groups_size() const {
  return _internal_groups_size();
}
inline void DetailsResp_UserDetails::clear_groups() {
  groups_.Clear();
}
inline std::string* DetailsResp_UserDetails::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:event_store.client.users.DetailsResp.UserDetails.groups)
  return _internal_add_groups();
}
inline const std::string& DetailsResp_UserDetails::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const std::string& DetailsResp_UserDetails::groups(int index) const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsResp.UserDetails.groups)
  return _internal_groups(index);
}
inline std::string* DetailsResp_UserDetails::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DetailsResp.UserDetails.groups)
  return groups_.Mutable(index);
}
inline void DetailsResp_UserDetails::set_groups(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:event_store.client.users.DetailsResp.UserDetails.groups)
  groups_.Mutable(index)->assign(value);
}
inline void DetailsResp_UserDetails::set_groups(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:event_store.client.users.DetailsResp.UserDetails.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
inline void DetailsResp_UserDetails::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_store.client.users.DetailsResp.UserDetails.groups)
}
inline void DetailsResp_UserDetails::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.DetailsResp.UserDetails.groups)
}
inline std::string* DetailsResp_UserDetails::_internal_add_groups() {
  return groups_.Add();
}
inline void DetailsResp_UserDetails::add_groups(const std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_store.client.users.DetailsResp.UserDetails.groups)
}
inline void DetailsResp_UserDetails::add_groups(std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_store.client.users.DetailsResp.UserDetails.groups)
}
inline void DetailsResp_UserDetails::add_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_store.client.users.DetailsResp.UserDetails.groups)
}
inline void DetailsResp_UserDetails::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_store.client.users.DetailsResp.UserDetails.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DetailsResp_UserDetails::groups() const {
  // @@protoc_insertion_point(field_list:event_store.client.users.DetailsResp.UserDetails.groups)
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DetailsResp_UserDetails::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:event_store.client.users.DetailsResp.UserDetails.groups)
  return &groups_;
}

// .event_store.client.users.DetailsResp.UserDetails.DateTime last_updated = 4;
inline bool DetailsResp_UserDetails::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool DetailsResp_UserDetails::has_last_updated() const {
  return _internal_has_last_updated();
}
inline void DetailsResp_UserDetails::clear_last_updated() {
  if (GetArena() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
inline const ::event_store::client::users::DetailsResp_UserDetails_DateTime& DetailsResp_UserDetails::_internal_last_updated() const {
  const ::event_store::client::users::DetailsResp_UserDetails_DateTime* p = last_updated_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::DetailsResp_UserDetails_DateTime*>(
      &::event_store::client::users::_DetailsResp_UserDetails_DateTime_default_instance_);
}
inline const ::event_store::client::users::DetailsResp_UserDetails_DateTime& DetailsResp_UserDetails::last_updated() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsResp.UserDetails.last_updated)
  return _internal_last_updated();
}
inline void DetailsResp_UserDetails::unsafe_arena_set_allocated_last_updated(
    ::event_store::client::users::DetailsResp_UserDetails_DateTime* last_updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DetailsResp.UserDetails.last_updated)
}
inline ::event_store::client::users::DetailsResp_UserDetails_DateTime* DetailsResp_UserDetails::release_last_updated() {
  auto temp = unsafe_arena_release_last_updated();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::DetailsResp_UserDetails_DateTime* DetailsResp_UserDetails::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DetailsResp.UserDetails.last_updated)
  
  ::event_store::client::users::DetailsResp_UserDetails_DateTime* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline ::event_store::client::users::DetailsResp_UserDetails_DateTime* DetailsResp_UserDetails::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::DetailsResp_UserDetails_DateTime>(GetArena());
    last_updated_ = p;
  }
  return last_updated_;
}
inline ::event_store::client::users::DetailsResp_UserDetails_DateTime* DetailsResp_UserDetails::mutable_last_updated() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DetailsResp.UserDetails.last_updated)
  return _internal_mutable_last_updated();
}
inline void DetailsResp_UserDetails::set_allocated_last_updated(::event_store::client::users::DetailsResp_UserDetails_DateTime* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_updated_;
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_updated);
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DetailsResp.UserDetails.last_updated)
}

// bool disabled = 5;
inline void DetailsResp_UserDetails::clear_disabled() {
  disabled_ = false;
}
inline bool DetailsResp_UserDetails::_internal_disabled() const {
  return disabled_;
}
inline bool DetailsResp_UserDetails::disabled() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsResp.UserDetails.disabled)
  return _internal_disabled();
}
inline void DetailsResp_UserDetails::_internal_set_disabled(bool value) {
  
  disabled_ = value;
}
inline void DetailsResp_UserDetails::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.DetailsResp.UserDetails.disabled)
}

// -------------------------------------------------------------------

// DetailsResp

// .event_store.client.users.DetailsResp.UserDetails user_details = 1;
inline bool DetailsResp::_internal_has_user_details() const {
  return this != internal_default_instance() && user_details_ != nullptr;
}
inline bool DetailsResp::has_user_details() const {
  return _internal_has_user_details();
}
inline void DetailsResp::clear_user_details() {
  if (GetArena() == nullptr && user_details_ != nullptr) {
    delete user_details_;
  }
  user_details_ = nullptr;
}
inline const ::event_store::client::users::DetailsResp_UserDetails& DetailsResp::_internal_user_details() const {
  const ::event_store::client::users::DetailsResp_UserDetails* p = user_details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::DetailsResp_UserDetails*>(
      &::event_store::client::users::_DetailsResp_UserDetails_default_instance_);
}
inline const ::event_store::client::users::DetailsResp_UserDetails& DetailsResp::user_details() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.DetailsResp.user_details)
  return _internal_user_details();
}
inline void DetailsResp::unsafe_arena_set_allocated_user_details(
    ::event_store::client::users::DetailsResp_UserDetails* user_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_details_);
  }
  user_details_ = user_details;
  if (user_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.DetailsResp.user_details)
}
inline ::event_store::client::users::DetailsResp_UserDetails* DetailsResp::release_user_details() {
  auto temp = unsafe_arena_release_user_details();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::DetailsResp_UserDetails* DetailsResp::unsafe_arena_release_user_details() {
  // @@protoc_insertion_point(field_release:event_store.client.users.DetailsResp.user_details)
  
  ::event_store::client::users::DetailsResp_UserDetails* temp = user_details_;
  user_details_ = nullptr;
  return temp;
}
inline ::event_store::client::users::DetailsResp_UserDetails* DetailsResp::_internal_mutable_user_details() {
  
  if (user_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::DetailsResp_UserDetails>(GetArena());
    user_details_ = p;
  }
  return user_details_;
}
inline ::event_store::client::users::DetailsResp_UserDetails* DetailsResp::mutable_user_details() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.DetailsResp.user_details)
  return _internal_mutable_user_details();
}
inline void DetailsResp::set_allocated_user_details(::event_store::client::users::DetailsResp_UserDetails* user_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_details_;
  }
  if (user_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_details);
    if (message_arena != submessage_arena) {
      user_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_details, submessage_arena);
    }
    
  } else {
    
  }
  user_details_ = user_details;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.DetailsResp.user_details)
}

// -------------------------------------------------------------------

// ChangePasswordReq_Options

// string login_name = 1;
inline void ChangePasswordReq_Options::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChangePasswordReq_Options::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.ChangePasswordReq.Options.login_name)
  return _internal_login_name();
}
inline void ChangePasswordReq_Options::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.ChangePasswordReq.Options.login_name)
}
inline std::string* ChangePasswordReq_Options::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.ChangePasswordReq.Options.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& ChangePasswordReq_Options::_internal_login_name() const {
  return login_name_.Get();
}
inline void ChangePasswordReq_Options::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChangePasswordReq_Options::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.ChangePasswordReq.Options.login_name)
}
inline void ChangePasswordReq_Options::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.ChangePasswordReq.Options.login_name)
}
inline void ChangePasswordReq_Options::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.ChangePasswordReq.Options.login_name)
}
inline std::string* ChangePasswordReq_Options::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChangePasswordReq_Options::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.ChangePasswordReq.Options.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangePasswordReq_Options::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.ChangePasswordReq.Options.login_name)
}
inline std::string* ChangePasswordReq_Options::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.ChangePasswordReq.Options.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChangePasswordReq_Options::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.ChangePasswordReq.Options.login_name)
}

// string current_password = 2;
inline void ChangePasswordReq_Options::clear_current_password() {
  current_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChangePasswordReq_Options::current_password() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.ChangePasswordReq.Options.current_password)
  return _internal_current_password();
}
inline void ChangePasswordReq_Options::set_current_password(const std::string& value) {
  _internal_set_current_password(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.ChangePasswordReq.Options.current_password)
}
inline std::string* ChangePasswordReq_Options::mutable_current_password() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.ChangePasswordReq.Options.current_password)
  return _internal_mutable_current_password();
}
inline const std::string& ChangePasswordReq_Options::_internal_current_password() const {
  return current_password_.Get();
}
inline void ChangePasswordReq_Options::_internal_set_current_password(const std::string& value) {
  
  current_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChangePasswordReq_Options::set_current_password(std::string&& value) {
  
  current_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.ChangePasswordReq.Options.current_password)
}
inline void ChangePasswordReq_Options::set_current_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  current_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.ChangePasswordReq.Options.current_password)
}
inline void ChangePasswordReq_Options::set_current_password(const char* value,
    size_t size) {
  
  current_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.ChangePasswordReq.Options.current_password)
}
inline std::string* ChangePasswordReq_Options::_internal_mutable_current_password() {
  
  return current_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChangePasswordReq_Options::release_current_password() {
  // @@protoc_insertion_point(field_release:event_store.client.users.ChangePasswordReq.Options.current_password)
  return current_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangePasswordReq_Options::set_allocated_current_password(std::string* current_password) {
  if (current_password != nullptr) {
    
  } else {
    
  }
  current_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.ChangePasswordReq.Options.current_password)
}
inline std::string* ChangePasswordReq_Options::unsafe_arena_release_current_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.ChangePasswordReq.Options.current_password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return current_password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChangePasswordReq_Options::unsafe_arena_set_allocated_current_password(
    std::string* current_password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (current_password != nullptr) {
    
  } else {
    
  }
  current_password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      current_password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.ChangePasswordReq.Options.current_password)
}

// string new_password = 3;
inline void ChangePasswordReq_Options::clear_new_password() {
  new_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChangePasswordReq_Options::new_password() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.ChangePasswordReq.Options.new_password)
  return _internal_new_password();
}
inline void ChangePasswordReq_Options::set_new_password(const std::string& value) {
  _internal_set_new_password(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.ChangePasswordReq.Options.new_password)
}
inline std::string* ChangePasswordReq_Options::mutable_new_password() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.ChangePasswordReq.Options.new_password)
  return _internal_mutable_new_password();
}
inline const std::string& ChangePasswordReq_Options::_internal_new_password() const {
  return new_password_.Get();
}
inline void ChangePasswordReq_Options::_internal_set_new_password(const std::string& value) {
  
  new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChangePasswordReq_Options::set_new_password(std::string&& value) {
  
  new_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.ChangePasswordReq.Options.new_password)
}
inline void ChangePasswordReq_Options::set_new_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.ChangePasswordReq.Options.new_password)
}
inline void ChangePasswordReq_Options::set_new_password(const char* value,
    size_t size) {
  
  new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.ChangePasswordReq.Options.new_password)
}
inline std::string* ChangePasswordReq_Options::_internal_mutable_new_password() {
  
  return new_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChangePasswordReq_Options::release_new_password() {
  // @@protoc_insertion_point(field_release:event_store.client.users.ChangePasswordReq.Options.new_password)
  return new_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangePasswordReq_Options::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.ChangePasswordReq.Options.new_password)
}
inline std::string* ChangePasswordReq_Options::unsafe_arena_release_new_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.ChangePasswordReq.Options.new_password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChangePasswordReq_Options::unsafe_arena_set_allocated_new_password(
    std::string* new_password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.ChangePasswordReq.Options.new_password)
}

// -------------------------------------------------------------------

// ChangePasswordReq

// .event_store.client.users.ChangePasswordReq.Options options = 1;
inline bool ChangePasswordReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ChangePasswordReq::has_options() const {
  return _internal_has_options();
}
inline void ChangePasswordReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::users::ChangePasswordReq_Options& ChangePasswordReq::_internal_options() const {
  const ::event_store::client::users::ChangePasswordReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::ChangePasswordReq_Options*>(
      &::event_store::client::users::_ChangePasswordReq_Options_default_instance_);
}
inline const ::event_store::client::users::ChangePasswordReq_Options& ChangePasswordReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.ChangePasswordReq.options)
  return _internal_options();
}
inline void ChangePasswordReq::unsafe_arena_set_allocated_options(
    ::event_store::client::users::ChangePasswordReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.ChangePasswordReq.options)
}
inline ::event_store::client::users::ChangePasswordReq_Options* ChangePasswordReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::ChangePasswordReq_Options* ChangePasswordReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.users.ChangePasswordReq.options)
  
  ::event_store::client::users::ChangePasswordReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::users::ChangePasswordReq_Options* ChangePasswordReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::ChangePasswordReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::users::ChangePasswordReq_Options* ChangePasswordReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.ChangePasswordReq.options)
  return _internal_mutable_options();
}
inline void ChangePasswordReq::set_allocated_options(::event_store::client::users::ChangePasswordReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.ChangePasswordReq.options)
}

// -------------------------------------------------------------------

// ChangePasswordResp

// -------------------------------------------------------------------

// ResetPasswordReq_Options

// string login_name = 1;
inline void ResetPasswordReq_Options::clear_login_name() {
  login_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResetPasswordReq_Options::login_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.ResetPasswordReq.Options.login_name)
  return _internal_login_name();
}
inline void ResetPasswordReq_Options::set_login_name(const std::string& value) {
  _internal_set_login_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.ResetPasswordReq.Options.login_name)
}
inline std::string* ResetPasswordReq_Options::mutable_login_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.ResetPasswordReq.Options.login_name)
  return _internal_mutable_login_name();
}
inline const std::string& ResetPasswordReq_Options::_internal_login_name() const {
  return login_name_.Get();
}
inline void ResetPasswordReq_Options::_internal_set_login_name(const std::string& value) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResetPasswordReq_Options::set_login_name(std::string&& value) {
  
  login_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.ResetPasswordReq.Options.login_name)
}
inline void ResetPasswordReq_Options::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.ResetPasswordReq.Options.login_name)
}
inline void ResetPasswordReq_Options::set_login_name(const char* value,
    size_t size) {
  
  login_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.ResetPasswordReq.Options.login_name)
}
inline std::string* ResetPasswordReq_Options::_internal_mutable_login_name() {
  
  return login_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResetPasswordReq_Options::release_login_name() {
  // @@protoc_insertion_point(field_release:event_store.client.users.ResetPasswordReq.Options.login_name)
  return login_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetPasswordReq_Options::set_allocated_login_name(std::string* login_name) {
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.ResetPasswordReq.Options.login_name)
}
inline std::string* ResetPasswordReq_Options::unsafe_arena_release_login_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.ResetPasswordReq.Options.login_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResetPasswordReq_Options::unsafe_arena_set_allocated_login_name(
    std::string* login_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login_name != nullptr) {
    
  } else {
    
  }
  login_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.ResetPasswordReq.Options.login_name)
}

// string new_password = 2;
inline void ResetPasswordReq_Options::clear_new_password() {
  new_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResetPasswordReq_Options::new_password() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.ResetPasswordReq.Options.new_password)
  return _internal_new_password();
}
inline void ResetPasswordReq_Options::set_new_password(const std::string& value) {
  _internal_set_new_password(value);
  // @@protoc_insertion_point(field_set:event_store.client.users.ResetPasswordReq.Options.new_password)
}
inline std::string* ResetPasswordReq_Options::mutable_new_password() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.ResetPasswordReq.Options.new_password)
  return _internal_mutable_new_password();
}
inline const std::string& ResetPasswordReq_Options::_internal_new_password() const {
  return new_password_.Get();
}
inline void ResetPasswordReq_Options::_internal_set_new_password(const std::string& value) {
  
  new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResetPasswordReq_Options::set_new_password(std::string&& value) {
  
  new_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.users.ResetPasswordReq.Options.new_password)
}
inline void ResetPasswordReq_Options::set_new_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.users.ResetPasswordReq.Options.new_password)
}
inline void ResetPasswordReq_Options::set_new_password(const char* value,
    size_t size) {
  
  new_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.users.ResetPasswordReq.Options.new_password)
}
inline std::string* ResetPasswordReq_Options::_internal_mutable_new_password() {
  
  return new_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResetPasswordReq_Options::release_new_password() {
  // @@protoc_insertion_point(field_release:event_store.client.users.ResetPasswordReq.Options.new_password)
  return new_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetPasswordReq_Options::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.ResetPasswordReq.Options.new_password)
}
inline std::string* ResetPasswordReq_Options::unsafe_arena_release_new_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.users.ResetPasswordReq.Options.new_password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResetPasswordReq_Options::unsafe_arena_set_allocated_new_password(
    std::string* new_password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.ResetPasswordReq.Options.new_password)
}

// -------------------------------------------------------------------

// ResetPasswordReq

// .event_store.client.users.ResetPasswordReq.Options options = 1;
inline bool ResetPasswordReq::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ResetPasswordReq::has_options() const {
  return _internal_has_options();
}
inline void ResetPasswordReq::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::event_store::client::users::ResetPasswordReq_Options& ResetPasswordReq::_internal_options() const {
  const ::event_store::client::users::ResetPasswordReq_Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::users::ResetPasswordReq_Options*>(
      &::event_store::client::users::_ResetPasswordReq_Options_default_instance_);
}
inline const ::event_store::client::users::ResetPasswordReq_Options& ResetPasswordReq::options() const {
  // @@protoc_insertion_point(field_get:event_store.client.users.ResetPasswordReq.options)
  return _internal_options();
}
inline void ResetPasswordReq::unsafe_arena_set_allocated_options(
    ::event_store::client::users::ResetPasswordReq_Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.users.ResetPasswordReq.options)
}
inline ::event_store::client::users::ResetPasswordReq_Options* ResetPasswordReq::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::users::ResetPasswordReq_Options* ResetPasswordReq::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:event_store.client.users.ResetPasswordReq.options)
  
  ::event_store::client::users::ResetPasswordReq_Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::event_store::client::users::ResetPasswordReq_Options* ResetPasswordReq::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::users::ResetPasswordReq_Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::event_store::client::users::ResetPasswordReq_Options* ResetPasswordReq::mutable_options() {
  // @@protoc_insertion_point(field_mutable:event_store.client.users.ResetPasswordReq.options)
  return _internal_mutable_options();
}
inline void ResetPasswordReq::set_allocated_options(::event_store::client::users::ResetPasswordReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.users.ResetPasswordReq.options)
}

// -------------------------------------------------------------------

// ResetPasswordResp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace users
}  // namespace client
}  // namespace event_store

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_users_2eproto

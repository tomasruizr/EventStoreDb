// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streams.proto

#include "streams.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllStreamPosition_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamIdentifier_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UUID_shared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendReq_Options_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendReq_ProposedMessage_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendResp_Position_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendResp_Success_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendResp_WrongExpectedVersion_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BatchAppendReq_Options_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchAppendReq_ProposedMessage_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchAppendResp_Success_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteReq_Options_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResp_Position_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ReadReq_Options_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadReq_Options_AllOptions_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadReq_Options_ControlOption_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadReq_Options_FilterOptions_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadReq_Options_FilterOptions_Expression_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadReq_Options_Position_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadReq_Options_StreamOptions_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadReq_Options_SubscriptionOptions_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_Options_UUIDOption_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_Checkpoint_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadResp_ReadEvent_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReadResp_ReadEvent_RecordedEvent_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadResp_StreamNotFound_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_SubscriptionConfirmation_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TombstoneReq_Options_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_streams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TombstoneResp_Position_streams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fempty_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_google_2fprotobuf_2fempty_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_status_2eproto;
namespace event_store {
namespace client {
namespace streams {
class ReadReq_Options_StreamOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_StreamOptions> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
  const ::event_store::client::Empty* start_;
  const ::event_store::client::Empty* end_;
} _ReadReq_Options_StreamOptions_default_instance_;
class ReadReq_Options_AllOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_AllOptions> _instance;
  const ::event_store::client::streams::ReadReq_Options_Position* position_;
  const ::event_store::client::Empty* start_;
  const ::event_store::client::Empty* end_;
} _ReadReq_Options_AllOptions_default_instance_;
class ReadReq_Options_SubscriptionOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_SubscriptionOptions> _instance;
} _ReadReq_Options_SubscriptionOptions_default_instance_;
class ReadReq_Options_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_Position> _instance;
} _ReadReq_Options_Position_default_instance_;
class ReadReq_Options_FilterOptions_ExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_FilterOptions_Expression> _instance;
} _ReadReq_Options_FilterOptions_Expression_default_instance_;
class ReadReq_Options_FilterOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_FilterOptions> _instance;
  const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* stream_identifier_;
  const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* event_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_;
  const ::event_store::client::Empty* count_;
} _ReadReq_Options_FilterOptions_default_instance_;
class ReadReq_Options_UUIDOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_UUIDOption> _instance;
  const ::event_store::client::Empty* structured_;
  const ::event_store::client::Empty* string_;
} _ReadReq_Options_UUIDOption_default_instance_;
class ReadReq_Options_ControlOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options_ControlOption> _instance;
} _ReadReq_Options_ControlOption_default_instance_;
class ReadReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq_Options> _instance;
  const ::event_store::client::streams::ReadReq_Options_StreamOptions* stream_;
  const ::event_store::client::streams::ReadReq_Options_AllOptions* all_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  const ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* subscription_;
  const ::event_store::client::streams::ReadReq_Options_FilterOptions* filter_;
  const ::event_store::client::Empty* no_filter_;
} _ReadReq_Options_default_instance_;
class ReadReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadReq> _instance;
} _ReadReq_default_instance_;
class ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse> _instance;
} _ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_;
class ReadResp_ReadEvent_RecordedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_ReadEvent_RecordedEvent> _instance;
} _ReadResp_ReadEvent_RecordedEvent_default_instance_;
class ReadResp_ReadEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_ReadEvent> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  const ::event_store::client::Empty* no_position_;
} _ReadResp_ReadEvent_default_instance_;
class ReadResp_SubscriptionConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_SubscriptionConfirmation> _instance;
} _ReadResp_SubscriptionConfirmation_default_instance_;
class ReadResp_CheckpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_Checkpoint> _instance;
} _ReadResp_Checkpoint_default_instance_;
class ReadResp_StreamNotFoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp_StreamNotFound> _instance;
} _ReadResp_StreamNotFound_default_instance_;
class ReadRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResp> _instance;
  const ::event_store::client::streams::ReadResp_ReadEvent* event_;
  const ::event_store::client::streams::ReadResp_SubscriptionConfirmation* confirmation_;
  const ::event_store::client::streams::ReadResp_Checkpoint* checkpoint_;
  const ::event_store::client::streams::ReadResp_StreamNotFound* stream_not_found_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_stream_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_stream_position_;
  const ::event_store::client::AllStreamPosition* last_all_stream_position_;
} _ReadResp_default_instance_;
class AppendReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendReq_Options> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
  const ::event_store::client::Empty* no_stream_;
  const ::event_store::client::Empty* any_;
  const ::event_store::client::Empty* stream_exists_;
} _AppendReq_Options_default_instance_;
class AppendReq_ProposedMessage_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendReq_ProposedMessage_MetadataEntry_DoNotUse> _instance;
} _AppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_;
class AppendReq_ProposedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendReq_ProposedMessage> _instance;
} _AppendReq_ProposedMessage_default_instance_;
class AppendReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendReq> _instance;
  const ::event_store::client::streams::AppendReq_Options* options_;
  const ::event_store::client::streams::AppendReq_ProposedMessage* proposed_message_;
} _AppendReq_default_instance_;
class AppendResp_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendResp_Position> _instance;
} _AppendResp_Position_default_instance_;
class AppendResp_SuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendResp_Success> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_;
  const ::event_store::client::Empty* no_stream_;
  const ::event_store::client::streams::AppendResp_Position* position_;
  const ::event_store::client::Empty* no_position_;
} _AppendResp_Success_default_instance_;
class AppendResp_WrongExpectedVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendResp_WrongExpectedVersion> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_20_6_0_;
  const ::event_store::client::Empty* no_stream_20_6_0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_revision_20_6_0_;
  const ::event_store::client::Empty* any_20_6_0_;
  const ::event_store::client::Empty* stream_exists_20_6_0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_;
  const ::event_store::client::Empty* current_no_stream_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_revision_;
  const ::event_store::client::Empty* expected_any_;
  const ::event_store::client::Empty* expected_stream_exists_;
  const ::event_store::client::Empty* expected_no_stream_;
} _AppendResp_WrongExpectedVersion_default_instance_;
class AppendRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendResp> _instance;
  const ::event_store::client::streams::AppendResp_Success* success_;
  const ::event_store::client::streams::AppendResp_WrongExpectedVersion* wrong_expected_version_;
} _AppendResp_default_instance_;
class BatchAppendReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchAppendReq_Options> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_position_;
  const PROTOBUF_NAMESPACE_ID::Empty* no_stream_;
  const PROTOBUF_NAMESPACE_ID::Empty* any_;
  const PROTOBUF_NAMESPACE_ID::Empty* stream_exists_;
} _BatchAppendReq_Options_default_instance_;
class BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse> _instance;
} _BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_;
class BatchAppendReq_ProposedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchAppendReq_ProposedMessage> _instance;
} _BatchAppendReq_ProposedMessage_default_instance_;
class BatchAppendReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchAppendReq> _instance;
} _BatchAppendReq_default_instance_;
class BatchAppendResp_SuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchAppendResp_Success> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_revision_;
  const PROTOBUF_NAMESPACE_ID::Empty* no_stream_;
  const ::event_store::client::AllStreamPosition* position_;
  const PROTOBUF_NAMESPACE_ID::Empty* no_position_;
} _BatchAppendResp_Success_default_instance_;
class BatchAppendRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchAppendResp> _instance;
  const ::google::rpc::Status* error_;
  const ::event_store::client::streams::BatchAppendResp_Success* success_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stream_position_;
  const PROTOBUF_NAMESPACE_ID::Empty* no_stream_;
  const PROTOBUF_NAMESPACE_ID::Empty* any_;
  const PROTOBUF_NAMESPACE_ID::Empty* stream_exists_;
} _BatchAppendResp_default_instance_;
class DeleteReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteReq_Options> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
  const ::event_store::client::Empty* no_stream_;
  const ::event_store::client::Empty* any_;
  const ::event_store::client::Empty* stream_exists_;
} _DeleteReq_Options_default_instance_;
class DeleteReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteReq> _instance;
} _DeleteReq_default_instance_;
class DeleteResp_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResp_Position> _instance;
} _DeleteResp_Position_default_instance_;
class DeleteRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResp> _instance;
  const ::event_store::client::streams::DeleteResp_Position* position_;
  const ::event_store::client::Empty* no_position_;
} _DeleteResp_default_instance_;
class TombstoneReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TombstoneReq_Options> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_;
  const ::event_store::client::Empty* no_stream_;
  const ::event_store::client::Empty* any_;
  const ::event_store::client::Empty* stream_exists_;
} _TombstoneReq_Options_default_instance_;
class TombstoneReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TombstoneReq> _instance;
} _TombstoneReq_default_instance_;
class TombstoneResp_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TombstoneResp_Position> _instance;
} _TombstoneResp_Position_default_instance_;
class TombstoneRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TombstoneResp> _instance;
  const ::event_store::client::streams::TombstoneResp_Position* position_;
  const ::event_store::client::Empty* no_position_;
} _TombstoneResp_default_instance_;
}  // namespace streams
}  // namespace client
}  // namespace event_store
static void InitDefaultsscc_info_AppendReq_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_AppendReq_default_instance_;
    new (ptr) ::event_store::client::streams::AppendReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::AppendReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendReq_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppendReq_streams_2eproto}, {
      &scc_info_AppendReq_Options_streams_2eproto.base,
      &scc_info_AppendReq_ProposedMessage_streams_2eproto.base,}};

static void InitDefaultsscc_info_AppendReq_Options_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_AppendReq_Options_default_instance_;
    new (ptr) ::event_store::client::streams::AppendReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::AppendReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendReq_Options_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppendReq_Options_streams_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_AppendReq_ProposedMessage_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_AppendReq_ProposedMessage_default_instance_;
    new (ptr) ::event_store::client::streams::AppendReq_ProposedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::AppendReq_ProposedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendReq_ProposedMessage_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppendReq_ProposedMessage_streams_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto.base,}};

static void InitDefaultsscc_info_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse();
  }
  ::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto}, {}};

static void InitDefaultsscc_info_AppendResp_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_AppendResp_default_instance_;
    new (ptr) ::event_store::client::streams::AppendResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::AppendResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendResp_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppendResp_streams_2eproto}, {
      &scc_info_AppendResp_Success_streams_2eproto.base,
      &scc_info_AppendResp_WrongExpectedVersion_streams_2eproto.base,}};

static void InitDefaultsscc_info_AppendResp_Position_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_AppendResp_Position_default_instance_;
    new (ptr) ::event_store::client::streams::AppendResp_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::AppendResp_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendResp_Position_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendResp_Position_streams_2eproto}, {}};

static void InitDefaultsscc_info_AppendResp_Success_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_AppendResp_Success_default_instance_;
    new (ptr) ::event_store::client::streams::AppendResp_Success();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::AppendResp_Success::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AppendResp_Success_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AppendResp_Success_streams_2eproto}, {
      &scc_info_Empty_shared_2eproto.base,
      &scc_info_AppendResp_Position_streams_2eproto.base,}};

static void InitDefaultsscc_info_AppendResp_WrongExpectedVersion_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_;
    new (ptr) ::event_store::client::streams::AppendResp_WrongExpectedVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::AppendResp_WrongExpectedVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendResp_WrongExpectedVersion_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppendResp_WrongExpectedVersion_streams_2eproto}, {
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_BatchAppendReq_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_BatchAppendReq_default_instance_;
    new (ptr) ::event_store::client::streams::BatchAppendReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::BatchAppendReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BatchAppendReq_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BatchAppendReq_streams_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_BatchAppendReq_Options_streams_2eproto.base,
      &scc_info_BatchAppendReq_ProposedMessage_streams_2eproto.base,}};

static void InitDefaultsscc_info_BatchAppendReq_Options_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_BatchAppendReq_Options_default_instance_;
    new (ptr) ::event_store::client::streams::BatchAppendReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::BatchAppendReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BatchAppendReq_Options_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BatchAppendReq_Options_streams_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_BatchAppendReq_ProposedMessage_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_BatchAppendReq_ProposedMessage_default_instance_;
    new (ptr) ::event_store::client::streams::BatchAppendReq_ProposedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::BatchAppendReq_ProposedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchAppendReq_ProposedMessage_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BatchAppendReq_ProposedMessage_streams_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto.base,}};

static void InitDefaultsscc_info_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse();
  }
  ::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto}, {}};

static void InitDefaultsscc_info_BatchAppendResp_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_BatchAppendResp_default_instance_;
    new (ptr) ::event_store::client::streams::BatchAppendResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::BatchAppendResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_BatchAppendResp_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_BatchAppendResp_streams_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_Status_status_2eproto.base,
      &scc_info_BatchAppendResp_Success_streams_2eproto.base,
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,}};

static void InitDefaultsscc_info_BatchAppendResp_Success_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_BatchAppendResp_Success_default_instance_;
    new (ptr) ::event_store::client::streams::BatchAppendResp_Success();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::BatchAppendResp_Success::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchAppendResp_Success_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BatchAppendResp_Success_streams_2eproto}, {
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,
      &scc_info_AllStreamPosition_shared_2eproto.base,}};

static void InitDefaultsscc_info_DeleteReq_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_DeleteReq_default_instance_;
    new (ptr) ::event_store::client::streams::DeleteReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::DeleteReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteReq_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteReq_streams_2eproto}, {
      &scc_info_DeleteReq_Options_streams_2eproto.base,}};

static void InitDefaultsscc_info_DeleteReq_Options_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_DeleteReq_Options_default_instance_;
    new (ptr) ::event_store::client::streams::DeleteReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::DeleteReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteReq_Options_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteReq_Options_streams_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_DeleteResp_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_DeleteResp_default_instance_;
    new (ptr) ::event_store::client::streams::DeleteResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::DeleteResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteResp_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteResp_streams_2eproto}, {
      &scc_info_DeleteResp_Position_streams_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_DeleteResp_Position_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_DeleteResp_Position_default_instance_;
    new (ptr) ::event_store::client::streams::DeleteResp_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::DeleteResp_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResp_Position_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteResp_Position_streams_2eproto}, {}};

static void InitDefaultsscc_info_ReadReq_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadReq_streams_2eproto}, {
      &scc_info_ReadReq_Options_streams_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Options_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ReadReq_Options_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ReadReq_Options_streams_2eproto}, {
      &scc_info_ReadReq_Options_StreamOptions_streams_2eproto.base,
      &scc_info_ReadReq_Options_AllOptions_streams_2eproto.base,
      &scc_info_ReadReq_Options_SubscriptionOptions_streams_2eproto.base,
      &scc_info_ReadReq_Options_FilterOptions_streams_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,
      &scc_info_ReadReq_Options_UUIDOption_streams_2eproto.base,
      &scc_info_ReadReq_Options_ControlOption_streams_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Options_AllOptions_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_AllOptions_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options_AllOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options_AllOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadReq_Options_AllOptions_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReadReq_Options_AllOptions_streams_2eproto}, {
      &scc_info_ReadReq_Options_Position_streams_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Options_ControlOption_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_ControlOption_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options_ControlOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options_ControlOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadReq_Options_ControlOption_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadReq_Options_ControlOption_streams_2eproto}, {}};

static void InitDefaultsscc_info_ReadReq_Options_FilterOptions_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_FilterOptions_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options_FilterOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options_FilterOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadReq_Options_FilterOptions_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReadReq_Options_FilterOptions_streams_2eproto}, {
      &scc_info_ReadReq_Options_FilterOptions_Expression_streams_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Options_FilterOptions_Expression_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_FilterOptions_Expression_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadReq_Options_FilterOptions_Expression_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadReq_Options_FilterOptions_Expression_streams_2eproto}, {}};

static void InitDefaultsscc_info_ReadReq_Options_Position_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_Position_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadReq_Options_Position_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadReq_Options_Position_streams_2eproto}, {}};

static void InitDefaultsscc_info_ReadReq_Options_StreamOptions_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_StreamOptions_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options_StreamOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options_StreamOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadReq_Options_StreamOptions_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReadReq_Options_StreamOptions_streams_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadReq_Options_SubscriptionOptions_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_SubscriptionOptions_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options_SubscriptionOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options_SubscriptionOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadReq_Options_SubscriptionOptions_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadReq_Options_SubscriptionOptions_streams_2eproto}, {}};

static void InitDefaultsscc_info_ReadReq_Options_UUIDOption_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadReq_Options_UUIDOption_default_instance_;
    new (ptr) ::event_store::client::streams::ReadReq_Options_UUIDOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadReq_Options_UUIDOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadReq_Options_UUIDOption_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadReq_Options_UUIDOption_streams_2eproto}, {
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadResp_default_instance_;
    new (ptr) ::event_store::client::streams::ReadResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ReadResp_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ReadResp_streams_2eproto}, {
      &scc_info_ReadResp_ReadEvent_streams_2eproto.base,
      &scc_info_ReadResp_SubscriptionConfirmation_streams_2eproto.base,
      &scc_info_ReadResp_Checkpoint_streams_2eproto.base,
      &scc_info_ReadResp_StreamNotFound_streams_2eproto.base,
      &scc_info_AllStreamPosition_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_Checkpoint_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadResp_Checkpoint_default_instance_;
    new (ptr) ::event_store::client::streams::ReadResp_Checkpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadResp_Checkpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_Checkpoint_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadResp_Checkpoint_streams_2eproto}, {}};

static void InitDefaultsscc_info_ReadResp_ReadEvent_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadResp_ReadEvent_default_instance_;
    new (ptr) ::event_store::client::streams::ReadResp_ReadEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadResp_ReadEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReadResp_ReadEvent_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReadResp_ReadEvent_streams_2eproto}, {
      &scc_info_ReadResp_ReadEvent_RecordedEvent_streams_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_ReadEvent_RecordedEvent_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadResp_ReadEvent_RecordedEvent_default_instance_;
    new (ptr) ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReadResp_ReadEvent_RecordedEvent_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReadResp_ReadEvent_RecordedEvent_streams_2eproto}, {
      &scc_info_UUID_shared_2eproto.base,
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_streams_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse();
  }
  ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_streams_2eproto}, {}};

static void InitDefaultsscc_info_ReadResp_StreamNotFound_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadResp_StreamNotFound_default_instance_;
    new (ptr) ::event_store::client::streams::ReadResp_StreamNotFound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadResp_StreamNotFound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadResp_StreamNotFound_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadResp_StreamNotFound_streams_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,}};

static void InitDefaultsscc_info_ReadResp_SubscriptionConfirmation_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_ReadResp_SubscriptionConfirmation_default_instance_;
    new (ptr) ::event_store::client::streams::ReadResp_SubscriptionConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::ReadResp_SubscriptionConfirmation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResp_SubscriptionConfirmation_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadResp_SubscriptionConfirmation_streams_2eproto}, {}};

static void InitDefaultsscc_info_TombstoneReq_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_TombstoneReq_default_instance_;
    new (ptr) ::event_store::client::streams::TombstoneReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::TombstoneReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TombstoneReq_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TombstoneReq_streams_2eproto}, {
      &scc_info_TombstoneReq_Options_streams_2eproto.base,}};

static void InitDefaultsscc_info_TombstoneReq_Options_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_TombstoneReq_Options_default_instance_;
    new (ptr) ::event_store::client::streams::TombstoneReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::TombstoneReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TombstoneReq_Options_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TombstoneReq_Options_streams_2eproto}, {
      &scc_info_StreamIdentifier_shared_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_TombstoneResp_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_TombstoneResp_default_instance_;
    new (ptr) ::event_store::client::streams::TombstoneResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::TombstoneResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TombstoneResp_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TombstoneResp_streams_2eproto}, {
      &scc_info_TombstoneResp_Position_streams_2eproto.base,
      &scc_info_Empty_shared_2eproto.base,}};

static void InitDefaultsscc_info_TombstoneResp_Position_streams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::streams::_TombstoneResp_Position_default_instance_;
    new (ptr) ::event_store::client::streams::TombstoneResp_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::streams::TombstoneResp_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TombstoneResp_Position_streams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TombstoneResp_Position_streams_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_streams_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_streams_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_streams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_streams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_StreamOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_StreamOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_StreamOptions, stream_identifier_),
  offsetof(::event_store::client::streams::ReadReq_Options_StreamOptionsDefaultTypeInternal, revision_),
  offsetof(::event_store::client::streams::ReadReq_Options_StreamOptionsDefaultTypeInternal, start_),
  offsetof(::event_store::client::streams::ReadReq_Options_StreamOptionsDefaultTypeInternal, end_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_StreamOptions, revision_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_AllOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_AllOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::ReadReq_Options_AllOptionsDefaultTypeInternal, position_),
  offsetof(::event_store::client::streams::ReadReq_Options_AllOptionsDefaultTypeInternal, start_),
  offsetof(::event_store::client::streams::ReadReq_Options_AllOptionsDefaultTypeInternal, end_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_AllOptions, all_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_SubscriptionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_Position, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_Position, prepare_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression, regex_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_FilterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_FilterOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::ReadReq_Options_FilterOptionsDefaultTypeInternal, stream_identifier_),
  offsetof(::event_store::client::streams::ReadReq_Options_FilterOptionsDefaultTypeInternal, event_type_),
  offsetof(::event_store::client::streams::ReadReq_Options_FilterOptionsDefaultTypeInternal, max_),
  offsetof(::event_store::client::streams::ReadReq_Options_FilterOptionsDefaultTypeInternal, count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_FilterOptions, checkpointintervalmultiplier_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_FilterOptions, filter_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_FilterOptions, window_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_UUIDOption, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_UUIDOption, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::ReadReq_Options_UUIDOptionDefaultTypeInternal, structured_),
  offsetof(::event_store::client::streams::ReadReq_Options_UUIDOptionDefaultTypeInternal, string_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_UUIDOption, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_ControlOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options_ControlOption, compatibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::ReadReq_OptionsDefaultTypeInternal, stream_),
  offsetof(::event_store::client::streams::ReadReq_OptionsDefaultTypeInternal, all_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, read_direction_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, resolve_links_),
  offsetof(::event_store::client::streams::ReadReq_OptionsDefaultTypeInternal, count_),
  offsetof(::event_store::client::streams::ReadReq_OptionsDefaultTypeInternal, subscription_),
  offsetof(::event_store::client::streams::ReadReq_OptionsDefaultTypeInternal, filter_),
  offsetof(::event_store::client::streams::ReadReq_OptionsDefaultTypeInternal, no_filter_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, uuid_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, control_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, stream_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, count_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq_Options, filter_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadReq, options_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, stream_identifier_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, stream_revision_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, prepare_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, metadata_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, custom_metadata_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent, event_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent, link_),
  offsetof(::event_store::client::streams::ReadResp_ReadEventDefaultTypeInternal, commit_position_),
  offsetof(::event_store::client::streams::ReadResp_ReadEventDefaultTypeInternal, no_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_ReadEvent, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_SubscriptionConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_SubscriptionConfirmation, subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_Checkpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_Checkpoint, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_Checkpoint, prepare_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_StreamNotFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp_StreamNotFound, stream_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::ReadRespDefaultTypeInternal, event_),
  offsetof(::event_store::client::streams::ReadRespDefaultTypeInternal, confirmation_),
  offsetof(::event_store::client::streams::ReadRespDefaultTypeInternal, checkpoint_),
  offsetof(::event_store::client::streams::ReadRespDefaultTypeInternal, stream_not_found_),
  offsetof(::event_store::client::streams::ReadRespDefaultTypeInternal, first_stream_position_),
  offsetof(::event_store::client::streams::ReadRespDefaultTypeInternal, last_stream_position_),
  offsetof(::event_store::client::streams::ReadRespDefaultTypeInternal, last_all_stream_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::ReadResp, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_Options, stream_identifier_),
  offsetof(::event_store::client::streams::AppendReq_OptionsDefaultTypeInternal, revision_),
  offsetof(::event_store::client::streams::AppendReq_OptionsDefaultTypeInternal, no_stream_),
  offsetof(::event_store::client::streams::AppendReq_OptionsDefaultTypeInternal, any_),
  offsetof(::event_store::client::streams::AppendReq_OptionsDefaultTypeInternal, stream_exists_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_Options, expected_stream_revision_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage, id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage, metadata_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage, custom_metadata_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq_ProposedMessage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::AppendReqDefaultTypeInternal, options_),
  offsetof(::event_store::client::streams::AppendReqDefaultTypeInternal, proposed_message_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendReq, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_Position, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_Position, prepare_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_Success, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_Success, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::AppendResp_SuccessDefaultTypeInternal, current_revision_),
  offsetof(::event_store::client::streams::AppendResp_SuccessDefaultTypeInternal, no_stream_),
  offsetof(::event_store::client::streams::AppendResp_SuccessDefaultTypeInternal, position_),
  offsetof(::event_store::client::streams::AppendResp_SuccessDefaultTypeInternal, no_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_Success, current_revision_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_Success, position_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_WrongExpectedVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_WrongExpectedVersion, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, current_revision_20_6_0_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, no_stream_20_6_0_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, expected_revision_20_6_0_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, any_20_6_0_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, stream_exists_20_6_0_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, current_revision_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, current_no_stream_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, expected_revision_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, expected_any_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, expected_stream_exists_),
  offsetof(::event_store::client::streams::AppendResp_WrongExpectedVersionDefaultTypeInternal, expected_no_stream_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_WrongExpectedVersion, current_revision_option_20_6_0_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_WrongExpectedVersion, expected_revision_option_20_6_0_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_WrongExpectedVersion, current_revision_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp_WrongExpectedVersion, expected_revision_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::AppendRespDefaultTypeInternal, success_),
  offsetof(::event_store::client::streams::AppendRespDefaultTypeInternal, wrong_expected_version_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::AppendResp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_Options, stream_identifier_),
  offsetof(::event_store::client::streams::BatchAppendReq_OptionsDefaultTypeInternal, stream_position_),
  offsetof(::event_store::client::streams::BatchAppendReq_OptionsDefaultTypeInternal, no_stream_),
  offsetof(::event_store::client::streams::BatchAppendReq_OptionsDefaultTypeInternal, any_),
  offsetof(::event_store::client::streams::BatchAppendReq_OptionsDefaultTypeInternal, stream_exists_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_Options, deadline_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_Options, expected_stream_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage, id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage, metadata_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage, custom_metadata_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq_ProposedMessage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq, options_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq, proposed_messages_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendReq, is_final_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp_Success, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp_Success, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::BatchAppendResp_SuccessDefaultTypeInternal, current_revision_),
  offsetof(::event_store::client::streams::BatchAppendResp_SuccessDefaultTypeInternal, no_stream_),
  offsetof(::event_store::client::streams::BatchAppendResp_SuccessDefaultTypeInternal, position_),
  offsetof(::event_store::client::streams::BatchAppendResp_SuccessDefaultTypeInternal, no_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp_Success, current_revision_option_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp_Success, position_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp, correlation_id_),
  offsetof(::event_store::client::streams::BatchAppendRespDefaultTypeInternal, error_),
  offsetof(::event_store::client::streams::BatchAppendRespDefaultTypeInternal, success_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp, stream_identifier_),
  offsetof(::event_store::client::streams::BatchAppendRespDefaultTypeInternal, stream_position_),
  offsetof(::event_store::client::streams::BatchAppendRespDefaultTypeInternal, no_stream_),
  offsetof(::event_store::client::streams::BatchAppendRespDefaultTypeInternal, any_),
  offsetof(::event_store::client::streams::BatchAppendRespDefaultTypeInternal, stream_exists_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp, result_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::BatchAppendResp, expected_stream_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteReq_Options, stream_identifier_),
  offsetof(::event_store::client::streams::DeleteReq_OptionsDefaultTypeInternal, revision_),
  offsetof(::event_store::client::streams::DeleteReq_OptionsDefaultTypeInternal, no_stream_),
  offsetof(::event_store::client::streams::DeleteReq_OptionsDefaultTypeInternal, any_),
  offsetof(::event_store::client::streams::DeleteReq_OptionsDefaultTypeInternal, stream_exists_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteReq_Options, expected_stream_revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteResp_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteResp_Position, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteResp_Position, prepare_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteResp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::DeleteRespDefaultTypeInternal, position_),
  offsetof(::event_store::client::streams::DeleteRespDefaultTypeInternal, no_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::DeleteResp, position_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneReq_Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneReq_Options, stream_identifier_),
  offsetof(::event_store::client::streams::TombstoneReq_OptionsDefaultTypeInternal, revision_),
  offsetof(::event_store::client::streams::TombstoneReq_OptionsDefaultTypeInternal, no_stream_),
  offsetof(::event_store::client::streams::TombstoneReq_OptionsDefaultTypeInternal, any_),
  offsetof(::event_store::client::streams::TombstoneReq_OptionsDefaultTypeInternal, stream_exists_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneReq_Options, expected_stream_revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneResp_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneResp_Position, commit_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneResp_Position, prepare_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneResp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneResp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::event_store::client::streams::TombstoneRespDefaultTypeInternal, position_),
  offsetof(::event_store::client::streams::TombstoneRespDefaultTypeInternal, no_position_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::streams::TombstoneResp, position_option_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::event_store::client::streams::ReadReq_Options_StreamOptions)},
  { 10, -1, sizeof(::event_store::client::streams::ReadReq_Options_AllOptions)},
  { 19, -1, sizeof(::event_store::client::streams::ReadReq_Options_SubscriptionOptions)},
  { 24, -1, sizeof(::event_store::client::streams::ReadReq_Options_Position)},
  { 31, -1, sizeof(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression)},
  { 38, -1, sizeof(::event_store::client::streams::ReadReq_Options_FilterOptions)},
  { 50, -1, sizeof(::event_store::client::streams::ReadReq_Options_UUIDOption)},
  { 58, -1, sizeof(::event_store::client::streams::ReadReq_Options_ControlOption)},
  { 64, -1, sizeof(::event_store::client::streams::ReadReq_Options)},
  { 82, -1, sizeof(::event_store::client::streams::ReadReq)},
  { 88, 95, sizeof(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse)},
  { 97, -1, sizeof(::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent)},
  { 110, -1, sizeof(::event_store::client::streams::ReadResp_ReadEvent)},
  { 120, -1, sizeof(::event_store::client::streams::ReadResp_SubscriptionConfirmation)},
  { 126, -1, sizeof(::event_store::client::streams::ReadResp_Checkpoint)},
  { 133, -1, sizeof(::event_store::client::streams::ReadResp_StreamNotFound)},
  { 139, -1, sizeof(::event_store::client::streams::ReadResp)},
  { 152, -1, sizeof(::event_store::client::streams::AppendReq_Options)},
  { 163, 170, sizeof(::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse)},
  { 172, -1, sizeof(::event_store::client::streams::AppendReq_ProposedMessage)},
  { 181, -1, sizeof(::event_store::client::streams::AppendReq)},
  { 189, -1, sizeof(::event_store::client::streams::AppendResp_Position)},
  { 196, -1, sizeof(::event_store::client::streams::AppendResp_Success)},
  { 207, -1, sizeof(::event_store::client::streams::AppendResp_WrongExpectedVersion)},
  { 227, -1, sizeof(::event_store::client::streams::AppendResp)},
  { 235, -1, sizeof(::event_store::client::streams::BatchAppendReq_Options)},
  { 247, 254, sizeof(::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse)},
  { 256, -1, sizeof(::event_store::client::streams::BatchAppendReq_ProposedMessage)},
  { 265, -1, sizeof(::event_store::client::streams::BatchAppendReq)},
  { 274, -1, sizeof(::event_store::client::streams::BatchAppendResp_Success)},
  { 285, -1, sizeof(::event_store::client::streams::BatchAppendResp)},
  { 300, -1, sizeof(::event_store::client::streams::DeleteReq_Options)},
  { 311, -1, sizeof(::event_store::client::streams::DeleteReq)},
  { 317, -1, sizeof(::event_store::client::streams::DeleteResp_Position)},
  { 324, -1, sizeof(::event_store::client::streams::DeleteResp)},
  { 332, -1, sizeof(::event_store::client::streams::TombstoneReq_Options)},
  { 343, -1, sizeof(::event_store::client::streams::TombstoneReq)},
  { 349, -1, sizeof(::event_store::client::streams::TombstoneResp_Position)},
  { 356, -1, sizeof(::event_store::client::streams::TombstoneResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_StreamOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_AllOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_SubscriptionOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_FilterOptions_Expression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_FilterOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_UUIDOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_ControlOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadResp_ReadEvent_RecordedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadResp_ReadEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadResp_SubscriptionConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadResp_Checkpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadResp_StreamNotFound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_ReadResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_AppendReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_AppendReq_ProposedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_AppendReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_AppendResp_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_AppendResp_Success_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_AppendResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_BatchAppendReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_BatchAppendReq_ProposedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_BatchAppendReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_BatchAppendResp_Success_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_BatchAppendResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_DeleteReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_DeleteReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_DeleteResp_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_DeleteResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_TombstoneReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_TombstoneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_TombstoneResp_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::streams::_TombstoneResp_default_instance_),
};

const char descriptor_table_protodef_streams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rstreams.proto\022\032event_store.client.stre"
  "ams\032\014shared.proto\032\014status.proto\032\033google/"
  "protobuf/empty.proto\032\037google/protobuf/ti"
  "mestamp.proto\"\255\016\n\007ReadReq\022<\n\007options\030\001 \001"
  "(\0132+.event_store.client.streams.ReadReq."
  "Options\032\343\r\n\007Options\022K\n\006stream\030\001 \001(\01329.ev"
  "ent_store.client.streams.ReadReq.Options"
  ".StreamOptionsH\000\022E\n\003all\030\002 \001(\01326.event_st"
  "ore.client.streams.ReadReq.Options.AllOp"
  "tionsH\000\022Q\n\016read_direction\030\003 \001(\01629.event_"
  "store.client.streams.ReadReq.Options.Rea"
  "dDirection\022\025\n\rresolve_links\030\004 \001(\010\022\017\n\005cou"
  "nt\030\005 \001(\004H\001\022W\n\014subscription\030\006 \001(\0132\?.event"
  "_store.client.streams.ReadReq.Options.Su"
  "bscriptionOptionsH\001\022K\n\006filter\030\007 \001(\01329.ev"
  "ent_store.client.streams.ReadReq.Options"
  ".FilterOptionsH\002\022.\n\tno_filter\030\010 \001(\0132\031.ev"
  "ent_store.client.EmptyH\002\022K\n\013uuid_option\030"
  "\t \001(\01326.event_store.client.streams.ReadR"
  "eq.Options.UUIDOption\022Q\n\016control_option\030"
  "\n \001(\01329.event_store.client.streams.ReadR"
  "eq.Options.ControlOption\032\315\001\n\rStreamOptio"
  "ns\022\?\n\021stream_identifier\030\001 \001(\0132$.event_st"
  "ore.client.StreamIdentifier\022\022\n\010revision\030"
  "\002 \001(\004H\000\022*\n\005start\030\003 \001(\0132\031.event_store.cli"
  "ent.EmptyH\000\022(\n\003end\030\004 \001(\0132\031.event_store.c"
  "lient.EmptyH\000B\021\n\017revision_option\032\272\001\n\nAll"
  "Options\022H\n\010position\030\001 \001(\01324.event_store."
  "client.streams.ReadReq.Options.PositionH"
  "\000\022*\n\005start\030\002 \001(\0132\031.event_store.client.Em"
  "ptyH\000\022(\n\003end\030\003 \001(\0132\031.event_store.client."
  "EmptyH\000B\014\n\nall_option\032\025\n\023SubscriptionOpt"
  "ions\032=\n\010Position\022\027\n\017commit_position\030\001 \001("
  "\004\022\030\n\020prepare_position\030\002 \001(\004\032\360\002\n\rFilterOp"
  "tions\022a\n\021stream_identifier\030\001 \001(\0132D.event"
  "_store.client.streams.ReadReq.Options.Fi"
  "lterOptions.ExpressionH\000\022Z\n\nevent_type\030\002"
  " \001(\0132D.event_store.client.streams.ReadRe"
  "q.Options.FilterOptions.ExpressionH\000\022\r\n\003"
  "max\030\003 \001(\rH\001\022*\n\005count\030\004 \001(\0132\031.event_store"
  ".client.EmptyH\001\022$\n\034checkpointIntervalMul"
  "tiplier\030\005 \001(\r\032+\n\nExpression\022\r\n\005regex\030\001 \001"
  "(\t\022\016\n\006prefix\030\002 \003(\tB\010\n\006filterB\010\n\006window\032u"
  "\n\nUUIDOption\022/\n\nstructured\030\001 \001(\0132\031.event"
  "_store.client.EmptyH\000\022+\n\006string\030\002 \001(\0132\031."
  "event_store.client.EmptyH\000B\t\n\007content\032&\n"
  "\rControlOption\022\025\n\rcompatibility\030\001 \001(\r\",\n"
  "\rReadDirection\022\014\n\010Forwards\020\000\022\r\n\tBackward"
  "s\020\001B\017\n\rstream_optionB\016\n\014count_optionB\017\n\r"
  "filter_option\"\225\n\n\010ReadResp\022\?\n\005event\030\001 \001("
  "\0132..event_store.client.streams.ReadResp."
  "ReadEventH\000\022U\n\014confirmation\030\002 \001(\0132=.even"
  "t_store.client.streams.ReadResp.Subscrip"
  "tionConfirmationH\000\022E\n\ncheckpoint\030\003 \001(\0132/"
  ".event_store.client.streams.ReadResp.Che"
  "ckpointH\000\022O\n\020stream_not_found\030\004 \001(\01323.ev"
  "ent_store.client.streams.ReadResp.Stream"
  "NotFoundH\000\022\037\n\025first_stream_position\030\005 \001("
  "\004H\000\022\036\n\024last_stream_position\030\006 \001(\004H\000\022I\n\030l"
  "ast_all_stream_position\030\007 \001(\0132%.event_st"
  "ore.client.AllStreamPositionH\000\032\370\004\n\tReadE"
  "vent\022K\n\005event\030\001 \001(\0132<.event_store.client"
  ".streams.ReadResp.ReadEvent.RecordedEven"
  "t\022J\n\004link\030\002 \001(\0132<.event_store.client.str"
  "eams.ReadResp.ReadEvent.RecordedEvent\022\031\n"
  "\017commit_position\030\003 \001(\004H\000\0220\n\013no_position\030"
  "\004 \001(\0132\031.event_store.client.EmptyH\000\032\370\002\n\rR"
  "ecordedEvent\022$\n\002id\030\001 \001(\0132\030.event_store.c"
  "lient.UUID\022\?\n\021stream_identifier\030\002 \001(\0132$."
  "event_store.client.StreamIdentifier\022\027\n\017s"
  "tream_revision\030\003 \001(\004\022\030\n\020prepare_position"
  "\030\004 \001(\004\022\027\n\017commit_position\030\005 \001(\004\022\\\n\010metad"
  "ata\030\006 \003(\0132J.event_store.client.streams.R"
  "eadResp.ReadEvent.RecordedEvent.Metadata"
  "Entry\022\027\n\017custom_metadata\030\007 \001(\014\022\014\n\004data\030\010"
  " \001(\014\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001B\n\n\010position\0323\n\030Subscriptio"
  "nConfirmation\022\027\n\017subscription_id\030\001 \001(\t\032\?"
  "\n\nCheckpoint\022\027\n\017commit_position\030\001 \001(\004\022\030\n"
  "\020prepare_position\030\002 \001(\004\032Q\n\016StreamNotFoun"
  "d\022\?\n\021stream_identifier\030\001 \001(\0132$.event_sto"
  "re.client.StreamIdentifierB\t\n\007content\"\237\005"
  "\n\tAppendReq\022@\n\007options\030\001 \001(\0132-.event_sto"
  "re.client.streams.AppendReq.OptionsH\000\022Q\n"
  "\020proposed_message\030\002 \001(\01325.event_store.cl"
  "ient.streams.AppendReq.ProposedMessageH\000"
  "\032\210\002\n\007Options\022\?\n\021stream_identifier\030\001 \001(\0132"
  "$.event_store.client.StreamIdentifier\022\022\n"
  "\010revision\030\002 \001(\004H\000\022.\n\tno_stream\030\003 \001(\0132\031.e"
  "vent_store.client.EmptyH\000\022(\n\003any\030\004 \001(\0132\031"
  ".event_store.client.EmptyH\000\0222\n\rstream_ex"
  "ists\030\005 \001(\0132\031.event_store.client.EmptyH\000B"
  "\032\n\030expected_stream_revision\032\346\001\n\017Proposed"
  "Message\022$\n\002id\030\001 \001(\0132\030.event_store.client"
  ".UUID\022U\n\010metadata\030\002 \003(\0132C.event_store.cl"
  "ient.streams.AppendReq.ProposedMessage.M"
  "etadataEntry\022\027\n\017custom_metadata\030\003 \001(\014\022\014\n"
  "\004data\030\004 \001(\014\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001B\t\n\007content\"\215\t\n\nAppe"
  "ndResp\022A\n\007success\030\001 \001(\0132..event_store.cl"
  "ient.streams.AppendResp.SuccessH\000\022]\n\026wro"
  "ng_expected_version\030\002 \001(\0132;.event_store."
  "client.streams.AppendResp.WrongExpectedV"
  "ersionH\000\032=\n\010Position\022\027\n\017commit_position\030"
  "\001 \001(\004\022\030\n\020prepare_position\030\002 \001(\004\032\372\001\n\007Succ"
  "ess\022\032\n\020current_revision\030\001 \001(\004H\000\022.\n\tno_st"
  "ream\030\002 \001(\0132\031.event_store.client.EmptyH\000\022"
  "C\n\010position\030\003 \001(\0132/.event_store.client.s"
  "treams.AppendResp.PositionH\001\0220\n\013no_posit"
  "ion\030\004 \001(\0132\031.event_store.client.EmptyH\001B\031"
  "\n\027current_revision_optionB\021\n\017position_op"
  "tion\032\226\005\n\024WrongExpectedVersion\022!\n\027current"
  "_revision_20_6_0\030\001 \001(\004H\000\0225\n\020no_stream_20"
  "_6_0\030\002 \001(\0132\031.event_store.client.EmptyH\000\022"
  "\"\n\030expected_revision_20_6_0\030\003 \001(\004H\001\022/\n\na"
  "ny_20_6_0\030\004 \001(\0132\031.event_store.client.Emp"
  "tyH\001\0229\n\024stream_exists_20_6_0\030\005 \001(\0132\031.eve"
  "nt_store.client.EmptyH\001\022\032\n\020current_revis"
  "ion\030\006 \001(\004H\002\0226\n\021current_no_stream\030\007 \001(\0132\031"
  ".event_store.client.EmptyH\002\022\033\n\021expected_"
  "revision\030\010 \001(\004H\003\0221\n\014expected_any\030\t \001(\0132\031"
  ".event_store.client.EmptyH\003\022;\n\026expected_"
  "stream_exists\030\n \001(\0132\031.event_store.client"
  ".EmptyH\003\0227\n\022expected_no_stream\030\013 \001(\0132\031.e"
  "vent_store.client.EmptyH\003B \n\036current_rev"
  "ision_option_20_6_0B!\n\037expected_revision"
  "_option_20_6_0B\031\n\027current_revision_optio"
  "nB\032\n\030expected_revision_optionB\010\n\006result\""
  "\225\006\n\016BatchAppendReq\0220\n\016correlation_id\030\001 \001"
  "(\0132\030.event_store.client.UUID\022C\n\007options\030"
  "\002 \001(\01322.event_store.client.streams.Batch"
  "AppendReq.Options\022U\n\021proposed_messages\030\003"
  " \003(\0132:.event_store.client.streams.BatchA"
  "ppendReq.ProposedMessage\022\020\n\010is_final\030\004 \001"
  "(\010\032\264\002\n\007Options\022\?\n\021stream_identifier\030\001 \001("
  "\0132$.event_store.client.StreamIdentifier\022"
  "\031\n\017stream_position\030\002 \001(\004H\000\022+\n\tno_stream\030"
  "\003 \001(\0132\026.google.protobuf.EmptyH\000\022%\n\003any\030\004"
  " \001(\0132\026.google.protobuf.EmptyH\000\022/\n\rstream"
  "_exists\030\005 \001(\0132\026.google.protobuf.EmptyH\000\022"
  ",\n\010deadline\030\006 \001(\0132\032.google.protobuf.Time"
  "stampB\032\n\030expected_stream_position\032\353\001\n\017Pr"
  "oposedMessage\022$\n\002id\030\001 \001(\0132\030.event_store."
  "client.UUID\022Z\n\010metadata\030\002 \003(\0132H.event_st"
  "ore.client.streams.BatchAppendReq.Propos"
  "edMessage.MetadataEntry\022\027\n\017custom_metada"
  "ta\030\003 \001(\014\022\014\n\004data\030\004 \001(\014\032/\n\rMetadataEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\244\005\n\017Batc"
  "hAppendResp\0220\n\016correlation_id\030\001 \001(\0132\030.ev"
  "ent_store.client.UUID\022#\n\005error\030\002 \001(\0132\022.g"
  "oogle.rpc.StatusH\000\022F\n\007success\030\003 \001(\01323.ev"
  "ent_store.client.streams.BatchAppendResp"
  ".SuccessH\000\022\?\n\021stream_identifier\030\004 \001(\0132$."
  "event_store.client.StreamIdentifier\022\031\n\017s"
  "tream_position\030\005 \001(\004H\001\022+\n\tno_stream\030\006 \001("
  "\0132\026.google.protobuf.EmptyH\001\022%\n\003any\030\007 \001(\013"
  "2\026.google.protobuf.EmptyH\001\022/\n\rstream_exi"
  "sts\030\010 \001(\0132\026.google.protobuf.EmptyH\001\032\352\001\n\007"
  "Success\022\032\n\020current_revision\030\001 \001(\004H\000\022+\n\tn"
  "o_stream\030\002 \001(\0132\026.google.protobuf.EmptyH\000"
  "\0229\n\010position\030\003 \001(\0132%.event_store.client."
  "AllStreamPositionH\001\022-\n\013no_position\030\004 \001(\013"
  "2\026.google.protobuf.EmptyH\001B\031\n\027current_re"
  "vision_optionB\021\n\017position_optionB\010\n\006resu"
  "ltB\032\n\030expected_stream_position\"\326\002\n\tDelet"
  "eReq\022>\n\007options\030\001 \001(\0132-.event_store.clie"
  "nt.streams.DeleteReq.Options\032\210\002\n\007Options"
  "\022\?\n\021stream_identifier\030\001 \001(\0132$.event_stor"
  "e.client.StreamIdentifier\022\022\n\010revision\030\002 "
  "\001(\004H\000\022.\n\tno_stream\030\003 \001(\0132\031.event_store.c"
  "lient.EmptyH\000\022(\n\003any\030\004 \001(\0132\031.event_store"
  ".client.EmptyH\000\0222\n\rstream_exists\030\005 \001(\0132\031"
  ".event_store.client.EmptyH\000B\032\n\030expected_"
  "stream_revision\"\325\001\n\nDeleteResp\022C\n\010positi"
  "on\030\001 \001(\0132/.event_store.client.streams.De"
  "leteResp.PositionH\000\0220\n\013no_position\030\002 \001(\013"
  "2\031.event_store.client.EmptyH\000\032=\n\010Positio"
  "n\022\027\n\017commit_position\030\001 \001(\004\022\030\n\020prepare_po"
  "sition\030\002 \001(\004B\021\n\017position_option\"\334\002\n\014Tomb"
  "stoneReq\022A\n\007options\030\001 \001(\01320.event_store."
  "client.streams.TombstoneReq.Options\032\210\002\n\007"
  "Options\022\?\n\021stream_identifier\030\001 \001(\0132$.eve"
  "nt_store.client.StreamIdentifier\022\022\n\010revi"
  "sion\030\002 \001(\004H\000\022.\n\tno_stream\030\003 \001(\0132\031.event_"
  "store.client.EmptyH\000\022(\n\003any\030\004 \001(\0132\031.even"
  "t_store.client.EmptyH\000\0222\n\rstream_exists\030"
  "\005 \001(\0132\031.event_store.client.EmptyH\000B\032\n\030ex"
  "pected_stream_revision\"\333\001\n\rTombstoneResp"
  "\022F\n\010position\030\001 \001(\01322.event_store.client."
  "streams.TombstoneResp.PositionH\000\0220\n\013no_p"
  "osition\030\002 \001(\0132\031.event_store.client.Empty"
  "H\000\032=\n\010Position\022\027\n\017commit_position\030\001 \001(\004\022"
  "\030\n\020prepare_position\030\002 \001(\004B\021\n\017position_op"
  "tion2\340\003\n\007Streams\022S\n\004Read\022#.event_store.c"
  "lient.streams.ReadReq\032$.event_store.clie"
  "nt.streams.ReadResp0\001\022Y\n\006Append\022%.event_"
  "store.client.streams.AppendReq\032&.event_s"
  "tore.client.streams.AppendResp(\001\022W\n\006Dele"
  "te\022%.event_store.client.streams.DeleteRe"
  "q\032&.event_store.client.streams.DeleteRes"
  "p\022`\n\tTombstone\022(.event_store.client.stre"
  "ams.TombstoneReq\032).event_store.client.st"
  "reams.TombstoneResp\022j\n\013BatchAppend\022*.eve"
  "nt_store.client.streams.BatchAppendReq\032+"
  ".event_store.client.streams.BatchAppendR"
  "esp(\0010\001B\'\n%com.eventstore.dbclient.proto"
  ".streamsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_streams_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_shared_2eproto,
  &::descriptor_table_status_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_streams_2eproto_sccs[39] = {
  &scc_info_AppendReq_streams_2eproto.base,
  &scc_info_AppendReq_Options_streams_2eproto.base,
  &scc_info_AppendReq_ProposedMessage_streams_2eproto.base,
  &scc_info_AppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto.base,
  &scc_info_AppendResp_streams_2eproto.base,
  &scc_info_AppendResp_Position_streams_2eproto.base,
  &scc_info_AppendResp_Success_streams_2eproto.base,
  &scc_info_AppendResp_WrongExpectedVersion_streams_2eproto.base,
  &scc_info_BatchAppendReq_streams_2eproto.base,
  &scc_info_BatchAppendReq_Options_streams_2eproto.base,
  &scc_info_BatchAppendReq_ProposedMessage_streams_2eproto.base,
  &scc_info_BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse_streams_2eproto.base,
  &scc_info_BatchAppendResp_streams_2eproto.base,
  &scc_info_BatchAppendResp_Success_streams_2eproto.base,
  &scc_info_DeleteReq_streams_2eproto.base,
  &scc_info_DeleteReq_Options_streams_2eproto.base,
  &scc_info_DeleteResp_streams_2eproto.base,
  &scc_info_DeleteResp_Position_streams_2eproto.base,
  &scc_info_ReadReq_streams_2eproto.base,
  &scc_info_ReadReq_Options_streams_2eproto.base,
  &scc_info_ReadReq_Options_AllOptions_streams_2eproto.base,
  &scc_info_ReadReq_Options_ControlOption_streams_2eproto.base,
  &scc_info_ReadReq_Options_FilterOptions_streams_2eproto.base,
  &scc_info_ReadReq_Options_FilterOptions_Expression_streams_2eproto.base,
  &scc_info_ReadReq_Options_Position_streams_2eproto.base,
  &scc_info_ReadReq_Options_StreamOptions_streams_2eproto.base,
  &scc_info_ReadReq_Options_SubscriptionOptions_streams_2eproto.base,
  &scc_info_ReadReq_Options_UUIDOption_streams_2eproto.base,
  &scc_info_ReadResp_streams_2eproto.base,
  &scc_info_ReadResp_Checkpoint_streams_2eproto.base,
  &scc_info_ReadResp_ReadEvent_streams_2eproto.base,
  &scc_info_ReadResp_ReadEvent_RecordedEvent_streams_2eproto.base,
  &scc_info_ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse_streams_2eproto.base,
  &scc_info_ReadResp_StreamNotFound_streams_2eproto.base,
  &scc_info_ReadResp_SubscriptionConfirmation_streams_2eproto.base,
  &scc_info_TombstoneReq_streams_2eproto.base,
  &scc_info_TombstoneReq_Options_streams_2eproto.base,
  &scc_info_TombstoneResp_streams_2eproto.base,
  &scc_info_TombstoneResp_Position_streams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_streams_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_streams_2eproto = {
  false, false, descriptor_table_protodef_streams_2eproto, "streams.proto", 8256,
  &descriptor_table_streams_2eproto_once, descriptor_table_streams_2eproto_sccs, descriptor_table_streams_2eproto_deps, 39, 4,
  schemas, file_default_instances, TableStruct_streams_2eproto::offsets,
  file_level_metadata_streams_2eproto, 39, file_level_enum_descriptors_streams_2eproto, file_level_service_descriptors_streams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_streams_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_streams_2eproto)), true);
namespace event_store {
namespace client {
namespace streams {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadReq_Options_ReadDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_streams_2eproto);
  return file_level_enum_descriptors_streams_2eproto[0];
}
bool ReadReq_Options_ReadDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadReq_Options_ReadDirection ReadReq_Options::Forwards;
constexpr ReadReq_Options_ReadDirection ReadReq_Options::Backwards;
constexpr ReadReq_Options_ReadDirection ReadReq_Options::ReadDirection_MIN;
constexpr ReadReq_Options_ReadDirection ReadReq_Options::ReadDirection_MAX;
constexpr int ReadReq_Options::ReadDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ReadReq_Options_StreamOptions::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadReq_Options_StreamOptions_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_StreamOptions_default_instance_.revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_ReadReq_Options_StreamOptions_default_instance_.start_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_StreamOptions_default_instance_.end_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ReadReq_Options_StreamOptions::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const ReadReq_Options_StreamOptions* msg);
  static const ::event_store::client::Empty& start(const ReadReq_Options_StreamOptions* msg);
  static const ::event_store::client::Empty& end(const ReadReq_Options_StreamOptions* msg);
};

const ::event_store::client::StreamIdentifier&
ReadReq_Options_StreamOptions::_Internal::stream_identifier(const ReadReq_Options_StreamOptions* msg) {
  return *msg->stream_identifier_;
}
const ::event_store::client::Empty&
ReadReq_Options_StreamOptions::_Internal::start(const ReadReq_Options_StreamOptions* msg) {
  return *msg->revision_option_.start_;
}
const ::event_store::client::Empty&
ReadReq_Options_StreamOptions::_Internal::end(const ReadReq_Options_StreamOptions* msg) {
  return *msg->revision_option_.end_;
}
void ReadReq_Options_StreamOptions::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
void ReadReq_Options_StreamOptions::set_allocated_start(::event_store::client::Empty* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_revision_option();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    revision_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.StreamOptions.start)
}
void ReadReq_Options_StreamOptions::clear_start() {
  if (_internal_has_start()) {
    if (GetArena() == nullptr) {
      delete revision_option_.start_;
    }
    clear_has_revision_option();
  }
}
void ReadReq_Options_StreamOptions::set_allocated_end(::event_store::client::Empty* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_revision_option();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    revision_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.StreamOptions.end)
}
void ReadReq_Options_StreamOptions::clear_end() {
  if (_internal_has_end()) {
    if (GetArena() == nullptr) {
      delete revision_option_.end_;
    }
    clear_has_revision_option();
  }
}
ReadReq_Options_StreamOptions::ReadReq_Options_StreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options.StreamOptions)
}
ReadReq_Options_StreamOptions::ReadReq_Options_StreamOptions(const ReadReq_Options_StreamOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  clear_has_revision_option();
  switch (from.revision_option_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options.StreamOptions)
}

void ReadReq_Options_StreamOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Options_StreamOptions_streams_2eproto.base);
  stream_identifier_ = nullptr;
  clear_has_revision_option();
}

ReadReq_Options_StreamOptions::~ReadReq_Options_StreamOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options.StreamOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_StreamOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_identifier_;
  if (has_revision_option()) {
    clear_revision_option();
  }
}

void ReadReq_Options_StreamOptions::ArenaDtor(void* object) {
  ReadReq_Options_StreamOptions* _this = reinterpret_cast< ReadReq_Options_StreamOptions* >(object);
  (void)_this;
}
void ReadReq_Options_StreamOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_StreamOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_StreamOptions& ReadReq_Options_StreamOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_StreamOptions_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_StreamOptions::clear_revision_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadReq.Options.StreamOptions)
  switch (revision_option_case()) {
    case kRevision: {
      // No need to clear
      break;
    }
    case kStart: {
      if (GetArena() == nullptr) {
        delete revision_option_.start_;
      }
      break;
    }
    case kEnd: {
      if (GetArena() == nullptr) {
        delete revision_option_.end_;
      }
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REVISION_OPTION_NOT_SET;
}


void ReadReq_Options_StreamOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options.StreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  clear_revision_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_StreamOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_StreamOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options.StreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 revision = 2;
  if (_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_revision(), target);
  }

  // .event_store.client.Empty start = 3;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start(this), target, stream);
  }

  // .event_store.client.Empty end = 4;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options.StreamOptions)
  return target;
}

size_t ReadReq_Options_StreamOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options.StreamOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  switch (revision_option_case()) {
    // uint64 revision = 2;
    case kRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_revision());
      break;
    }
    // .event_store.client.Empty start = 3;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *revision_option_.start_);
      break;
    }
    // .event_store.client.Empty end = 4;
    case kEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *revision_option_.end_);
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_StreamOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options.StreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_StreamOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_StreamOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options.StreamOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options.StreamOptions)
    MergeFrom(*source);
  }
}

void ReadReq_Options_StreamOptions::MergeFrom(const ReadReq_Options_StreamOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options.StreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  switch (from.revision_option_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case REVISION_OPTION_NOT_SET: {
      break;
    }
  }
}

void ReadReq_Options_StreamOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options.StreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_StreamOptions::CopyFrom(const ReadReq_Options_StreamOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options.StreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_StreamOptions::IsInitialized() const {
  return true;
}

void ReadReq_Options_StreamOptions::InternalSwap(ReadReq_Options_StreamOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_identifier_, other->stream_identifier_);
  swap(revision_option_, other->revision_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_StreamOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options_AllOptions::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadReq_Options_AllOptions_default_instance_.position_ = const_cast< ::event_store::client::streams::ReadReq_Options_Position*>(
      ::event_store::client::streams::ReadReq_Options_Position::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_AllOptions_default_instance_.start_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_AllOptions_default_instance_.end_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ReadReq_Options_AllOptions::_Internal {
 public:
  static const ::event_store::client::streams::ReadReq_Options_Position& position(const ReadReq_Options_AllOptions* msg);
  static const ::event_store::client::Empty& start(const ReadReq_Options_AllOptions* msg);
  static const ::event_store::client::Empty& end(const ReadReq_Options_AllOptions* msg);
};

const ::event_store::client::streams::ReadReq_Options_Position&
ReadReq_Options_AllOptions::_Internal::position(const ReadReq_Options_AllOptions* msg) {
  return *msg->all_option_.position_;
}
const ::event_store::client::Empty&
ReadReq_Options_AllOptions::_Internal::start(const ReadReq_Options_AllOptions* msg) {
  return *msg->all_option_.start_;
}
const ::event_store::client::Empty&
ReadReq_Options_AllOptions::_Internal::end(const ReadReq_Options_AllOptions* msg) {
  return *msg->all_option_.end_;
}
void ReadReq_Options_AllOptions::set_allocated_position(::event_store::client::streams::ReadReq_Options_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    all_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.AllOptions.position)
}
void ReadReq_Options_AllOptions::set_allocated_start(::event_store::client::Empty* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
    all_option_.start_ = start;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.AllOptions.start)
}
void ReadReq_Options_AllOptions::clear_start() {
  if (_internal_has_start()) {
    if (GetArena() == nullptr) {
      delete all_option_.start_;
    }
    clear_has_all_option();
  }
}
void ReadReq_Options_AllOptions::set_allocated_end(::event_store::client::Empty* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_all_option();
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
    all_option_.end_ = end;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.AllOptions.end)
}
void ReadReq_Options_AllOptions::clear_end() {
  if (_internal_has_end()) {
    if (GetArena() == nullptr) {
      delete all_option_.end_;
    }
    clear_has_all_option();
  }
}
ReadReq_Options_AllOptions::ReadReq_Options_AllOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options.AllOptions)
}
ReadReq_Options_AllOptions::ReadReq_Options_AllOptions(const ReadReq_Options_AllOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_all_option();
  switch (from.all_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::streams::ReadReq_Options_Position::MergeFrom(from._internal_position());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options.AllOptions)
}

void ReadReq_Options_AllOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Options_AllOptions_streams_2eproto.base);
  clear_has_all_option();
}

ReadReq_Options_AllOptions::~ReadReq_Options_AllOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options.AllOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_AllOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_all_option()) {
    clear_all_option();
  }
}

void ReadReq_Options_AllOptions::ArenaDtor(void* object) {
  ReadReq_Options_AllOptions* _this = reinterpret_cast< ReadReq_Options_AllOptions* >(object);
  (void)_this;
}
void ReadReq_Options_AllOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_AllOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_AllOptions& ReadReq_Options_AllOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_AllOptions_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_AllOptions::clear_all_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadReq.Options.AllOptions)
  switch (all_option_case()) {
    case kPosition: {
      if (GetArena() == nullptr) {
        delete all_option_.position_;
      }
      break;
    }
    case kStart: {
      if (GetArena() == nullptr) {
        delete all_option_.start_;
      }
      break;
    }
    case kEnd: {
      if (GetArena() == nullptr) {
        delete all_option_.end_;
      }
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ALL_OPTION_NOT_SET;
}


void ReadReq_Options_AllOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options.AllOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_all_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_AllOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.ReadReq.Options.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_AllOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options.AllOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.ReadReq.Options.Position position = 1;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .event_store.client.Empty start = 2;
  if (_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .event_store.client.Empty end = 3;
  if (_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options.AllOptions)
  return target;
}

size_t ReadReq_Options_AllOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options.AllOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (all_option_case()) {
    // .event_store.client.streams.ReadReq.Options.Position position = 1;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.position_);
      break;
    }
    // .event_store.client.Empty start = 2;
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.start_);
      break;
    }
    // .event_store.client.Empty end = 3;
    case kEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_option_.end_);
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_AllOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options.AllOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_AllOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_AllOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options.AllOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options.AllOptions)
    MergeFrom(*source);
  }
}

void ReadReq_Options_AllOptions::MergeFrom(const ReadReq_Options_AllOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options.AllOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.all_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::streams::ReadReq_Options_Position::MergeFrom(from._internal_position());
      break;
    }
    case kStart: {
      _internal_mutable_start()->::event_store::client::Empty::MergeFrom(from._internal_start());
      break;
    }
    case kEnd: {
      _internal_mutable_end()->::event_store::client::Empty::MergeFrom(from._internal_end());
      break;
    }
    case ALL_OPTION_NOT_SET: {
      break;
    }
  }
}

void ReadReq_Options_AllOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options.AllOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_AllOptions::CopyFrom(const ReadReq_Options_AllOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options.AllOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_AllOptions::IsInitialized() const {
  return true;
}

void ReadReq_Options_AllOptions::InternalSwap(ReadReq_Options_AllOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(all_option_, other->all_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_AllOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options_SubscriptionOptions::InitAsDefaultInstance() {
}
class ReadReq_Options_SubscriptionOptions::_Internal {
 public:
};

ReadReq_Options_SubscriptionOptions::ReadReq_Options_SubscriptionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
}
ReadReq_Options_SubscriptionOptions::ReadReq_Options_SubscriptionOptions(const ReadReq_Options_SubscriptionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
}

void ReadReq_Options_SubscriptionOptions::SharedCtor() {
}

ReadReq_Options_SubscriptionOptions::~ReadReq_Options_SubscriptionOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_SubscriptionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadReq_Options_SubscriptionOptions::ArenaDtor(void* object) {
  ReadReq_Options_SubscriptionOptions* _this = reinterpret_cast< ReadReq_Options_SubscriptionOptions* >(object);
  (void)_this;
}
void ReadReq_Options_SubscriptionOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_SubscriptionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_SubscriptionOptions& ReadReq_Options_SubscriptionOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_SubscriptionOptions_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_SubscriptionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_SubscriptionOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_SubscriptionOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  return target;
}

size_t ReadReq_Options_SubscriptionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_SubscriptionOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_SubscriptionOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_SubscriptionOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
    MergeFrom(*source);
  }
}

void ReadReq_Options_SubscriptionOptions::MergeFrom(const ReadReq_Options_SubscriptionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReadReq_Options_SubscriptionOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_SubscriptionOptions::CopyFrom(const ReadReq_Options_SubscriptionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options.SubscriptionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_SubscriptionOptions::IsInitialized() const {
  return true;
}

void ReadReq_Options_SubscriptionOptions::InternalSwap(ReadReq_Options_SubscriptionOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_SubscriptionOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options_Position::InitAsDefaultInstance() {
}
class ReadReq_Options_Position::_Internal {
 public:
};

ReadReq_Options_Position::ReadReq_Options_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options.Position)
}
ReadReq_Options_Position::ReadReq_Options_Position(const ReadReq_Options_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_position_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options.Position)
}

void ReadReq_Options_Position::SharedCtor() {
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
}

ReadReq_Options_Position::~ReadReq_Options_Position() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadReq_Options_Position::ArenaDtor(void* object) {
  ReadReq_Options_Position* _this = reinterpret_cast< ReadReq_Options_Position* >(object);
  (void)_this;
}
void ReadReq_Options_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_Position& ReadReq_Options_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_Position_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_commit_position(), target);
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prepare_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options.Position)
  return target;
}

size_t ReadReq_Options_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options.Position)
    MergeFrom(*source);
  }
}

void ReadReq_Options_Position::MergeFrom(const ReadReq_Options_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
}

void ReadReq_Options_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_Position::CopyFrom(const ReadReq_Options_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_Position::IsInitialized() const {
  return true;
}

void ReadReq_Options_Position::InternalSwap(ReadReq_Options_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadReq_Options_Position, prepare_position_)
      + sizeof(ReadReq_Options_Position::prepare_position_)
      - PROTOBUF_FIELD_OFFSET(ReadReq_Options_Position, commit_position_)>(
          reinterpret_cast<char*>(&commit_position_),
          reinterpret_cast<char*>(&other->commit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options_FilterOptions_Expression::InitAsDefaultInstance() {
}
class ReadReq_Options_FilterOptions_Expression::_Internal {
 public:
};

ReadReq_Options_FilterOptions_Expression::ReadReq_Options_FilterOptions_Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prefix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
}
ReadReq_Options_FilterOptions_Expression::ReadReq_Options_FilterOptions_Expression(const ReadReq_Options_FilterOptions_Expression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prefix_(from.prefix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regex().empty()) {
    regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_regex(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
}

void ReadReq_Options_FilterOptions_Expression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Options_FilterOptions_Expression_streams_2eproto.base);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadReq_Options_FilterOptions_Expression::~ReadReq_Options_FilterOptions_Expression() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_FilterOptions_Expression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadReq_Options_FilterOptions_Expression::ArenaDtor(void* object) {
  ReadReq_Options_FilterOptions_Expression* _this = reinterpret_cast< ReadReq_Options_FilterOptions_Expression* >(object);
  (void)_this;
}
void ReadReq_Options_FilterOptions_Expression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_FilterOptions_Expression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_FilterOptions_Expression& ReadReq_Options_FilterOptions_Expression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_FilterOptions_Expression_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_FilterOptions_Expression::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.Clear();
  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_FilterOptions_Expression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string regex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prefix();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_FilterOptions_Expression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string regex = 1;
  if (this->regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.streams.ReadReq.Options.FilterOptions.Expression.regex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_regex(), target);
  }

  // repeated string prefix = 2;
  for (int i = 0, n = this->_internal_prefix_size(); i < n; i++) {
    const auto& s = this->_internal_prefix(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.streams.ReadReq.Options.FilterOptions.Expression.prefix");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  return target;
}

size_t ReadReq_Options_FilterOptions_Expression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prefix = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prefix_.size());
  for (int i = 0, n = prefix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prefix_.Get(i));
  }

  // string regex = 1;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_FilterOptions_Expression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_FilterOptions_Expression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_FilterOptions_Expression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
    MergeFrom(*source);
  }
}

void ReadReq_Options_FilterOptions_Expression::MergeFrom(const ReadReq_Options_FilterOptions_Expression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prefix_.MergeFrom(from.prefix_);
  if (from.regex().size() > 0) {
    _internal_set_regex(from._internal_regex());
  }
}

void ReadReq_Options_FilterOptions_Expression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_FilterOptions_Expression::CopyFrom(const ReadReq_Options_FilterOptions_Expression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options.FilterOptions.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_FilterOptions_Expression::IsInitialized() const {
  return true;
}

void ReadReq_Options_FilterOptions_Expression::InternalSwap(ReadReq_Options_FilterOptions_Expression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prefix_.InternalSwap(&other->prefix_);
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_FilterOptions_Expression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options_FilterOptions::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadReq_Options_FilterOptions_default_instance_.stream_identifier_ = const_cast< ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression*>(
      ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_FilterOptions_default_instance_.event_type_ = const_cast< ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression*>(
      ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_FilterOptions_default_instance_.max_ = 0u;
  ::event_store::client::streams::_ReadReq_Options_FilterOptions_default_instance_.count_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ReadReq_Options_FilterOptions::_Internal {
 public:
  static const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& stream_identifier(const ReadReq_Options_FilterOptions* msg);
  static const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression& event_type(const ReadReq_Options_FilterOptions* msg);
  static const ::event_store::client::Empty& count(const ReadReq_Options_FilterOptions* msg);
};

const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression&
ReadReq_Options_FilterOptions::_Internal::stream_identifier(const ReadReq_Options_FilterOptions* msg) {
  return *msg->filter_.stream_identifier_;
}
const ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression&
ReadReq_Options_FilterOptions::_Internal::event_type(const ReadReq_Options_FilterOptions* msg) {
  return *msg->filter_.event_type_;
}
const ::event_store::client::Empty&
ReadReq_Options_FilterOptions::_Internal::count(const ReadReq_Options_FilterOptions* msg) {
  return *msg->window_.count_;
}
void ReadReq_Options_FilterOptions::set_allocated_stream_identifier(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_filter();
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_identifier);
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    set_has_stream_identifier();
    filter_.stream_identifier_ = stream_identifier;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.FilterOptions.stream_identifier)
}
void ReadReq_Options_FilterOptions::set_allocated_event_type(::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* event_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_filter();
  if (event_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event_type);
    if (message_arena != submessage_arena) {
      event_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_type, submessage_arena);
    }
    set_has_event_type();
    filter_.event_type_ = event_type;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.FilterOptions.event_type)
}
void ReadReq_Options_FilterOptions::set_allocated_count(::event_store::client::Empty* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_window();
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(count)->GetArena();
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    set_has_count();
    window_.count_ = count;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.FilterOptions.count)
}
void ReadReq_Options_FilterOptions::clear_count() {
  if (_internal_has_count()) {
    if (GetArena() == nullptr) {
      delete window_.count_;
    }
    clear_has_window();
  }
}
ReadReq_Options_FilterOptions::ReadReq_Options_FilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options.FilterOptions)
}
ReadReq_Options_FilterOptions::ReadReq_Options_FilterOptions(const ReadReq_Options_FilterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkpointintervalmultiplier_ = from.checkpointintervalmultiplier_;
  clear_has_filter();
  switch (from.filter_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::streams::ReadReq_Options_FilterOptions_Expression::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kEventType: {
      _internal_mutable_event_type()->::event_store::client::streams::ReadReq_Options_FilterOptions_Expression::MergeFrom(from._internal_event_type());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  clear_has_window();
  switch (from.window_case()) {
    case kMax: {
      _internal_set_max(from._internal_max());
      break;
    }
    case kCount: {
      _internal_mutable_count()->::event_store::client::Empty::MergeFrom(from._internal_count());
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options.FilterOptions)
}

void ReadReq_Options_FilterOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Options_FilterOptions_streams_2eproto.base);
  checkpointintervalmultiplier_ = 0u;
  clear_has_filter();
  clear_has_window();
}

ReadReq_Options_FilterOptions::~ReadReq_Options_FilterOptions() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options.FilterOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_FilterOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_filter()) {
    clear_filter();
  }
  if (has_window()) {
    clear_window();
  }
}

void ReadReq_Options_FilterOptions::ArenaDtor(void* object) {
  ReadReq_Options_FilterOptions* _this = reinterpret_cast< ReadReq_Options_FilterOptions* >(object);
  (void)_this;
}
void ReadReq_Options_FilterOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_FilterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_FilterOptions& ReadReq_Options_FilterOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_FilterOptions_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_FilterOptions::clear_filter() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  switch (filter_case()) {
    case kStreamIdentifier: {
      if (GetArena() == nullptr) {
        delete filter_.stream_identifier_;
      }
      break;
    }
    case kEventType: {
      if (GetArena() == nullptr) {
        delete filter_.event_type_;
      }
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_NOT_SET;
}

void ReadReq_Options_FilterOptions::clear_window() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  switch (window_case()) {
    case kMax: {
      // No need to clear
      break;
    }
    case kCount: {
      if (GetArena() == nullptr) {
        delete window_.count_;
      }
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = WINDOW_NOT_SET;
}


void ReadReq_Options_FilterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpointintervalmultiplier_ = 0u;
  clear_filter();
  clear_window();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_FilterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.ReadReq.Options.FilterOptions.Expression stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadReq.Options.FilterOptions.Expression event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 checkpointIntervalMultiplier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          checkpointintervalmultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_FilterOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.ReadReq.Options.FilterOptions.Expression stream_identifier = 1;
  if (_internal_has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // .event_store.client.streams.ReadReq.Options.FilterOptions.Expression event_type = 2;
  if (_internal_has_event_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::event_type(this), target, stream);
  }

  // uint32 max = 3;
  if (_internal_has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max(), target);
  }

  // .event_store.client.Empty count = 4;
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::count(this), target, stream);
  }

  // uint32 checkpointIntervalMultiplier = 5;
  if (this->checkpointintervalmultiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_checkpointintervalmultiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options.FilterOptions)
  return target;
}

size_t ReadReq_Options_FilterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 checkpointIntervalMultiplier = 5;
  if (this->checkpointintervalmultiplier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_checkpointintervalmultiplier());
  }

  switch (filter_case()) {
    // .event_store.client.streams.ReadReq.Options.FilterOptions.Expression stream_identifier = 1;
    case kStreamIdentifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_.stream_identifier_);
      break;
    }
    // .event_store.client.streams.ReadReq.Options.FilterOptions.Expression event_type = 2;
    case kEventType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_.event_type_);
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  switch (window_case()) {
    // uint32 max = 3;
    case kMax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max());
      break;
    }
    // .event_store.client.Empty count = 4;
    case kCount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_.count_);
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_FilterOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_FilterOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_FilterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options.FilterOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options.FilterOptions)
    MergeFrom(*source);
  }
}

void ReadReq_Options_FilterOptions::MergeFrom(const ReadReq_Options_FilterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checkpointintervalmultiplier() != 0) {
    _internal_set_checkpointintervalmultiplier(from._internal_checkpointintervalmultiplier());
  }
  switch (from.filter_case()) {
    case kStreamIdentifier: {
      _internal_mutable_stream_identifier()->::event_store::client::streams::ReadReq_Options_FilterOptions_Expression::MergeFrom(from._internal_stream_identifier());
      break;
    }
    case kEventType: {
      _internal_mutable_event_type()->::event_store::client::streams::ReadReq_Options_FilterOptions_Expression::MergeFrom(from._internal_event_type());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  switch (from.window_case()) {
    case kMax: {
      _internal_set_max(from._internal_max());
      break;
    }
    case kCount: {
      _internal_mutable_count()->::event_store::client::Empty::MergeFrom(from._internal_count());
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
}

void ReadReq_Options_FilterOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_FilterOptions::CopyFrom(const ReadReq_Options_FilterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options.FilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_FilterOptions::IsInitialized() const {
  return true;
}

void ReadReq_Options_FilterOptions::InternalSwap(ReadReq_Options_FilterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(checkpointintervalmultiplier_, other->checkpointintervalmultiplier_);
  swap(filter_, other->filter_);
  swap(window_, other->window_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_FilterOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options_UUIDOption::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadReq_Options_UUIDOption_default_instance_.structured_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_UUIDOption_default_instance_.string_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ReadReq_Options_UUIDOption::_Internal {
 public:
  static const ::event_store::client::Empty& structured(const ReadReq_Options_UUIDOption* msg);
  static const ::event_store::client::Empty& string(const ReadReq_Options_UUIDOption* msg);
};

const ::event_store::client::Empty&
ReadReq_Options_UUIDOption::_Internal::structured(const ReadReq_Options_UUIDOption* msg) {
  return *msg->content_.structured_;
}
const ::event_store::client::Empty&
ReadReq_Options_UUIDOption::_Internal::string(const ReadReq_Options_UUIDOption* msg) {
  return *msg->content_.string_;
}
void ReadReq_Options_UUIDOption::set_allocated_structured(::event_store::client::Empty* structured) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (structured) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structured)->GetArena();
    if (message_arena != submessage_arena) {
      structured = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structured, submessage_arena);
    }
    set_has_structured();
    content_.structured_ = structured;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.UUIDOption.structured)
}
void ReadReq_Options_UUIDOption::clear_structured() {
  if (_internal_has_structured()) {
    if (GetArena() == nullptr) {
      delete content_.structured_;
    }
    clear_has_content();
  }
}
void ReadReq_Options_UUIDOption::set_allocated_string(::event_store::client::Empty* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string)->GetArena();
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    content_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.UUIDOption.string)
}
void ReadReq_Options_UUIDOption::clear_string() {
  if (_internal_has_string()) {
    if (GetArena() == nullptr) {
      delete content_.string_;
    }
    clear_has_content();
  }
}
ReadReq_Options_UUIDOption::ReadReq_Options_UUIDOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options.UUIDOption)
}
ReadReq_Options_UUIDOption::ReadReq_Options_UUIDOption(const ReadReq_Options_UUIDOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kStructured: {
      _internal_mutable_structured()->::event_store::client::Empty::MergeFrom(from._internal_structured());
      break;
    }
    case kString: {
      _internal_mutable_string()->::event_store::client::Empty::MergeFrom(from._internal_string());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options.UUIDOption)
}

void ReadReq_Options_UUIDOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Options_UUIDOption_streams_2eproto.base);
  clear_has_content();
}

ReadReq_Options_UUIDOption::~ReadReq_Options_UUIDOption() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options.UUIDOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_UUIDOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void ReadReq_Options_UUIDOption::ArenaDtor(void* object) {
  ReadReq_Options_UUIDOption* _this = reinterpret_cast< ReadReq_Options_UUIDOption* >(object);
  (void)_this;
}
void ReadReq_Options_UUIDOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_UUIDOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_UUIDOption& ReadReq_Options_UUIDOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_UUIDOption_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_UUIDOption::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadReq.Options.UUIDOption)
  switch (content_case()) {
    case kStructured: {
      if (GetArena() == nullptr) {
        delete content_.structured_;
      }
      break;
    }
    case kString: {
      if (GetArena() == nullptr) {
        delete content_.string_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ReadReq_Options_UUIDOption::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options.UUIDOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_UUIDOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.Empty structured = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_structured(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_UUIDOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options.UUIDOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.Empty structured = 1;
  if (_internal_has_structured()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::structured(this), target, stream);
  }

  // .event_store.client.Empty string = 2;
  if (_internal_has_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::string(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options.UUIDOption)
  return target;
}

size_t ReadReq_Options_UUIDOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options.UUIDOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .event_store.client.Empty structured = 1;
    case kStructured: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.structured_);
      break;
    }
    // .event_store.client.Empty string = 2;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.string_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_UUIDOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options.UUIDOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_UUIDOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_UUIDOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options.UUIDOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options.UUIDOption)
    MergeFrom(*source);
  }
}

void ReadReq_Options_UUIDOption::MergeFrom(const ReadReq_Options_UUIDOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options.UUIDOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kStructured: {
      _internal_mutable_structured()->::event_store::client::Empty::MergeFrom(from._internal_structured());
      break;
    }
    case kString: {
      _internal_mutable_string()->::event_store::client::Empty::MergeFrom(from._internal_string());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void ReadReq_Options_UUIDOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options.UUIDOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_UUIDOption::CopyFrom(const ReadReq_Options_UUIDOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options.UUIDOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_UUIDOption::IsInitialized() const {
  return true;
}

void ReadReq_Options_UUIDOption::InternalSwap(ReadReq_Options_UUIDOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_UUIDOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options_ControlOption::InitAsDefaultInstance() {
}
class ReadReq_Options_ControlOption::_Internal {
 public:
};

ReadReq_Options_ControlOption::ReadReq_Options_ControlOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options.ControlOption)
}
ReadReq_Options_ControlOption::ReadReq_Options_ControlOption(const ReadReq_Options_ControlOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compatibility_ = from.compatibility_;
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options.ControlOption)
}

void ReadReq_Options_ControlOption::SharedCtor() {
  compatibility_ = 0u;
}

ReadReq_Options_ControlOption::~ReadReq_Options_ControlOption() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options.ControlOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options_ControlOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadReq_Options_ControlOption::ArenaDtor(void* object) {
  ReadReq_Options_ControlOption* _this = reinterpret_cast< ReadReq_Options_ControlOption* >(object);
  (void)_this;
}
void ReadReq_Options_ControlOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options_ControlOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options_ControlOption& ReadReq_Options_ControlOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_ControlOption_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options_ControlOption::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options.ControlOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compatibility_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options_ControlOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 compatibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          compatibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options_ControlOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options.ControlOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 compatibility = 1;
  if (this->compatibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_compatibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options.ControlOption)
  return target;
}

size_t ReadReq_Options_ControlOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options.ControlOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 compatibility = 1;
  if (this->compatibility() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_compatibility());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options_ControlOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options.ControlOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options_ControlOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options_ControlOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options.ControlOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options.ControlOption)
    MergeFrom(*source);
  }
}

void ReadReq_Options_ControlOption::MergeFrom(const ReadReq_Options_ControlOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options.ControlOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compatibility() != 0) {
    _internal_set_compatibility(from._internal_compatibility());
  }
}

void ReadReq_Options_ControlOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options.ControlOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options_ControlOption::CopyFrom(const ReadReq_Options_ControlOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options.ControlOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options_ControlOption::IsInitialized() const {
  return true;
}

void ReadReq_Options_ControlOption::InternalSwap(ReadReq_Options_ControlOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(compatibility_, other->compatibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options_ControlOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq_Options::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadReq_Options_default_instance_.stream_ = const_cast< ::event_store::client::streams::ReadReq_Options_StreamOptions*>(
      ::event_store::client::streams::ReadReq_Options_StreamOptions::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_default_instance_.all_ = const_cast< ::event_store::client::streams::ReadReq_Options_AllOptions*>(
      ::event_store::client::streams::ReadReq_Options_AllOptions::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_default_instance_.count_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_ReadReq_Options_default_instance_.subscription_ = const_cast< ::event_store::client::streams::ReadReq_Options_SubscriptionOptions*>(
      ::event_store::client::streams::ReadReq_Options_SubscriptionOptions::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_default_instance_.filter_ = const_cast< ::event_store::client::streams::ReadReq_Options_FilterOptions*>(
      ::event_store::client::streams::ReadReq_Options_FilterOptions::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_default_instance_.no_filter_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_default_instance_._instance.get_mutable()->uuid_option_ = const_cast< ::event_store::client::streams::ReadReq_Options_UUIDOption*>(
      ::event_store::client::streams::ReadReq_Options_UUIDOption::internal_default_instance());
  ::event_store::client::streams::_ReadReq_Options_default_instance_._instance.get_mutable()->control_option_ = const_cast< ::event_store::client::streams::ReadReq_Options_ControlOption*>(
      ::event_store::client::streams::ReadReq_Options_ControlOption::internal_default_instance());
}
class ReadReq_Options::_Internal {
 public:
  static const ::event_store::client::streams::ReadReq_Options_StreamOptions& stream(const ReadReq_Options* msg);
  static const ::event_store::client::streams::ReadReq_Options_AllOptions& all(const ReadReq_Options* msg);
  static const ::event_store::client::streams::ReadReq_Options_SubscriptionOptions& subscription(const ReadReq_Options* msg);
  static const ::event_store::client::streams::ReadReq_Options_FilterOptions& filter(const ReadReq_Options* msg);
  static const ::event_store::client::Empty& no_filter(const ReadReq_Options* msg);
  static const ::event_store::client::streams::ReadReq_Options_UUIDOption& uuid_option(const ReadReq_Options* msg);
  static const ::event_store::client::streams::ReadReq_Options_ControlOption& control_option(const ReadReq_Options* msg);
};

const ::event_store::client::streams::ReadReq_Options_StreamOptions&
ReadReq_Options::_Internal::stream(const ReadReq_Options* msg) {
  return *msg->stream_option_.stream_;
}
const ::event_store::client::streams::ReadReq_Options_AllOptions&
ReadReq_Options::_Internal::all(const ReadReq_Options* msg) {
  return *msg->stream_option_.all_;
}
const ::event_store::client::streams::ReadReq_Options_SubscriptionOptions&
ReadReq_Options::_Internal::subscription(const ReadReq_Options* msg) {
  return *msg->count_option_.subscription_;
}
const ::event_store::client::streams::ReadReq_Options_FilterOptions&
ReadReq_Options::_Internal::filter(const ReadReq_Options* msg) {
  return *msg->filter_option_.filter_;
}
const ::event_store::client::Empty&
ReadReq_Options::_Internal::no_filter(const ReadReq_Options* msg) {
  return *msg->filter_option_.no_filter_;
}
const ::event_store::client::streams::ReadReq_Options_UUIDOption&
ReadReq_Options::_Internal::uuid_option(const ReadReq_Options* msg) {
  return *msg->uuid_option_;
}
const ::event_store::client::streams::ReadReq_Options_ControlOption&
ReadReq_Options::_Internal::control_option(const ReadReq_Options* msg) {
  return *msg->control_option_;
}
void ReadReq_Options::set_allocated_stream(::event_store::client::streams::ReadReq_Options_StreamOptions* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
    stream_option_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.stream)
}
void ReadReq_Options::set_allocated_all(::event_store::client::streams::ReadReq_Options_AllOptions* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_stream_option();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(all);
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    stream_option_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.all)
}
void ReadReq_Options::set_allocated_subscription(::event_store::client::streams::ReadReq_Options_SubscriptionOptions* subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_count_option();
  if (subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscription);
    if (message_arena != submessage_arena) {
      subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    set_has_subscription();
    count_option_.subscription_ = subscription;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.subscription)
}
void ReadReq_Options::set_allocated_filter(::event_store::client::streams::ReadReq_Options_FilterOptions* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_filter_option();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    filter_option_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.filter)
}
void ReadReq_Options::set_allocated_no_filter(::event_store::client::Empty* no_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_filter_option();
  if (no_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_filter)->GetArena();
    if (message_arena != submessage_arena) {
      no_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_filter, submessage_arena);
    }
    set_has_no_filter();
    filter_option_.no_filter_ = no_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadReq.Options.no_filter)
}
void ReadReq_Options::clear_no_filter() {
  if (_internal_has_no_filter()) {
    if (GetArena() == nullptr) {
      delete filter_option_.no_filter_;
    }
    clear_has_filter_option();
  }
}
ReadReq_Options::ReadReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq.Options)
}
ReadReq_Options::ReadReq_Options(const ReadReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid_option()) {
    uuid_option_ = new ::event_store::client::streams::ReadReq_Options_UUIDOption(*from.uuid_option_);
  } else {
    uuid_option_ = nullptr;
  }
  if (from._internal_has_control_option()) {
    control_option_ = new ::event_store::client::streams::ReadReq_Options_ControlOption(*from.control_option_);
  } else {
    control_option_ = nullptr;
  }
  ::memcpy(&read_direction_, &from.read_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolve_links_) -
    reinterpret_cast<char*>(&read_direction_)) + sizeof(resolve_links_));
  clear_has_stream_option();
  switch (from.stream_option_case()) {
    case kStream: {
      _internal_mutable_stream()->::event_store::client::streams::ReadReq_Options_StreamOptions::MergeFrom(from._internal_stream());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::streams::ReadReq_Options_AllOptions::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  clear_has_count_option();
  switch (from.count_option_case()) {
    case kCount: {
      _internal_set_count(from._internal_count());
      break;
    }
    case kSubscription: {
      _internal_mutable_subscription()->::event_store::client::streams::ReadReq_Options_SubscriptionOptions::MergeFrom(from._internal_subscription());
      break;
    }
    case COUNT_OPTION_NOT_SET: {
      break;
    }
  }
  clear_has_filter_option();
  switch (from.filter_option_case()) {
    case kFilter: {
      _internal_mutable_filter()->::event_store::client::streams::ReadReq_Options_FilterOptions::MergeFrom(from._internal_filter());
      break;
    }
    case kNoFilter: {
      _internal_mutable_no_filter()->::event_store::client::Empty::MergeFrom(from._internal_no_filter());
      break;
    }
    case FILTER_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq.Options)
}

void ReadReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_Options_streams_2eproto.base);
  ::memset(&uuid_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolve_links_) -
      reinterpret_cast<char*>(&uuid_option_)) + sizeof(resolve_links_));
  clear_has_stream_option();
  clear_has_count_option();
  clear_has_filter_option();
}

ReadReq_Options::~ReadReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_option_;
  if (this != internal_default_instance()) delete control_option_;
  if (has_stream_option()) {
    clear_stream_option();
  }
  if (has_count_option()) {
    clear_count_option();
  }
  if (has_filter_option()) {
    clear_filter_option();
  }
}

void ReadReq_Options::ArenaDtor(void* object) {
  ReadReq_Options* _this = reinterpret_cast< ReadReq_Options* >(object);
  (void)_this;
}
void ReadReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq_Options& ReadReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_Options_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq_Options::clear_stream_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadReq.Options)
  switch (stream_option_case()) {
    case kStream: {
      if (GetArena() == nullptr) {
        delete stream_option_.stream_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete stream_option_.all_;
      }
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAM_OPTION_NOT_SET;
}

void ReadReq_Options::clear_count_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadReq.Options)
  switch (count_option_case()) {
    case kCount: {
      // No need to clear
      break;
    }
    case kSubscription: {
      if (GetArena() == nullptr) {
        delete count_option_.subscription_;
      }
      break;
    }
    case COUNT_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = COUNT_OPTION_NOT_SET;
}

void ReadReq_Options::clear_filter_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadReq.Options)
  switch (filter_option_case()) {
    case kFilter: {
      if (GetArena() == nullptr) {
        delete filter_option_.filter_;
      }
      break;
    }
    case kNoFilter: {
      if (GetArena() == nullptr) {
        delete filter_option_.no_filter_;
      }
      break;
    }
    case FILTER_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = FILTER_OPTION_NOT_SET;
}


void ReadReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && uuid_option_ != nullptr) {
    delete uuid_option_;
  }
  uuid_option_ = nullptr;
  if (GetArena() == nullptr && control_option_ != nullptr) {
    delete control_option_;
  }
  control_option_ = nullptr;
  ::memset(&read_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolve_links_) -
      reinterpret_cast<char*>(&read_direction_)) + sizeof(resolve_links_));
  clear_stream_option();
  clear_count_option();
  clear_filter_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.ReadReq.Options.StreamOptions stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadReq.Options.AllOptions all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadReq.Options.ReadDirection read_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_read_direction(static_cast<::event_store::client::streams::ReadReq_Options_ReadDirection>(val));
        } else goto handle_unusual;
        continue;
      // bool resolve_links = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          resolve_links_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadReq.Options.SubscriptionOptions subscription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadReq.Options.FilterOptions filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_filter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadReq.Options.UUIDOption uuid_option = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid_option(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadReq.Options.ControlOption control_option = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_option(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.ReadReq.Options.StreamOptions stream = 1;
  if (_internal_has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream(this), target, stream);
  }

  // .event_store.client.streams.ReadReq.Options.AllOptions all = 2;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::all(this), target, stream);
  }

  // .event_store.client.streams.ReadReq.Options.ReadDirection read_direction = 3;
  if (this->read_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_read_direction(), target);
  }

  // bool resolve_links = 4;
  if (this->resolve_links() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_resolve_links(), target);
  }

  // uint64 count = 5;
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_count(), target);
  }

  // .event_store.client.streams.ReadReq.Options.SubscriptionOptions subscription = 6;
  if (_internal_has_subscription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::subscription(this), target, stream);
  }

  // .event_store.client.streams.ReadReq.Options.FilterOptions filter = 7;
  if (_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::filter(this), target, stream);
  }

  // .event_store.client.Empty no_filter = 8;
  if (_internal_has_no_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::no_filter(this), target, stream);
  }

  // .event_store.client.streams.ReadReq.Options.UUIDOption uuid_option = 9;
  if (this->has_uuid_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::uuid_option(this), target, stream);
  }

  // .event_store.client.streams.ReadReq.Options.ControlOption control_option = 10;
  if (this->has_control_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::control_option(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq.Options)
  return target;
}

size_t ReadReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.streams.ReadReq.Options.UUIDOption uuid_option = 9;
  if (this->has_uuid_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_option_);
  }

  // .event_store.client.streams.ReadReq.Options.ControlOption control_option = 10;
  if (this->has_control_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_option_);
  }

  // .event_store.client.streams.ReadReq.Options.ReadDirection read_direction = 3;
  if (this->read_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_read_direction());
  }

  // bool resolve_links = 4;
  if (this->resolve_links() != 0) {
    total_size += 1 + 1;
  }

  switch (stream_option_case()) {
    // .event_store.client.streams.ReadReq.Options.StreamOptions stream = 1;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.stream_);
      break;
    }
    // .event_store.client.streams.ReadReq.Options.AllOptions all = 2;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stream_option_.all_);
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  switch (count_option_case()) {
    // uint64 count = 5;
    case kCount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_count());
      break;
    }
    // .event_store.client.streams.ReadReq.Options.SubscriptionOptions subscription = 6;
    case kSubscription: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *count_option_.subscription_);
      break;
    }
    case COUNT_OPTION_NOT_SET: {
      break;
    }
  }
  switch (filter_option_case()) {
    // .event_store.client.streams.ReadReq.Options.FilterOptions filter = 7;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_option_.filter_);
      break;
    }
    // .event_store.client.Empty no_filter = 8;
    case kNoFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_option_.no_filter_);
      break;
    }
    case FILTER_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq.Options)
    MergeFrom(*source);
  }
}

void ReadReq_Options::MergeFrom(const ReadReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uuid_option()) {
    _internal_mutable_uuid_option()->::event_store::client::streams::ReadReq_Options_UUIDOption::MergeFrom(from._internal_uuid_option());
  }
  if (from.has_control_option()) {
    _internal_mutable_control_option()->::event_store::client::streams::ReadReq_Options_ControlOption::MergeFrom(from._internal_control_option());
  }
  if (from.read_direction() != 0) {
    _internal_set_read_direction(from._internal_read_direction());
  }
  if (from.resolve_links() != 0) {
    _internal_set_resolve_links(from._internal_resolve_links());
  }
  switch (from.stream_option_case()) {
    case kStream: {
      _internal_mutable_stream()->::event_store::client::streams::ReadReq_Options_StreamOptions::MergeFrom(from._internal_stream());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::event_store::client::streams::ReadReq_Options_AllOptions::MergeFrom(from._internal_all());
      break;
    }
    case STREAM_OPTION_NOT_SET: {
      break;
    }
  }
  switch (from.count_option_case()) {
    case kCount: {
      _internal_set_count(from._internal_count());
      break;
    }
    case kSubscription: {
      _internal_mutable_subscription()->::event_store::client::streams::ReadReq_Options_SubscriptionOptions::MergeFrom(from._internal_subscription());
      break;
    }
    case COUNT_OPTION_NOT_SET: {
      break;
    }
  }
  switch (from.filter_option_case()) {
    case kFilter: {
      _internal_mutable_filter()->::event_store::client::streams::ReadReq_Options_FilterOptions::MergeFrom(from._internal_filter());
      break;
    }
    case kNoFilter: {
      _internal_mutable_no_filter()->::event_store::client::Empty::MergeFrom(from._internal_no_filter());
      break;
    }
    case FILTER_OPTION_NOT_SET: {
      break;
    }
  }
}

void ReadReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq_Options::CopyFrom(const ReadReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq_Options::IsInitialized() const {
  return true;
}

void ReadReq_Options::InternalSwap(ReadReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadReq_Options, resolve_links_)
      + sizeof(ReadReq_Options::resolve_links_)
      - PROTOBUF_FIELD_OFFSET(ReadReq_Options, uuid_option_)>(
          reinterpret_cast<char*>(&uuid_option_),
          reinterpret_cast<char*>(&other->uuid_option_));
  swap(stream_option_, other->stream_option_);
  swap(count_option_, other->count_option_);
  swap(filter_option_, other->filter_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadReq::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::streams::ReadReq_Options*>(
      ::event_store::client::streams::ReadReq_Options::internal_default_instance());
}
class ReadReq::_Internal {
 public:
  static const ::event_store::client::streams::ReadReq_Options& options(const ReadReq* msg);
};

const ::event_store::client::streams::ReadReq_Options&
ReadReq::_Internal::options(const ReadReq* msg) {
  return *msg->options_;
}
ReadReq::ReadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadReq)
}
ReadReq::ReadReq(const ReadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::streams::ReadReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadReq)
}

void ReadReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadReq_streams_2eproto.base);
  options_ = nullptr;
}

ReadReq::~ReadReq() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void ReadReq::ArenaDtor(void* object) {
  ReadReq* _this = reinterpret_cast< ReadReq* >(object);
  (void)_this;
}
void ReadReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadReq& ReadReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadReq_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.ReadReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.ReadReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadReq)
  return target;
}

size_t ReadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.streams.ReadReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadReq)
    MergeFrom(*source);
  }
}

void ReadReq::MergeFrom(const ReadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::streams::ReadReq_Options::MergeFrom(from._internal_options());
  }
}

void ReadReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq::CopyFrom(const ReadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq::IsInitialized() const {
  return true;
}

void ReadReq::InternalSwap(ReadReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse() {}
ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::MergeFrom(const ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ReadResp_ReadEvent_RecordedEvent::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadResp_ReadEvent_RecordedEvent_default_instance_._instance.get_mutable()->id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::client::streams::_ReadResp_ReadEvent_RecordedEvent_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
}
class ReadResp_ReadEvent_RecordedEvent::_Internal {
 public:
  static const ::event_store::client::UUID& id(const ReadResp_ReadEvent_RecordedEvent* msg);
  static const ::event_store::client::StreamIdentifier& stream_identifier(const ReadResp_ReadEvent_RecordedEvent* msg);
};

const ::event_store::client::UUID&
ReadResp_ReadEvent_RecordedEvent::_Internal::id(const ReadResp_ReadEvent_RecordedEvent* msg) {
  return *msg->id_;
}
const ::event_store::client::StreamIdentifier&
ReadResp_ReadEvent_RecordedEvent::_Internal::stream_identifier(const ReadResp_ReadEvent_RecordedEvent* msg) {
  return *msg->stream_identifier_;
}
void ReadResp_ReadEvent_RecordedEvent::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void ReadResp_ReadEvent_RecordedEvent::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
ReadResp_ReadEvent_RecordedEvent::ReadResp_ReadEvent_RecordedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
}
ReadResp_ReadEvent_RecordedEvent::ReadResp_ReadEvent_RecordedEvent(const ReadResp_ReadEvent_RecordedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_metadata().empty()) {
    custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_metadata(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::event_store::client::UUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  ::memcpy(&stream_revision_, &from.stream_revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_position_) -
    reinterpret_cast<char*>(&stream_revision_)) + sizeof(commit_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
}

void ReadResp_ReadEvent_RecordedEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_ReadEvent_RecordedEvent_streams_2eproto.base);
  custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_position_) -
      reinterpret_cast<char*>(&id_)) + sizeof(commit_position_));
}

ReadResp_ReadEvent_RecordedEvent::~ReadResp_ReadEvent_RecordedEvent() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp_ReadEvent_RecordedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  custom_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete stream_identifier_;
}

void ReadResp_ReadEvent_RecordedEvent::ArenaDtor(void* object) {
  ReadResp_ReadEvent_RecordedEvent* _this = reinterpret_cast< ReadResp_ReadEvent_RecordedEvent* >(object);
  (void)_this;
}
void ReadResp_ReadEvent_RecordedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp_ReadEvent_RecordedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp_ReadEvent_RecordedEvent& ReadResp_ReadEvent_RecordedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_ReadEvent_RecordedEvent_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadResp_ReadEvent_RecordedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  custom_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  ::memset(&stream_revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_position_) -
      reinterpret_cast<char*>(&stream_revision_)) + sizeof(commit_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp_ReadEvent_RecordedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.StreamIdentifier stream_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stream_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stream_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes custom_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_custom_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp_ReadEvent_RecordedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .event_store.client.StreamIdentifier stream_identifier = 2;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 stream_revision = 3;
  if (this->stream_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stream_revision(), target);
  }

  // uint64 prepare_position = 4;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_prepare_position(), target);
  }

  // uint64 commit_position = 5;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_commit_position(), target);
  }

  // map<string, string> metadata = 6;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "event_store.client.streams.ReadResp.ReadEvent.RecordedEvent.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes custom_metadata = 7;
  if (this->custom_metadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_custom_metadata(), target);
  }

  // bytes data = 8;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  return target;
}

size_t ReadResp_ReadEvent_RecordedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes custom_metadata = 7;
  if (this->custom_metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_custom_metadata());
  }

  // bytes data = 8;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .event_store.client.UUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .event_store.client.StreamIdentifier stream_identifier = 2;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  // uint64 stream_revision = 3;
  if (this->stream_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stream_revision());
  }

  // uint64 prepare_position = 4;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  // uint64 commit_position = 5;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp_ReadEvent_RecordedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp_ReadEvent_RecordedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp_ReadEvent_RecordedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
    MergeFrom(*source);
  }
}

void ReadResp_ReadEvent_RecordedEvent::MergeFrom(const ReadResp_ReadEvent_RecordedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.custom_metadata().size() > 0) {
    _internal_set_custom_metadata(from._internal_custom_metadata());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::event_store::client::UUID::MergeFrom(from._internal_id());
  }
  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  if (from.stream_revision() != 0) {
    _internal_set_stream_revision(from._internal_stream_revision());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
}

void ReadResp_ReadEvent_RecordedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp_ReadEvent_RecordedEvent::CopyFrom(const ReadResp_ReadEvent_RecordedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadResp.ReadEvent.RecordedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp_ReadEvent_RecordedEvent::IsInitialized() const {
  return true;
}

void ReadResp_ReadEvent_RecordedEvent::InternalSwap(ReadResp_ReadEvent_RecordedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  custom_metadata_.Swap(&other->custom_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadResp_ReadEvent_RecordedEvent, commit_position_)
      + sizeof(ReadResp_ReadEvent_RecordedEvent::commit_position_)
      - PROTOBUF_FIELD_OFFSET(ReadResp_ReadEvent_RecordedEvent, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_ReadEvent_RecordedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResp_ReadEvent::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadResp_ReadEvent_default_instance_._instance.get_mutable()->event_ = const_cast< ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent*>(
      ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent::internal_default_instance());
  ::event_store::client::streams::_ReadResp_ReadEvent_default_instance_._instance.get_mutable()->link_ = const_cast< ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent*>(
      ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent::internal_default_instance());
  ::event_store::client::streams::_ReadResp_ReadEvent_default_instance_.commit_position_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_ReadResp_ReadEvent_default_instance_.no_position_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class ReadResp_ReadEvent::_Internal {
 public:
  static const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& event(const ReadResp_ReadEvent* msg);
  static const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent& link(const ReadResp_ReadEvent* msg);
  static const ::event_store::client::Empty& no_position(const ReadResp_ReadEvent* msg);
};

const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent&
ReadResp_ReadEvent::_Internal::event(const ReadResp_ReadEvent* msg) {
  return *msg->event_;
}
const ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent&
ReadResp_ReadEvent::_Internal::link(const ReadResp_ReadEvent* msg) {
  return *msg->link_;
}
const ::event_store::client::Empty&
ReadResp_ReadEvent::_Internal::no_position(const ReadResp_ReadEvent* msg) {
  return *msg->position_.no_position_;
}
void ReadResp_ReadEvent::set_allocated_no_position(::event_store::client::Empty* no_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position();
  if (no_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_position)->GetArena();
    if (message_arena != submessage_arena) {
      no_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_position, submessage_arena);
    }
    set_has_no_position();
    position_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.ReadEvent.no_position)
}
void ReadResp_ReadEvent::clear_no_position() {
  if (_internal_has_no_position()) {
    if (GetArena() == nullptr) {
      delete position_.no_position_;
    }
    clear_has_position();
  }
}
ReadResp_ReadEvent::ReadResp_ReadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadResp.ReadEvent)
}
ReadResp_ReadEvent::ReadResp_ReadEvent(const ReadResp_ReadEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  if (from._internal_has_link()) {
    link_ = new ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent(*from.link_);
  } else {
    link_ = nullptr;
  }
  clear_has_position();
  switch (from.position_case()) {
    case kCommitPosition: {
      _internal_set_commit_position(from._internal_commit_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadResp.ReadEvent)
}

void ReadResp_ReadEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_ReadEvent_streams_2eproto.base);
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_) -
      reinterpret_cast<char*>(&event_)) + sizeof(link_));
  clear_has_position();
}

ReadResp_ReadEvent::~ReadResp_ReadEvent() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadResp.ReadEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp_ReadEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete link_;
  if (has_position()) {
    clear_position();
  }
}

void ReadResp_ReadEvent::ArenaDtor(void* object) {
  ReadResp_ReadEvent* _this = reinterpret_cast< ReadResp_ReadEvent* >(object);
  (void)_this;
}
void ReadResp_ReadEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp_ReadEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp_ReadEvent& ReadResp_ReadEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_ReadEvent_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadResp_ReadEvent::clear_position() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadResp.ReadEvent)
  switch (position_case()) {
    case kCommitPosition: {
      // No need to clear
      break;
    }
    case kNoPosition: {
      if (GetArena() == nullptr) {
        delete position_.no_position_;
      }
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POSITION_NOT_SET;
}


void ReadResp_ReadEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadResp.ReadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  clear_position();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp_ReadEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp_ReadEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadResp.ReadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent event = 1;
  if (this->has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  // .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent link = 2;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::link(this), target, stream);
  }

  // uint64 commit_position = 3;
  if (_internal_has_commit_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_commit_position(), target);
  }

  // .event_store.client.Empty no_position = 4;
  if (_internal_has_no_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::no_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadResp.ReadEvent)
  return target;
}

size_t ReadResp_ReadEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadResp.ReadEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent event = 1;
  if (this->has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }

  // .event_store.client.streams.ReadResp.ReadEvent.RecordedEvent link = 2;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  switch (position_case()) {
    // uint64 commit_position = 3;
    case kCommitPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_commit_position());
      break;
    }
    // .event_store.client.Empty no_position = 4;
    case kNoPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_.no_position_);
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp_ReadEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadResp.ReadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp_ReadEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp_ReadEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadResp.ReadEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadResp.ReadEvent)
    MergeFrom(*source);
  }
}

void ReadResp_ReadEvent::MergeFrom(const ReadResp_ReadEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadResp.ReadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event()) {
    _internal_mutable_event()->::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent::MergeFrom(from._internal_event());
  }
  if (from.has_link()) {
    _internal_mutable_link()->::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent::MergeFrom(from._internal_link());
  }
  switch (from.position_case()) {
    case kCommitPosition: {
      _internal_set_commit_position(from._internal_commit_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_NOT_SET: {
      break;
    }
  }
}

void ReadResp_ReadEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadResp.ReadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp_ReadEvent::CopyFrom(const ReadResp_ReadEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadResp.ReadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp_ReadEvent::IsInitialized() const {
  return true;
}

void ReadResp_ReadEvent::InternalSwap(ReadResp_ReadEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadResp_ReadEvent, link_)
      + sizeof(ReadResp_ReadEvent::link_)
      - PROTOBUF_FIELD_OFFSET(ReadResp_ReadEvent, event_)>(
          reinterpret_cast<char*>(&event_),
          reinterpret_cast<char*>(&other->event_));
  swap(position_, other->position_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_ReadEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResp_SubscriptionConfirmation::InitAsDefaultInstance() {
}
class ReadResp_SubscriptionConfirmation::_Internal {
 public:
};

ReadResp_SubscriptionConfirmation::ReadResp_SubscriptionConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadResp.SubscriptionConfirmation)
}
ReadResp_SubscriptionConfirmation::ReadResp_SubscriptionConfirmation(const ReadResp_SubscriptionConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadResp.SubscriptionConfirmation)
}

void ReadResp_SubscriptionConfirmation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_SubscriptionConfirmation_streams_2eproto.base);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadResp_SubscriptionConfirmation::~ReadResp_SubscriptionConfirmation() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp_SubscriptionConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadResp_SubscriptionConfirmation::ArenaDtor(void* object) {
  ReadResp_SubscriptionConfirmation* _this = reinterpret_cast< ReadResp_SubscriptionConfirmation* >(object);
  (void)_this;
}
void ReadResp_SubscriptionConfirmation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp_SubscriptionConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp_SubscriptionConfirmation& ReadResp_SubscriptionConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_SubscriptionConfirmation_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadResp_SubscriptionConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp_SubscriptionConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp_SubscriptionConfirmation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription_id = 1;
  if (this->subscription_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.streams.ReadResp.SubscriptionConfirmation.subscription_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  return target;
}

size_t ReadResp_SubscriptionConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription_id = 1;
  if (this->subscription_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp_SubscriptionConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp_SubscriptionConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp_SubscriptionConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadResp.SubscriptionConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadResp.SubscriptionConfirmation)
    MergeFrom(*source);
  }
}

void ReadResp_SubscriptionConfirmation::MergeFrom(const ReadResp_SubscriptionConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription_id().size() > 0) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
}

void ReadResp_SubscriptionConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp_SubscriptionConfirmation::CopyFrom(const ReadResp_SubscriptionConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadResp.SubscriptionConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp_SubscriptionConfirmation::IsInitialized() const {
  return true;
}

void ReadResp_SubscriptionConfirmation::InternalSwap(ReadResp_SubscriptionConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subscription_id_.Swap(&other->subscription_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_SubscriptionConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResp_Checkpoint::InitAsDefaultInstance() {
}
class ReadResp_Checkpoint::_Internal {
 public:
};

ReadResp_Checkpoint::ReadResp_Checkpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadResp.Checkpoint)
}
ReadResp_Checkpoint::ReadResp_Checkpoint(const ReadResp_Checkpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_position_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadResp.Checkpoint)
}

void ReadResp_Checkpoint::SharedCtor() {
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
}

ReadResp_Checkpoint::~ReadResp_Checkpoint() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadResp.Checkpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp_Checkpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadResp_Checkpoint::ArenaDtor(void* object) {
  ReadResp_Checkpoint* _this = reinterpret_cast< ReadResp_Checkpoint* >(object);
  (void)_this;
}
void ReadResp_Checkpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp_Checkpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp_Checkpoint& ReadResp_Checkpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_Checkpoint_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadResp_Checkpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadResp.Checkpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp_Checkpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp_Checkpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadResp.Checkpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_commit_position(), target);
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prepare_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadResp.Checkpoint)
  return target;
}

size_t ReadResp_Checkpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadResp.Checkpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp_Checkpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadResp.Checkpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp_Checkpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp_Checkpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadResp.Checkpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadResp.Checkpoint)
    MergeFrom(*source);
  }
}

void ReadResp_Checkpoint::MergeFrom(const ReadResp_Checkpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadResp.Checkpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
}

void ReadResp_Checkpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadResp.Checkpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp_Checkpoint::CopyFrom(const ReadResp_Checkpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadResp.Checkpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp_Checkpoint::IsInitialized() const {
  return true;
}

void ReadResp_Checkpoint::InternalSwap(ReadResp_Checkpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadResp_Checkpoint, prepare_position_)
      + sizeof(ReadResp_Checkpoint::prepare_position_)
      - PROTOBUF_FIELD_OFFSET(ReadResp_Checkpoint, commit_position_)>(
          reinterpret_cast<char*>(&commit_position_),
          reinterpret_cast<char*>(&other->commit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_Checkpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResp_StreamNotFound::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadResp_StreamNotFound_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
}
class ReadResp_StreamNotFound::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const ReadResp_StreamNotFound* msg);
};

const ::event_store::client::StreamIdentifier&
ReadResp_StreamNotFound::_Internal::stream_identifier(const ReadResp_StreamNotFound* msg) {
  return *msg->stream_identifier_;
}
void ReadResp_StreamNotFound::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
ReadResp_StreamNotFound::ReadResp_StreamNotFound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadResp.StreamNotFound)
}
ReadResp_StreamNotFound::ReadResp_StreamNotFound(const ReadResp_StreamNotFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadResp.StreamNotFound)
}

void ReadResp_StreamNotFound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_StreamNotFound_streams_2eproto.base);
  stream_identifier_ = nullptr;
}

ReadResp_StreamNotFound::~ReadResp_StreamNotFound() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadResp.StreamNotFound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp_StreamNotFound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_identifier_;
}

void ReadResp_StreamNotFound::ArenaDtor(void* object) {
  ReadResp_StreamNotFound* _this = reinterpret_cast< ReadResp_StreamNotFound* >(object);
  (void)_this;
}
void ReadResp_StreamNotFound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp_StreamNotFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp_StreamNotFound& ReadResp_StreamNotFound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_StreamNotFound_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadResp_StreamNotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadResp.StreamNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp_StreamNotFound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp_StreamNotFound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadResp.StreamNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadResp.StreamNotFound)
  return target;
}

size_t ReadResp_StreamNotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadResp.StreamNotFound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp_StreamNotFound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadResp.StreamNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp_StreamNotFound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp_StreamNotFound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadResp.StreamNotFound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadResp.StreamNotFound)
    MergeFrom(*source);
  }
}

void ReadResp_StreamNotFound::MergeFrom(const ReadResp_StreamNotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadResp.StreamNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
}

void ReadResp_StreamNotFound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadResp.StreamNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp_StreamNotFound::CopyFrom(const ReadResp_StreamNotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadResp.StreamNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp_StreamNotFound::IsInitialized() const {
  return true;
}

void ReadResp_StreamNotFound::InternalSwap(ReadResp_StreamNotFound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_identifier_, other->stream_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp_StreamNotFound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResp::InitAsDefaultInstance() {
  ::event_store::client::streams::_ReadResp_default_instance_.event_ = const_cast< ::event_store::client::streams::ReadResp_ReadEvent*>(
      ::event_store::client::streams::ReadResp_ReadEvent::internal_default_instance());
  ::event_store::client::streams::_ReadResp_default_instance_.confirmation_ = const_cast< ::event_store::client::streams::ReadResp_SubscriptionConfirmation*>(
      ::event_store::client::streams::ReadResp_SubscriptionConfirmation::internal_default_instance());
  ::event_store::client::streams::_ReadResp_default_instance_.checkpoint_ = const_cast< ::event_store::client::streams::ReadResp_Checkpoint*>(
      ::event_store::client::streams::ReadResp_Checkpoint::internal_default_instance());
  ::event_store::client::streams::_ReadResp_default_instance_.stream_not_found_ = const_cast< ::event_store::client::streams::ReadResp_StreamNotFound*>(
      ::event_store::client::streams::ReadResp_StreamNotFound::internal_default_instance());
  ::event_store::client::streams::_ReadResp_default_instance_.first_stream_position_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_ReadResp_default_instance_.last_stream_position_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_ReadResp_default_instance_.last_all_stream_position_ = const_cast< ::event_store::client::AllStreamPosition*>(
      ::event_store::client::AllStreamPosition::internal_default_instance());
}
class ReadResp::_Internal {
 public:
  static const ::event_store::client::streams::ReadResp_ReadEvent& event(const ReadResp* msg);
  static const ::event_store::client::streams::ReadResp_SubscriptionConfirmation& confirmation(const ReadResp* msg);
  static const ::event_store::client::streams::ReadResp_Checkpoint& checkpoint(const ReadResp* msg);
  static const ::event_store::client::streams::ReadResp_StreamNotFound& stream_not_found(const ReadResp* msg);
  static const ::event_store::client::AllStreamPosition& last_all_stream_position(const ReadResp* msg);
};

const ::event_store::client::streams::ReadResp_ReadEvent&
ReadResp::_Internal::event(const ReadResp* msg) {
  return *msg->content_.event_;
}
const ::event_store::client::streams::ReadResp_SubscriptionConfirmation&
ReadResp::_Internal::confirmation(const ReadResp* msg) {
  return *msg->content_.confirmation_;
}
const ::event_store::client::streams::ReadResp_Checkpoint&
ReadResp::_Internal::checkpoint(const ReadResp* msg) {
  return *msg->content_.checkpoint_;
}
const ::event_store::client::streams::ReadResp_StreamNotFound&
ReadResp::_Internal::stream_not_found(const ReadResp* msg) {
  return *msg->content_.stream_not_found_;
}
const ::event_store::client::AllStreamPosition&
ReadResp::_Internal::last_all_stream_position(const ReadResp* msg) {
  return *msg->content_.last_all_stream_position_;
}
void ReadResp::set_allocated_event(::event_store::client::streams::ReadResp_ReadEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    content_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.event)
}
void ReadResp::set_allocated_confirmation(::event_store::client::streams::ReadResp_SubscriptionConfirmation* confirmation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (confirmation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(confirmation);
    if (message_arena != submessage_arena) {
      confirmation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirmation, submessage_arena);
    }
    set_has_confirmation();
    content_.confirmation_ = confirmation;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.confirmation)
}
void ReadResp::set_allocated_checkpoint(::event_store::client::streams::ReadResp_Checkpoint* checkpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (checkpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkpoint);
    if (message_arena != submessage_arena) {
      checkpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkpoint, submessage_arena);
    }
    set_has_checkpoint();
    content_.checkpoint_ = checkpoint;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.checkpoint)
}
void ReadResp::set_allocated_stream_not_found(::event_store::client::streams::ReadResp_StreamNotFound* stream_not_found) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (stream_not_found) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_not_found);
    if (message_arena != submessage_arena) {
      stream_not_found = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_not_found, submessage_arena);
    }
    set_has_stream_not_found();
    content_.stream_not_found_ = stream_not_found;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.stream_not_found)
}
void ReadResp::set_allocated_last_all_stream_position(::event_store::client::AllStreamPosition* last_all_stream_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (last_all_stream_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_all_stream_position)->GetArena();
    if (message_arena != submessage_arena) {
      last_all_stream_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_all_stream_position, submessage_arena);
    }
    set_has_last_all_stream_position();
    content_.last_all_stream_position_ = last_all_stream_position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.ReadResp.last_all_stream_position)
}
void ReadResp::clear_last_all_stream_position() {
  if (_internal_has_last_all_stream_position()) {
    if (GetArena() == nullptr) {
      delete content_.last_all_stream_position_;
    }
    clear_has_content();
  }
}
ReadResp::ReadResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.ReadResp)
}
ReadResp::ReadResp(const ReadResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kEvent: {
      _internal_mutable_event()->::event_store::client::streams::ReadResp_ReadEvent::MergeFrom(from._internal_event());
      break;
    }
    case kConfirmation: {
      _internal_mutable_confirmation()->::event_store::client::streams::ReadResp_SubscriptionConfirmation::MergeFrom(from._internal_confirmation());
      break;
    }
    case kCheckpoint: {
      _internal_mutable_checkpoint()->::event_store::client::streams::ReadResp_Checkpoint::MergeFrom(from._internal_checkpoint());
      break;
    }
    case kStreamNotFound: {
      _internal_mutable_stream_not_found()->::event_store::client::streams::ReadResp_StreamNotFound::MergeFrom(from._internal_stream_not_found());
      break;
    }
    case kFirstStreamPosition: {
      _internal_set_first_stream_position(from._internal_first_stream_position());
      break;
    }
    case kLastStreamPosition: {
      _internal_set_last_stream_position(from._internal_last_stream_position());
      break;
    }
    case kLastAllStreamPosition: {
      _internal_mutable_last_all_stream_position()->::event_store::client::AllStreamPosition::MergeFrom(from._internal_last_all_stream_position());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.ReadResp)
}

void ReadResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResp_streams_2eproto.base);
  clear_has_content();
}

ReadResp::~ReadResp() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.ReadResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void ReadResp::ArenaDtor(void* object) {
  ReadResp* _this = reinterpret_cast< ReadResp* >(object);
  (void)_this;
}
void ReadResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResp& ReadResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResp_streams_2eproto.base);
  return *internal_default_instance();
}


void ReadResp::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.ReadResp)
  switch (content_case()) {
    case kEvent: {
      if (GetArena() == nullptr) {
        delete content_.event_;
      }
      break;
    }
    case kConfirmation: {
      if (GetArena() == nullptr) {
        delete content_.confirmation_;
      }
      break;
    }
    case kCheckpoint: {
      if (GetArena() == nullptr) {
        delete content_.checkpoint_;
      }
      break;
    }
    case kStreamNotFound: {
      if (GetArena() == nullptr) {
        delete content_.stream_not_found_;
      }
      break;
    }
    case kFirstStreamPosition: {
      // No need to clear
      break;
    }
    case kLastStreamPosition: {
      // No need to clear
      break;
    }
    case kLastAllStreamPosition: {
      if (GetArena() == nullptr) {
        delete content_.last_all_stream_position_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ReadResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.ReadResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.ReadResp.ReadEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadResp.SubscriptionConfirmation confirmation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadResp.Checkpoint checkpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.ReadResp.StreamNotFound stream_not_found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_not_found(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 first_stream_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_first_stream_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_stream_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_last_stream_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.AllStreamPosition last_all_stream_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_all_stream_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.ReadResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.ReadResp.ReadEvent event = 1;
  if (_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  // .event_store.client.streams.ReadResp.SubscriptionConfirmation confirmation = 2;
  if (_internal_has_confirmation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::confirmation(this), target, stream);
  }

  // .event_store.client.streams.ReadResp.Checkpoint checkpoint = 3;
  if (_internal_has_checkpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::checkpoint(this), target, stream);
  }

  // .event_store.client.streams.ReadResp.StreamNotFound stream_not_found = 4;
  if (_internal_has_stream_not_found()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stream_not_found(this), target, stream);
  }

  // uint64 first_stream_position = 5;
  if (_internal_has_first_stream_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_first_stream_position(), target);
  }

  // uint64 last_stream_position = 6;
  if (_internal_has_last_stream_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_last_stream_position(), target);
  }

  // .event_store.client.AllStreamPosition last_all_stream_position = 7;
  if (_internal_has_last_all_stream_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::last_all_stream_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.ReadResp)
  return target;
}

size_t ReadResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.ReadResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .event_store.client.streams.ReadResp.ReadEvent event = 1;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.event_);
      break;
    }
    // .event_store.client.streams.ReadResp.SubscriptionConfirmation confirmation = 2;
    case kConfirmation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.confirmation_);
      break;
    }
    // .event_store.client.streams.ReadResp.Checkpoint checkpoint = 3;
    case kCheckpoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.checkpoint_);
      break;
    }
    // .event_store.client.streams.ReadResp.StreamNotFound stream_not_found = 4;
    case kStreamNotFound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.stream_not_found_);
      break;
    }
    // uint64 first_stream_position = 5;
    case kFirstStreamPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_first_stream_position());
      break;
    }
    // uint64 last_stream_position = 6;
    case kLastStreamPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_stream_position());
      break;
    }
    // .event_store.client.AllStreamPosition last_all_stream_position = 7;
    case kLastAllStreamPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.last_all_stream_position_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.ReadResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.ReadResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.ReadResp)
    MergeFrom(*source);
  }
}

void ReadResp::MergeFrom(const ReadResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.ReadResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kEvent: {
      _internal_mutable_event()->::event_store::client::streams::ReadResp_ReadEvent::MergeFrom(from._internal_event());
      break;
    }
    case kConfirmation: {
      _internal_mutable_confirmation()->::event_store::client::streams::ReadResp_SubscriptionConfirmation::MergeFrom(from._internal_confirmation());
      break;
    }
    case kCheckpoint: {
      _internal_mutable_checkpoint()->::event_store::client::streams::ReadResp_Checkpoint::MergeFrom(from._internal_checkpoint());
      break;
    }
    case kStreamNotFound: {
      _internal_mutable_stream_not_found()->::event_store::client::streams::ReadResp_StreamNotFound::MergeFrom(from._internal_stream_not_found());
      break;
    }
    case kFirstStreamPosition: {
      _internal_set_first_stream_position(from._internal_first_stream_position());
      break;
    }
    case kLastStreamPosition: {
      _internal_set_last_stream_position(from._internal_last_stream_position());
      break;
    }
    case kLastAllStreamPosition: {
      _internal_mutable_last_all_stream_position()->::event_store::client::AllStreamPosition::MergeFrom(from._internal_last_all_stream_position());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void ReadResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.ReadResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResp::CopyFrom(const ReadResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.ReadResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResp::IsInitialized() const {
  return true;
}

void ReadResp::InternalSwap(ReadResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendReq_Options::InitAsDefaultInstance() {
  ::event_store::client::streams::_AppendReq_Options_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::streams::_AppendReq_Options_default_instance_.revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_AppendReq_Options_default_instance_.no_stream_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendReq_Options_default_instance_.any_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendReq_Options_default_instance_.stream_exists_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class AppendReq_Options::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const AppendReq_Options* msg);
  static const ::event_store::client::Empty& no_stream(const AppendReq_Options* msg);
  static const ::event_store::client::Empty& any(const AppendReq_Options* msg);
  static const ::event_store::client::Empty& stream_exists(const AppendReq_Options* msg);
};

const ::event_store::client::StreamIdentifier&
AppendReq_Options::_Internal::stream_identifier(const AppendReq_Options* msg) {
  return *msg->stream_identifier_;
}
const ::event_store::client::Empty&
AppendReq_Options::_Internal::no_stream(const AppendReq_Options* msg) {
  return *msg->expected_stream_revision_.no_stream_;
}
const ::event_store::client::Empty&
AppendReq_Options::_Internal::any(const AppendReq_Options* msg) {
  return *msg->expected_stream_revision_.any_;
}
const ::event_store::client::Empty&
AppendReq_Options::_Internal::stream_exists(const AppendReq_Options* msg) {
  return *msg->expected_stream_revision_.stream_exists_;
}
void AppendReq_Options::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
void AppendReq_Options::set_allocated_no_stream(::event_store::client::Empty* no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_stream, submessage_arena);
    }
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.Options.no_stream)
}
void AppendReq_Options::clear_no_stream() {
  if (_internal_has_no_stream()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.no_stream_;
    }
    clear_has_expected_stream_revision();
  }
}
void AppendReq_Options::set_allocated_any(::event_store::client::Empty* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any)->GetArena();
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    set_has_any();
    expected_stream_revision_.any_ = any;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.Options.any)
}
void AppendReq_Options::clear_any() {
  if (_internal_has_any()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.any_;
    }
    clear_has_expected_stream_revision();
  }
}
void AppendReq_Options::set_allocated_stream_exists(::event_store::client::Empty* stream_exists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (stream_exists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_exists)->GetArena();
    if (message_arena != submessage_arena) {
      stream_exists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_exists, submessage_arena);
    }
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.Options.stream_exists)
}
void AppendReq_Options::clear_stream_exists() {
  if (_internal_has_stream_exists()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.stream_exists_;
    }
    clear_has_expected_stream_revision();
  }
}
AppendReq_Options::AppendReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.AppendReq.Options)
}
AppendReq_Options::AppendReq_Options(const AppendReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  clear_has_expected_stream_revision();
  switch (from.expected_stream_revision_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->::event_store::client::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->::event_store::client::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.AppendReq.Options)
}

void AppendReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendReq_Options_streams_2eproto.base);
  stream_identifier_ = nullptr;
  clear_has_expected_stream_revision();
}

AppendReq_Options::~AppendReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.AppendReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_identifier_;
  if (has_expected_stream_revision()) {
    clear_expected_stream_revision();
  }
}

void AppendReq_Options::ArenaDtor(void* object) {
  AppendReq_Options* _this = reinterpret_cast< AppendReq_Options* >(object);
  (void)_this;
}
void AppendReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendReq_Options& AppendReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendReq_Options_streams_2eproto.base);
  return *internal_default_instance();
}


void AppendReq_Options::clear_expected_stream_revision() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendReq.Options)
  switch (expected_stream_revision_case()) {
    case kRevision: {
      // No need to clear
      break;
    }
    case kNoStream: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.no_stream_;
      }
      break;
    }
    case kAny: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.any_;
      }
      break;
    }
    case kStreamExists: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.stream_exists_;
      }
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPECTED_STREAM_REVISION_NOT_SET;
}


void AppendReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.AppendReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  clear_expected_stream_revision();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty any = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty stream_exists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_exists(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.AppendReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 revision = 2;
  if (_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_revision(), target);
  }

  // .event_store.client.Empty no_stream = 3;
  if (_internal_has_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::no_stream(this), target, stream);
  }

  // .event_store.client.Empty any = 4;
  if (_internal_has_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::any(this), target, stream);
  }

  // .event_store.client.Empty stream_exists = 5;
  if (_internal_has_stream_exists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stream_exists(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.AppendReq.Options)
  return target;
}

size_t AppendReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.AppendReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  switch (expected_stream_revision_case()) {
    // uint64 revision = 2;
    case kRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_revision());
      break;
    }
    // .event_store.client.Empty no_stream = 3;
    case kNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.no_stream_);
      break;
    }
    // .event_store.client.Empty any = 4;
    case kAny: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.any_);
      break;
    }
    // .event_store.client.Empty stream_exists = 5;
    case kStreamExists: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.stream_exists_);
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.AppendReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.AppendReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.AppendReq.Options)
    MergeFrom(*source);
  }
}

void AppendReq_Options::MergeFrom(const AppendReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.AppendReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  switch (from.expected_stream_revision_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->::event_store::client::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->::event_store::client::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
}

void AppendReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.AppendReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendReq_Options::CopyFrom(const AppendReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.AppendReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendReq_Options::IsInitialized() const {
  return true;
}

void AppendReq_Options::InternalSwap(AppendReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_identifier_, other->stream_identifier_);
  swap(expected_stream_revision_, other->expected_stream_revision_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AppendReq_ProposedMessage_MetadataEntry_DoNotUse::AppendReq_ProposedMessage_MetadataEntry_DoNotUse() {}
AppendReq_ProposedMessage_MetadataEntry_DoNotUse::AppendReq_ProposedMessage_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppendReq_ProposedMessage_MetadataEntry_DoNotUse::MergeFrom(const AppendReq_ProposedMessage_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppendReq_ProposedMessage_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AppendReq_ProposedMessage_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AppendReq_ProposedMessage::InitAsDefaultInstance() {
  ::event_store::client::streams::_AppendReq_ProposedMessage_default_instance_._instance.get_mutable()->id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
}
class AppendReq_ProposedMessage::_Internal {
 public:
  static const ::event_store::client::UUID& id(const AppendReq_ProposedMessage* msg);
};

const ::event_store::client::UUID&
AppendReq_ProposedMessage::_Internal::id(const AppendReq_ProposedMessage* msg) {
  return *msg->id_;
}
void AppendReq_ProposedMessage::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
AppendReq_ProposedMessage::AppendReq_ProposedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.AppendReq.ProposedMessage)
}
AppendReq_ProposedMessage::AppendReq_ProposedMessage(const AppendReq_ProposedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_metadata().empty()) {
    custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_metadata(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::event_store::client::UUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.AppendReq.ProposedMessage)
}

void AppendReq_ProposedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendReq_ProposedMessage_streams_2eproto.base);
  custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = nullptr;
}

AppendReq_ProposedMessage::~AppendReq_ProposedMessage() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.AppendReq.ProposedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendReq_ProposedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  custom_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void AppendReq_ProposedMessage::ArenaDtor(void* object) {
  AppendReq_ProposedMessage* _this = reinterpret_cast< AppendReq_ProposedMessage* >(object);
  (void)_this;
}
void AppendReq_ProposedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendReq_ProposedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendReq_ProposedMessage& AppendReq_ProposedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendReq_ProposedMessage_streams_2eproto.base);
  return *internal_default_instance();
}


void AppendReq_ProposedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.AppendReq.ProposedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  custom_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendReq_ProposedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes custom_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_custom_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendReq_ProposedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.AppendReq.ProposedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // map<string, string> metadata = 2;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "event_store.client.streams.AppendReq.ProposedMessage.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "event_store.client.streams.AppendReq.ProposedMessage.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppendReq_ProposedMessage_MetadataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = AppendReq_ProposedMessage_MetadataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes custom_metadata = 3;
  if (this->custom_metadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_custom_metadata(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.AppendReq.ProposedMessage)
  return target;
}

size_t AppendReq_ProposedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.AppendReq.ProposedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += AppendReq_ProposedMessage_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes custom_metadata = 3;
  if (this->custom_metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_custom_metadata());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .event_store.client.UUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendReq_ProposedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.AppendReq.ProposedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendReq_ProposedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendReq_ProposedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.AppendReq.ProposedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.AppendReq.ProposedMessage)
    MergeFrom(*source);
  }
}

void AppendReq_ProposedMessage::MergeFrom(const AppendReq_ProposedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.AppendReq.ProposedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.custom_metadata().size() > 0) {
    _internal_set_custom_metadata(from._internal_custom_metadata());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::event_store::client::UUID::MergeFrom(from._internal_id());
  }
}

void AppendReq_ProposedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.AppendReq.ProposedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendReq_ProposedMessage::CopyFrom(const AppendReq_ProposedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.AppendReq.ProposedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendReq_ProposedMessage::IsInitialized() const {
  return true;
}

void AppendReq_ProposedMessage::InternalSwap(AppendReq_ProposedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  custom_metadata_.Swap(&other->custom_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendReq_ProposedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendReq::InitAsDefaultInstance() {
  ::event_store::client::streams::_AppendReq_default_instance_.options_ = const_cast< ::event_store::client::streams::AppendReq_Options*>(
      ::event_store::client::streams::AppendReq_Options::internal_default_instance());
  ::event_store::client::streams::_AppendReq_default_instance_.proposed_message_ = const_cast< ::event_store::client::streams::AppendReq_ProposedMessage*>(
      ::event_store::client::streams::AppendReq_ProposedMessage::internal_default_instance());
}
class AppendReq::_Internal {
 public:
  static const ::event_store::client::streams::AppendReq_Options& options(const AppendReq* msg);
  static const ::event_store::client::streams::AppendReq_ProposedMessage& proposed_message(const AppendReq* msg);
};

const ::event_store::client::streams::AppendReq_Options&
AppendReq::_Internal::options(const AppendReq* msg) {
  return *msg->content_.options_;
}
const ::event_store::client::streams::AppendReq_ProposedMessage&
AppendReq::_Internal::proposed_message(const AppendReq* msg) {
  return *msg->content_.proposed_message_;
}
void AppendReq::set_allocated_options(::event_store::client::streams::AppendReq_Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    set_has_options();
    content_.options_ = options;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.options)
}
void AppendReq::set_allocated_proposed_message(::event_store::client::streams::AppendReq_ProposedMessage* proposed_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_content();
  if (proposed_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(proposed_message);
    if (message_arena != submessage_arena) {
      proposed_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposed_message, submessage_arena);
    }
    set_has_proposed_message();
    content_.proposed_message_ = proposed_message;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendReq.proposed_message)
}
AppendReq::AppendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.AppendReq)
}
AppendReq::AppendReq(const AppendReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kOptions: {
      _internal_mutable_options()->::event_store::client::streams::AppendReq_Options::MergeFrom(from._internal_options());
      break;
    }
    case kProposedMessage: {
      _internal_mutable_proposed_message()->::event_store::client::streams::AppendReq_ProposedMessage::MergeFrom(from._internal_proposed_message());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.AppendReq)
}

void AppendReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendReq_streams_2eproto.base);
  clear_has_content();
}

AppendReq::~AppendReq() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.AppendReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void AppendReq::ArenaDtor(void* object) {
  AppendReq* _this = reinterpret_cast< AppendReq* >(object);
  (void)_this;
}
void AppendReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendReq& AppendReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendReq_streams_2eproto.base);
  return *internal_default_instance();
}


void AppendReq::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendReq)
  switch (content_case()) {
    case kOptions: {
      if (GetArena() == nullptr) {
        delete content_.options_;
      }
      break;
    }
    case kProposedMessage: {
      if (GetArena() == nullptr) {
        delete content_.proposed_message_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void AppendReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.AppendReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.AppendReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.AppendReq.ProposedMessage proposed_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposed_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.AppendReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.AppendReq.Options options = 1;
  if (_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  // .event_store.client.streams.AppendReq.ProposedMessage proposed_message = 2;
  if (_internal_has_proposed_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::proposed_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.AppendReq)
  return target;
}

size_t AppendReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.AppendReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .event_store.client.streams.AppendReq.Options options = 1;
    case kOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.options_);
      break;
    }
    // .event_store.client.streams.AppendReq.ProposedMessage proposed_message = 2;
    case kProposedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.proposed_message_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.AppendReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.AppendReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.AppendReq)
    MergeFrom(*source);
  }
}

void AppendReq::MergeFrom(const AppendReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.AppendReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kOptions: {
      _internal_mutable_options()->::event_store::client::streams::AppendReq_Options::MergeFrom(from._internal_options());
      break;
    }
    case kProposedMessage: {
      _internal_mutable_proposed_message()->::event_store::client::streams::AppendReq_ProposedMessage::MergeFrom(from._internal_proposed_message());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void AppendReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.AppendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendReq::CopyFrom(const AppendReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.AppendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendReq::IsInitialized() const {
  return true;
}

void AppendReq::InternalSwap(AppendReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendResp_Position::InitAsDefaultInstance() {
}
class AppendResp_Position::_Internal {
 public:
};

AppendResp_Position::AppendResp_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.AppendResp.Position)
}
AppendResp_Position::AppendResp_Position(const AppendResp_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_position_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.AppendResp.Position)
}

void AppendResp_Position::SharedCtor() {
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
}

AppendResp_Position::~AppendResp_Position() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.AppendResp.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendResp_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppendResp_Position::ArenaDtor(void* object) {
  AppendResp_Position* _this = reinterpret_cast< AppendResp_Position* >(object);
  (void)_this;
}
void AppendResp_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendResp_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendResp_Position& AppendResp_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendResp_Position_streams_2eproto.base);
  return *internal_default_instance();
}


void AppendResp_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.AppendResp.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendResp_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendResp_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.AppendResp.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_commit_position(), target);
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prepare_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.AppendResp.Position)
  return target;
}

size_t AppendResp_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.AppendResp.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendResp_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.AppendResp.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendResp_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendResp_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.AppendResp.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.AppendResp.Position)
    MergeFrom(*source);
  }
}

void AppendResp_Position::MergeFrom(const AppendResp_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.AppendResp.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
}

void AppendResp_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.AppendResp.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendResp_Position::CopyFrom(const AppendResp_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.AppendResp.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendResp_Position::IsInitialized() const {
  return true;
}

void AppendResp_Position::InternalSwap(AppendResp_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendResp_Position, prepare_position_)
      + sizeof(AppendResp_Position::prepare_position_)
      - PROTOBUF_FIELD_OFFSET(AppendResp_Position, commit_position_)>(
          reinterpret_cast<char*>(&commit_position_),
          reinterpret_cast<char*>(&other->commit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendResp_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendResp_Success::InitAsDefaultInstance() {
  ::event_store::client::streams::_AppendResp_Success_default_instance_.current_revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_AppendResp_Success_default_instance_.no_stream_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendResp_Success_default_instance_.position_ = const_cast< ::event_store::client::streams::AppendResp_Position*>(
      ::event_store::client::streams::AppendResp_Position::internal_default_instance());
  ::event_store::client::streams::_AppendResp_Success_default_instance_.no_position_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class AppendResp_Success::_Internal {
 public:
  static const ::event_store::client::Empty& no_stream(const AppendResp_Success* msg);
  static const ::event_store::client::streams::AppendResp_Position& position(const AppendResp_Success* msg);
  static const ::event_store::client::Empty& no_position(const AppendResp_Success* msg);
};

const ::event_store::client::Empty&
AppendResp_Success::_Internal::no_stream(const AppendResp_Success* msg) {
  return *msg->current_revision_option_.no_stream_;
}
const ::event_store::client::streams::AppendResp_Position&
AppendResp_Success::_Internal::position(const AppendResp_Success* msg) {
  return *msg->position_option_.position_;
}
const ::event_store::client::Empty&
AppendResp_Success::_Internal::no_position(const AppendResp_Success* msg) {
  return *msg->position_option_.no_position_;
}
void AppendResp_Success::set_allocated_no_stream(::event_store::client::Empty* no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_current_revision_option();
  if (no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_stream, submessage_arena);
    }
    set_has_no_stream();
    current_revision_option_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.Success.no_stream)
}
void AppendResp_Success::clear_no_stream() {
  if (_internal_has_no_stream()) {
    if (GetArena() == nullptr) {
      delete current_revision_option_.no_stream_;
    }
    clear_has_current_revision_option();
  }
}
void AppendResp_Success::set_allocated_position(::event_store::client::streams::AppendResp_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position_option();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    position_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.Success.position)
}
void AppendResp_Success::set_allocated_no_position(::event_store::client::Empty* no_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position_option();
  if (no_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_position)->GetArena();
    if (message_arena != submessage_arena) {
      no_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_position, submessage_arena);
    }
    set_has_no_position();
    position_option_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.Success.no_position)
}
void AppendResp_Success::clear_no_position() {
  if (_internal_has_no_position()) {
    if (GetArena() == nullptr) {
      delete position_option_.no_position_;
    }
    clear_has_position_option();
  }
}
AppendResp_Success::AppendResp_Success(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.AppendResp.Success)
}
AppendResp_Success::AppendResp_Success(const AppendResp_Success& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_current_revision_option();
  switch (from.current_revision_option_case()) {
    case kCurrentRevision: {
      _internal_set_current_revision(from._internal_current_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  clear_has_position_option();
  switch (from.position_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::streams::AppendResp_Position::MergeFrom(from._internal_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.AppendResp.Success)
}

void AppendResp_Success::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendResp_Success_streams_2eproto.base);
  clear_has_current_revision_option();
  clear_has_position_option();
}

AppendResp_Success::~AppendResp_Success() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.AppendResp.Success)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendResp_Success::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_current_revision_option()) {
    clear_current_revision_option();
  }
  if (has_position_option()) {
    clear_position_option();
  }
}

void AppendResp_Success::ArenaDtor(void* object) {
  AppendResp_Success* _this = reinterpret_cast< AppendResp_Success* >(object);
  (void)_this;
}
void AppendResp_Success::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendResp_Success::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendResp_Success& AppendResp_Success::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendResp_Success_streams_2eproto.base);
  return *internal_default_instance();
}


void AppendResp_Success::clear_current_revision_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendResp.Success)
  switch (current_revision_option_case()) {
    case kCurrentRevision: {
      // No need to clear
      break;
    }
    case kNoStream: {
      if (GetArena() == nullptr) {
        delete current_revision_option_.no_stream_;
      }
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CURRENT_REVISION_OPTION_NOT_SET;
}

void AppendResp_Success::clear_position_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendResp.Success)
  switch (position_option_case()) {
    case kPosition: {
      if (GetArena() == nullptr) {
        delete position_option_.position_;
      }
      break;
    }
    case kNoPosition: {
      if (GetArena() == nullptr) {
        delete position_option_.no_position_;
      }
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = POSITION_OPTION_NOT_SET;
}


void AppendResp_Success::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.AppendResp.Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_current_revision_option();
  clear_position_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendResp_Success::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 current_revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.AppendResp.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendResp_Success::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.AppendResp.Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_revision = 1;
  if (_internal_has_current_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_current_revision(), target);
  }

  // .event_store.client.Empty no_stream = 2;
  if (_internal_has_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::no_stream(this), target, stream);
  }

  // .event_store.client.streams.AppendResp.Position position = 3;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // .event_store.client.Empty no_position = 4;
  if (_internal_has_no_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::no_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.AppendResp.Success)
  return target;
}

size_t AppendResp_Success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.AppendResp.Success)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (current_revision_option_case()) {
    // uint64 current_revision = 1;
    case kCurrentRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_current_revision());
      break;
    }
    // .event_store.client.Empty no_stream = 2;
    case kNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_revision_option_.no_stream_);
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  switch (position_option_case()) {
    // .event_store.client.streams.AppendResp.Position position = 3;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_option_.position_);
      break;
    }
    // .event_store.client.Empty no_position = 4;
    case kNoPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_option_.no_position_);
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendResp_Success::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.AppendResp.Success)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendResp_Success* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendResp_Success>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.AppendResp.Success)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.AppendResp.Success)
    MergeFrom(*source);
  }
}

void AppendResp_Success::MergeFrom(const AppendResp_Success& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.AppendResp.Success)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.current_revision_option_case()) {
    case kCurrentRevision: {
      _internal_set_current_revision(from._internal_current_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  switch (from.position_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::streams::AppendResp_Position::MergeFrom(from._internal_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
}

void AppendResp_Success::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.AppendResp.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendResp_Success::CopyFrom(const AppendResp_Success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.AppendResp.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendResp_Success::IsInitialized() const {
  return true;
}

void AppendResp_Success::InternalSwap(AppendResp_Success* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(current_revision_option_, other->current_revision_option_);
  swap(position_option_, other->position_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendResp_Success::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendResp_WrongExpectedVersion::InitAsDefaultInstance() {
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.current_revision_20_6_0_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.no_stream_20_6_0_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.expected_revision_20_6_0_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.any_20_6_0_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.stream_exists_20_6_0_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.current_revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.current_no_stream_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.expected_revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.expected_any_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.expected_stream_exists_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_AppendResp_WrongExpectedVersion_default_instance_.expected_no_stream_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class AppendResp_WrongExpectedVersion::_Internal {
 public:
  static const ::event_store::client::Empty& no_stream_20_6_0(const AppendResp_WrongExpectedVersion* msg);
  static const ::event_store::client::Empty& any_20_6_0(const AppendResp_WrongExpectedVersion* msg);
  static const ::event_store::client::Empty& stream_exists_20_6_0(const AppendResp_WrongExpectedVersion* msg);
  static const ::event_store::client::Empty& current_no_stream(const AppendResp_WrongExpectedVersion* msg);
  static const ::event_store::client::Empty& expected_any(const AppendResp_WrongExpectedVersion* msg);
  static const ::event_store::client::Empty& expected_stream_exists(const AppendResp_WrongExpectedVersion* msg);
  static const ::event_store::client::Empty& expected_no_stream(const AppendResp_WrongExpectedVersion* msg);
};

const ::event_store::client::Empty&
AppendResp_WrongExpectedVersion::_Internal::no_stream_20_6_0(const AppendResp_WrongExpectedVersion* msg) {
  return *msg->current_revision_option_20_6_0_.no_stream_20_6_0_;
}
const ::event_store::client::Empty&
AppendResp_WrongExpectedVersion::_Internal::any_20_6_0(const AppendResp_WrongExpectedVersion* msg) {
  return *msg->expected_revision_option_20_6_0_.any_20_6_0_;
}
const ::event_store::client::Empty&
AppendResp_WrongExpectedVersion::_Internal::stream_exists_20_6_0(const AppendResp_WrongExpectedVersion* msg) {
  return *msg->expected_revision_option_20_6_0_.stream_exists_20_6_0_;
}
const ::event_store::client::Empty&
AppendResp_WrongExpectedVersion::_Internal::current_no_stream(const AppendResp_WrongExpectedVersion* msg) {
  return *msg->current_revision_option_.current_no_stream_;
}
const ::event_store::client::Empty&
AppendResp_WrongExpectedVersion::_Internal::expected_any(const AppendResp_WrongExpectedVersion* msg) {
  return *msg->expected_revision_option_.expected_any_;
}
const ::event_store::client::Empty&
AppendResp_WrongExpectedVersion::_Internal::expected_stream_exists(const AppendResp_WrongExpectedVersion* msg) {
  return *msg->expected_revision_option_.expected_stream_exists_;
}
const ::event_store::client::Empty&
AppendResp_WrongExpectedVersion::_Internal::expected_no_stream(const AppendResp_WrongExpectedVersion* msg) {
  return *msg->expected_revision_option_.expected_no_stream_;
}
void AppendResp_WrongExpectedVersion::set_allocated_no_stream_20_6_0(::event_store::client::Empty* no_stream_20_6_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_current_revision_option_20_6_0();
  if (no_stream_20_6_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_stream_20_6_0)->GetArena();
    if (message_arena != submessage_arena) {
      no_stream_20_6_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_stream_20_6_0, submessage_arena);
    }
    set_has_no_stream_20_6_0();
    current_revision_option_20_6_0_.no_stream_20_6_0_ = no_stream_20_6_0;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.no_stream_20_6_0)
}
void AppendResp_WrongExpectedVersion::clear_no_stream_20_6_0() {
  if (_internal_has_no_stream_20_6_0()) {
    if (GetArena() == nullptr) {
      delete current_revision_option_20_6_0_.no_stream_20_6_0_;
    }
    clear_has_current_revision_option_20_6_0();
  }
}
void AppendResp_WrongExpectedVersion::set_allocated_any_20_6_0(::event_store::client::Empty* any_20_6_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_revision_option_20_6_0();
  if (any_20_6_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_20_6_0)->GetArena();
    if (message_arena != submessage_arena) {
      any_20_6_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_20_6_0, submessage_arena);
    }
    set_has_any_20_6_0();
    expected_revision_option_20_6_0_.any_20_6_0_ = any_20_6_0;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.any_20_6_0)
}
void AppendResp_WrongExpectedVersion::clear_any_20_6_0() {
  if (_internal_has_any_20_6_0()) {
    if (GetArena() == nullptr) {
      delete expected_revision_option_20_6_0_.any_20_6_0_;
    }
    clear_has_expected_revision_option_20_6_0();
  }
}
void AppendResp_WrongExpectedVersion::set_allocated_stream_exists_20_6_0(::event_store::client::Empty* stream_exists_20_6_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_revision_option_20_6_0();
  if (stream_exists_20_6_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_exists_20_6_0)->GetArena();
    if (message_arena != submessage_arena) {
      stream_exists_20_6_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_exists_20_6_0, submessage_arena);
    }
    set_has_stream_exists_20_6_0();
    expected_revision_option_20_6_0_.stream_exists_20_6_0_ = stream_exists_20_6_0;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.stream_exists_20_6_0)
}
void AppendResp_WrongExpectedVersion::clear_stream_exists_20_6_0() {
  if (_internal_has_stream_exists_20_6_0()) {
    if (GetArena() == nullptr) {
      delete expected_revision_option_20_6_0_.stream_exists_20_6_0_;
    }
    clear_has_expected_revision_option_20_6_0();
  }
}
void AppendResp_WrongExpectedVersion::set_allocated_current_no_stream(::event_store::client::Empty* current_no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_current_revision_option();
  if (current_no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      current_no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_no_stream, submessage_arena);
    }
    set_has_current_no_stream();
    current_revision_option_.current_no_stream_ = current_no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.current_no_stream)
}
void AppendResp_WrongExpectedVersion::clear_current_no_stream() {
  if (_internal_has_current_no_stream()) {
    if (GetArena() == nullptr) {
      delete current_revision_option_.current_no_stream_;
    }
    clear_has_current_revision_option();
  }
}
void AppendResp_WrongExpectedVersion::set_allocated_expected_any(::event_store::client::Empty* expected_any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_revision_option();
  if (expected_any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_any)->GetArena();
    if (message_arena != submessage_arena) {
      expected_any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_any, submessage_arena);
    }
    set_has_expected_any();
    expected_revision_option_.expected_any_ = expected_any;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_any)
}
void AppendResp_WrongExpectedVersion::clear_expected_any() {
  if (_internal_has_expected_any()) {
    if (GetArena() == nullptr) {
      delete expected_revision_option_.expected_any_;
    }
    clear_has_expected_revision_option();
  }
}
void AppendResp_WrongExpectedVersion::set_allocated_expected_stream_exists(::event_store::client::Empty* expected_stream_exists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_revision_option();
  if (expected_stream_exists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_stream_exists)->GetArena();
    if (message_arena != submessage_arena) {
      expected_stream_exists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_stream_exists, submessage_arena);
    }
    set_has_expected_stream_exists();
    expected_revision_option_.expected_stream_exists_ = expected_stream_exists;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_stream_exists)
}
void AppendResp_WrongExpectedVersion::clear_expected_stream_exists() {
  if (_internal_has_expected_stream_exists()) {
    if (GetArena() == nullptr) {
      delete expected_revision_option_.expected_stream_exists_;
    }
    clear_has_expected_revision_option();
  }
}
void AppendResp_WrongExpectedVersion::set_allocated_expected_no_stream(::event_store::client::Empty* expected_no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_revision_option();
  if (expected_no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      expected_no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_no_stream, submessage_arena);
    }
    set_has_expected_no_stream();
    expected_revision_option_.expected_no_stream_ = expected_no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.WrongExpectedVersion.expected_no_stream)
}
void AppendResp_WrongExpectedVersion::clear_expected_no_stream() {
  if (_internal_has_expected_no_stream()) {
    if (GetArena() == nullptr) {
      delete expected_revision_option_.expected_no_stream_;
    }
    clear_has_expected_revision_option();
  }
}
AppendResp_WrongExpectedVersion::AppendResp_WrongExpectedVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.AppendResp.WrongExpectedVersion)
}
AppendResp_WrongExpectedVersion::AppendResp_WrongExpectedVersion(const AppendResp_WrongExpectedVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_current_revision_option_20_6_0();
  switch (from.current_revision_option_20_6_0_case()) {
    case kCurrentRevision2060: {
      _internal_set_current_revision_20_6_0(from._internal_current_revision_20_6_0());
      break;
    }
    case kNoStream2060: {
      _internal_mutable_no_stream_20_6_0()->::event_store::client::Empty::MergeFrom(from._internal_no_stream_20_6_0());
      break;
    }
    case CURRENT_REVISION_OPTION_20_6_0_NOT_SET: {
      break;
    }
  }
  clear_has_expected_revision_option_20_6_0();
  switch (from.expected_revision_option_20_6_0_case()) {
    case kExpectedRevision2060: {
      _internal_set_expected_revision_20_6_0(from._internal_expected_revision_20_6_0());
      break;
    }
    case kAny2060: {
      _internal_mutable_any_20_6_0()->::event_store::client::Empty::MergeFrom(from._internal_any_20_6_0());
      break;
    }
    case kStreamExists2060: {
      _internal_mutable_stream_exists_20_6_0()->::event_store::client::Empty::MergeFrom(from._internal_stream_exists_20_6_0());
      break;
    }
    case EXPECTED_REVISION_OPTION_20_6_0_NOT_SET: {
      break;
    }
  }
  clear_has_current_revision_option();
  switch (from.current_revision_option_case()) {
    case kCurrentRevision: {
      _internal_set_current_revision(from._internal_current_revision());
      break;
    }
    case kCurrentNoStream: {
      _internal_mutable_current_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_current_no_stream());
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  clear_has_expected_revision_option();
  switch (from.expected_revision_option_case()) {
    case kExpectedRevision: {
      _internal_set_expected_revision(from._internal_expected_revision());
      break;
    }
    case kExpectedAny: {
      _internal_mutable_expected_any()->::event_store::client::Empty::MergeFrom(from._internal_expected_any());
      break;
    }
    case kExpectedStreamExists: {
      _internal_mutable_expected_stream_exists()->::event_store::client::Empty::MergeFrom(from._internal_expected_stream_exists());
      break;
    }
    case kExpectedNoStream: {
      _internal_mutable_expected_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_expected_no_stream());
      break;
    }
    case EXPECTED_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.AppendResp.WrongExpectedVersion)
}

void AppendResp_WrongExpectedVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendResp_WrongExpectedVersion_streams_2eproto.base);
  clear_has_current_revision_option_20_6_0();
  clear_has_expected_revision_option_20_6_0();
  clear_has_current_revision_option();
  clear_has_expected_revision_option();
}

AppendResp_WrongExpectedVersion::~AppendResp_WrongExpectedVersion() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.AppendResp.WrongExpectedVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendResp_WrongExpectedVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_current_revision_option_20_6_0()) {
    clear_current_revision_option_20_6_0();
  }
  if (has_expected_revision_option_20_6_0()) {
    clear_expected_revision_option_20_6_0();
  }
  if (has_current_revision_option()) {
    clear_current_revision_option();
  }
  if (has_expected_revision_option()) {
    clear_expected_revision_option();
  }
}

void AppendResp_WrongExpectedVersion::ArenaDtor(void* object) {
  AppendResp_WrongExpectedVersion* _this = reinterpret_cast< AppendResp_WrongExpectedVersion* >(object);
  (void)_this;
}
void AppendResp_WrongExpectedVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendResp_WrongExpectedVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendResp_WrongExpectedVersion& AppendResp_WrongExpectedVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendResp_WrongExpectedVersion_streams_2eproto.base);
  return *internal_default_instance();
}


void AppendResp_WrongExpectedVersion::clear_current_revision_option_20_6_0() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  switch (current_revision_option_20_6_0_case()) {
    case kCurrentRevision2060: {
      // No need to clear
      break;
    }
    case kNoStream2060: {
      if (GetArena() == nullptr) {
        delete current_revision_option_20_6_0_.no_stream_20_6_0_;
      }
      break;
    }
    case CURRENT_REVISION_OPTION_20_6_0_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CURRENT_REVISION_OPTION_20_6_0_NOT_SET;
}

void AppendResp_WrongExpectedVersion::clear_expected_revision_option_20_6_0() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  switch (expected_revision_option_20_6_0_case()) {
    case kExpectedRevision2060: {
      // No need to clear
      break;
    }
    case kAny2060: {
      if (GetArena() == nullptr) {
        delete expected_revision_option_20_6_0_.any_20_6_0_;
      }
      break;
    }
    case kStreamExists2060: {
      if (GetArena() == nullptr) {
        delete expected_revision_option_20_6_0_.stream_exists_20_6_0_;
      }
      break;
    }
    case EXPECTED_REVISION_OPTION_20_6_0_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = EXPECTED_REVISION_OPTION_20_6_0_NOT_SET;
}

void AppendResp_WrongExpectedVersion::clear_current_revision_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  switch (current_revision_option_case()) {
    case kCurrentRevision: {
      // No need to clear
      break;
    }
    case kCurrentNoStream: {
      if (GetArena() == nullptr) {
        delete current_revision_option_.current_no_stream_;
      }
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = CURRENT_REVISION_OPTION_NOT_SET;
}

void AppendResp_WrongExpectedVersion::clear_expected_revision_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  switch (expected_revision_option_case()) {
    case kExpectedRevision: {
      // No need to clear
      break;
    }
    case kExpectedAny: {
      if (GetArena() == nullptr) {
        delete expected_revision_option_.expected_any_;
      }
      break;
    }
    case kExpectedStreamExists: {
      if (GetArena() == nullptr) {
        delete expected_revision_option_.expected_stream_exists_;
      }
      break;
    }
    case kExpectedNoStream: {
      if (GetArena() == nullptr) {
        delete expected_revision_option_.expected_no_stream_;
      }
      break;
    }
    case EXPECTED_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = EXPECTED_REVISION_OPTION_NOT_SET;
}


void AppendResp_WrongExpectedVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_current_revision_option_20_6_0();
  clear_expected_revision_option_20_6_0();
  clear_current_revision_option();
  clear_expected_revision_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendResp_WrongExpectedVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 current_revision_20_6_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_current_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_stream_20_6_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_stream_20_6_0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 expected_revision_20_6_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_expected_revision_20_6_0(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty any_20_6_0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_20_6_0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty stream_exists_20_6_0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_exists_20_6_0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_revision = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty current_no_stream = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 expected_revision = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_expected_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty expected_any = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty expected_stream_exists = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_stream_exists(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty expected_no_stream = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendResp_WrongExpectedVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_revision_20_6_0 = 1;
  if (_internal_has_current_revision_20_6_0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_current_revision_20_6_0(), target);
  }

  // .event_store.client.Empty no_stream_20_6_0 = 2;
  if (_internal_has_no_stream_20_6_0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::no_stream_20_6_0(this), target, stream);
  }

  // uint64 expected_revision_20_6_0 = 3;
  if (_internal_has_expected_revision_20_6_0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_expected_revision_20_6_0(), target);
  }

  // .event_store.client.Empty any_20_6_0 = 4;
  if (_internal_has_any_20_6_0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::any_20_6_0(this), target, stream);
  }

  // .event_store.client.Empty stream_exists_20_6_0 = 5;
  if (_internal_has_stream_exists_20_6_0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stream_exists_20_6_0(this), target, stream);
  }

  // uint64 current_revision = 6;
  if (_internal_has_current_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_current_revision(), target);
  }

  // .event_store.client.Empty current_no_stream = 7;
  if (_internal_has_current_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::current_no_stream(this), target, stream);
  }

  // uint64 expected_revision = 8;
  if (_internal_has_expected_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_expected_revision(), target);
  }

  // .event_store.client.Empty expected_any = 9;
  if (_internal_has_expected_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::expected_any(this), target, stream);
  }

  // .event_store.client.Empty expected_stream_exists = 10;
  if (_internal_has_expected_stream_exists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::expected_stream_exists(this), target, stream);
  }

  // .event_store.client.Empty expected_no_stream = 11;
  if (_internal_has_expected_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::expected_no_stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.AppendResp.WrongExpectedVersion)
  return target;
}

size_t AppendResp_WrongExpectedVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (current_revision_option_20_6_0_case()) {
    // uint64 current_revision_20_6_0 = 1;
    case kCurrentRevision2060: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_current_revision_20_6_0());
      break;
    }
    // .event_store.client.Empty no_stream_20_6_0 = 2;
    case kNoStream2060: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_revision_option_20_6_0_.no_stream_20_6_0_);
      break;
    }
    case CURRENT_REVISION_OPTION_20_6_0_NOT_SET: {
      break;
    }
  }
  switch (expected_revision_option_20_6_0_case()) {
    // uint64 expected_revision_20_6_0 = 3;
    case kExpectedRevision2060: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expected_revision_20_6_0());
      break;
    }
    // .event_store.client.Empty any_20_6_0 = 4;
    case kAny2060: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_revision_option_20_6_0_.any_20_6_0_);
      break;
    }
    // .event_store.client.Empty stream_exists_20_6_0 = 5;
    case kStreamExists2060: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_revision_option_20_6_0_.stream_exists_20_6_0_);
      break;
    }
    case EXPECTED_REVISION_OPTION_20_6_0_NOT_SET: {
      break;
    }
  }
  switch (current_revision_option_case()) {
    // uint64 current_revision = 6;
    case kCurrentRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_current_revision());
      break;
    }
    // .event_store.client.Empty current_no_stream = 7;
    case kCurrentNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_revision_option_.current_no_stream_);
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  switch (expected_revision_option_case()) {
    // uint64 expected_revision = 8;
    case kExpectedRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expected_revision());
      break;
    }
    // .event_store.client.Empty expected_any = 9;
    case kExpectedAny: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_revision_option_.expected_any_);
      break;
    }
    // .event_store.client.Empty expected_stream_exists = 10;
    case kExpectedStreamExists: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_revision_option_.expected_stream_exists_);
      break;
    }
    // .event_store.client.Empty expected_no_stream = 11;
    case kExpectedNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_revision_option_.expected_no_stream_);
      break;
    }
    case EXPECTED_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendResp_WrongExpectedVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendResp_WrongExpectedVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendResp_WrongExpectedVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.AppendResp.WrongExpectedVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.AppendResp.WrongExpectedVersion)
    MergeFrom(*source);
  }
}

void AppendResp_WrongExpectedVersion::MergeFrom(const AppendResp_WrongExpectedVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.current_revision_option_20_6_0_case()) {
    case kCurrentRevision2060: {
      _internal_set_current_revision_20_6_0(from._internal_current_revision_20_6_0());
      break;
    }
    case kNoStream2060: {
      _internal_mutable_no_stream_20_6_0()->::event_store::client::Empty::MergeFrom(from._internal_no_stream_20_6_0());
      break;
    }
    case CURRENT_REVISION_OPTION_20_6_0_NOT_SET: {
      break;
    }
  }
  switch (from.expected_revision_option_20_6_0_case()) {
    case kExpectedRevision2060: {
      _internal_set_expected_revision_20_6_0(from._internal_expected_revision_20_6_0());
      break;
    }
    case kAny2060: {
      _internal_mutable_any_20_6_0()->::event_store::client::Empty::MergeFrom(from._internal_any_20_6_0());
      break;
    }
    case kStreamExists2060: {
      _internal_mutable_stream_exists_20_6_0()->::event_store::client::Empty::MergeFrom(from._internal_stream_exists_20_6_0());
      break;
    }
    case EXPECTED_REVISION_OPTION_20_6_0_NOT_SET: {
      break;
    }
  }
  switch (from.current_revision_option_case()) {
    case kCurrentRevision: {
      _internal_set_current_revision(from._internal_current_revision());
      break;
    }
    case kCurrentNoStream: {
      _internal_mutable_current_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_current_no_stream());
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  switch (from.expected_revision_option_case()) {
    case kExpectedRevision: {
      _internal_set_expected_revision(from._internal_expected_revision());
      break;
    }
    case kExpectedAny: {
      _internal_mutable_expected_any()->::event_store::client::Empty::MergeFrom(from._internal_expected_any());
      break;
    }
    case kExpectedStreamExists: {
      _internal_mutable_expected_stream_exists()->::event_store::client::Empty::MergeFrom(from._internal_expected_stream_exists());
      break;
    }
    case kExpectedNoStream: {
      _internal_mutable_expected_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_expected_no_stream());
      break;
    }
    case EXPECTED_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
}

void AppendResp_WrongExpectedVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendResp_WrongExpectedVersion::CopyFrom(const AppendResp_WrongExpectedVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.AppendResp.WrongExpectedVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendResp_WrongExpectedVersion::IsInitialized() const {
  return true;
}

void AppendResp_WrongExpectedVersion::InternalSwap(AppendResp_WrongExpectedVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(current_revision_option_20_6_0_, other->current_revision_option_20_6_0_);
  swap(expected_revision_option_20_6_0_, other->expected_revision_option_20_6_0_);
  swap(current_revision_option_, other->current_revision_option_);
  swap(expected_revision_option_, other->expected_revision_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendResp_WrongExpectedVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendResp::InitAsDefaultInstance() {
  ::event_store::client::streams::_AppendResp_default_instance_.success_ = const_cast< ::event_store::client::streams::AppendResp_Success*>(
      ::event_store::client::streams::AppendResp_Success::internal_default_instance());
  ::event_store::client::streams::_AppendResp_default_instance_.wrong_expected_version_ = const_cast< ::event_store::client::streams::AppendResp_WrongExpectedVersion*>(
      ::event_store::client::streams::AppendResp_WrongExpectedVersion::internal_default_instance());
}
class AppendResp::_Internal {
 public:
  static const ::event_store::client::streams::AppendResp_Success& success(const AppendResp* msg);
  static const ::event_store::client::streams::AppendResp_WrongExpectedVersion& wrong_expected_version(const AppendResp* msg);
};

const ::event_store::client::streams::AppendResp_Success&
AppendResp::_Internal::success(const AppendResp* msg) {
  return *msg->result_.success_;
}
const ::event_store::client::streams::AppendResp_WrongExpectedVersion&
AppendResp::_Internal::wrong_expected_version(const AppendResp* msg) {
  return *msg->result_.wrong_expected_version_;
}
void AppendResp::set_allocated_success(::event_store::client::streams::AppendResp_Success* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_result();
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(success);
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    set_has_success();
    result_.success_ = success;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.success)
}
void AppendResp::set_allocated_wrong_expected_version(::event_store::client::streams::AppendResp_WrongExpectedVersion* wrong_expected_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_result();
  if (wrong_expected_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wrong_expected_version);
    if (message_arena != submessage_arena) {
      wrong_expected_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrong_expected_version, submessage_arena);
    }
    set_has_wrong_expected_version();
    result_.wrong_expected_version_ = wrong_expected_version;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.AppendResp.wrong_expected_version)
}
AppendResp::AppendResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.AppendResp)
}
AppendResp::AppendResp(const AppendResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_result();
  switch (from.result_case()) {
    case kSuccess: {
      _internal_mutable_success()->::event_store::client::streams::AppendResp_Success::MergeFrom(from._internal_success());
      break;
    }
    case kWrongExpectedVersion: {
      _internal_mutable_wrong_expected_version()->::event_store::client::streams::AppendResp_WrongExpectedVersion::MergeFrom(from._internal_wrong_expected_version());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.AppendResp)
}

void AppendResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendResp_streams_2eproto.base);
  clear_has_result();
}

AppendResp::~AppendResp() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.AppendResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_result()) {
    clear_result();
  }
}

void AppendResp::ArenaDtor(void* object) {
  AppendResp* _this = reinterpret_cast< AppendResp* >(object);
  (void)_this;
}
void AppendResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendResp& AppendResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendResp_streams_2eproto.base);
  return *internal_default_instance();
}


void AppendResp::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.AppendResp)
  switch (result_case()) {
    case kSuccess: {
      if (GetArena() == nullptr) {
        delete result_.success_;
      }
      break;
    }
    case kWrongExpectedVersion: {
      if (GetArena() == nullptr) {
        delete result_.wrong_expected_version_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void AppendResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.AppendResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.AppendResp.Success success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_success(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.AppendResp.WrongExpectedVersion wrong_expected_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrong_expected_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.AppendResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.AppendResp.Success success = 1;
  if (_internal_has_success()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::success(this), target, stream);
  }

  // .event_store.client.streams.AppendResp.WrongExpectedVersion wrong_expected_version = 2;
  if (_internal_has_wrong_expected_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::wrong_expected_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.AppendResp)
  return target;
}

size_t AppendResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.AppendResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_case()) {
    // .event_store.client.streams.AppendResp.Success success = 1;
    case kSuccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.success_);
      break;
    }
    // .event_store.client.streams.AppendResp.WrongExpectedVersion wrong_expected_version = 2;
    case kWrongExpectedVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.wrong_expected_version_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.AppendResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.AppendResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.AppendResp)
    MergeFrom(*source);
  }
}

void AppendResp::MergeFrom(const AppendResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.AppendResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kSuccess: {
      _internal_mutable_success()->::event_store::client::streams::AppendResp_Success::MergeFrom(from._internal_success());
      break;
    }
    case kWrongExpectedVersion: {
      _internal_mutable_wrong_expected_version()->::event_store::client::streams::AppendResp_WrongExpectedVersion::MergeFrom(from._internal_wrong_expected_version());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void AppendResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.AppendResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendResp::CopyFrom(const AppendResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.AppendResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendResp::IsInitialized() const {
  return true;
}

void AppendResp::InternalSwap(AppendResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchAppendReq_Options::InitAsDefaultInstance() {
  ::event_store::client::streams::_BatchAppendReq_Options_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::streams::_BatchAppendReq_Options_default_instance_.stream_position_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_BatchAppendReq_Options_default_instance_.no_stream_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::event_store::client::streams::_BatchAppendReq_Options_default_instance_.any_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::event_store::client::streams::_BatchAppendReq_Options_default_instance_.stream_exists_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::event_store::client::streams::_BatchAppendReq_Options_default_instance_._instance.get_mutable()->deadline_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class BatchAppendReq_Options::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const BatchAppendReq_Options* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& no_stream(const BatchAppendReq_Options* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& any(const BatchAppendReq_Options* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& stream_exists(const BatchAppendReq_Options* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& deadline(const BatchAppendReq_Options* msg);
};

const ::event_store::client::StreamIdentifier&
BatchAppendReq_Options::_Internal::stream_identifier(const BatchAppendReq_Options* msg) {
  return *msg->stream_identifier_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
BatchAppendReq_Options::_Internal::no_stream(const BatchAppendReq_Options* msg) {
  return *msg->expected_stream_position_.no_stream_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
BatchAppendReq_Options::_Internal::any(const BatchAppendReq_Options* msg) {
  return *msg->expected_stream_position_.any_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
BatchAppendReq_Options::_Internal::stream_exists(const BatchAppendReq_Options* msg) {
  return *msg->expected_stream_position_.stream_exists_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
BatchAppendReq_Options::_Internal::deadline(const BatchAppendReq_Options* msg) {
  return *msg->deadline_;
}
void BatchAppendReq_Options::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
void BatchAppendReq_Options::set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_position();
  if (no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_stream, submessage_arena);
    }
    set_has_no_stream();
    expected_stream_position_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.Options.no_stream)
}
void BatchAppendReq_Options::clear_no_stream() {
  if (_internal_has_no_stream()) {
    if (GetArena() == nullptr) {
      delete expected_stream_position_.no_stream_;
    }
    clear_has_expected_stream_position();
  }
}
void BatchAppendReq_Options::set_allocated_any(PROTOBUF_NAMESPACE_ID::Empty* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_position();
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any)->GetArena();
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    set_has_any();
    expected_stream_position_.any_ = any;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.Options.any)
}
void BatchAppendReq_Options::clear_any() {
  if (_internal_has_any()) {
    if (GetArena() == nullptr) {
      delete expected_stream_position_.any_;
    }
    clear_has_expected_stream_position();
  }
}
void BatchAppendReq_Options::set_allocated_stream_exists(PROTOBUF_NAMESPACE_ID::Empty* stream_exists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_position();
  if (stream_exists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_exists)->GetArena();
    if (message_arena != submessage_arena) {
      stream_exists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_exists, submessage_arena);
    }
    set_has_stream_exists();
    expected_stream_position_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendReq.Options.stream_exists)
}
void BatchAppendReq_Options::clear_stream_exists() {
  if (_internal_has_stream_exists()) {
    if (GetArena() == nullptr) {
      delete expected_stream_position_.stream_exists_;
    }
    clear_has_expected_stream_position();
  }
}
void BatchAppendReq_Options::clear_deadline() {
  if (GetArena() == nullptr && deadline_ != nullptr) {
    delete deadline_;
  }
  deadline_ = nullptr;
}
BatchAppendReq_Options::BatchAppendReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.BatchAppendReq.Options)
}
BatchAppendReq_Options::BatchAppendReq_Options(const BatchAppendReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  if (from._internal_has_deadline()) {
    deadline_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.deadline_);
  } else {
    deadline_ = nullptr;
  }
  clear_has_expected_stream_position();
  switch (from.expected_stream_position_case()) {
    case kStreamPosition: {
      _internal_set_stream_position(from._internal_stream_position());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_POSITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.BatchAppendReq.Options)
}

void BatchAppendReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchAppendReq_Options_streams_2eproto.base);
  ::memset(&stream_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadline_) -
      reinterpret_cast<char*>(&stream_identifier_)) + sizeof(deadline_));
  clear_has_expected_stream_position();
}

BatchAppendReq_Options::~BatchAppendReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.BatchAppendReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchAppendReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_identifier_;
  if (this != internal_default_instance()) delete deadline_;
  if (has_expected_stream_position()) {
    clear_expected_stream_position();
  }
}

void BatchAppendReq_Options::ArenaDtor(void* object) {
  BatchAppendReq_Options* _this = reinterpret_cast< BatchAppendReq_Options* >(object);
  (void)_this;
}
void BatchAppendReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchAppendReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchAppendReq_Options& BatchAppendReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchAppendReq_Options_streams_2eproto.base);
  return *internal_default_instance();
}


void BatchAppendReq_Options::clear_expected_stream_position() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.BatchAppendReq.Options)
  switch (expected_stream_position_case()) {
    case kStreamPosition: {
      // No need to clear
      break;
    }
    case kNoStream: {
      if (GetArena() == nullptr) {
        delete expected_stream_position_.no_stream_;
      }
      break;
    }
    case kAny: {
      if (GetArena() == nullptr) {
        delete expected_stream_position_.any_;
      }
      break;
    }
    case kStreamExists: {
      if (GetArena() == nullptr) {
        delete expected_stream_position_.stream_exists_;
      }
      break;
    }
    case EXPECTED_STREAM_POSITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPECTED_STREAM_POSITION_NOT_SET;
}


void BatchAppendReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.BatchAppendReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  if (GetArena() == nullptr && deadline_ != nullptr) {
    delete deadline_;
  }
  deadline_ = nullptr;
  clear_expected_stream_position();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchAppendReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stream_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_stream_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty no_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty any = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty stream_exists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_exists(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deadline = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deadline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchAppendReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.BatchAppendReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 stream_position = 2;
  if (_internal_has_stream_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stream_position(), target);
  }

  // .google.protobuf.Empty no_stream = 3;
  if (_internal_has_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::no_stream(this), target, stream);
  }

  // .google.protobuf.Empty any = 4;
  if (_internal_has_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::any(this), target, stream);
  }

  // .google.protobuf.Empty stream_exists = 5;
  if (_internal_has_stream_exists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stream_exists(this), target, stream);
  }

  // .google.protobuf.Timestamp deadline = 6;
  if (this->has_deadline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::deadline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.BatchAppendReq.Options)
  return target;
}

size_t BatchAppendReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.BatchAppendReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  // .google.protobuf.Timestamp deadline = 6;
  if (this->has_deadline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deadline_);
  }

  switch (expected_stream_position_case()) {
    // uint64 stream_position = 2;
    case kStreamPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_position());
      break;
    }
    // .google.protobuf.Empty no_stream = 3;
    case kNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_position_.no_stream_);
      break;
    }
    // .google.protobuf.Empty any = 4;
    case kAny: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_position_.any_);
      break;
    }
    // .google.protobuf.Empty stream_exists = 5;
    case kStreamExists: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_position_.stream_exists_);
      break;
    }
    case EXPECTED_STREAM_POSITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchAppendReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.BatchAppendReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAppendReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchAppendReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.BatchAppendReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.BatchAppendReq.Options)
    MergeFrom(*source);
  }
}

void BatchAppendReq_Options::MergeFrom(const BatchAppendReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.BatchAppendReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  if (from.has_deadline()) {
    _internal_mutable_deadline()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deadline());
  }
  switch (from.expected_stream_position_case()) {
    case kStreamPosition: {
      _internal_set_stream_position(from._internal_stream_position());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_POSITION_NOT_SET: {
      break;
    }
  }
}

void BatchAppendReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.BatchAppendReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAppendReq_Options::CopyFrom(const BatchAppendReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.BatchAppendReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAppendReq_Options::IsInitialized() const {
  return true;
}

void BatchAppendReq_Options::InternalSwap(BatchAppendReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchAppendReq_Options, deadline_)
      + sizeof(BatchAppendReq_Options::deadline_)
      - PROTOBUF_FIELD_OFFSET(BatchAppendReq_Options, stream_identifier_)>(
          reinterpret_cast<char*>(&stream_identifier_),
          reinterpret_cast<char*>(&other->stream_identifier_));
  swap(expected_stream_position_, other->expected_stream_position_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchAppendReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse() {}
BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::MergeFrom(const BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void BatchAppendReq_ProposedMessage::InitAsDefaultInstance() {
  ::event_store::client::streams::_BatchAppendReq_ProposedMessage_default_instance_._instance.get_mutable()->id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
}
class BatchAppendReq_ProposedMessage::_Internal {
 public:
  static const ::event_store::client::UUID& id(const BatchAppendReq_ProposedMessage* msg);
};

const ::event_store::client::UUID&
BatchAppendReq_ProposedMessage::_Internal::id(const BatchAppendReq_ProposedMessage* msg) {
  return *msg->id_;
}
void BatchAppendReq_ProposedMessage::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
BatchAppendReq_ProposedMessage::BatchAppendReq_ProposedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.BatchAppendReq.ProposedMessage)
}
BatchAppendReq_ProposedMessage::BatchAppendReq_ProposedMessage(const BatchAppendReq_ProposedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_metadata().empty()) {
    custom_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_metadata(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::event_store::client::UUID(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.BatchAppendReq.ProposedMessage)
}

void BatchAppendReq_ProposedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchAppendReq_ProposedMessage_streams_2eproto.base);
  custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = nullptr;
}

BatchAppendReq_ProposedMessage::~BatchAppendReq_ProposedMessage() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.BatchAppendReq.ProposedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchAppendReq_ProposedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  custom_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void BatchAppendReq_ProposedMessage::ArenaDtor(void* object) {
  BatchAppendReq_ProposedMessage* _this = reinterpret_cast< BatchAppendReq_ProposedMessage* >(object);
  (void)_this;
}
void BatchAppendReq_ProposedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchAppendReq_ProposedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchAppendReq_ProposedMessage& BatchAppendReq_ProposedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchAppendReq_ProposedMessage_streams_2eproto.base);
  return *internal_default_instance();
}


void BatchAppendReq_ProposedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.BatchAppendReq.ProposedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  custom_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchAppendReq_ProposedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes custom_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_custom_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchAppendReq_ProposedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.BatchAppendReq.ProposedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // map<string, string> metadata = 2;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "event_store.client.streams.BatchAppendReq.ProposedMessage.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "event_store.client.streams.BatchAppendReq.ProposedMessage.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes custom_metadata = 3;
  if (this->custom_metadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_custom_metadata(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.BatchAppendReq.ProposedMessage)
  return target;
}

size_t BatchAppendReq_ProposedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.BatchAppendReq.ProposedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes custom_metadata = 3;
  if (this->custom_metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_custom_metadata());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .event_store.client.UUID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchAppendReq_ProposedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.BatchAppendReq.ProposedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAppendReq_ProposedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchAppendReq_ProposedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.BatchAppendReq.ProposedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.BatchAppendReq.ProposedMessage)
    MergeFrom(*source);
  }
}

void BatchAppendReq_ProposedMessage::MergeFrom(const BatchAppendReq_ProposedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.BatchAppendReq.ProposedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.custom_metadata().size() > 0) {
    _internal_set_custom_metadata(from._internal_custom_metadata());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::event_store::client::UUID::MergeFrom(from._internal_id());
  }
}

void BatchAppendReq_ProposedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.BatchAppendReq.ProposedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAppendReq_ProposedMessage::CopyFrom(const BatchAppendReq_ProposedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.BatchAppendReq.ProposedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAppendReq_ProposedMessage::IsInitialized() const {
  return true;
}

void BatchAppendReq_ProposedMessage::InternalSwap(BatchAppendReq_ProposedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  custom_metadata_.Swap(&other->custom_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchAppendReq_ProposedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchAppendReq::InitAsDefaultInstance() {
  ::event_store::client::streams::_BatchAppendReq_default_instance_._instance.get_mutable()->correlation_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::client::streams::_BatchAppendReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::streams::BatchAppendReq_Options*>(
      ::event_store::client::streams::BatchAppendReq_Options::internal_default_instance());
}
class BatchAppendReq::_Internal {
 public:
  static const ::event_store::client::UUID& correlation_id(const BatchAppendReq* msg);
  static const ::event_store::client::streams::BatchAppendReq_Options& options(const BatchAppendReq* msg);
};

const ::event_store::client::UUID&
BatchAppendReq::_Internal::correlation_id(const BatchAppendReq* msg) {
  return *msg->correlation_id_;
}
const ::event_store::client::streams::BatchAppendReq_Options&
BatchAppendReq::_Internal::options(const BatchAppendReq* msg) {
  return *msg->options_;
}
void BatchAppendReq::clear_correlation_id() {
  if (GetArena() == nullptr && correlation_id_ != nullptr) {
    delete correlation_id_;
  }
  correlation_id_ = nullptr;
}
BatchAppendReq::BatchAppendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proposed_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.BatchAppendReq)
}
BatchAppendReq::BatchAppendReq(const BatchAppendReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proposed_messages_(from.proposed_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_correlation_id()) {
    correlation_id_ = new ::event_store::client::UUID(*from.correlation_id_);
  } else {
    correlation_id_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::streams::BatchAppendReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  is_final_ = from.is_final_;
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.BatchAppendReq)
}

void BatchAppendReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchAppendReq_streams_2eproto.base);
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_final_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(is_final_));
}

BatchAppendReq::~BatchAppendReq() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.BatchAppendReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchAppendReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete correlation_id_;
  if (this != internal_default_instance()) delete options_;
}

void BatchAppendReq::ArenaDtor(void* object) {
  BatchAppendReq* _this = reinterpret_cast< BatchAppendReq* >(object);
  (void)_this;
}
void BatchAppendReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchAppendReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchAppendReq& BatchAppendReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchAppendReq_streams_2eproto.base);
  return *internal_default_instance();
}


void BatchAppendReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.BatchAppendReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposed_messages_.Clear();
  if (GetArena() == nullptr && correlation_id_ != nullptr) {
    delete correlation_id_;
  }
  correlation_id_ = nullptr;
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  is_final_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchAppendReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_correlation_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.BatchAppendReq.Options options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event_store.client.streams.BatchAppendReq.ProposedMessage proposed_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposed_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_final = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchAppendReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.BatchAppendReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID correlation_id = 1;
  if (this->has_correlation_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::correlation_id(this), target, stream);
  }

  // .event_store.client.streams.BatchAppendReq.Options options = 2;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  // repeated .event_store.client.streams.BatchAppendReq.ProposedMessage proposed_messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposed_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_proposed_messages(i), target, stream);
  }

  // bool is_final = 4;
  if (this->is_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_final(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.BatchAppendReq)
  return target;
}

size_t BatchAppendReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.BatchAppendReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_store.client.streams.BatchAppendReq.ProposedMessage proposed_messages = 3;
  total_size += 1UL * this->_internal_proposed_messages_size();
  for (const auto& msg : this->proposed_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .event_store.client.UUID correlation_id = 1;
  if (this->has_correlation_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *correlation_id_);
  }

  // .event_store.client.streams.BatchAppendReq.Options options = 2;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // bool is_final = 4;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchAppendReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.BatchAppendReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAppendReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchAppendReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.BatchAppendReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.BatchAppendReq)
    MergeFrom(*source);
  }
}

void BatchAppendReq::MergeFrom(const BatchAppendReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.BatchAppendReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proposed_messages_.MergeFrom(from.proposed_messages_);
  if (from.has_correlation_id()) {
    _internal_mutable_correlation_id()->::event_store::client::UUID::MergeFrom(from._internal_correlation_id());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::streams::BatchAppendReq_Options::MergeFrom(from._internal_options());
  }
  if (from.is_final() != 0) {
    _internal_set_is_final(from._internal_is_final());
  }
}

void BatchAppendReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.BatchAppendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAppendReq::CopyFrom(const BatchAppendReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.BatchAppendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAppendReq::IsInitialized() const {
  return true;
}

void BatchAppendReq::InternalSwap(BatchAppendReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposed_messages_.InternalSwap(&other->proposed_messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchAppendReq, is_final_)
      + sizeof(BatchAppendReq::is_final_)
      - PROTOBUF_FIELD_OFFSET(BatchAppendReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchAppendReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchAppendResp_Success::InitAsDefaultInstance() {
  ::event_store::client::streams::_BatchAppendResp_Success_default_instance_.current_revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_BatchAppendResp_Success_default_instance_.no_stream_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::event_store::client::streams::_BatchAppendResp_Success_default_instance_.position_ = const_cast< ::event_store::client::AllStreamPosition*>(
      ::event_store::client::AllStreamPosition::internal_default_instance());
  ::event_store::client::streams::_BatchAppendResp_Success_default_instance_.no_position_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
}
class BatchAppendResp_Success::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Empty& no_stream(const BatchAppendResp_Success* msg);
  static const ::event_store::client::AllStreamPosition& position(const BatchAppendResp_Success* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& no_position(const BatchAppendResp_Success* msg);
};

const PROTOBUF_NAMESPACE_ID::Empty&
BatchAppendResp_Success::_Internal::no_stream(const BatchAppendResp_Success* msg) {
  return *msg->current_revision_option_.no_stream_;
}
const ::event_store::client::AllStreamPosition&
BatchAppendResp_Success::_Internal::position(const BatchAppendResp_Success* msg) {
  return *msg->position_option_.position_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
BatchAppendResp_Success::_Internal::no_position(const BatchAppendResp_Success* msg) {
  return *msg->position_option_.no_position_;
}
void BatchAppendResp_Success::set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_current_revision_option();
  if (no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_stream, submessage_arena);
    }
    set_has_no_stream();
    current_revision_option_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.Success.no_stream)
}
void BatchAppendResp_Success::clear_no_stream() {
  if (_internal_has_no_stream()) {
    if (GetArena() == nullptr) {
      delete current_revision_option_.no_stream_;
    }
    clear_has_current_revision_option();
  }
}
void BatchAppendResp_Success::set_allocated_position(::event_store::client::AllStreamPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position_option();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    position_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.Success.position)
}
void BatchAppendResp_Success::clear_position() {
  if (_internal_has_position()) {
    if (GetArena() == nullptr) {
      delete position_option_.position_;
    }
    clear_has_position_option();
  }
}
void BatchAppendResp_Success::set_allocated_no_position(PROTOBUF_NAMESPACE_ID::Empty* no_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position_option();
  if (no_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_position)->GetArena();
    if (message_arena != submessage_arena) {
      no_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_position, submessage_arena);
    }
    set_has_no_position();
    position_option_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.Success.no_position)
}
void BatchAppendResp_Success::clear_no_position() {
  if (_internal_has_no_position()) {
    if (GetArena() == nullptr) {
      delete position_option_.no_position_;
    }
    clear_has_position_option();
  }
}
BatchAppendResp_Success::BatchAppendResp_Success(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.BatchAppendResp.Success)
}
BatchAppendResp_Success::BatchAppendResp_Success(const BatchAppendResp_Success& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_current_revision_option();
  switch (from.current_revision_option_case()) {
    case kCurrentRevision: {
      _internal_set_current_revision(from._internal_current_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  clear_has_position_option();
  switch (from.position_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::AllStreamPosition::MergeFrom(from._internal_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.BatchAppendResp.Success)
}

void BatchAppendResp_Success::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchAppendResp_Success_streams_2eproto.base);
  clear_has_current_revision_option();
  clear_has_position_option();
}

BatchAppendResp_Success::~BatchAppendResp_Success() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.BatchAppendResp.Success)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchAppendResp_Success::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_current_revision_option()) {
    clear_current_revision_option();
  }
  if (has_position_option()) {
    clear_position_option();
  }
}

void BatchAppendResp_Success::ArenaDtor(void* object) {
  BatchAppendResp_Success* _this = reinterpret_cast< BatchAppendResp_Success* >(object);
  (void)_this;
}
void BatchAppendResp_Success::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchAppendResp_Success::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchAppendResp_Success& BatchAppendResp_Success::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchAppendResp_Success_streams_2eproto.base);
  return *internal_default_instance();
}


void BatchAppendResp_Success::clear_current_revision_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.BatchAppendResp.Success)
  switch (current_revision_option_case()) {
    case kCurrentRevision: {
      // No need to clear
      break;
    }
    case kNoStream: {
      if (GetArena() == nullptr) {
        delete current_revision_option_.no_stream_;
      }
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CURRENT_REVISION_OPTION_NOT_SET;
}

void BatchAppendResp_Success::clear_position_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.BatchAppendResp.Success)
  switch (position_option_case()) {
    case kPosition: {
      if (GetArena() == nullptr) {
        delete position_option_.position_;
      }
      break;
    }
    case kNoPosition: {
      if (GetArena() == nullptr) {
        delete position_option_.no_position_;
      }
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = POSITION_OPTION_NOT_SET;
}


void BatchAppendResp_Success::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.BatchAppendResp.Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_current_revision_option();
  clear_position_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchAppendResp_Success::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 current_revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_current_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty no_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.AllStreamPosition position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty no_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchAppendResp_Success::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.BatchAppendResp.Success)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_revision = 1;
  if (_internal_has_current_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_current_revision(), target);
  }

  // .google.protobuf.Empty no_stream = 2;
  if (_internal_has_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::no_stream(this), target, stream);
  }

  // .event_store.client.AllStreamPosition position = 3;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // .google.protobuf.Empty no_position = 4;
  if (_internal_has_no_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::no_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.BatchAppendResp.Success)
  return target;
}

size_t BatchAppendResp_Success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.BatchAppendResp.Success)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (current_revision_option_case()) {
    // uint64 current_revision = 1;
    case kCurrentRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_current_revision());
      break;
    }
    // .google.protobuf.Empty no_stream = 2;
    case kNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_revision_option_.no_stream_);
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  switch (position_option_case()) {
    // .event_store.client.AllStreamPosition position = 3;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_option_.position_);
      break;
    }
    // .google.protobuf.Empty no_position = 4;
    case kNoPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_option_.no_position_);
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchAppendResp_Success::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.BatchAppendResp.Success)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAppendResp_Success* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchAppendResp_Success>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.BatchAppendResp.Success)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.BatchAppendResp.Success)
    MergeFrom(*source);
  }
}

void BatchAppendResp_Success::MergeFrom(const BatchAppendResp_Success& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.BatchAppendResp.Success)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.current_revision_option_case()) {
    case kCurrentRevision: {
      _internal_set_current_revision(from._internal_current_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case CURRENT_REVISION_OPTION_NOT_SET: {
      break;
    }
  }
  switch (from.position_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::AllStreamPosition::MergeFrom(from._internal_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
}

void BatchAppendResp_Success::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.BatchAppendResp.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAppendResp_Success::CopyFrom(const BatchAppendResp_Success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.BatchAppendResp.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAppendResp_Success::IsInitialized() const {
  return true;
}

void BatchAppendResp_Success::InternalSwap(BatchAppendResp_Success* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(current_revision_option_, other->current_revision_option_);
  swap(position_option_, other->position_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchAppendResp_Success::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchAppendResp::InitAsDefaultInstance() {
  ::event_store::client::streams::_BatchAppendResp_default_instance_._instance.get_mutable()->correlation_id_ = const_cast< ::event_store::client::UUID*>(
      ::event_store::client::UUID::internal_default_instance());
  ::event_store::client::streams::_BatchAppendResp_default_instance_.error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::event_store::client::streams::_BatchAppendResp_default_instance_.success_ = const_cast< ::event_store::client::streams::BatchAppendResp_Success*>(
      ::event_store::client::streams::BatchAppendResp_Success::internal_default_instance());
  ::event_store::client::streams::_BatchAppendResp_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::streams::_BatchAppendResp_default_instance_.stream_position_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_BatchAppendResp_default_instance_.no_stream_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::event_store::client::streams::_BatchAppendResp_default_instance_.any_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::event_store::client::streams::_BatchAppendResp_default_instance_.stream_exists_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
}
class BatchAppendResp::_Internal {
 public:
  static const ::event_store::client::UUID& correlation_id(const BatchAppendResp* msg);
  static const ::google::rpc::Status& error(const BatchAppendResp* msg);
  static const ::event_store::client::streams::BatchAppendResp_Success& success(const BatchAppendResp* msg);
  static const ::event_store::client::StreamIdentifier& stream_identifier(const BatchAppendResp* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& no_stream(const BatchAppendResp* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& any(const BatchAppendResp* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& stream_exists(const BatchAppendResp* msg);
};

const ::event_store::client::UUID&
BatchAppendResp::_Internal::correlation_id(const BatchAppendResp* msg) {
  return *msg->correlation_id_;
}
const ::google::rpc::Status&
BatchAppendResp::_Internal::error(const BatchAppendResp* msg) {
  return *msg->result_.error_;
}
const ::event_store::client::streams::BatchAppendResp_Success&
BatchAppendResp::_Internal::success(const BatchAppendResp* msg) {
  return *msg->result_.success_;
}
const ::event_store::client::StreamIdentifier&
BatchAppendResp::_Internal::stream_identifier(const BatchAppendResp* msg) {
  return *msg->stream_identifier_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
BatchAppendResp::_Internal::no_stream(const BatchAppendResp* msg) {
  return *msg->expected_stream_position_.no_stream_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
BatchAppendResp::_Internal::any(const BatchAppendResp* msg) {
  return *msg->expected_stream_position_.any_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
BatchAppendResp::_Internal::stream_exists(const BatchAppendResp* msg) {
  return *msg->expected_stream_position_.stream_exists_;
}
void BatchAppendResp::clear_correlation_id() {
  if (GetArena() == nullptr && correlation_id_ != nullptr) {
    delete correlation_id_;
  }
  correlation_id_ = nullptr;
}
void BatchAppendResp::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_result();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.error)
}
void BatchAppendResp::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete result_.error_;
    }
    clear_has_result();
  }
}
void BatchAppendResp::set_allocated_success(::event_store::client::streams::BatchAppendResp_Success* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_result();
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(success);
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    set_has_success();
    result_.success_ = success;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.success)
}
void BatchAppendResp::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
void BatchAppendResp::set_allocated_no_stream(PROTOBUF_NAMESPACE_ID::Empty* no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_position();
  if (no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_stream, submessage_arena);
    }
    set_has_no_stream();
    expected_stream_position_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.no_stream)
}
void BatchAppendResp::clear_no_stream() {
  if (_internal_has_no_stream()) {
    if (GetArena() == nullptr) {
      delete expected_stream_position_.no_stream_;
    }
    clear_has_expected_stream_position();
  }
}
void BatchAppendResp::set_allocated_any(PROTOBUF_NAMESPACE_ID::Empty* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_position();
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any)->GetArena();
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    set_has_any();
    expected_stream_position_.any_ = any;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.any)
}
void BatchAppendResp::clear_any() {
  if (_internal_has_any()) {
    if (GetArena() == nullptr) {
      delete expected_stream_position_.any_;
    }
    clear_has_expected_stream_position();
  }
}
void BatchAppendResp::set_allocated_stream_exists(PROTOBUF_NAMESPACE_ID::Empty* stream_exists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_position();
  if (stream_exists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_exists)->GetArena();
    if (message_arena != submessage_arena) {
      stream_exists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_exists, submessage_arena);
    }
    set_has_stream_exists();
    expected_stream_position_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.BatchAppendResp.stream_exists)
}
void BatchAppendResp::clear_stream_exists() {
  if (_internal_has_stream_exists()) {
    if (GetArena() == nullptr) {
      delete expected_stream_position_.stream_exists_;
    }
    clear_has_expected_stream_position();
  }
}
BatchAppendResp::BatchAppendResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.BatchAppendResp)
}
BatchAppendResp::BatchAppendResp(const BatchAppendResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_correlation_id()) {
    correlation_id_ = new ::event_store::client::UUID(*from.correlation_id_);
  } else {
    correlation_id_ = nullptr;
  }
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  clear_has_result();
  switch (from.result_case()) {
    case kError: {
      _internal_mutable_error()->::google::rpc::Status::MergeFrom(from._internal_error());
      break;
    }
    case kSuccess: {
      _internal_mutable_success()->::event_store::client::streams::BatchAppendResp_Success::MergeFrom(from._internal_success());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  clear_has_expected_stream_position();
  switch (from.expected_stream_position_case()) {
    case kStreamPosition: {
      _internal_set_stream_position(from._internal_stream_position());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_POSITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.BatchAppendResp)
}

void BatchAppendResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchAppendResp_streams_2eproto.base);
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_identifier_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(stream_identifier_));
  clear_has_result();
  clear_has_expected_stream_position();
}

BatchAppendResp::~BatchAppendResp() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.BatchAppendResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchAppendResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete correlation_id_;
  if (this != internal_default_instance()) delete stream_identifier_;
  if (has_result()) {
    clear_result();
  }
  if (has_expected_stream_position()) {
    clear_expected_stream_position();
  }
}

void BatchAppendResp::ArenaDtor(void* object) {
  BatchAppendResp* _this = reinterpret_cast< BatchAppendResp* >(object);
  (void)_this;
}
void BatchAppendResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchAppendResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchAppendResp& BatchAppendResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchAppendResp_streams_2eproto.base);
  return *internal_default_instance();
}


void BatchAppendResp::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.BatchAppendResp)
  switch (result_case()) {
    case kError: {
      if (GetArena() == nullptr) {
        delete result_.error_;
      }
      break;
    }
    case kSuccess: {
      if (GetArena() == nullptr) {
        delete result_.success_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}

void BatchAppendResp::clear_expected_stream_position() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.BatchAppendResp)
  switch (expected_stream_position_case()) {
    case kStreamPosition: {
      // No need to clear
      break;
    }
    case kNoStream: {
      if (GetArena() == nullptr) {
        delete expected_stream_position_.no_stream_;
      }
      break;
    }
    case kAny: {
      if (GetArena() == nullptr) {
        delete expected_stream_position_.any_;
      }
      break;
    }
    case kStreamExists: {
      if (GetArena() == nullptr) {
        delete expected_stream_position_.stream_exists_;
      }
      break;
    }
    case EXPECTED_STREAM_POSITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = EXPECTED_STREAM_POSITION_NOT_SET;
}


void BatchAppendResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.BatchAppendResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && correlation_id_ != nullptr) {
    delete correlation_id_;
  }
  correlation_id_ = nullptr;
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  clear_result();
  clear_expected_stream_position();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchAppendResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.UUID correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_correlation_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.rpc.Status error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.streams.BatchAppendResp.Success success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_success(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.StreamIdentifier stream_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stream_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_stream_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty no_stream = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty any = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty stream_exists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_exists(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchAppendResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.BatchAppendResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.UUID correlation_id = 1;
  if (this->has_correlation_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::correlation_id(this), target, stream);
  }

  // .google.rpc.Status error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .event_store.client.streams.BatchAppendResp.Success success = 3;
  if (_internal_has_success()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::success(this), target, stream);
  }

  // .event_store.client.StreamIdentifier stream_identifier = 4;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 stream_position = 5;
  if (_internal_has_stream_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_stream_position(), target);
  }

  // .google.protobuf.Empty no_stream = 6;
  if (_internal_has_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::no_stream(this), target, stream);
  }

  // .google.protobuf.Empty any = 7;
  if (_internal_has_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::any(this), target, stream);
  }

  // .google.protobuf.Empty stream_exists = 8;
  if (_internal_has_stream_exists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stream_exists(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.BatchAppendResp)
  return target;
}

size_t BatchAppendResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.BatchAppendResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.UUID correlation_id = 1;
  if (this->has_correlation_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *correlation_id_);
  }

  // .event_store.client.StreamIdentifier stream_identifier = 4;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  switch (result_case()) {
    // .google.rpc.Status error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.error_);
      break;
    }
    // .event_store.client.streams.BatchAppendResp.Success success = 3;
    case kSuccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.success_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  switch (expected_stream_position_case()) {
    // uint64 stream_position = 5;
    case kStreamPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_stream_position());
      break;
    }
    // .google.protobuf.Empty no_stream = 6;
    case kNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_position_.no_stream_);
      break;
    }
    // .google.protobuf.Empty any = 7;
    case kAny: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_position_.any_);
      break;
    }
    // .google.protobuf.Empty stream_exists = 8;
    case kStreamExists: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_position_.stream_exists_);
      break;
    }
    case EXPECTED_STREAM_POSITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchAppendResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.BatchAppendResp)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchAppendResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchAppendResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.BatchAppendResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.BatchAppendResp)
    MergeFrom(*source);
  }
}

void BatchAppendResp::MergeFrom(const BatchAppendResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.BatchAppendResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_correlation_id()) {
    _internal_mutable_correlation_id()->::event_store::client::UUID::MergeFrom(from._internal_correlation_id());
  }
  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  switch (from.result_case()) {
    case kError: {
      _internal_mutable_error()->::google::rpc::Status::MergeFrom(from._internal_error());
      break;
    }
    case kSuccess: {
      _internal_mutable_success()->::event_store::client::streams::BatchAppendResp_Success::MergeFrom(from._internal_success());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  switch (from.expected_stream_position_case()) {
    case kStreamPosition: {
      _internal_set_stream_position(from._internal_stream_position());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_POSITION_NOT_SET: {
      break;
    }
  }
}

void BatchAppendResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.BatchAppendResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchAppendResp::CopyFrom(const BatchAppendResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.BatchAppendResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAppendResp::IsInitialized() const {
  return true;
}

void BatchAppendResp::InternalSwap(BatchAppendResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchAppendResp, stream_identifier_)
      + sizeof(BatchAppendResp::stream_identifier_)
      - PROTOBUF_FIELD_OFFSET(BatchAppendResp, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
  swap(result_, other->result_);
  swap(expected_stream_position_, other->expected_stream_position_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchAppendResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteReq_Options::InitAsDefaultInstance() {
  ::event_store::client::streams::_DeleteReq_Options_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::streams::_DeleteReq_Options_default_instance_.revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_DeleteReq_Options_default_instance_.no_stream_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_DeleteReq_Options_default_instance_.any_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_DeleteReq_Options_default_instance_.stream_exists_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class DeleteReq_Options::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const DeleteReq_Options* msg);
  static const ::event_store::client::Empty& no_stream(const DeleteReq_Options* msg);
  static const ::event_store::client::Empty& any(const DeleteReq_Options* msg);
  static const ::event_store::client::Empty& stream_exists(const DeleteReq_Options* msg);
};

const ::event_store::client::StreamIdentifier&
DeleteReq_Options::_Internal::stream_identifier(const DeleteReq_Options* msg) {
  return *msg->stream_identifier_;
}
const ::event_store::client::Empty&
DeleteReq_Options::_Internal::no_stream(const DeleteReq_Options* msg) {
  return *msg->expected_stream_revision_.no_stream_;
}
const ::event_store::client::Empty&
DeleteReq_Options::_Internal::any(const DeleteReq_Options* msg) {
  return *msg->expected_stream_revision_.any_;
}
const ::event_store::client::Empty&
DeleteReq_Options::_Internal::stream_exists(const DeleteReq_Options* msg) {
  return *msg->expected_stream_revision_.stream_exists_;
}
void DeleteReq_Options::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
void DeleteReq_Options::set_allocated_no_stream(::event_store::client::Empty* no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_stream, submessage_arena);
    }
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.DeleteReq.Options.no_stream)
}
void DeleteReq_Options::clear_no_stream() {
  if (_internal_has_no_stream()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.no_stream_;
    }
    clear_has_expected_stream_revision();
  }
}
void DeleteReq_Options::set_allocated_any(::event_store::client::Empty* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any)->GetArena();
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    set_has_any();
    expected_stream_revision_.any_ = any;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.DeleteReq.Options.any)
}
void DeleteReq_Options::clear_any() {
  if (_internal_has_any()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.any_;
    }
    clear_has_expected_stream_revision();
  }
}
void DeleteReq_Options::set_allocated_stream_exists(::event_store::client::Empty* stream_exists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (stream_exists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_exists)->GetArena();
    if (message_arena != submessage_arena) {
      stream_exists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_exists, submessage_arena);
    }
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.DeleteReq.Options.stream_exists)
}
void DeleteReq_Options::clear_stream_exists() {
  if (_internal_has_stream_exists()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.stream_exists_;
    }
    clear_has_expected_stream_revision();
  }
}
DeleteReq_Options::DeleteReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.DeleteReq.Options)
}
DeleteReq_Options::DeleteReq_Options(const DeleteReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  clear_has_expected_stream_revision();
  switch (from.expected_stream_revision_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->::event_store::client::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->::event_store::client::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.DeleteReq.Options)
}

void DeleteReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteReq_Options_streams_2eproto.base);
  stream_identifier_ = nullptr;
  clear_has_expected_stream_revision();
}

DeleteReq_Options::~DeleteReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.DeleteReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_identifier_;
  if (has_expected_stream_revision()) {
    clear_expected_stream_revision();
  }
}

void DeleteReq_Options::ArenaDtor(void* object) {
  DeleteReq_Options* _this = reinterpret_cast< DeleteReq_Options* >(object);
  (void)_this;
}
void DeleteReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteReq_Options& DeleteReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteReq_Options_streams_2eproto.base);
  return *internal_default_instance();
}


void DeleteReq_Options::clear_expected_stream_revision() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.DeleteReq.Options)
  switch (expected_stream_revision_case()) {
    case kRevision: {
      // No need to clear
      break;
    }
    case kNoStream: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.no_stream_;
      }
      break;
    }
    case kAny: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.any_;
      }
      break;
    }
    case kStreamExists: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.stream_exists_;
      }
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPECTED_STREAM_REVISION_NOT_SET;
}


void DeleteReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.DeleteReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  clear_expected_stream_revision();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty any = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty stream_exists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_exists(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.DeleteReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 revision = 2;
  if (_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_revision(), target);
  }

  // .event_store.client.Empty no_stream = 3;
  if (_internal_has_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::no_stream(this), target, stream);
  }

  // .event_store.client.Empty any = 4;
  if (_internal_has_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::any(this), target, stream);
  }

  // .event_store.client.Empty stream_exists = 5;
  if (_internal_has_stream_exists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stream_exists(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.DeleteReq.Options)
  return target;
}

size_t DeleteReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.DeleteReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  switch (expected_stream_revision_case()) {
    // uint64 revision = 2;
    case kRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_revision());
      break;
    }
    // .event_store.client.Empty no_stream = 3;
    case kNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.no_stream_);
      break;
    }
    // .event_store.client.Empty any = 4;
    case kAny: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.any_);
      break;
    }
    // .event_store.client.Empty stream_exists = 5;
    case kStreamExists: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.stream_exists_);
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.DeleteReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.DeleteReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.DeleteReq.Options)
    MergeFrom(*source);
  }
}

void DeleteReq_Options::MergeFrom(const DeleteReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.DeleteReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  switch (from.expected_stream_revision_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->::event_store::client::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->::event_store::client::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
}

void DeleteReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.DeleteReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReq_Options::CopyFrom(const DeleteReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.DeleteReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReq_Options::IsInitialized() const {
  return true;
}

void DeleteReq_Options::InternalSwap(DeleteReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_identifier_, other->stream_identifier_);
  swap(expected_stream_revision_, other->expected_stream_revision_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteReq::InitAsDefaultInstance() {
  ::event_store::client::streams::_DeleteReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::streams::DeleteReq_Options*>(
      ::event_store::client::streams::DeleteReq_Options::internal_default_instance());
}
class DeleteReq::_Internal {
 public:
  static const ::event_store::client::streams::DeleteReq_Options& options(const DeleteReq* msg);
};

const ::event_store::client::streams::DeleteReq_Options&
DeleteReq::_Internal::options(const DeleteReq* msg) {
  return *msg->options_;
}
DeleteReq::DeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.DeleteReq)
}
DeleteReq::DeleteReq(const DeleteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::streams::DeleteReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.DeleteReq)
}

void DeleteReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteReq_streams_2eproto.base);
  options_ = nullptr;
}

DeleteReq::~DeleteReq() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.DeleteReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void DeleteReq::ArenaDtor(void* object) {
  DeleteReq* _this = reinterpret_cast< DeleteReq* >(object);
  (void)_this;
}
void DeleteReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteReq& DeleteReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteReq_streams_2eproto.base);
  return *internal_default_instance();
}


void DeleteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.DeleteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.DeleteReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.DeleteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.DeleteReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.DeleteReq)
  return target;
}

size_t DeleteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.DeleteReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.streams.DeleteReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.DeleteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.DeleteReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.DeleteReq)
    MergeFrom(*source);
  }
}

void DeleteReq::MergeFrom(const DeleteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.DeleteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::streams::DeleteReq_Options::MergeFrom(from._internal_options());
  }
}

void DeleteReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.DeleteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReq::CopyFrom(const DeleteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.DeleteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReq::IsInitialized() const {
  return true;
}

void DeleteReq::InternalSwap(DeleteReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteResp_Position::InitAsDefaultInstance() {
}
class DeleteResp_Position::_Internal {
 public:
};

DeleteResp_Position::DeleteResp_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.DeleteResp.Position)
}
DeleteResp_Position::DeleteResp_Position(const DeleteResp_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_position_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.DeleteResp.Position)
}

void DeleteResp_Position::SharedCtor() {
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
}

DeleteResp_Position::~DeleteResp_Position() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.DeleteResp.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResp_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteResp_Position::ArenaDtor(void* object) {
  DeleteResp_Position* _this = reinterpret_cast< DeleteResp_Position* >(object);
  (void)_this;
}
void DeleteResp_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResp_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResp_Position& DeleteResp_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResp_Position_streams_2eproto.base);
  return *internal_default_instance();
}


void DeleteResp_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.DeleteResp.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResp_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResp_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.DeleteResp.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_commit_position(), target);
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prepare_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.DeleteResp.Position)
  return target;
}

size_t DeleteResp_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.DeleteResp.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResp_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.DeleteResp.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResp_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResp_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.DeleteResp.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.DeleteResp.Position)
    MergeFrom(*source);
  }
}

void DeleteResp_Position::MergeFrom(const DeleteResp_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.DeleteResp.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
}

void DeleteResp_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.DeleteResp.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResp_Position::CopyFrom(const DeleteResp_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.DeleteResp.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResp_Position::IsInitialized() const {
  return true;
}

void DeleteResp_Position::InternalSwap(DeleteResp_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteResp_Position, prepare_position_)
      + sizeof(DeleteResp_Position::prepare_position_)
      - PROTOBUF_FIELD_OFFSET(DeleteResp_Position, commit_position_)>(
          reinterpret_cast<char*>(&commit_position_),
          reinterpret_cast<char*>(&other->commit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResp_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteResp::InitAsDefaultInstance() {
  ::event_store::client::streams::_DeleteResp_default_instance_.position_ = const_cast< ::event_store::client::streams::DeleteResp_Position*>(
      ::event_store::client::streams::DeleteResp_Position::internal_default_instance());
  ::event_store::client::streams::_DeleteResp_default_instance_.no_position_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class DeleteResp::_Internal {
 public:
  static const ::event_store::client::streams::DeleteResp_Position& position(const DeleteResp* msg);
  static const ::event_store::client::Empty& no_position(const DeleteResp* msg);
};

const ::event_store::client::streams::DeleteResp_Position&
DeleteResp::_Internal::position(const DeleteResp* msg) {
  return *msg->position_option_.position_;
}
const ::event_store::client::Empty&
DeleteResp::_Internal::no_position(const DeleteResp* msg) {
  return *msg->position_option_.no_position_;
}
void DeleteResp::set_allocated_position(::event_store::client::streams::DeleteResp_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position_option();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    position_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.DeleteResp.position)
}
void DeleteResp::set_allocated_no_position(::event_store::client::Empty* no_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position_option();
  if (no_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_position)->GetArena();
    if (message_arena != submessage_arena) {
      no_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_position, submessage_arena);
    }
    set_has_no_position();
    position_option_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.DeleteResp.no_position)
}
void DeleteResp::clear_no_position() {
  if (_internal_has_no_position()) {
    if (GetArena() == nullptr) {
      delete position_option_.no_position_;
    }
    clear_has_position_option();
  }
}
DeleteResp::DeleteResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.DeleteResp)
}
DeleteResp::DeleteResp(const DeleteResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_position_option();
  switch (from.position_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::streams::DeleteResp_Position::MergeFrom(from._internal_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.DeleteResp)
}

void DeleteResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteResp_streams_2eproto.base);
  clear_has_position_option();
}

DeleteResp::~DeleteResp() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.DeleteResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_position_option()) {
    clear_position_option();
  }
}

void DeleteResp::ArenaDtor(void* object) {
  DeleteResp* _this = reinterpret_cast< DeleteResp* >(object);
  (void)_this;
}
void DeleteResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResp& DeleteResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResp_streams_2eproto.base);
  return *internal_default_instance();
}


void DeleteResp::clear_position_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.DeleteResp)
  switch (position_option_case()) {
    case kPosition: {
      if (GetArena() == nullptr) {
        delete position_option_.position_;
      }
      break;
    }
    case kNoPosition: {
      if (GetArena() == nullptr) {
        delete position_option_.no_position_;
      }
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POSITION_OPTION_NOT_SET;
}


void DeleteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.DeleteResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_position_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.DeleteResp.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.DeleteResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.DeleteResp.Position position = 1;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .event_store.client.Empty no_position = 2;
  if (_internal_has_no_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::no_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.DeleteResp)
  return target;
}

size_t DeleteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.DeleteResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (position_option_case()) {
    // .event_store.client.streams.DeleteResp.Position position = 1;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_option_.position_);
      break;
    }
    // .event_store.client.Empty no_position = 2;
    case kNoPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_option_.no_position_);
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.DeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.DeleteResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.DeleteResp)
    MergeFrom(*source);
  }
}

void DeleteResp::MergeFrom(const DeleteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.DeleteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.position_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::streams::DeleteResp_Position::MergeFrom(from._internal_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
}

void DeleteResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.DeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResp::CopyFrom(const DeleteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.DeleteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResp::IsInitialized() const {
  return true;
}

void DeleteResp::InternalSwap(DeleteResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_option_, other->position_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TombstoneReq_Options::InitAsDefaultInstance() {
  ::event_store::client::streams::_TombstoneReq_Options_default_instance_._instance.get_mutable()->stream_identifier_ = const_cast< ::event_store::client::StreamIdentifier*>(
      ::event_store::client::StreamIdentifier::internal_default_instance());
  ::event_store::client::streams::_TombstoneReq_Options_default_instance_.revision_ = PROTOBUF_ULONGLONG(0);
  ::event_store::client::streams::_TombstoneReq_Options_default_instance_.no_stream_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_TombstoneReq_Options_default_instance_.any_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
  ::event_store::client::streams::_TombstoneReq_Options_default_instance_.stream_exists_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class TombstoneReq_Options::_Internal {
 public:
  static const ::event_store::client::StreamIdentifier& stream_identifier(const TombstoneReq_Options* msg);
  static const ::event_store::client::Empty& no_stream(const TombstoneReq_Options* msg);
  static const ::event_store::client::Empty& any(const TombstoneReq_Options* msg);
  static const ::event_store::client::Empty& stream_exists(const TombstoneReq_Options* msg);
};

const ::event_store::client::StreamIdentifier&
TombstoneReq_Options::_Internal::stream_identifier(const TombstoneReq_Options* msg) {
  return *msg->stream_identifier_;
}
const ::event_store::client::Empty&
TombstoneReq_Options::_Internal::no_stream(const TombstoneReq_Options* msg) {
  return *msg->expected_stream_revision_.no_stream_;
}
const ::event_store::client::Empty&
TombstoneReq_Options::_Internal::any(const TombstoneReq_Options* msg) {
  return *msg->expected_stream_revision_.any_;
}
const ::event_store::client::Empty&
TombstoneReq_Options::_Internal::stream_exists(const TombstoneReq_Options* msg) {
  return *msg->expected_stream_revision_.stream_exists_;
}
void TombstoneReq_Options::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
void TombstoneReq_Options::set_allocated_no_stream(::event_store::client::Empty* no_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (no_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_stream)->GetArena();
    if (message_arena != submessage_arena) {
      no_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_stream, submessage_arena);
    }
    set_has_no_stream();
    expected_stream_revision_.no_stream_ = no_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.TombstoneReq.Options.no_stream)
}
void TombstoneReq_Options::clear_no_stream() {
  if (_internal_has_no_stream()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.no_stream_;
    }
    clear_has_expected_stream_revision();
  }
}
void TombstoneReq_Options::set_allocated_any(::event_store::client::Empty* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any)->GetArena();
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    set_has_any();
    expected_stream_revision_.any_ = any;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.TombstoneReq.Options.any)
}
void TombstoneReq_Options::clear_any() {
  if (_internal_has_any()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.any_;
    }
    clear_has_expected_stream_revision();
  }
}
void TombstoneReq_Options::set_allocated_stream_exists(::event_store::client::Empty* stream_exists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_expected_stream_revision();
  if (stream_exists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_exists)->GetArena();
    if (message_arena != submessage_arena) {
      stream_exists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_exists, submessage_arena);
    }
    set_has_stream_exists();
    expected_stream_revision_.stream_exists_ = stream_exists;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.TombstoneReq.Options.stream_exists)
}
void TombstoneReq_Options::clear_stream_exists() {
  if (_internal_has_stream_exists()) {
    if (GetArena() == nullptr) {
      delete expected_stream_revision_.stream_exists_;
    }
    clear_has_expected_stream_revision();
  }
}
TombstoneReq_Options::TombstoneReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.TombstoneReq.Options)
}
TombstoneReq_Options::TombstoneReq_Options(const TombstoneReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream_identifier()) {
    stream_identifier_ = new ::event_store::client::StreamIdentifier(*from.stream_identifier_);
  } else {
    stream_identifier_ = nullptr;
  }
  clear_has_expected_stream_revision();
  switch (from.expected_stream_revision_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->::event_store::client::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->::event_store::client::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.TombstoneReq.Options)
}

void TombstoneReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TombstoneReq_Options_streams_2eproto.base);
  stream_identifier_ = nullptr;
  clear_has_expected_stream_revision();
}

TombstoneReq_Options::~TombstoneReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.TombstoneReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TombstoneReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stream_identifier_;
  if (has_expected_stream_revision()) {
    clear_expected_stream_revision();
  }
}

void TombstoneReq_Options::ArenaDtor(void* object) {
  TombstoneReq_Options* _this = reinterpret_cast< TombstoneReq_Options* >(object);
  (void)_this;
}
void TombstoneReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TombstoneReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TombstoneReq_Options& TombstoneReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TombstoneReq_Options_streams_2eproto.base);
  return *internal_default_instance();
}


void TombstoneReq_Options::clear_expected_stream_revision() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.TombstoneReq.Options)
  switch (expected_stream_revision_case()) {
    case kRevision: {
      // No need to clear
      break;
    }
    case kNoStream: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.no_stream_;
      }
      break;
    }
    case kAny: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.any_;
      }
      break;
    }
    case kStreamExists: {
      if (GetArena() == nullptr) {
        delete expected_stream_revision_.stream_exists_;
      }
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPECTED_STREAM_REVISION_NOT_SET;
}


void TombstoneReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.TombstoneReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
  clear_expected_stream_revision();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TombstoneReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.StreamIdentifier stream_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 revision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty any = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty stream_exists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_exists(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TombstoneReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.TombstoneReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stream_identifier(this), target, stream);
  }

  // uint64 revision = 2;
  if (_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_revision(), target);
  }

  // .event_store.client.Empty no_stream = 3;
  if (_internal_has_no_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::no_stream(this), target, stream);
  }

  // .event_store.client.Empty any = 4;
  if (_internal_has_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::any(this), target, stream);
  }

  // .event_store.client.Empty stream_exists = 5;
  if (_internal_has_stream_exists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stream_exists(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.TombstoneReq.Options)
  return target;
}

size_t TombstoneReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.TombstoneReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.StreamIdentifier stream_identifier = 1;
  if (this->has_stream_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_identifier_);
  }

  switch (expected_stream_revision_case()) {
    // uint64 revision = 2;
    case kRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_revision());
      break;
    }
    // .event_store.client.Empty no_stream = 3;
    case kNoStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.no_stream_);
      break;
    }
    // .event_store.client.Empty any = 4;
    case kAny: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.any_);
      break;
    }
    // .event_store.client.Empty stream_exists = 5;
    case kStreamExists: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expected_stream_revision_.stream_exists_);
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TombstoneReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.TombstoneReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const TombstoneReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TombstoneReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.TombstoneReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.TombstoneReq.Options)
    MergeFrom(*source);
  }
}

void TombstoneReq_Options::MergeFrom(const TombstoneReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.TombstoneReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stream_identifier()) {
    _internal_mutable_stream_identifier()->::event_store::client::StreamIdentifier::MergeFrom(from._internal_stream_identifier());
  }
  switch (from.expected_stream_revision_case()) {
    case kRevision: {
      _internal_set_revision(from._internal_revision());
      break;
    }
    case kNoStream: {
      _internal_mutable_no_stream()->::event_store::client::Empty::MergeFrom(from._internal_no_stream());
      break;
    }
    case kAny: {
      _internal_mutable_any()->::event_store::client::Empty::MergeFrom(from._internal_any());
      break;
    }
    case kStreamExists: {
      _internal_mutable_stream_exists()->::event_store::client::Empty::MergeFrom(from._internal_stream_exists());
      break;
    }
    case EXPECTED_STREAM_REVISION_NOT_SET: {
      break;
    }
  }
}

void TombstoneReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.TombstoneReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TombstoneReq_Options::CopyFrom(const TombstoneReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.TombstoneReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TombstoneReq_Options::IsInitialized() const {
  return true;
}

void TombstoneReq_Options::InternalSwap(TombstoneReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(stream_identifier_, other->stream_identifier_);
  swap(expected_stream_revision_, other->expected_stream_revision_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TombstoneReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TombstoneReq::InitAsDefaultInstance() {
  ::event_store::client::streams::_TombstoneReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::streams::TombstoneReq_Options*>(
      ::event_store::client::streams::TombstoneReq_Options::internal_default_instance());
}
class TombstoneReq::_Internal {
 public:
  static const ::event_store::client::streams::TombstoneReq_Options& options(const TombstoneReq* msg);
};

const ::event_store::client::streams::TombstoneReq_Options&
TombstoneReq::_Internal::options(const TombstoneReq* msg) {
  return *msg->options_;
}
TombstoneReq::TombstoneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.TombstoneReq)
}
TombstoneReq::TombstoneReq(const TombstoneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::streams::TombstoneReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.TombstoneReq)
}

void TombstoneReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TombstoneReq_streams_2eproto.base);
  options_ = nullptr;
}

TombstoneReq::~TombstoneReq() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.TombstoneReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TombstoneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void TombstoneReq::ArenaDtor(void* object) {
  TombstoneReq* _this = reinterpret_cast< TombstoneReq* >(object);
  (void)_this;
}
void TombstoneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TombstoneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TombstoneReq& TombstoneReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TombstoneReq_streams_2eproto.base);
  return *internal_default_instance();
}


void TombstoneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.TombstoneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TombstoneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.TombstoneReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TombstoneReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.TombstoneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.TombstoneReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.TombstoneReq)
  return target;
}

size_t TombstoneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.TombstoneReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.streams.TombstoneReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TombstoneReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.TombstoneReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TombstoneReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TombstoneReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.TombstoneReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.TombstoneReq)
    MergeFrom(*source);
  }
}

void TombstoneReq::MergeFrom(const TombstoneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.TombstoneReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::streams::TombstoneReq_Options::MergeFrom(from._internal_options());
  }
}

void TombstoneReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.TombstoneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TombstoneReq::CopyFrom(const TombstoneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.TombstoneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TombstoneReq::IsInitialized() const {
  return true;
}

void TombstoneReq::InternalSwap(TombstoneReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TombstoneReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TombstoneResp_Position::InitAsDefaultInstance() {
}
class TombstoneResp_Position::_Internal {
 public:
};

TombstoneResp_Position::TombstoneResp_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.TombstoneResp.Position)
}
TombstoneResp_Position::TombstoneResp_Position(const TombstoneResp_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commit_position_, &from.commit_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_position_) -
    reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.TombstoneResp.Position)
}

void TombstoneResp_Position::SharedCtor() {
  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
}

TombstoneResp_Position::~TombstoneResp_Position() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.TombstoneResp.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TombstoneResp_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TombstoneResp_Position::ArenaDtor(void* object) {
  TombstoneResp_Position* _this = reinterpret_cast< TombstoneResp_Position* >(object);
  (void)_this;
}
void TombstoneResp_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TombstoneResp_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TombstoneResp_Position& TombstoneResp_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TombstoneResp_Position_streams_2eproto.base);
  return *internal_default_instance();
}


void TombstoneResp_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.TombstoneResp.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&commit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prepare_position_) -
      reinterpret_cast<char*>(&commit_position_)) + sizeof(prepare_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TombstoneResp_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 commit_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          commit_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prepare_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prepare_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TombstoneResp_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.TombstoneResp.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_commit_position(), target);
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prepare_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.TombstoneResp.Position)
  return target;
}

size_t TombstoneResp_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.TombstoneResp.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 commit_position = 1;
  if (this->commit_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_position());
  }

  // uint64 prepare_position = 2;
  if (this->prepare_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prepare_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TombstoneResp_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.TombstoneResp.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const TombstoneResp_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TombstoneResp_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.TombstoneResp.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.TombstoneResp.Position)
    MergeFrom(*source);
  }
}

void TombstoneResp_Position::MergeFrom(const TombstoneResp_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.TombstoneResp.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commit_position() != 0) {
    _internal_set_commit_position(from._internal_commit_position());
  }
  if (from.prepare_position() != 0) {
    _internal_set_prepare_position(from._internal_prepare_position());
  }
}

void TombstoneResp_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.TombstoneResp.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TombstoneResp_Position::CopyFrom(const TombstoneResp_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.TombstoneResp.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TombstoneResp_Position::IsInitialized() const {
  return true;
}

void TombstoneResp_Position::InternalSwap(TombstoneResp_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TombstoneResp_Position, prepare_position_)
      + sizeof(TombstoneResp_Position::prepare_position_)
      - PROTOBUF_FIELD_OFFSET(TombstoneResp_Position, commit_position_)>(
          reinterpret_cast<char*>(&commit_position_),
          reinterpret_cast<char*>(&other->commit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TombstoneResp_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TombstoneResp::InitAsDefaultInstance() {
  ::event_store::client::streams::_TombstoneResp_default_instance_.position_ = const_cast< ::event_store::client::streams::TombstoneResp_Position*>(
      ::event_store::client::streams::TombstoneResp_Position::internal_default_instance());
  ::event_store::client::streams::_TombstoneResp_default_instance_.no_position_ = const_cast< ::event_store::client::Empty*>(
      ::event_store::client::Empty::internal_default_instance());
}
class TombstoneResp::_Internal {
 public:
  static const ::event_store::client::streams::TombstoneResp_Position& position(const TombstoneResp* msg);
  static const ::event_store::client::Empty& no_position(const TombstoneResp* msg);
};

const ::event_store::client::streams::TombstoneResp_Position&
TombstoneResp::_Internal::position(const TombstoneResp* msg) {
  return *msg->position_option_.position_;
}
const ::event_store::client::Empty&
TombstoneResp::_Internal::no_position(const TombstoneResp* msg) {
  return *msg->position_option_.no_position_;
}
void TombstoneResp::set_allocated_position(::event_store::client::streams::TombstoneResp_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position_option();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    position_option_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.TombstoneResp.position)
}
void TombstoneResp::set_allocated_no_position(::event_store::client::Empty* no_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_position_option();
  if (no_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(no_position)->GetArena();
    if (message_arena != submessage_arena) {
      no_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_position, submessage_arena);
    }
    set_has_no_position();
    position_option_.no_position_ = no_position;
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.streams.TombstoneResp.no_position)
}
void TombstoneResp::clear_no_position() {
  if (_internal_has_no_position()) {
    if (GetArena() == nullptr) {
      delete position_option_.no_position_;
    }
    clear_has_position_option();
  }
}
TombstoneResp::TombstoneResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.streams.TombstoneResp)
}
TombstoneResp::TombstoneResp(const TombstoneResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_position_option();
  switch (from.position_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::streams::TombstoneResp_Position::MergeFrom(from._internal_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.streams.TombstoneResp)
}

void TombstoneResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TombstoneResp_streams_2eproto.base);
  clear_has_position_option();
}

TombstoneResp::~TombstoneResp() {
  // @@protoc_insertion_point(destructor:event_store.client.streams.TombstoneResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TombstoneResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_position_option()) {
    clear_position_option();
  }
}

void TombstoneResp::ArenaDtor(void* object) {
  TombstoneResp* _this = reinterpret_cast< TombstoneResp* >(object);
  (void)_this;
}
void TombstoneResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TombstoneResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TombstoneResp& TombstoneResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TombstoneResp_streams_2eproto.base);
  return *internal_default_instance();
}


void TombstoneResp::clear_position_option() {
// @@protoc_insertion_point(one_of_clear_start:event_store.client.streams.TombstoneResp)
  switch (position_option_case()) {
    case kPosition: {
      if (GetArena() == nullptr) {
        delete position_option_.position_;
      }
      break;
    }
    case kNoPosition: {
      if (GetArena() == nullptr) {
        delete position_option_.no_position_;
      }
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POSITION_OPTION_NOT_SET;
}


void TombstoneResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.streams.TombstoneResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_position_option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TombstoneResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.streams.TombstoneResp.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.Empty no_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TombstoneResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.streams.TombstoneResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.streams.TombstoneResp.Position position = 1;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .event_store.client.Empty no_position = 2;
  if (_internal_has_no_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::no_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.streams.TombstoneResp)
  return target;
}

size_t TombstoneResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.streams.TombstoneResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (position_option_case()) {
    // .event_store.client.streams.TombstoneResp.Position position = 1;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_option_.position_);
      break;
    }
    // .event_store.client.Empty no_position = 2;
    case kNoPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_option_.no_position_);
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TombstoneResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.streams.TombstoneResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TombstoneResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TombstoneResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.streams.TombstoneResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.streams.TombstoneResp)
    MergeFrom(*source);
  }
}

void TombstoneResp::MergeFrom(const TombstoneResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.streams.TombstoneResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.position_option_case()) {
    case kPosition: {
      _internal_mutable_position()->::event_store::client::streams::TombstoneResp_Position::MergeFrom(from._internal_position());
      break;
    }
    case kNoPosition: {
      _internal_mutable_no_position()->::event_store::client::Empty::MergeFrom(from._internal_no_position());
      break;
    }
    case POSITION_OPTION_NOT_SET: {
      break;
    }
  }
}

void TombstoneResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.streams.TombstoneResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TombstoneResp::CopyFrom(const TombstoneResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.streams.TombstoneResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TombstoneResp::IsInitialized() const {
  return true;
}

void TombstoneResp::InternalSwap(TombstoneResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_option_, other->position_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TombstoneResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace streams
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options_StreamOptions* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_StreamOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options_StreamOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options_AllOptions* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_AllOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options_AllOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options_SubscriptionOptions* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_SubscriptionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options_SubscriptionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options_Position* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options_FilterOptions_Expression >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options_FilterOptions* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_FilterOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options_FilterOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options_UUIDOption* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_UUIDOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options_UUIDOption >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options_ControlOption* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options_ControlOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options_ControlOption >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq_Options* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadReq* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadResp_ReadEvent_RecordedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadResp_ReadEvent* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadResp_ReadEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadResp_ReadEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadResp_SubscriptionConfirmation* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadResp_SubscriptionConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadResp_SubscriptionConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadResp_Checkpoint* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadResp_Checkpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadResp_Checkpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadResp_StreamNotFound* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadResp_StreamNotFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadResp_StreamNotFound >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::ReadResp* Arena::CreateMaybeMessage< ::event_store::client::streams::ReadResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::ReadResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::AppendReq_Options* Arena::CreateMaybeMessage< ::event_store::client::streams::AppendReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::AppendReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::AppendReq_ProposedMessage_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::AppendReq_ProposedMessage* Arena::CreateMaybeMessage< ::event_store::client::streams::AppendReq_ProposedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::AppendReq_ProposedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::AppendReq* Arena::CreateMaybeMessage< ::event_store::client::streams::AppendReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::AppendReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::AppendResp_Position* Arena::CreateMaybeMessage< ::event_store::client::streams::AppendResp_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::AppendResp_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::AppendResp_Success* Arena::CreateMaybeMessage< ::event_store::client::streams::AppendResp_Success >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::AppendResp_Success >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::AppendResp_WrongExpectedVersion* Arena::CreateMaybeMessage< ::event_store::client::streams::AppendResp_WrongExpectedVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::AppendResp_WrongExpectedVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::AppendResp* Arena::CreateMaybeMessage< ::event_store::client::streams::AppendResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::AppendResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::BatchAppendReq_Options* Arena::CreateMaybeMessage< ::event_store::client::streams::BatchAppendReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::BatchAppendReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::BatchAppendReq_ProposedMessage_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::BatchAppendReq_ProposedMessage* Arena::CreateMaybeMessage< ::event_store::client::streams::BatchAppendReq_ProposedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::BatchAppendReq_ProposedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::BatchAppendReq* Arena::CreateMaybeMessage< ::event_store::client::streams::BatchAppendReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::BatchAppendReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::BatchAppendResp_Success* Arena::CreateMaybeMessage< ::event_store::client::streams::BatchAppendResp_Success >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::BatchAppendResp_Success >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::BatchAppendResp* Arena::CreateMaybeMessage< ::event_store::client::streams::BatchAppendResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::BatchAppendResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::DeleteReq_Options* Arena::CreateMaybeMessage< ::event_store::client::streams::DeleteReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::DeleteReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::DeleteReq* Arena::CreateMaybeMessage< ::event_store::client::streams::DeleteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::DeleteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::DeleteResp_Position* Arena::CreateMaybeMessage< ::event_store::client::streams::DeleteResp_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::DeleteResp_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::DeleteResp* Arena::CreateMaybeMessage< ::event_store::client::streams::DeleteResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::DeleteResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::TombstoneReq_Options* Arena::CreateMaybeMessage< ::event_store::client::streams::TombstoneReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::TombstoneReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::TombstoneReq* Arena::CreateMaybeMessage< ::event_store::client::streams::TombstoneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::TombstoneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::TombstoneResp_Position* Arena::CreateMaybeMessage< ::event_store::client::streams::TombstoneResp_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::TombstoneResp_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::streams::TombstoneResp* Arena::CreateMaybeMessage< ::event_store::client::streams::TombstoneResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::streams::TombstoneResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

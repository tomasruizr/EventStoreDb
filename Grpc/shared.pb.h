// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shared_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shared_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shared_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shared_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shared_2eproto;
namespace event_store {
namespace client {
class AccessDenied;
class AccessDeniedDefaultTypeInternal;
extern AccessDeniedDefaultTypeInternal _AccessDenied_default_instance_;
class AllStreamPosition;
class AllStreamPositionDefaultTypeInternal;
extern AllStreamPositionDefaultTypeInternal _AllStreamPosition_default_instance_;
class BadRequest;
class BadRequestDefaultTypeInternal;
extern BadRequestDefaultTypeInternal _BadRequest_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class InvalidTransaction;
class InvalidTransactionDefaultTypeInternal;
extern InvalidTransactionDefaultTypeInternal _InvalidTransaction_default_instance_;
class MaximumAppendSizeExceeded;
class MaximumAppendSizeExceededDefaultTypeInternal;
extern MaximumAppendSizeExceededDefaultTypeInternal _MaximumAppendSizeExceeded_default_instance_;
class StreamDeleted;
class StreamDeletedDefaultTypeInternal;
extern StreamDeletedDefaultTypeInternal _StreamDeleted_default_instance_;
class StreamIdentifier;
class StreamIdentifierDefaultTypeInternal;
extern StreamIdentifierDefaultTypeInternal _StreamIdentifier_default_instance_;
class Timeout;
class TimeoutDefaultTypeInternal;
extern TimeoutDefaultTypeInternal _Timeout_default_instance_;
class UUID;
class UUIDDefaultTypeInternal;
extern UUIDDefaultTypeInternal _UUID_default_instance_;
class UUID_Structured;
class UUID_StructuredDefaultTypeInternal;
extern UUID_StructuredDefaultTypeInternal _UUID_Structured_default_instance_;
class Unknown;
class UnknownDefaultTypeInternal;
extern UnknownDefaultTypeInternal _Unknown_default_instance_;
class WrongExpectedVersion;
class WrongExpectedVersionDefaultTypeInternal;
extern WrongExpectedVersionDefaultTypeInternal _WrongExpectedVersion_default_instance_;
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> ::event_store::client::AccessDenied* Arena::CreateMaybeMessage<::event_store::client::AccessDenied>(Arena*);
template<> ::event_store::client::AllStreamPosition* Arena::CreateMaybeMessage<::event_store::client::AllStreamPosition>(Arena*);
template<> ::event_store::client::BadRequest* Arena::CreateMaybeMessage<::event_store::client::BadRequest>(Arena*);
template<> ::event_store::client::Empty* Arena::CreateMaybeMessage<::event_store::client::Empty>(Arena*);
template<> ::event_store::client::InvalidTransaction* Arena::CreateMaybeMessage<::event_store::client::InvalidTransaction>(Arena*);
template<> ::event_store::client::MaximumAppendSizeExceeded* Arena::CreateMaybeMessage<::event_store::client::MaximumAppendSizeExceeded>(Arena*);
template<> ::event_store::client::StreamDeleted* Arena::CreateMaybeMessage<::event_store::client::StreamDeleted>(Arena*);
template<> ::event_store::client::StreamIdentifier* Arena::CreateMaybeMessage<::event_store::client::StreamIdentifier>(Arena*);
template<> ::event_store::client::Timeout* Arena::CreateMaybeMessage<::event_store::client::Timeout>(Arena*);
template<> ::event_store::client::UUID* Arena::CreateMaybeMessage<::event_store::client::UUID>(Arena*);
template<> ::event_store::client::UUID_Structured* Arena::CreateMaybeMessage<::event_store::client::UUID_Structured>(Arena*);
template<> ::event_store::client::Unknown* Arena::CreateMaybeMessage<::event_store::client::Unknown>(Arena*);
template<> ::event_store::client::WrongExpectedVersion* Arena::CreateMaybeMessage<::event_store::client::WrongExpectedVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event_store {
namespace client {

// ===================================================================

class UUID_Structured PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.UUID.Structured) */ {
 public:
  inline UUID_Structured() : UUID_Structured(nullptr) {};
  virtual ~UUID_Structured();

  UUID_Structured(const UUID_Structured& from);
  UUID_Structured(UUID_Structured&& from) noexcept
    : UUID_Structured() {
    *this = ::std::move(from);
  }

  inline UUID_Structured& operator=(const UUID_Structured& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUID_Structured& operator=(UUID_Structured&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UUID_Structured& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UUID_Structured* internal_default_instance() {
    return reinterpret_cast<const UUID_Structured*>(
               &_UUID_Structured_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UUID_Structured& a, UUID_Structured& b) {
    a.Swap(&b);
  }
  inline void Swap(UUID_Structured* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUID_Structured* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUID_Structured* New() const final {
    return CreateMaybeMessage<UUID_Structured>(nullptr);
  }

  UUID_Structured* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUID_Structured>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUID_Structured& from);
  void MergeFrom(const UUID_Structured& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUID_Structured* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.UUID.Structured";
  }
  protected:
  explicit UUID_Structured(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMostSignificantBitsFieldNumber = 1,
    kLeastSignificantBitsFieldNumber = 2,
  };
  // int64 most_significant_bits = 1;
  void clear_most_significant_bits();
  ::PROTOBUF_NAMESPACE_ID::int64 most_significant_bits() const;
  void set_most_significant_bits(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_most_significant_bits() const;
  void _internal_set_most_significant_bits(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 least_significant_bits = 2;
  void clear_least_significant_bits();
  ::PROTOBUF_NAMESPACE_ID::int64 least_significant_bits() const;
  void set_least_significant_bits(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_least_significant_bits() const;
  void _internal_set_least_significant_bits(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.UUID.Structured)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 most_significant_bits_;
  ::PROTOBUF_NAMESPACE_ID::int64 least_significant_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class UUID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.UUID) */ {
 public:
  inline UUID() : UUID(nullptr) {};
  virtual ~UUID();

  UUID(const UUID& from);
  UUID(UUID&& from) noexcept
    : UUID() {
    *this = ::std::move(from);
  }

  inline UUID& operator=(const UUID& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUID& operator=(UUID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UUID& default_instance();

  enum ValueCase {
    kStructured = 1,
    kString = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UUID* internal_default_instance() {
    return reinterpret_cast<const UUID*>(
               &_UUID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UUID& a, UUID& b) {
    a.Swap(&b);
  }
  inline void Swap(UUID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UUID* New() const final {
    return CreateMaybeMessage<UUID>(nullptr);
  }

  UUID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UUID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UUID& from);
  void MergeFrom(const UUID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.UUID";
  }
  protected:
  explicit UUID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UUID_Structured Structured;

  // accessors -------------------------------------------------------

  enum : int {
    kStructuredFieldNumber = 1,
    kStringFieldNumber = 2,
  };
  // .event_store.client.UUID.Structured structured = 1;
  bool has_structured() const;
  private:
  bool _internal_has_structured() const;
  public:
  void clear_structured();
  const ::event_store::client::UUID_Structured& structured() const;
  ::event_store::client::UUID_Structured* release_structured();
  ::event_store::client::UUID_Structured* mutable_structured();
  void set_allocated_structured(::event_store::client::UUID_Structured* structured);
  private:
  const ::event_store::client::UUID_Structured& _internal_structured() const;
  ::event_store::client::UUID_Structured* _internal_mutable_structured();
  public:
  void unsafe_arena_set_allocated_structured(
      ::event_store::client::UUID_Structured* structured);
  ::event_store::client::UUID_Structured* unsafe_arena_release_structured();

  // string string = 2;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string(
      std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.UUID)
 private:
  class _Internal;
  void set_has_structured();
  void set_has_string();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::event_store::client::UUID_Structured* structured_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {};
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class StreamIdentifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.StreamIdentifier) */ {
 public:
  inline StreamIdentifier() : StreamIdentifier(nullptr) {};
  virtual ~StreamIdentifier();

  StreamIdentifier(const StreamIdentifier& from);
  StreamIdentifier(StreamIdentifier&& from) noexcept
    : StreamIdentifier() {
    *this = ::std::move(from);
  }

  inline StreamIdentifier& operator=(const StreamIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamIdentifier& operator=(StreamIdentifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamIdentifier* internal_default_instance() {
    return reinterpret_cast<const StreamIdentifier*>(
               &_StreamIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamIdentifier& a, StreamIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamIdentifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamIdentifier* New() const final {
    return CreateMaybeMessage<StreamIdentifier>(nullptr);
  }

  StreamIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamIdentifier& from);
  void MergeFrom(const StreamIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.StreamIdentifier";
  }
  protected:
  explicit StreamIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 3,
  };
  // bytes stream_name = 3;
  void clear_stream_name();
  const std::string& stream_name() const;
  void set_stream_name(const std::string& value);
  void set_stream_name(std::string&& value);
  void set_stream_name(const char* value);
  void set_stream_name(const void* value, size_t size);
  std::string* mutable_stream_name();
  std::string* release_stream_name();
  void set_allocated_stream_name(std::string* stream_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stream_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stream_name(
      std::string* stream_name);
  private:
  const std::string& _internal_stream_name() const;
  void _internal_set_stream_name(const std::string& value);
  std::string* _internal_mutable_stream_name();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.StreamIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class AllStreamPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.AllStreamPosition) */ {
 public:
  inline AllStreamPosition() : AllStreamPosition(nullptr) {};
  virtual ~AllStreamPosition();

  AllStreamPosition(const AllStreamPosition& from);
  AllStreamPosition(AllStreamPosition&& from) noexcept
    : AllStreamPosition() {
    *this = ::std::move(from);
  }

  inline AllStreamPosition& operator=(const AllStreamPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllStreamPosition& operator=(AllStreamPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllStreamPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllStreamPosition* internal_default_instance() {
    return reinterpret_cast<const AllStreamPosition*>(
               &_AllStreamPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AllStreamPosition& a, AllStreamPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(AllStreamPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllStreamPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllStreamPosition* New() const final {
    return CreateMaybeMessage<AllStreamPosition>(nullptr);
  }

  AllStreamPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllStreamPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllStreamPosition& from);
  void MergeFrom(const AllStreamPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllStreamPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.AllStreamPosition";
  }
  protected:
  explicit AllStreamPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitPositionFieldNumber = 1,
    kPreparePositionFieldNumber = 2,
  };
  // uint64 commit_position = 1;
  void clear_commit_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position() const;
  void set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_position() const;
  void _internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prepare_position = 2;
  void clear_prepare_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position() const;
  void set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prepare_position() const;
  void _internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.AllStreamPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prepare_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class WrongExpectedVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.WrongExpectedVersion) */ {
 public:
  inline WrongExpectedVersion() : WrongExpectedVersion(nullptr) {};
  virtual ~WrongExpectedVersion();

  WrongExpectedVersion(const WrongExpectedVersion& from);
  WrongExpectedVersion(WrongExpectedVersion&& from) noexcept
    : WrongExpectedVersion() {
    *this = ::std::move(from);
  }

  inline WrongExpectedVersion& operator=(const WrongExpectedVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrongExpectedVersion& operator=(WrongExpectedVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrongExpectedVersion& default_instance();

  enum CurrentStreamRevisionOptionCase {
    kCurrentStreamRevision = 1,
    kCurrentNoStream = 2,
    CURRENT_STREAM_REVISION_OPTION_NOT_SET = 0,
  };

  enum ExpectedStreamPositionOptionCase {
    kExpectedStreamPosition = 3,
    kExpectedAny = 4,
    kExpectedStreamExists = 5,
    kExpectedNoStream = 6,
    EXPECTED_STREAM_POSITION_OPTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrongExpectedVersion* internal_default_instance() {
    return reinterpret_cast<const WrongExpectedVersion*>(
               &_WrongExpectedVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WrongExpectedVersion& a, WrongExpectedVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(WrongExpectedVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrongExpectedVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrongExpectedVersion* New() const final {
    return CreateMaybeMessage<WrongExpectedVersion>(nullptr);
  }

  WrongExpectedVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrongExpectedVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrongExpectedVersion& from);
  void MergeFrom(const WrongExpectedVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrongExpectedVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.WrongExpectedVersion";
  }
  protected:
  explicit WrongExpectedVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentStreamRevisionFieldNumber = 1,
    kCurrentNoStreamFieldNumber = 2,
    kExpectedStreamPositionFieldNumber = 3,
    kExpectedAnyFieldNumber = 4,
    kExpectedStreamExistsFieldNumber = 5,
    kExpectedNoStreamFieldNumber = 6,
  };
  // uint64 current_stream_revision = 1;
  private:
  bool _internal_has_current_stream_revision() const;
  public:
  void clear_current_stream_revision();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_stream_revision() const;
  void set_current_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_stream_revision() const;
  void _internal_set_current_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .google.protobuf.Empty current_no_stream = 2;
  bool has_current_no_stream() const;
  private:
  bool _internal_has_current_no_stream() const;
  public:
  void clear_current_no_stream();
  const PROTOBUF_NAMESPACE_ID::Empty& current_no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_current_no_stream();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_current_no_stream();
  void set_allocated_current_no_stream(PROTOBUF_NAMESPACE_ID::Empty* current_no_stream);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_current_no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_current_no_stream();
  public:
  void unsafe_arena_set_allocated_current_no_stream(
      PROTOBUF_NAMESPACE_ID::Empty* current_no_stream);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_current_no_stream();

  // uint64 expected_stream_position = 3;
  private:
  bool _internal_has_expected_stream_position() const;
  public:
  void clear_expected_stream_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 expected_stream_position() const;
  void set_expected_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expected_stream_position() const;
  void _internal_set_expected_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .google.protobuf.Empty expected_any = 4;
  bool has_expected_any() const;
  private:
  bool _internal_has_expected_any() const;
  public:
  void clear_expected_any();
  const PROTOBUF_NAMESPACE_ID::Empty& expected_any() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_expected_any();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_expected_any();
  void set_allocated_expected_any(PROTOBUF_NAMESPACE_ID::Empty* expected_any);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_expected_any() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_expected_any();
  public:
  void unsafe_arena_set_allocated_expected_any(
      PROTOBUF_NAMESPACE_ID::Empty* expected_any);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_expected_any();

  // .google.protobuf.Empty expected_stream_exists = 5;
  bool has_expected_stream_exists() const;
  private:
  bool _internal_has_expected_stream_exists() const;
  public:
  void clear_expected_stream_exists();
  const PROTOBUF_NAMESPACE_ID::Empty& expected_stream_exists() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_expected_stream_exists();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_expected_stream_exists();
  void set_allocated_expected_stream_exists(PROTOBUF_NAMESPACE_ID::Empty* expected_stream_exists);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_expected_stream_exists() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_expected_stream_exists();
  public:
  void unsafe_arena_set_allocated_expected_stream_exists(
      PROTOBUF_NAMESPACE_ID::Empty* expected_stream_exists);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_expected_stream_exists();

  // .google.protobuf.Empty expected_no_stream = 6;
  bool has_expected_no_stream() const;
  private:
  bool _internal_has_expected_no_stream() const;
  public:
  void clear_expected_no_stream();
  const PROTOBUF_NAMESPACE_ID::Empty& expected_no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_expected_no_stream();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_expected_no_stream();
  void set_allocated_expected_no_stream(PROTOBUF_NAMESPACE_ID::Empty* expected_no_stream);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_expected_no_stream() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_expected_no_stream();
  public:
  void unsafe_arena_set_allocated_expected_no_stream(
      PROTOBUF_NAMESPACE_ID::Empty* expected_no_stream);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_expected_no_stream();

  void clear_current_stream_revision_option();
  CurrentStreamRevisionOptionCase current_stream_revision_option_case() const;
  void clear_expected_stream_position_option();
  ExpectedStreamPositionOptionCase expected_stream_position_option_case() const;
  // @@protoc_insertion_point(class_scope:event_store.client.WrongExpectedVersion)
 private:
  class _Internal;
  void set_has_current_stream_revision();
  void set_has_current_no_stream();
  void set_has_expected_stream_position();
  void set_has_expected_any();
  void set_has_expected_stream_exists();
  void set_has_expected_no_stream();

  inline bool has_current_stream_revision_option() const;
  inline void clear_has_current_stream_revision_option();

  inline bool has_expected_stream_position_option() const;
  inline void clear_has_expected_stream_position_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CurrentStreamRevisionOptionUnion {
    CurrentStreamRevisionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 current_stream_revision_;
    PROTOBUF_NAMESPACE_ID::Empty* current_no_stream_;
  } current_stream_revision_option_;
  union ExpectedStreamPositionOptionUnion {
    ExpectedStreamPositionOptionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 expected_stream_position_;
    PROTOBUF_NAMESPACE_ID::Empty* expected_any_;
    PROTOBUF_NAMESPACE_ID::Empty* expected_stream_exists_;
    PROTOBUF_NAMESPACE_ID::Empty* expected_no_stream_;
  } expected_stream_position_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class AccessDenied PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.AccessDenied) */ {
 public:
  inline AccessDenied() : AccessDenied(nullptr) {};
  virtual ~AccessDenied();

  AccessDenied(const AccessDenied& from);
  AccessDenied(AccessDenied&& from) noexcept
    : AccessDenied() {
    *this = ::std::move(from);
  }

  inline AccessDenied& operator=(const AccessDenied& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessDenied& operator=(AccessDenied&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccessDenied& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessDenied* internal_default_instance() {
    return reinterpret_cast<const AccessDenied*>(
               &_AccessDenied_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AccessDenied& a, AccessDenied& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessDenied* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessDenied* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccessDenied* New() const final {
    return CreateMaybeMessage<AccessDenied>(nullptr);
  }

  AccessDenied* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessDenied>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccessDenied& from);
  void MergeFrom(const AccessDenied& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessDenied* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.AccessDenied";
  }
  protected:
  explicit AccessDenied(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.AccessDenied)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class StreamDeleted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.StreamDeleted) */ {
 public:
  inline StreamDeleted() : StreamDeleted(nullptr) {};
  virtual ~StreamDeleted();

  StreamDeleted(const StreamDeleted& from);
  StreamDeleted(StreamDeleted&& from) noexcept
    : StreamDeleted() {
    *this = ::std::move(from);
  }

  inline StreamDeleted& operator=(const StreamDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDeleted& operator=(StreamDeleted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamDeleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamDeleted* internal_default_instance() {
    return reinterpret_cast<const StreamDeleted*>(
               &_StreamDeleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamDeleted& a, StreamDeleted& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDeleted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDeleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDeleted* New() const final {
    return CreateMaybeMessage<StreamDeleted>(nullptr);
  }

  StreamDeleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDeleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDeleted& from);
  void MergeFrom(const StreamDeleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDeleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.StreamDeleted";
  }
  protected:
  explicit StreamDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdentifierFieldNumber = 1,
  };
  // .event_store.client.StreamIdentifier stream_identifier = 1;
  bool has_stream_identifier() const;
  private:
  bool _internal_has_stream_identifier() const;
  public:
  void clear_stream_identifier();
  const ::event_store::client::StreamIdentifier& stream_identifier() const;
  ::event_store::client::StreamIdentifier* release_stream_identifier();
  ::event_store::client::StreamIdentifier* mutable_stream_identifier();
  void set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier);
  private:
  const ::event_store::client::StreamIdentifier& _internal_stream_identifier() const;
  ::event_store::client::StreamIdentifier* _internal_mutable_stream_identifier();
  public:
  void unsafe_arena_set_allocated_stream_identifier(
      ::event_store::client::StreamIdentifier* stream_identifier);
  ::event_store::client::StreamIdentifier* unsafe_arena_release_stream_identifier();

  // @@protoc_insertion_point(class_scope:event_store.client.StreamDeleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::event_store::client::StreamIdentifier* stream_identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class Timeout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.Timeout) */ {
 public:
  inline Timeout() : Timeout(nullptr) {};
  virtual ~Timeout();

  Timeout(const Timeout& from);
  Timeout(Timeout&& from) noexcept
    : Timeout() {
    *this = ::std::move(from);
  }

  inline Timeout& operator=(const Timeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timeout& operator=(Timeout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timeout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timeout* internal_default_instance() {
    return reinterpret_cast<const Timeout*>(
               &_Timeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Timeout& a, Timeout& b) {
    a.Swap(&b);
  }
  inline void Swap(Timeout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timeout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timeout* New() const final {
    return CreateMaybeMessage<Timeout>(nullptr);
  }

  Timeout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timeout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timeout& from);
  void MergeFrom(const Timeout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timeout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.Timeout";
  }
  protected:
  explicit Timeout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.Timeout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class Unknown PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.Unknown) */ {
 public:
  inline Unknown() : Unknown(nullptr) {};
  virtual ~Unknown();

  Unknown(const Unknown& from);
  Unknown(Unknown&& from) noexcept
    : Unknown() {
    *this = ::std::move(from);
  }

  inline Unknown& operator=(const Unknown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unknown& operator=(Unknown&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Unknown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unknown* internal_default_instance() {
    return reinterpret_cast<const Unknown*>(
               &_Unknown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Unknown& a, Unknown& b) {
    a.Swap(&b);
  }
  inline void Swap(Unknown* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unknown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Unknown* New() const final {
    return CreateMaybeMessage<Unknown>(nullptr);
  }

  Unknown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Unknown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Unknown& from);
  void MergeFrom(const Unknown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unknown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.Unknown";
  }
  protected:
  explicit Unknown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.Unknown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class InvalidTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.InvalidTransaction) */ {
 public:
  inline InvalidTransaction() : InvalidTransaction(nullptr) {};
  virtual ~InvalidTransaction();

  InvalidTransaction(const InvalidTransaction& from);
  InvalidTransaction(InvalidTransaction&& from) noexcept
    : InvalidTransaction() {
    *this = ::std::move(from);
  }

  inline InvalidTransaction& operator=(const InvalidTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvalidTransaction& operator=(InvalidTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvalidTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvalidTransaction* internal_default_instance() {
    return reinterpret_cast<const InvalidTransaction*>(
               &_InvalidTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InvalidTransaction& a, InvalidTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(InvalidTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvalidTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvalidTransaction* New() const final {
    return CreateMaybeMessage<InvalidTransaction>(nullptr);
  }

  InvalidTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvalidTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvalidTransaction& from);
  void MergeFrom(const InvalidTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvalidTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.InvalidTransaction";
  }
  protected:
  explicit InvalidTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_store.client.InvalidTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class MaximumAppendSizeExceeded PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.MaximumAppendSizeExceeded) */ {
 public:
  inline MaximumAppendSizeExceeded() : MaximumAppendSizeExceeded(nullptr) {};
  virtual ~MaximumAppendSizeExceeded();

  MaximumAppendSizeExceeded(const MaximumAppendSizeExceeded& from);
  MaximumAppendSizeExceeded(MaximumAppendSizeExceeded&& from) noexcept
    : MaximumAppendSizeExceeded() {
    *this = ::std::move(from);
  }

  inline MaximumAppendSizeExceeded& operator=(const MaximumAppendSizeExceeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaximumAppendSizeExceeded& operator=(MaximumAppendSizeExceeded&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaximumAppendSizeExceeded& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaximumAppendSizeExceeded* internal_default_instance() {
    return reinterpret_cast<const MaximumAppendSizeExceeded*>(
               &_MaximumAppendSizeExceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MaximumAppendSizeExceeded& a, MaximumAppendSizeExceeded& b) {
    a.Swap(&b);
  }
  inline void Swap(MaximumAppendSizeExceeded* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaximumAppendSizeExceeded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaximumAppendSizeExceeded* New() const final {
    return CreateMaybeMessage<MaximumAppendSizeExceeded>(nullptr);
  }

  MaximumAppendSizeExceeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaximumAppendSizeExceeded>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaximumAppendSizeExceeded& from);
  void MergeFrom(const MaximumAppendSizeExceeded& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaximumAppendSizeExceeded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.MaximumAppendSizeExceeded";
  }
  protected:
  explicit MaximumAppendSizeExceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAppendSizeFieldNumber = 1,
  };
  // uint32 maxAppendSize = 1;
  void clear_maxappendsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxappendsize() const;
  void set_maxappendsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxappendsize() const;
  void _internal_set_maxappendsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.MaximumAppendSizeExceeded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxappendsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// -------------------------------------------------------------------

class BadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_store.client.BadRequest) */ {
 public:
  inline BadRequest() : BadRequest(nullptr) {};
  virtual ~BadRequest();

  BadRequest(const BadRequest& from);
  BadRequest(BadRequest&& from) noexcept
    : BadRequest() {
    *this = ::std::move(from);
  }

  inline BadRequest& operator=(const BadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BadRequest& operator=(BadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BadRequest* internal_default_instance() {
    return reinterpret_cast<const BadRequest*>(
               &_BadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BadRequest& a, BadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BadRequest* New() const final {
    return CreateMaybeMessage<BadRequest>(nullptr);
  }

  BadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BadRequest& from);
  void MergeFrom(const BadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_store.client.BadRequest";
  }
  protected:
  explicit BadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shared_2eproto);
    return ::descriptor_table_shared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:event_store.client.BadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shared_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UUID_Structured

// int64 most_significant_bits = 1;
inline void UUID_Structured::clear_most_significant_bits() {
  most_significant_bits_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UUID_Structured::_internal_most_significant_bits() const {
  return most_significant_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UUID_Structured::most_significant_bits() const {
  // @@protoc_insertion_point(field_get:event_store.client.UUID.Structured.most_significant_bits)
  return _internal_most_significant_bits();
}
inline void UUID_Structured::_internal_set_most_significant_bits(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  most_significant_bits_ = value;
}
inline void UUID_Structured::set_most_significant_bits(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_most_significant_bits(value);
  // @@protoc_insertion_point(field_set:event_store.client.UUID.Structured.most_significant_bits)
}

// int64 least_significant_bits = 2;
inline void UUID_Structured::clear_least_significant_bits() {
  least_significant_bits_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UUID_Structured::_internal_least_significant_bits() const {
  return least_significant_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UUID_Structured::least_significant_bits() const {
  // @@protoc_insertion_point(field_get:event_store.client.UUID.Structured.least_significant_bits)
  return _internal_least_significant_bits();
}
inline void UUID_Structured::_internal_set_least_significant_bits(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  least_significant_bits_ = value;
}
inline void UUID_Structured::set_least_significant_bits(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_least_significant_bits(value);
  // @@protoc_insertion_point(field_set:event_store.client.UUID.Structured.least_significant_bits)
}

// -------------------------------------------------------------------

// UUID

// .event_store.client.UUID.Structured structured = 1;
inline bool UUID::_internal_has_structured() const {
  return value_case() == kStructured;
}
inline bool UUID::has_structured() const {
  return _internal_has_structured();
}
inline void UUID::set_has_structured() {
  _oneof_case_[0] = kStructured;
}
inline void UUID::clear_structured() {
  if (_internal_has_structured()) {
    if (GetArena() == nullptr) {
      delete value_.structured_;
    }
    clear_has_value();
  }
}
inline ::event_store::client::UUID_Structured* UUID::release_structured() {
  // @@protoc_insertion_point(field_release:event_store.client.UUID.structured)
  if (_internal_has_structured()) {
    clear_has_value();
      ::event_store::client::UUID_Structured* temp = value_.structured_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.structured_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_store::client::UUID_Structured& UUID::_internal_structured() const {
  return _internal_has_structured()
      ? *value_.structured_
      : *reinterpret_cast< ::event_store::client::UUID_Structured*>(&::event_store::client::_UUID_Structured_default_instance_);
}
inline const ::event_store::client::UUID_Structured& UUID::structured() const {
  // @@protoc_insertion_point(field_get:event_store.client.UUID.structured)
  return _internal_structured();
}
inline ::event_store::client::UUID_Structured* UUID::unsafe_arena_release_structured() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.UUID.structured)
  if (_internal_has_structured()) {
    clear_has_value();
    ::event_store::client::UUID_Structured* temp = value_.structured_;
    value_.structured_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UUID::unsafe_arena_set_allocated_structured(::event_store::client::UUID_Structured* structured) {
  clear_value();
  if (structured) {
    set_has_structured();
    value_.structured_ = structured;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.UUID.structured)
}
inline ::event_store::client::UUID_Structured* UUID::_internal_mutable_structured() {
  if (!_internal_has_structured()) {
    clear_value();
    set_has_structured();
    value_.structured_ = CreateMaybeMessage< ::event_store::client::UUID_Structured >(GetArena());
  }
  return value_.structured_;
}
inline ::event_store::client::UUID_Structured* UUID::mutable_structured() {
  // @@protoc_insertion_point(field_mutable:event_store.client.UUID.structured)
  return _internal_mutable_structured();
}

// string string = 2;
inline bool UUID::_internal_has_string() const {
  return value_case() == kString;
}
inline void UUID::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void UUID::clear_string() {
  if (_internal_has_string()) {
    value_.string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& UUID::string() const {
  // @@protoc_insertion_point(field_get:event_store.client.UUID.string)
  return _internal_string();
}
inline void UUID::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:event_store.client.UUID.string)
}
inline std::string* UUID::mutable_string() {
  // @@protoc_insertion_point(field_mutable:event_store.client.UUID.string)
  return _internal_mutable_string();
}
inline const std::string& UUID::_internal_string() const {
  if (_internal_has_string()) {
    return value_.string_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UUID::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UUID::set_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:event_store.client.UUID.string)
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.UUID.string)
}
inline void UUID::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.UUID.string)
}
inline void UUID::set_string(const char* value,
                             size_t size) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.UUID.string)
}
inline std::string* UUID::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UUID::release_string() {
  // @@protoc_insertion_point(field_release:event_store.client.UUID.string)
  if (_internal_has_string()) {
    clear_has_value();
    return value_.string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UUID::set_allocated_string(std::string* string) {
  if (has_value()) {
    clear_value();
  }
  if (string != nullptr) {
    set_has_string();
    value_.string_.UnsafeSetDefault(string);
  }
  // @@protoc_insertion_point(field_set_allocated:event_store.client.UUID.string)
}
inline std::string* UUID::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.UUID.string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_string()) {
    clear_has_value();
    return value_.string_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UUID::unsafe_arena_set_allocated_string(std::string* string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_string()) {
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string) {
    set_has_string();
    value_.string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.UUID.string)
}

inline bool UUID::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void UUID::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline UUID::ValueCase UUID::value_case() const {
  return UUID::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// StreamIdentifier

// bytes stream_name = 3;
inline void StreamIdentifier::clear_stream_name() {
  stream_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamIdentifier::stream_name() const {
  // @@protoc_insertion_point(field_get:event_store.client.StreamIdentifier.stream_name)
  return _internal_stream_name();
}
inline void StreamIdentifier::set_stream_name(const std::string& value) {
  _internal_set_stream_name(value);
  // @@protoc_insertion_point(field_set:event_store.client.StreamIdentifier.stream_name)
}
inline std::string* StreamIdentifier::mutable_stream_name() {
  // @@protoc_insertion_point(field_mutable:event_store.client.StreamIdentifier.stream_name)
  return _internal_mutable_stream_name();
}
inline const std::string& StreamIdentifier::_internal_stream_name() const {
  return stream_name_.Get();
}
inline void StreamIdentifier::_internal_set_stream_name(const std::string& value) {
  
  stream_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamIdentifier::set_stream_name(std::string&& value) {
  
  stream_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.StreamIdentifier.stream_name)
}
inline void StreamIdentifier::set_stream_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.StreamIdentifier.stream_name)
}
inline void StreamIdentifier::set_stream_name(const void* value,
    size_t size) {
  
  stream_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.StreamIdentifier.stream_name)
}
inline std::string* StreamIdentifier::_internal_mutable_stream_name() {
  
  return stream_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamIdentifier::release_stream_name() {
  // @@protoc_insertion_point(field_release:event_store.client.StreamIdentifier.stream_name)
  return stream_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamIdentifier::set_allocated_stream_name(std::string* stream_name) {
  if (stream_name != nullptr) {
    
  } else {
    
  }
  stream_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.StreamIdentifier.stream_name)
}
inline std::string* StreamIdentifier::unsafe_arena_release_stream_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.StreamIdentifier.stream_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stream_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamIdentifier::unsafe_arena_set_allocated_stream_name(
    std::string* stream_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stream_name != nullptr) {
    
  } else {
    
  }
  stream_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stream_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.StreamIdentifier.stream_name)
}

// -------------------------------------------------------------------

// AllStreamPosition

// uint64 commit_position = 1;
inline void AllStreamPosition::clear_commit_position() {
  commit_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AllStreamPosition::_internal_commit_position() const {
  return commit_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AllStreamPosition::commit_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.AllStreamPosition.commit_position)
  return _internal_commit_position();
}
inline void AllStreamPosition::_internal_set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_position_ = value;
}
inline void AllStreamPosition::set_commit_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.AllStreamPosition.commit_position)
}

// uint64 prepare_position = 2;
inline void AllStreamPosition::clear_prepare_position() {
  prepare_position_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AllStreamPosition::_internal_prepare_position() const {
  return prepare_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AllStreamPosition::prepare_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.AllStreamPosition.prepare_position)
  return _internal_prepare_position();
}
inline void AllStreamPosition::_internal_set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prepare_position_ = value;
}
inline void AllStreamPosition::set_prepare_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prepare_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.AllStreamPosition.prepare_position)
}

// -------------------------------------------------------------------

// WrongExpectedVersion

// uint64 current_stream_revision = 1;
inline bool WrongExpectedVersion::_internal_has_current_stream_revision() const {
  return current_stream_revision_option_case() == kCurrentStreamRevision;
}
inline void WrongExpectedVersion::set_has_current_stream_revision() {
  _oneof_case_[0] = kCurrentStreamRevision;
}
inline void WrongExpectedVersion::clear_current_stream_revision() {
  if (_internal_has_current_stream_revision()) {
    current_stream_revision_option_.current_stream_revision_ = PROTOBUF_ULONGLONG(0);
    clear_has_current_stream_revision_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WrongExpectedVersion::_internal_current_stream_revision() const {
  if (_internal_has_current_stream_revision()) {
    return current_stream_revision_option_.current_stream_revision_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void WrongExpectedVersion::_internal_set_current_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_current_stream_revision()) {
    clear_current_stream_revision_option();
    set_has_current_stream_revision();
  }
  current_stream_revision_option_.current_stream_revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WrongExpectedVersion::current_stream_revision() const {
  // @@protoc_insertion_point(field_get:event_store.client.WrongExpectedVersion.current_stream_revision)
  return _internal_current_stream_revision();
}
inline void WrongExpectedVersion::set_current_stream_revision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_stream_revision(value);
  // @@protoc_insertion_point(field_set:event_store.client.WrongExpectedVersion.current_stream_revision)
}

// .google.protobuf.Empty current_no_stream = 2;
inline bool WrongExpectedVersion::_internal_has_current_no_stream() const {
  return current_stream_revision_option_case() == kCurrentNoStream;
}
inline bool WrongExpectedVersion::has_current_no_stream() const {
  return _internal_has_current_no_stream();
}
inline void WrongExpectedVersion::set_has_current_no_stream() {
  _oneof_case_[0] = kCurrentNoStream;
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::release_current_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.WrongExpectedVersion.current_no_stream)
  if (_internal_has_current_no_stream()) {
    clear_has_current_stream_revision_option();
      PROTOBUF_NAMESPACE_ID::Empty* temp = current_stream_revision_option_.current_no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    current_stream_revision_option_.current_no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& WrongExpectedVersion::_internal_current_no_stream() const {
  return _internal_has_current_no_stream()
      ? *current_stream_revision_option_.current_no_stream_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& WrongExpectedVersion::current_no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.WrongExpectedVersion.current_no_stream)
  return _internal_current_no_stream();
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::unsafe_arena_release_current_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.WrongExpectedVersion.current_no_stream)
  if (_internal_has_current_no_stream()) {
    clear_has_current_stream_revision_option();
    PROTOBUF_NAMESPACE_ID::Empty* temp = current_stream_revision_option_.current_no_stream_;
    current_stream_revision_option_.current_no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrongExpectedVersion::unsafe_arena_set_allocated_current_no_stream(PROTOBUF_NAMESPACE_ID::Empty* current_no_stream) {
  clear_current_stream_revision_option();
  if (current_no_stream) {
    set_has_current_no_stream();
    current_stream_revision_option_.current_no_stream_ = current_no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.WrongExpectedVersion.current_no_stream)
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::_internal_mutable_current_no_stream() {
  if (!_internal_has_current_no_stream()) {
    clear_current_stream_revision_option();
    set_has_current_no_stream();
    current_stream_revision_option_.current_no_stream_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return current_stream_revision_option_.current_no_stream_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::mutable_current_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.WrongExpectedVersion.current_no_stream)
  return _internal_mutable_current_no_stream();
}

// uint64 expected_stream_position = 3;
inline bool WrongExpectedVersion::_internal_has_expected_stream_position() const {
  return expected_stream_position_option_case() == kExpectedStreamPosition;
}
inline void WrongExpectedVersion::set_has_expected_stream_position() {
  _oneof_case_[1] = kExpectedStreamPosition;
}
inline void WrongExpectedVersion::clear_expected_stream_position() {
  if (_internal_has_expected_stream_position()) {
    expected_stream_position_option_.expected_stream_position_ = PROTOBUF_ULONGLONG(0);
    clear_has_expected_stream_position_option();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WrongExpectedVersion::_internal_expected_stream_position() const {
  if (_internal_has_expected_stream_position()) {
    return expected_stream_position_option_.expected_stream_position_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void WrongExpectedVersion::_internal_set_expected_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_expected_stream_position()) {
    clear_expected_stream_position_option();
    set_has_expected_stream_position();
  }
  expected_stream_position_option_.expected_stream_position_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WrongExpectedVersion::expected_stream_position() const {
  // @@protoc_insertion_point(field_get:event_store.client.WrongExpectedVersion.expected_stream_position)
  return _internal_expected_stream_position();
}
inline void WrongExpectedVersion::set_expected_stream_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expected_stream_position(value);
  // @@protoc_insertion_point(field_set:event_store.client.WrongExpectedVersion.expected_stream_position)
}

// .google.protobuf.Empty expected_any = 4;
inline bool WrongExpectedVersion::_internal_has_expected_any() const {
  return expected_stream_position_option_case() == kExpectedAny;
}
inline bool WrongExpectedVersion::has_expected_any() const {
  return _internal_has_expected_any();
}
inline void WrongExpectedVersion::set_has_expected_any() {
  _oneof_case_[1] = kExpectedAny;
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::release_expected_any() {
  // @@protoc_insertion_point(field_release:event_store.client.WrongExpectedVersion.expected_any)
  if (_internal_has_expected_any()) {
    clear_has_expected_stream_position_option();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_option_.expected_any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_option_.expected_any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& WrongExpectedVersion::_internal_expected_any() const {
  return _internal_has_expected_any()
      ? *expected_stream_position_option_.expected_any_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& WrongExpectedVersion::expected_any() const {
  // @@protoc_insertion_point(field_get:event_store.client.WrongExpectedVersion.expected_any)
  return _internal_expected_any();
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::unsafe_arena_release_expected_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.WrongExpectedVersion.expected_any)
  if (_internal_has_expected_any()) {
    clear_has_expected_stream_position_option();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_option_.expected_any_;
    expected_stream_position_option_.expected_any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrongExpectedVersion::unsafe_arena_set_allocated_expected_any(PROTOBUF_NAMESPACE_ID::Empty* expected_any) {
  clear_expected_stream_position_option();
  if (expected_any) {
    set_has_expected_any();
    expected_stream_position_option_.expected_any_ = expected_any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.WrongExpectedVersion.expected_any)
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::_internal_mutable_expected_any() {
  if (!_internal_has_expected_any()) {
    clear_expected_stream_position_option();
    set_has_expected_any();
    expected_stream_position_option_.expected_any_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_option_.expected_any_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::mutable_expected_any() {
  // @@protoc_insertion_point(field_mutable:event_store.client.WrongExpectedVersion.expected_any)
  return _internal_mutable_expected_any();
}

// .google.protobuf.Empty expected_stream_exists = 5;
inline bool WrongExpectedVersion::_internal_has_expected_stream_exists() const {
  return expected_stream_position_option_case() == kExpectedStreamExists;
}
inline bool WrongExpectedVersion::has_expected_stream_exists() const {
  return _internal_has_expected_stream_exists();
}
inline void WrongExpectedVersion::set_has_expected_stream_exists() {
  _oneof_case_[1] = kExpectedStreamExists;
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::release_expected_stream_exists() {
  // @@protoc_insertion_point(field_release:event_store.client.WrongExpectedVersion.expected_stream_exists)
  if (_internal_has_expected_stream_exists()) {
    clear_has_expected_stream_position_option();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_option_.expected_stream_exists_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_option_.expected_stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& WrongExpectedVersion::_internal_expected_stream_exists() const {
  return _internal_has_expected_stream_exists()
      ? *expected_stream_position_option_.expected_stream_exists_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& WrongExpectedVersion::expected_stream_exists() const {
  // @@protoc_insertion_point(field_get:event_store.client.WrongExpectedVersion.expected_stream_exists)
  return _internal_expected_stream_exists();
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::unsafe_arena_release_expected_stream_exists() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.WrongExpectedVersion.expected_stream_exists)
  if (_internal_has_expected_stream_exists()) {
    clear_has_expected_stream_position_option();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_option_.expected_stream_exists_;
    expected_stream_position_option_.expected_stream_exists_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrongExpectedVersion::unsafe_arena_set_allocated_expected_stream_exists(PROTOBUF_NAMESPACE_ID::Empty* expected_stream_exists) {
  clear_expected_stream_position_option();
  if (expected_stream_exists) {
    set_has_expected_stream_exists();
    expected_stream_position_option_.expected_stream_exists_ = expected_stream_exists;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.WrongExpectedVersion.expected_stream_exists)
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::_internal_mutable_expected_stream_exists() {
  if (!_internal_has_expected_stream_exists()) {
    clear_expected_stream_position_option();
    set_has_expected_stream_exists();
    expected_stream_position_option_.expected_stream_exists_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_option_.expected_stream_exists_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::mutable_expected_stream_exists() {
  // @@protoc_insertion_point(field_mutable:event_store.client.WrongExpectedVersion.expected_stream_exists)
  return _internal_mutable_expected_stream_exists();
}

// .google.protobuf.Empty expected_no_stream = 6;
inline bool WrongExpectedVersion::_internal_has_expected_no_stream() const {
  return expected_stream_position_option_case() == kExpectedNoStream;
}
inline bool WrongExpectedVersion::has_expected_no_stream() const {
  return _internal_has_expected_no_stream();
}
inline void WrongExpectedVersion::set_has_expected_no_stream() {
  _oneof_case_[1] = kExpectedNoStream;
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::release_expected_no_stream() {
  // @@protoc_insertion_point(field_release:event_store.client.WrongExpectedVersion.expected_no_stream)
  if (_internal_has_expected_no_stream()) {
    clear_has_expected_stream_position_option();
      PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_option_.expected_no_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expected_stream_position_option_.expected_no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& WrongExpectedVersion::_internal_expected_no_stream() const {
  return _internal_has_expected_no_stream()
      ? *expected_stream_position_option_.expected_no_stream_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& WrongExpectedVersion::expected_no_stream() const {
  // @@protoc_insertion_point(field_get:event_store.client.WrongExpectedVersion.expected_no_stream)
  return _internal_expected_no_stream();
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::unsafe_arena_release_expected_no_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.WrongExpectedVersion.expected_no_stream)
  if (_internal_has_expected_no_stream()) {
    clear_has_expected_stream_position_option();
    PROTOBUF_NAMESPACE_ID::Empty* temp = expected_stream_position_option_.expected_no_stream_;
    expected_stream_position_option_.expected_no_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WrongExpectedVersion::unsafe_arena_set_allocated_expected_no_stream(PROTOBUF_NAMESPACE_ID::Empty* expected_no_stream) {
  clear_expected_stream_position_option();
  if (expected_no_stream) {
    set_has_expected_no_stream();
    expected_stream_position_option_.expected_no_stream_ = expected_no_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.WrongExpectedVersion.expected_no_stream)
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::_internal_mutable_expected_no_stream() {
  if (!_internal_has_expected_no_stream()) {
    clear_expected_stream_position_option();
    set_has_expected_no_stream();
    expected_stream_position_option_.expected_no_stream_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return expected_stream_position_option_.expected_no_stream_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* WrongExpectedVersion::mutable_expected_no_stream() {
  // @@protoc_insertion_point(field_mutable:event_store.client.WrongExpectedVersion.expected_no_stream)
  return _internal_mutable_expected_no_stream();
}

inline bool WrongExpectedVersion::has_current_stream_revision_option() const {
  return current_stream_revision_option_case() != CURRENT_STREAM_REVISION_OPTION_NOT_SET;
}
inline void WrongExpectedVersion::clear_has_current_stream_revision_option() {
  _oneof_case_[0] = CURRENT_STREAM_REVISION_OPTION_NOT_SET;
}
inline bool WrongExpectedVersion::has_expected_stream_position_option() const {
  return expected_stream_position_option_case() != EXPECTED_STREAM_POSITION_OPTION_NOT_SET;
}
inline void WrongExpectedVersion::clear_has_expected_stream_position_option() {
  _oneof_case_[1] = EXPECTED_STREAM_POSITION_OPTION_NOT_SET;
}
inline WrongExpectedVersion::CurrentStreamRevisionOptionCase WrongExpectedVersion::current_stream_revision_option_case() const {
  return WrongExpectedVersion::CurrentStreamRevisionOptionCase(_oneof_case_[0]);
}
inline WrongExpectedVersion::ExpectedStreamPositionOptionCase WrongExpectedVersion::expected_stream_position_option_case() const {
  return WrongExpectedVersion::ExpectedStreamPositionOptionCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// AccessDenied

// -------------------------------------------------------------------

// StreamDeleted

// .event_store.client.StreamIdentifier stream_identifier = 1;
inline bool StreamDeleted::_internal_has_stream_identifier() const {
  return this != internal_default_instance() && stream_identifier_ != nullptr;
}
inline bool StreamDeleted::has_stream_identifier() const {
  return _internal_has_stream_identifier();
}
inline void StreamDeleted::clear_stream_identifier() {
  if (GetArena() == nullptr && stream_identifier_ != nullptr) {
    delete stream_identifier_;
  }
  stream_identifier_ = nullptr;
}
inline const ::event_store::client::StreamIdentifier& StreamDeleted::_internal_stream_identifier() const {
  const ::event_store::client::StreamIdentifier* p = stream_identifier_;
  return p != nullptr ? *p : *reinterpret_cast<const ::event_store::client::StreamIdentifier*>(
      &::event_store::client::_StreamIdentifier_default_instance_);
}
inline const ::event_store::client::StreamIdentifier& StreamDeleted::stream_identifier() const {
  // @@protoc_insertion_point(field_get:event_store.client.StreamDeleted.stream_identifier)
  return _internal_stream_identifier();
}
inline void StreamDeleted::unsafe_arena_set_allocated_stream_identifier(
    ::event_store::client::StreamIdentifier* stream_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_identifier_);
  }
  stream_identifier_ = stream_identifier;
  if (stream_identifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.StreamDeleted.stream_identifier)
}
inline ::event_store::client::StreamIdentifier* StreamDeleted::release_stream_identifier() {
  auto temp = unsafe_arena_release_stream_identifier();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event_store::client::StreamIdentifier* StreamDeleted::unsafe_arena_release_stream_identifier() {
  // @@protoc_insertion_point(field_release:event_store.client.StreamDeleted.stream_identifier)
  
  ::event_store::client::StreamIdentifier* temp = stream_identifier_;
  stream_identifier_ = nullptr;
  return temp;
}
inline ::event_store::client::StreamIdentifier* StreamDeleted::_internal_mutable_stream_identifier() {
  
  if (stream_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_store::client::StreamIdentifier>(GetArena());
    stream_identifier_ = p;
  }
  return stream_identifier_;
}
inline ::event_store::client::StreamIdentifier* StreamDeleted::mutable_stream_identifier() {
  // @@protoc_insertion_point(field_mutable:event_store.client.StreamDeleted.stream_identifier)
  return _internal_mutable_stream_identifier();
}
inline void StreamDeleted::set_allocated_stream_identifier(::event_store::client::StreamIdentifier* stream_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stream_identifier_;
  }
  if (stream_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_identifier);
    if (message_arena != submessage_arena) {
      stream_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_identifier, submessage_arena);
    }
    
  } else {
    
  }
  stream_identifier_ = stream_identifier;
  // @@protoc_insertion_point(field_set_allocated:event_store.client.StreamDeleted.stream_identifier)
}

// -------------------------------------------------------------------

// Timeout

// -------------------------------------------------------------------

// Unknown

// -------------------------------------------------------------------

// InvalidTransaction

// -------------------------------------------------------------------

// MaximumAppendSizeExceeded

// uint32 maxAppendSize = 1;
inline void MaximumAppendSizeExceeded::clear_maxappendsize() {
  maxappendsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaximumAppendSizeExceeded::_internal_maxappendsize() const {
  return maxappendsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaximumAppendSizeExceeded::maxappendsize() const {
  // @@protoc_insertion_point(field_get:event_store.client.MaximumAppendSizeExceeded.maxAppendSize)
  return _internal_maxappendsize();
}
inline void MaximumAppendSizeExceeded::_internal_set_maxappendsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxappendsize_ = value;
}
inline void MaximumAppendSizeExceeded::set_maxappendsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxappendsize(value);
  // @@protoc_insertion_point(field_set:event_store.client.MaximumAppendSizeExceeded.maxAppendSize)
}

// -------------------------------------------------------------------

// BadRequest

// string message = 1;
inline void BadRequest::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BadRequest::message() const {
  // @@protoc_insertion_point(field_get:event_store.client.BadRequest.message)
  return _internal_message();
}
inline void BadRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:event_store.client.BadRequest.message)
}
inline std::string* BadRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:event_store.client.BadRequest.message)
  return _internal_mutable_message();
}
inline const std::string& BadRequest::_internal_message() const {
  return message_.Get();
}
inline void BadRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BadRequest::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event_store.client.BadRequest.message)
}
inline void BadRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:event_store.client.BadRequest.message)
}
inline void BadRequest::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event_store.client.BadRequest.message)
}
inline std::string* BadRequest::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BadRequest::release_message() {
  // @@protoc_insertion_point(field_release:event_store.client.BadRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BadRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event_store.client.BadRequest.message)
}
inline std::string* BadRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_store.client.BadRequest.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BadRequest::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_store.client.BadRequest.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace event_store

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shared_2eproto

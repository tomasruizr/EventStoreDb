// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: streams.proto

#include "streams.pb.h"
#include "streams.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace event_store {
namespace client {
namespace streams {

static const char* Streams_method_names[] = {
  "/event_store.client.streams.Streams/Read",
  "/event_store.client.streams.Streams/Append",
  "/event_store.client.streams.Streams/Delete",
  "/event_store.client.streams.Streams/Tombstone",
  "/event_store.client.streams.Streams/BatchAppend",
};

std::unique_ptr< Streams::Stub> Streams::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Streams::Stub> stub(new Streams::Stub(channel));
  return stub;
}

Streams::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Read_(Streams_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Append_(Streams_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Delete_(Streams_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tombstone_(Streams_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchAppend_(Streams_method_names[4], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReader< ::event_store::client::streams::ReadResp>* Streams::Stub::ReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::event_store::client::streams::ReadResp>::Create(channel_.get(), rpcmethod_Read_, context, request);
}

void Streams::Stub::experimental_async::Read(::grpc::ClientContext* context, ::event_store::client::streams::ReadReq* request, ::grpc::experimental::ClientReadReactor< ::event_store::client::streams::ReadResp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::event_store::client::streams::ReadResp>::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::event_store::client::streams::ReadResp>* Streams::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::event_store::client::streams::ReadResp>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::event_store::client::streams::ReadResp>* Streams::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::event_store::client::streams::ReadResp>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::event_store::client::streams::AppendReq>* Streams::Stub::AppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::event_store::client::streams::AppendReq>::Create(channel_.get(), rpcmethod_Append_, context, response);
}

void Streams::Stub::experimental_async::Append(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::experimental::ClientWriteReactor< ::event_store::client::streams::AppendReq>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::event_store::client::streams::AppendReq>::Create(stub_->channel_.get(), stub_->rpcmethod_Append_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::event_store::client::streams::AppendReq>* Streams::Stub::AsyncAppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::event_store::client::streams::AppendReq>::Create(channel_.get(), cq, rpcmethod_Append_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::event_store::client::streams::AppendReq>* Streams::Stub::PrepareAsyncAppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::event_store::client::streams::AppendReq>::Create(channel_.get(), cq, rpcmethod_Append_, context, response, false, nullptr);
}

::grpc::Status Streams::Stub::Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::event_store::client::streams::DeleteResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Streams::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Streams::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::DeleteResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Streams::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void Streams::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::streams::DeleteResp>* Streams::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::streams::DeleteResp>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::streams::DeleteResp>* Streams::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::streams::DeleteResp>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::Status Streams::Stub::Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::event_store::client::streams::TombstoneResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Tombstone_, context, request, response);
}

void Streams::Stub::experimental_async::Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tombstone_, context, request, response, std::move(f));
}

void Streams::Stub::experimental_async::Tombstone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::TombstoneResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tombstone_, context, request, response, std::move(f));
}

void Streams::Stub::experimental_async::Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tombstone_, context, request, response, reactor);
}

void Streams::Stub::experimental_async::Tombstone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tombstone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::streams::TombstoneResp>* Streams::Stub::AsyncTombstoneRaw(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::streams::TombstoneResp>::Create(channel_.get(), cq, rpcmethod_Tombstone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::streams::TombstoneResp>* Streams::Stub::PrepareAsyncTombstoneRaw(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::streams::TombstoneResp>::Create(channel_.get(), cq, rpcmethod_Tombstone_, context, request, false);
}

::grpc::ClientReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* Streams::Stub::BatchAppendRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>::Create(channel_.get(), rpcmethod_BatchAppend_, context);
}

void Streams::Stub::experimental_async::BatchAppend(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::event_store::client::streams::BatchAppendReq,::event_store::client::streams::BatchAppendResp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::event_store::client::streams::BatchAppendReq,::event_store::client::streams::BatchAppendResp>::Create(stub_->channel_.get(), stub_->rpcmethod_BatchAppend_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* Streams::Stub::AsyncBatchAppendRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>::Create(channel_.get(), cq, rpcmethod_BatchAppend_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* Streams::Stub::PrepareAsyncBatchAppendRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>::Create(channel_.get(), cq, rpcmethod_BatchAppend_, context, false, nullptr);
}

Streams::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streams_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Streams::Service, ::event_store::client::streams::ReadReq, ::event_store::client::streams::ReadResp>(
          [](Streams::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::streams::ReadReq* req,
             ::grpc_impl::ServerWriter<::event_store::client::streams::ReadResp>* writer) {
               return service->Read(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streams_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Streams::Service, ::event_store::client::streams::AppendReq, ::event_store::client::streams::AppendResp>(
          [](Streams::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReader<::event_store::client::streams::AppendReq>* reader,
             ::event_store::client::streams::AppendResp* resp) {
               return service->Append(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streams_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Streams::Service, ::event_store::client::streams::DeleteReq, ::event_store::client::streams::DeleteResp>(
          [](Streams::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::streams::DeleteReq* req,
             ::event_store::client::streams::DeleteResp* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streams_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Streams::Service, ::event_store::client::streams::TombstoneReq, ::event_store::client::streams::TombstoneResp>(
          [](Streams::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::streams::TombstoneReq* req,
             ::event_store::client::streams::TombstoneResp* resp) {
               return service->Tombstone(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streams_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Streams::Service, ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>(
          [](Streams::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::event_store::client::streams::BatchAppendResp,
             ::event_store::client::streams::BatchAppendReq>* stream) {
               return service->BatchAppend(ctx, stream);
             }, this)));
}

Streams::Service::~Service() {
}

::grpc::Status Streams::Service::Read(::grpc::ServerContext* context, const ::event_store::client::streams::ReadReq* request, ::grpc::ServerWriter< ::event_store::client::streams::ReadResp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Streams::Service::Append(::grpc::ServerContext* context, ::grpc::ServerReader< ::event_store::client::streams::AppendReq>* reader, ::event_store::client::streams::AppendResp* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Streams::Service::Delete(::grpc::ServerContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Streams::Service::Tombstone(::grpc::ServerContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Streams::Service::BatchAppend(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::event_store::client::streams::BatchAppendResp, ::event_store::client::streams::BatchAppendReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace event_store
}  // namespace client
}  // namespace streams


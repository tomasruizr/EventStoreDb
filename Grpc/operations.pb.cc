// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations.proto

#include "operations.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_operations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartScavengeReq_Options_operations_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_operations_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopScavengeReq_Options_operations_2eproto;
namespace event_store {
namespace client {
namespace operations {
class StartScavengeReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartScavengeReq_Options> _instance;
} _StartScavengeReq_Options_default_instance_;
class StartScavengeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartScavengeReq> _instance;
} _StartScavengeReq_default_instance_;
class StopScavengeReq_OptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopScavengeReq_Options> _instance;
} _StopScavengeReq_Options_default_instance_;
class StopScavengeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopScavengeReq> _instance;
} _StopScavengeReq_default_instance_;
class ScavengeRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScavengeResp> _instance;
} _ScavengeResp_default_instance_;
class SetNodePriorityReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetNodePriorityReq> _instance;
} _SetNodePriorityReq_default_instance_;
}  // namespace operations
}  // namespace client
}  // namespace event_store
static void InitDefaultsscc_info_ScavengeResp_operations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::operations::_ScavengeResp_default_instance_;
    new (ptr) ::event_store::client::operations::ScavengeResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::operations::ScavengeResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScavengeResp_operations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScavengeResp_operations_2eproto}, {}};

static void InitDefaultsscc_info_SetNodePriorityReq_operations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::operations::_SetNodePriorityReq_default_instance_;
    new (ptr) ::event_store::client::operations::SetNodePriorityReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::operations::SetNodePriorityReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetNodePriorityReq_operations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetNodePriorityReq_operations_2eproto}, {}};

static void InitDefaultsscc_info_StartScavengeReq_operations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::operations::_StartScavengeReq_default_instance_;
    new (ptr) ::event_store::client::operations::StartScavengeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::operations::StartScavengeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartScavengeReq_operations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartScavengeReq_operations_2eproto}, {
      &scc_info_StartScavengeReq_Options_operations_2eproto.base,}};

static void InitDefaultsscc_info_StartScavengeReq_Options_operations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::operations::_StartScavengeReq_Options_default_instance_;
    new (ptr) ::event_store::client::operations::StartScavengeReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::operations::StartScavengeReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartScavengeReq_Options_operations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartScavengeReq_Options_operations_2eproto}, {}};

static void InitDefaultsscc_info_StopScavengeReq_operations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::operations::_StopScavengeReq_default_instance_;
    new (ptr) ::event_store::client::operations::StopScavengeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::operations::StopScavengeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StopScavengeReq_operations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StopScavengeReq_operations_2eproto}, {
      &scc_info_StopScavengeReq_Options_operations_2eproto.base,}};

static void InitDefaultsscc_info_StopScavengeReq_Options_operations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::event_store::client::operations::_StopScavengeReq_Options_default_instance_;
    new (ptr) ::event_store::client::operations::StopScavengeReq_Options();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::event_store::client::operations::StopScavengeReq_Options::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopScavengeReq_Options_operations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopScavengeReq_Options_operations_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_operations_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_operations_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_operations_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_operations_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StartScavengeReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StartScavengeReq_Options, thread_count_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StartScavengeReq_Options, start_from_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StartScavengeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StartScavengeReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StopScavengeReq_Options, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StopScavengeReq_Options, scavenge_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StopScavengeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::StopScavengeReq, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::ScavengeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::ScavengeResp, scavenge_id_),
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::ScavengeResp, scavenge_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::SetNodePriorityReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event_store::client::operations::SetNodePriorityReq, priority_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::event_store::client::operations::StartScavengeReq_Options)},
  { 7, -1, sizeof(::event_store::client::operations::StartScavengeReq)},
  { 13, -1, sizeof(::event_store::client::operations::StopScavengeReq_Options)},
  { 19, -1, sizeof(::event_store::client::operations::StopScavengeReq)},
  { 25, -1, sizeof(::event_store::client::operations::ScavengeResp)},
  { 32, -1, sizeof(::event_store::client::operations::SetNodePriorityReq)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::operations::_StartScavengeReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::operations::_StartScavengeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::operations::_StopScavengeReq_Options_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::operations::_StopScavengeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::operations::_ScavengeResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event_store::client::operations::_SetNodePriorityReq_default_instance_),
};

const char descriptor_table_protodef_operations_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020operations.proto\022\035event_store.client.o"
  "perations\032\014shared.proto\"\227\001\n\020StartScaveng"
  "eReq\022H\n\007options\030\001 \001(\01327.event_store.clie"
  "nt.operations.StartScavengeReq.Options\0329"
  "\n\007Options\022\024\n\014thread_count\030\001 \001(\005\022\030\n\020start"
  "_from_chunk\030\002 \001(\005\"z\n\017StopScavengeReq\022G\n\007"
  "options\030\001 \001(\01326.event_store.client.opera"
  "tions.StopScavengeReq.Options\032\036\n\007Options"
  "\022\023\n\013scavenge_id\030\001 \001(\t\"\264\001\n\014ScavengeResp\022\023"
  "\n\013scavenge_id\030\001 \001(\t\022S\n\017scavenge_result\030\002"
  " \001(\0162:.event_store.client.operations.Sca"
  "vengeResp.ScavengeResult\":\n\016ScavengeResu"
  "lt\022\013\n\007Started\020\000\022\016\n\nInProgress\020\001\022\013\n\007Stopp"
  "ed\020\002\"&\n\022SetNodePriorityReq\022\020\n\010priority\030\001"
  " \001(\0052\355\004\n\nOperations\022m\n\rStartScavenge\022/.e"
  "vent_store.client.operations.StartScaven"
  "geReq\032+.event_store.client.operations.Sc"
  "avengeResp\022k\n\014StopScavenge\022..event_store"
  ".client.operations.StopScavengeReq\032+.eve"
  "nt_store.client.operations.ScavengeResp\022"
  "@\n\010Shutdown\022\031.event_store.client.Empty\032\031"
  ".event_store.client.Empty\022D\n\014MergeIndexe"
  "s\022\031.event_store.client.Empty\032\031.event_sto"
  "re.client.Empty\022B\n\nResignNode\022\031.event_st"
  "ore.client.Empty\032\031.event_store.client.Em"
  "pty\022_\n\017SetNodePriority\0221.event_store.cli"
  "ent.operations.SetNodePriorityReq\032\031.even"
  "t_store.client.Empty\022V\n\036RestartPersisten"
  "tSubscriptions\022\031.event_store.client.Empt"
  "y\032\031.event_store.client.EmptyB*\n(com.even"
  "tstore.dbclient.proto.operationsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_operations_2eproto_deps[1] = {
  &::descriptor_table_shared_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_operations_2eproto_sccs[6] = {
  &scc_info_ScavengeResp_operations_2eproto.base,
  &scc_info_SetNodePriorityReq_operations_2eproto.base,
  &scc_info_StartScavengeReq_operations_2eproto.base,
  &scc_info_StartScavengeReq_Options_operations_2eproto.base,
  &scc_info_StopScavengeReq_operations_2eproto.base,
  &scc_info_StopScavengeReq_Options_operations_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_operations_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_operations_2eproto = {
  false, false, descriptor_table_protodef_operations_2eproto, "operations.proto", 1240,
  &descriptor_table_operations_2eproto_once, descriptor_table_operations_2eproto_sccs, descriptor_table_operations_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_operations_2eproto::offsets,
  file_level_metadata_operations_2eproto, 6, file_level_enum_descriptors_operations_2eproto, file_level_service_descriptors_operations_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_operations_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_operations_2eproto)), true);
namespace event_store {
namespace client {
namespace operations {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScavengeResp_ScavengeResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_operations_2eproto);
  return file_level_enum_descriptors_operations_2eproto[0];
}
bool ScavengeResp_ScavengeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScavengeResp_ScavengeResult ScavengeResp::Started;
constexpr ScavengeResp_ScavengeResult ScavengeResp::InProgress;
constexpr ScavengeResp_ScavengeResult ScavengeResp::Stopped;
constexpr ScavengeResp_ScavengeResult ScavengeResp::ScavengeResult_MIN;
constexpr ScavengeResp_ScavengeResult ScavengeResp::ScavengeResult_MAX;
constexpr int ScavengeResp::ScavengeResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StartScavengeReq_Options::InitAsDefaultInstance() {
}
class StartScavengeReq_Options::_Internal {
 public:
};

StartScavengeReq_Options::StartScavengeReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.operations.StartScavengeReq.Options)
}
StartScavengeReq_Options::StartScavengeReq_Options(const StartScavengeReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&thread_count_, &from.thread_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_from_chunk_) -
    reinterpret_cast<char*>(&thread_count_)) + sizeof(start_from_chunk_));
  // @@protoc_insertion_point(copy_constructor:event_store.client.operations.StartScavengeReq.Options)
}

void StartScavengeReq_Options::SharedCtor() {
  ::memset(&thread_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_from_chunk_) -
      reinterpret_cast<char*>(&thread_count_)) + sizeof(start_from_chunk_));
}

StartScavengeReq_Options::~StartScavengeReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.operations.StartScavengeReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartScavengeReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartScavengeReq_Options::ArenaDtor(void* object) {
  StartScavengeReq_Options* _this = reinterpret_cast< StartScavengeReq_Options* >(object);
  (void)_this;
}
void StartScavengeReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartScavengeReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartScavengeReq_Options& StartScavengeReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartScavengeReq_Options_operations_2eproto.base);
  return *internal_default_instance();
}


void StartScavengeReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.operations.StartScavengeReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&thread_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_from_chunk_) -
      reinterpret_cast<char*>(&thread_count_)) + sizeof(start_from_chunk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartScavengeReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 thread_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          thread_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_from_chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_from_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartScavengeReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.operations.StartScavengeReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 thread_count = 1;
  if (this->thread_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_thread_count(), target);
  }

  // int32 start_from_chunk = 2;
  if (this->start_from_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_start_from_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.operations.StartScavengeReq.Options)
  return target;
}

size_t StartScavengeReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.operations.StartScavengeReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 thread_count = 1;
  if (this->thread_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_thread_count());
  }

  // int32 start_from_chunk = 2;
  if (this->start_from_chunk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_from_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartScavengeReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.operations.StartScavengeReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const StartScavengeReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartScavengeReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.operations.StartScavengeReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.operations.StartScavengeReq.Options)
    MergeFrom(*source);
  }
}

void StartScavengeReq_Options::MergeFrom(const StartScavengeReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.operations.StartScavengeReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thread_count() != 0) {
    _internal_set_thread_count(from._internal_thread_count());
  }
  if (from.start_from_chunk() != 0) {
    _internal_set_start_from_chunk(from._internal_start_from_chunk());
  }
}

void StartScavengeReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.operations.StartScavengeReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartScavengeReq_Options::CopyFrom(const StartScavengeReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.operations.StartScavengeReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartScavengeReq_Options::IsInitialized() const {
  return true;
}

void StartScavengeReq_Options::InternalSwap(StartScavengeReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartScavengeReq_Options, start_from_chunk_)
      + sizeof(StartScavengeReq_Options::start_from_chunk_)
      - PROTOBUF_FIELD_OFFSET(StartScavengeReq_Options, thread_count_)>(
          reinterpret_cast<char*>(&thread_count_),
          reinterpret_cast<char*>(&other->thread_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartScavengeReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartScavengeReq::InitAsDefaultInstance() {
  ::event_store::client::operations::_StartScavengeReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::operations::StartScavengeReq_Options*>(
      ::event_store::client::operations::StartScavengeReq_Options::internal_default_instance());
}
class StartScavengeReq::_Internal {
 public:
  static const ::event_store::client::operations::StartScavengeReq_Options& options(const StartScavengeReq* msg);
};

const ::event_store::client::operations::StartScavengeReq_Options&
StartScavengeReq::_Internal::options(const StartScavengeReq* msg) {
  return *msg->options_;
}
StartScavengeReq::StartScavengeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.operations.StartScavengeReq)
}
StartScavengeReq::StartScavengeReq(const StartScavengeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::operations::StartScavengeReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.operations.StartScavengeReq)
}

void StartScavengeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartScavengeReq_operations_2eproto.base);
  options_ = nullptr;
}

StartScavengeReq::~StartScavengeReq() {
  // @@protoc_insertion_point(destructor:event_store.client.operations.StartScavengeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartScavengeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void StartScavengeReq::ArenaDtor(void* object) {
  StartScavengeReq* _this = reinterpret_cast< StartScavengeReq* >(object);
  (void)_this;
}
void StartScavengeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartScavengeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartScavengeReq& StartScavengeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartScavengeReq_operations_2eproto.base);
  return *internal_default_instance();
}


void StartScavengeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.operations.StartScavengeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartScavengeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.operations.StartScavengeReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartScavengeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.operations.StartScavengeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.operations.StartScavengeReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.operations.StartScavengeReq)
  return target;
}

size_t StartScavengeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.operations.StartScavengeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.operations.StartScavengeReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartScavengeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.operations.StartScavengeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StartScavengeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartScavengeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.operations.StartScavengeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.operations.StartScavengeReq)
    MergeFrom(*source);
  }
}

void StartScavengeReq::MergeFrom(const StartScavengeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.operations.StartScavengeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::operations::StartScavengeReq_Options::MergeFrom(from._internal_options());
  }
}

void StartScavengeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.operations.StartScavengeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartScavengeReq::CopyFrom(const StartScavengeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.operations.StartScavengeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartScavengeReq::IsInitialized() const {
  return true;
}

void StartScavengeReq::InternalSwap(StartScavengeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartScavengeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopScavengeReq_Options::InitAsDefaultInstance() {
}
class StopScavengeReq_Options::_Internal {
 public:
};

StopScavengeReq_Options::StopScavengeReq_Options(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.operations.StopScavengeReq.Options)
}
StopScavengeReq_Options::StopScavengeReq_Options(const StopScavengeReq_Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scavenge_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scavenge_id().empty()) {
    scavenge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scavenge_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.operations.StopScavengeReq.Options)
}

void StopScavengeReq_Options::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopScavengeReq_Options_operations_2eproto.base);
  scavenge_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopScavengeReq_Options::~StopScavengeReq_Options() {
  // @@protoc_insertion_point(destructor:event_store.client.operations.StopScavengeReq.Options)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopScavengeReq_Options::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scavenge_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopScavengeReq_Options::ArenaDtor(void* object) {
  StopScavengeReq_Options* _this = reinterpret_cast< StopScavengeReq_Options* >(object);
  (void)_this;
}
void StopScavengeReq_Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopScavengeReq_Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopScavengeReq_Options& StopScavengeReq_Options::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopScavengeReq_Options_operations_2eproto.base);
  return *internal_default_instance();
}


void StopScavengeReq_Options::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.operations.StopScavengeReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scavenge_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopScavengeReq_Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scavenge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scavenge_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.operations.StopScavengeReq.Options.scavenge_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopScavengeReq_Options::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.operations.StopScavengeReq.Options)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scavenge_id = 1;
  if (this->scavenge_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scavenge_id().data(), static_cast<int>(this->_internal_scavenge_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.operations.StopScavengeReq.Options.scavenge_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scavenge_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.operations.StopScavengeReq.Options)
  return target;
}

size_t StopScavengeReq_Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.operations.StopScavengeReq.Options)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scavenge_id = 1;
  if (this->scavenge_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scavenge_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopScavengeReq_Options::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.operations.StopScavengeReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const StopScavengeReq_Options* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopScavengeReq_Options>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.operations.StopScavengeReq.Options)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.operations.StopScavengeReq.Options)
    MergeFrom(*source);
  }
}

void StopScavengeReq_Options::MergeFrom(const StopScavengeReq_Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.operations.StopScavengeReq.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scavenge_id().size() > 0) {
    _internal_set_scavenge_id(from._internal_scavenge_id());
  }
}

void StopScavengeReq_Options::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.operations.StopScavengeReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopScavengeReq_Options::CopyFrom(const StopScavengeReq_Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.operations.StopScavengeReq.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopScavengeReq_Options::IsInitialized() const {
  return true;
}

void StopScavengeReq_Options::InternalSwap(StopScavengeReq_Options* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scavenge_id_.Swap(&other->scavenge_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopScavengeReq_Options::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopScavengeReq::InitAsDefaultInstance() {
  ::event_store::client::operations::_StopScavengeReq_default_instance_._instance.get_mutable()->options_ = const_cast< ::event_store::client::operations::StopScavengeReq_Options*>(
      ::event_store::client::operations::StopScavengeReq_Options::internal_default_instance());
}
class StopScavengeReq::_Internal {
 public:
  static const ::event_store::client::operations::StopScavengeReq_Options& options(const StopScavengeReq* msg);
};

const ::event_store::client::operations::StopScavengeReq_Options&
StopScavengeReq::_Internal::options(const StopScavengeReq* msg) {
  return *msg->options_;
}
StopScavengeReq::StopScavengeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.operations.StopScavengeReq)
}
StopScavengeReq::StopScavengeReq(const StopScavengeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_options()) {
    options_ = new ::event_store::client::operations::StopScavengeReq_Options(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event_store.client.operations.StopScavengeReq)
}

void StopScavengeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopScavengeReq_operations_2eproto.base);
  options_ = nullptr;
}

StopScavengeReq::~StopScavengeReq() {
  // @@protoc_insertion_point(destructor:event_store.client.operations.StopScavengeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopScavengeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete options_;
}

void StopScavengeReq::ArenaDtor(void* object) {
  StopScavengeReq* _this = reinterpret_cast< StopScavengeReq* >(object);
  (void)_this;
}
void StopScavengeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopScavengeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopScavengeReq& StopScavengeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopScavengeReq_operations_2eproto.base);
  return *internal_default_instance();
}


void StopScavengeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.operations.StopScavengeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopScavengeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event_store.client.operations.StopScavengeReq.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopScavengeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.operations.StopScavengeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event_store.client.operations.StopScavengeReq.Options options = 1;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.operations.StopScavengeReq)
  return target;
}

size_t StopScavengeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.operations.StopScavengeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event_store.client.operations.StopScavengeReq.Options options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopScavengeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.operations.StopScavengeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StopScavengeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopScavengeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.operations.StopScavengeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.operations.StopScavengeReq)
    MergeFrom(*source);
  }
}

void StopScavengeReq::MergeFrom(const StopScavengeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.operations.StopScavengeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    _internal_mutable_options()->::event_store::client::operations::StopScavengeReq_Options::MergeFrom(from._internal_options());
  }
}

void StopScavengeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.operations.StopScavengeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopScavengeReq::CopyFrom(const StopScavengeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.operations.StopScavengeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopScavengeReq::IsInitialized() const {
  return true;
}

void StopScavengeReq::InternalSwap(StopScavengeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopScavengeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScavengeResp::InitAsDefaultInstance() {
}
class ScavengeResp::_Internal {
 public:
};

ScavengeResp::ScavengeResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.operations.ScavengeResp)
}
ScavengeResp::ScavengeResp(const ScavengeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scavenge_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scavenge_id().empty()) {
    scavenge_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scavenge_id(),
      GetArena());
  }
  scavenge_result_ = from.scavenge_result_;
  // @@protoc_insertion_point(copy_constructor:event_store.client.operations.ScavengeResp)
}

void ScavengeResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScavengeResp_operations_2eproto.base);
  scavenge_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scavenge_result_ = 0;
}

ScavengeResp::~ScavengeResp() {
  // @@protoc_insertion_point(destructor:event_store.client.operations.ScavengeResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScavengeResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scavenge_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScavengeResp::ArenaDtor(void* object) {
  ScavengeResp* _this = reinterpret_cast< ScavengeResp* >(object);
  (void)_this;
}
void ScavengeResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScavengeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScavengeResp& ScavengeResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScavengeResp_operations_2eproto.base);
  return *internal_default_instance();
}


void ScavengeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.operations.ScavengeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scavenge_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scavenge_result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScavengeResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scavenge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scavenge_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event_store.client.operations.ScavengeResp.scavenge_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event_store.client.operations.ScavengeResp.ScavengeResult scavenge_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scavenge_result(static_cast<::event_store::client::operations::ScavengeResp_ScavengeResult>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScavengeResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.operations.ScavengeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scavenge_id = 1;
  if (this->scavenge_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scavenge_id().data(), static_cast<int>(this->_internal_scavenge_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_store.client.operations.ScavengeResp.scavenge_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scavenge_id(), target);
  }

  // .event_store.client.operations.ScavengeResp.ScavengeResult scavenge_result = 2;
  if (this->scavenge_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scavenge_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.operations.ScavengeResp)
  return target;
}

size_t ScavengeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.operations.ScavengeResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scavenge_id = 1;
  if (this->scavenge_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scavenge_id());
  }

  // .event_store.client.operations.ScavengeResp.ScavengeResult scavenge_result = 2;
  if (this->scavenge_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scavenge_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScavengeResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.operations.ScavengeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ScavengeResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScavengeResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.operations.ScavengeResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.operations.ScavengeResp)
    MergeFrom(*source);
  }
}

void ScavengeResp::MergeFrom(const ScavengeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.operations.ScavengeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scavenge_id().size() > 0) {
    _internal_set_scavenge_id(from._internal_scavenge_id());
  }
  if (from.scavenge_result() != 0) {
    _internal_set_scavenge_result(from._internal_scavenge_result());
  }
}

void ScavengeResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.operations.ScavengeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScavengeResp::CopyFrom(const ScavengeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.operations.ScavengeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScavengeResp::IsInitialized() const {
  return true;
}

void ScavengeResp::InternalSwap(ScavengeResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scavenge_id_.Swap(&other->scavenge_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(scavenge_result_, other->scavenge_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScavengeResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetNodePriorityReq::InitAsDefaultInstance() {
}
class SetNodePriorityReq::_Internal {
 public:
};

SetNodePriorityReq::SetNodePriorityReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_store.client.operations.SetNodePriorityReq)
}
SetNodePriorityReq::SetNodePriorityReq(const SetNodePriorityReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:event_store.client.operations.SetNodePriorityReq)
}

void SetNodePriorityReq::SharedCtor() {
  priority_ = 0;
}

SetNodePriorityReq::~SetNodePriorityReq() {
  // @@protoc_insertion_point(destructor:event_store.client.operations.SetNodePriorityReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetNodePriorityReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetNodePriorityReq::ArenaDtor(void* object) {
  SetNodePriorityReq* _this = reinterpret_cast< SetNodePriorityReq* >(object);
  (void)_this;
}
void SetNodePriorityReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetNodePriorityReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetNodePriorityReq& SetNodePriorityReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetNodePriorityReq_operations_2eproto.base);
  return *internal_default_instance();
}


void SetNodePriorityReq::Clear() {
// @@protoc_insertion_point(message_clear_start:event_store.client.operations.SetNodePriorityReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetNodePriorityReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetNodePriorityReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_store.client.operations.SetNodePriorityReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 priority = 1;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_store.client.operations.SetNodePriorityReq)
  return target;
}

size_t SetNodePriorityReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_store.client.operations.SetNodePriorityReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 priority = 1;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetNodePriorityReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event_store.client.operations.SetNodePriorityReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetNodePriorityReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetNodePriorityReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event_store.client.operations.SetNodePriorityReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event_store.client.operations.SetNodePriorityReq)
    MergeFrom(*source);
  }
}

void SetNodePriorityReq::MergeFrom(const SetNodePriorityReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event_store.client.operations.SetNodePriorityReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void SetNodePriorityReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event_store.client.operations.SetNodePriorityReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNodePriorityReq::CopyFrom(const SetNodePriorityReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_store.client.operations.SetNodePriorityReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNodePriorityReq::IsInitialized() const {
  return true;
}

void SetNodePriorityReq::InternalSwap(SetNodePriorityReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetNodePriorityReq::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace operations
}  // namespace client
}  // namespace event_store
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::event_store::client::operations::StartScavengeReq_Options* Arena::CreateMaybeMessage< ::event_store::client::operations::StartScavengeReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::operations::StartScavengeReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::operations::StartScavengeReq* Arena::CreateMaybeMessage< ::event_store::client::operations::StartScavengeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::operations::StartScavengeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::operations::StopScavengeReq_Options* Arena::CreateMaybeMessage< ::event_store::client::operations::StopScavengeReq_Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::operations::StopScavengeReq_Options >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::operations::StopScavengeReq* Arena::CreateMaybeMessage< ::event_store::client::operations::StopScavengeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::operations::StopScavengeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::operations::ScavengeResp* Arena::CreateMaybeMessage< ::event_store::client::operations::ScavengeResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::operations::ScavengeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::event_store::client::operations::SetNodePriorityReq* Arena::CreateMaybeMessage< ::event_store::client::operations::SetNodePriorityReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_store::client::operations::SetNodePriorityReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

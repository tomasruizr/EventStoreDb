// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: streams.proto
#ifndef GRPC_streams_2eproto__INCLUDED
#define GRPC_streams_2eproto__INCLUDED

#include "streams.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace event_store {
namespace client {
namespace streams {

class Streams final {
 public:
  static constexpr char const* service_full_name() {
    return "event_store.client.streams.Streams";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::event_store::client::streams::ReadResp>> Read(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::event_store::client::streams::ReadResp>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::event_store::client::streams::ReadResp>> AsyncRead(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::event_store::client::streams::ReadResp>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::event_store::client::streams::ReadResp>> PrepareAsyncRead(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::event_store::client::streams::ReadResp>>(PrepareAsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::event_store::client::streams::AppendReq>> Append(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::event_store::client::streams::AppendReq>>(AppendRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::event_store::client::streams::AppendReq>> AsyncAppend(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::event_store::client::streams::AppendReq>>(AsyncAppendRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::event_store::client::streams::AppendReq>> PrepareAsyncAppend(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::event_store::client::streams::AppendReq>>(PrepareAsyncAppendRaw(context, response, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::event_store::client::streams::DeleteResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::DeleteResp>> AsyncDelete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::DeleteResp>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::DeleteResp>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::DeleteResp>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::event_store::client::streams::TombstoneResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::TombstoneResp>> AsyncTombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::TombstoneResp>>(AsyncTombstoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::TombstoneResp>> PrepareAsyncTombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::TombstoneResp>>(PrepareAsyncTombstoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>> BatchAppend(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>>(BatchAppendRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>> AsyncBatchAppend(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>>(AsyncBatchAppendRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>> PrepareAsyncBatchAppend(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>>(PrepareAsyncBatchAppendRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, ::event_store::client::streams::ReadReq* request, ::grpc::ClientReadReactor< ::event_store::client::streams::ReadResp>* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, ::event_store::client::streams::ReadReq* request, ::grpc::experimental::ClientReadReactor< ::event_store::client::streams::ReadResp>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Append(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::ClientWriteReactor< ::event_store::client::streams::AppendReq>* reactor) = 0;
      #else
      virtual void Append(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::experimental::ClientWriteReactor< ::event_store::client::streams::AppendReq>* reactor) = 0;
      #endif
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::DeleteResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tombstone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::TombstoneResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tombstone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tombstone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BatchAppend(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::event_store::client::streams::BatchAppendReq,::event_store::client::streams::BatchAppendResp>* reactor) = 0;
      #else
      virtual void BatchAppend(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::event_store::client::streams::BatchAppendReq,::event_store::client::streams::BatchAppendResp>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::event_store::client::streams::ReadResp>* ReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::event_store::client::streams::ReadResp>* AsyncReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::event_store::client::streams::ReadResp>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::event_store::client::streams::AppendReq>* AppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::event_store::client::streams::AppendReq>* AsyncAppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::event_store::client::streams::AppendReq>* PrepareAsyncAppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::DeleteResp>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::DeleteResp>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::TombstoneResp>* AsyncTombstoneRaw(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_store::client::streams::TombstoneResp>* PrepareAsyncTombstoneRaw(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* BatchAppendRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* AsyncBatchAppendRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* PrepareAsyncBatchAppendRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::event_store::client::streams::ReadResp>> Read(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::event_store::client::streams::ReadResp>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::event_store::client::streams::ReadResp>> AsyncRead(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::event_store::client::streams::ReadResp>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::event_store::client::streams::ReadResp>> PrepareAsyncRead(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::event_store::client::streams::ReadResp>>(PrepareAsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::event_store::client::streams::AppendReq>> Append(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::event_store::client::streams::AppendReq>>(AppendRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::event_store::client::streams::AppendReq>> AsyncAppend(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::event_store::client::streams::AppendReq>>(AsyncAppendRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::event_store::client::streams::AppendReq>> PrepareAsyncAppend(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::event_store::client::streams::AppendReq>>(PrepareAsyncAppendRaw(context, response, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::event_store::client::streams::DeleteResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::DeleteResp>> AsyncDelete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::DeleteResp>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::DeleteResp>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::DeleteResp>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::event_store::client::streams::TombstoneResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::TombstoneResp>> AsyncTombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::TombstoneResp>>(AsyncTombstoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::TombstoneResp>> PrepareAsyncTombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::TombstoneResp>>(PrepareAsyncTombstoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>> BatchAppend(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>>(BatchAppendRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>> AsyncBatchAppend(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>>(AsyncBatchAppendRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>> PrepareAsyncBatchAppend(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>>(PrepareAsyncBatchAppendRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, ::event_store::client::streams::ReadReq* request, ::grpc::ClientReadReactor< ::event_store::client::streams::ReadResp>* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, ::event_store::client::streams::ReadReq* request, ::grpc::experimental::ClientReadReactor< ::event_store::client::streams::ReadResp>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Append(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::ClientWriteReactor< ::event_store::client::streams::AppendReq>* reactor) override;
      #else
      void Append(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::experimental::ClientWriteReactor< ::event_store::client::streams::AppendReq>* reactor) override;
      #endif
      void Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::DeleteResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::DeleteResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::DeleteResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response, std::function<void(::grpc::Status)>) override;
      void Tombstone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::TombstoneResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tombstone(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tombstone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tombstone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::streams::TombstoneResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BatchAppend(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::event_store::client::streams::BatchAppendReq,::event_store::client::streams::BatchAppendResp>* reactor) override;
      #else
      void BatchAppend(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::event_store::client::streams::BatchAppendReq,::event_store::client::streams::BatchAppendResp>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::event_store::client::streams::ReadResp>* ReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request) override;
    ::grpc::ClientAsyncReader< ::event_store::client::streams::ReadResp>* AsyncReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::event_store::client::streams::ReadResp>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::event_store::client::streams::ReadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::event_store::client::streams::AppendReq>* AppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response) override;
    ::grpc::ClientAsyncWriter< ::event_store::client::streams::AppendReq>* AsyncAppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::event_store::client::streams::AppendReq>* PrepareAsyncAppendRaw(::grpc::ClientContext* context, ::event_store::client::streams::AppendResp* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::DeleteResp>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::DeleteResp>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::event_store::client::streams::DeleteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::TombstoneResp>* AsyncTombstoneRaw(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_store::client::streams::TombstoneResp>* PrepareAsyncTombstoneRaw(::grpc::ClientContext* context, const ::event_store::client::streams::TombstoneReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* BatchAppendRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* AsyncBatchAppendRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* PrepareAsyncBatchAppendRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_Append_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Tombstone_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchAppend_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::event_store::client::streams::ReadReq* request, ::grpc::ServerWriter< ::event_store::client::streams::ReadResp>* writer);
    virtual ::grpc::Status Append(::grpc::ServerContext* context, ::grpc::ServerReader< ::event_store::client::streams::AppendReq>* reader, ::event_store::client::streams::AppendResp* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response);
    virtual ::grpc::Status Tombstone(::grpc::ServerContext* context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response);
    virtual ::grpc::Status BatchAppend(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::event_store::client::streams::BatchAppendResp, ::event_store::client::streams::BatchAppendReq>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::ReadReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::streams::ReadResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::event_store::client::streams::ReadReq* request, ::grpc::ServerAsyncWriter< ::event_store::client::streams::ReadResp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Append() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::event_store::client::streams::AppendReq>* /*reader*/, ::event_store::client::streams::AppendResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppend(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::event_store::client::streams::AppendResp, ::event_store::client::streams::AppendReq>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::DeleteReq* /*request*/, ::event_store::client::streams::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::event_store::client::streams::DeleteReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::streams::DeleteResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tombstone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tombstone() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Tombstone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tombstone(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::TombstoneReq* /*request*/, ::event_store::client::streams::TombstoneResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTombstone(::grpc::ServerContext* context, ::event_store::client::streams::TombstoneReq* request, ::grpc::ServerAsyncResponseWriter< ::event_store::client::streams::TombstoneResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BatchAppend() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_BatchAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAppend(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::streams::BatchAppendResp, ::event_store::client::streams::BatchAppendReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchAppend(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::event_store::client::streams::BatchAppendResp, ::event_store::client::streams::BatchAppendReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Read<WithAsyncMethod_Append<WithAsyncMethod_Delete<WithAsyncMethod_Tombstone<WithAsyncMethod_BatchAppend<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::event_store::client::streams::ReadReq, ::event_store::client::streams::ReadResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::streams::ReadReq* request) { return this->Read(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::ReadReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::streams::ReadResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::event_store::client::streams::ReadResp>* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::streams::ReadReq* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::event_store::client::streams::ReadResp>* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::streams::ReadReq* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Append() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::event_store::client::streams::AppendReq, ::event_store::client::streams::AppendResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::event_store::client::streams::AppendResp* response) { return this->Append(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::event_store::client::streams::AppendReq>* /*reader*/, ::event_store::client::streams::AppendResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::event_store::client::streams::AppendReq>* Append(
      ::grpc::CallbackServerContext* /*context*/, ::event_store::client::streams::AppendResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::event_store::client::streams::AppendReq>* Append(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::event_store::client::streams::AppendResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::streams::DeleteReq, ::event_store::client::streams::DeleteResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::streams::DeleteReq* request, ::event_store::client::streams::DeleteResp* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::experimental::MessageAllocator< ::event_store::client::streams::DeleteReq, ::event_store::client::streams::DeleteResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::streams::DeleteReq, ::event_store::client::streams::DeleteResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::DeleteReq* /*request*/, ::event_store::client::streams::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::streams::DeleteReq* /*request*/, ::event_store::client::streams::DeleteResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::streams::DeleteReq* /*request*/, ::event_store::client::streams::DeleteResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Tombstone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Tombstone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::streams::TombstoneReq, ::event_store::client::streams::TombstoneResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::event_store::client::streams::TombstoneReq* request, ::event_store::client::streams::TombstoneResp* response) { return this->Tombstone(context, request, response); }));}
    void SetMessageAllocatorFor_Tombstone(
        ::grpc::experimental::MessageAllocator< ::event_store::client::streams::TombstoneReq, ::event_store::client::streams::TombstoneResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::event_store::client::streams::TombstoneReq, ::event_store::client::streams::TombstoneResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Tombstone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tombstone(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::TombstoneReq* /*request*/, ::event_store::client::streams::TombstoneResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tombstone(
      ::grpc::CallbackServerContext* /*context*/, const ::event_store::client::streams::TombstoneReq* /*request*/, ::event_store::client::streams::TombstoneResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tombstone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::event_store::client::streams::TombstoneReq* /*request*/, ::event_store::client::streams::TombstoneResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BatchAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BatchAppend() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackBidiHandler< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BatchAppend(context); }));
    }
    ~ExperimentalWithCallbackMethod_BatchAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAppend(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::streams::BatchAppendResp, ::event_store::client::streams::BatchAppendReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* BatchAppend(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::event_store::client::streams::BatchAppendReq, ::event_store::client::streams::BatchAppendResp>* BatchAppend(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_Append<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Tombstone<ExperimentalWithCallbackMethod_BatchAppend<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_Append<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_Tombstone<ExperimentalWithCallbackMethod_BatchAppend<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::ReadReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::streams::ReadResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Append() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::event_store::client::streams::AppendReq>* /*reader*/, ::event_store::client::streams::AppendResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::DeleteReq* /*request*/, ::event_store::client::streams::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tombstone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tombstone() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Tombstone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tombstone(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::TombstoneReq* /*request*/, ::event_store::client::streams::TombstoneResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BatchAppend() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_BatchAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAppend(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::streams::BatchAppendResp, ::event_store::client::streams::BatchAppendReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::ReadReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::streams::ReadResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Append() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::event_store::client::streams::AppendReq>* /*reader*/, ::event_store::client::streams::AppendResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppend(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::DeleteReq* /*request*/, ::event_store::client::streams::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tombstone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tombstone() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Tombstone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tombstone(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::TombstoneReq* /*request*/, ::event_store::client::streams::TombstoneResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTombstone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BatchAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BatchAppend() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_BatchAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAppend(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::streams::BatchAppendResp, ::event_store::client::streams::BatchAppendReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchAppend(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Read(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::ReadReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::streams::ReadResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Append() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->Append(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::event_store::client::streams::AppendReq>* /*reader*/, ::event_store::client::streams::AppendResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Append(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* Append(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::DeleteReq* /*request*/, ::event_store::client::streams::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Delete(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Tombstone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Tombstone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tombstone(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Tombstone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tombstone(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::TombstoneReq* /*request*/, ::event_store::client::streams::TombstoneResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tombstone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tombstone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BatchAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BatchAppend() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BatchAppend(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_BatchAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchAppend(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::event_store::client::streams::BatchAppendResp, ::event_store::client::streams::BatchAppendReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BatchAppend(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BatchAppend(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::streams::DeleteReq, ::event_store::client::streams::DeleteResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::streams::DeleteReq, ::event_store::client::streams::DeleteResp>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::DeleteReq* /*request*/, ::event_store::client::streams::DeleteResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::streams::DeleteReq,::event_store::client::streams::DeleteResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tombstone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tombstone() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_store::client::streams::TombstoneReq, ::event_store::client::streams::TombstoneResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::event_store::client::streams::TombstoneReq, ::event_store::client::streams::TombstoneResp>* streamer) {
                       return this->StreamedTombstone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Tombstone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tombstone(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::TombstoneReq* /*request*/, ::event_store::client::streams::TombstoneResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTombstone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_store::client::streams::TombstoneReq,::event_store::client::streams::TombstoneResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Tombstone<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::event_store::client::streams::ReadReq, ::event_store::client::streams::ReadResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::event_store::client::streams::ReadReq, ::event_store::client::streams::ReadResp>* streamer) {
                       return this->StreamedRead(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::event_store::client::streams::ReadReq* /*request*/, ::grpc::ServerWriter< ::event_store::client::streams::ReadResp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::event_store::client::streams::ReadReq,::event_store::client::streams::ReadResp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Read<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Read<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Tombstone<Service > > > StreamedService;
};

}  // namespace streams
}  // namespace client
}  // namespace event_store


#endif  // GRPC_streams_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: operations.proto

#include "operations.pb.h"
#include "operations.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace event_store {
namespace client {
namespace operations {

static const char* Operations_method_names[] = {
  "/event_store.client.operations.Operations/StartScavenge",
  "/event_store.client.operations.Operations/StopScavenge",
  "/event_store.client.operations.Operations/Shutdown",
  "/event_store.client.operations.Operations/MergeIndexes",
  "/event_store.client.operations.Operations/ResignNode",
  "/event_store.client.operations.Operations/SetNodePriority",
  "/event_store.client.operations.Operations/RestartPersistentSubscriptions",
};

std::unique_ptr< Operations::Stub> Operations::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Operations::Stub> stub(new Operations::Stub(channel));
  return stub;
}

Operations::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartScavenge_(Operations_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopScavenge_(Operations_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shutdown_(Operations_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MergeIndexes_(Operations_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResignNode_(Operations_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNodePriority_(Operations_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestartPersistentSubscriptions_(Operations_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Operations::Stub::StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::event_store::client::operations::ScavengeResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartScavenge_, context, request, response);
}

void Operations::Stub::experimental_async::StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartScavenge_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::StartScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartScavenge_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::StartScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartScavenge_, context, request, response, reactor);
}

void Operations::Stub::experimental_async::StartScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartScavenge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>* Operations::Stub::AsyncStartScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::operations::ScavengeResp>::Create(channel_.get(), cq, rpcmethod_StartScavenge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>* Operations::Stub::PrepareAsyncStartScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StartScavengeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::operations::ScavengeResp>::Create(channel_.get(), cq, rpcmethod_StartScavenge_, context, request, false);
}

::grpc::Status Operations::Stub::StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::event_store::client::operations::ScavengeResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopScavenge_, context, request, response);
}

void Operations::Stub::experimental_async::StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopScavenge_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::StopScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopScavenge_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::StopScavenge(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopScavenge_, context, request, response, reactor);
}

void Operations::Stub::experimental_async::StopScavenge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::operations::ScavengeResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopScavenge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>* Operations::Stub::AsyncStopScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::operations::ScavengeResp>::Create(channel_.get(), cq, rpcmethod_StopScavenge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::operations::ScavengeResp>* Operations::Stub::PrepareAsyncStopScavengeRaw(::grpc::ClientContext* context, const ::event_store::client::operations::StopScavengeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::operations::ScavengeResp>::Create(channel_.get(), cq, rpcmethod_StopScavenge_, context, request, false);
}

::grpc::Status Operations::Stub::Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void Operations::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

void Operations::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_Shutdown_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_Shutdown_, context, request, false);
}

::grpc::Status Operations::Stub::MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MergeIndexes_, context, request, response);
}

void Operations::Stub::experimental_async::MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MergeIndexes_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::MergeIndexes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MergeIndexes_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::MergeIndexes(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MergeIndexes_, context, request, response, reactor);
}

void Operations::Stub::experimental_async::MergeIndexes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MergeIndexes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::AsyncMergeIndexesRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_MergeIndexes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::PrepareAsyncMergeIndexesRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_MergeIndexes_, context, request, false);
}

::grpc::Status Operations::Stub::ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResignNode_, context, request, response);
}

void Operations::Stub::experimental_async::ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResignNode_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::ResignNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResignNode_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::ResignNode(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResignNode_, context, request, response, reactor);
}

void Operations::Stub::experimental_async::ResignNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResignNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::AsyncResignNodeRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_ResignNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::PrepareAsyncResignNodeRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_ResignNode_, context, request, false);
}

::grpc::Status Operations::Stub::SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::event_store::client::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNodePriority_, context, request, response);
}

void Operations::Stub::experimental_async::SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNodePriority_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::SetNodePriority(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNodePriority_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::SetNodePriority(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetNodePriority_, context, request, response, reactor);
}

void Operations::Stub::experimental_async::SetNodePriority(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetNodePriority_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::AsyncSetNodePriorityRaw(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_SetNodePriority_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::PrepareAsyncSetNodePriorityRaw(::grpc::ClientContext* context, const ::event_store::client::operations::SetNodePriorityReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_SetNodePriority_, context, request, false);
}

::grpc::Status Operations::Stub::RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::event_store::client::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RestartPersistentSubscriptions_, context, request, response);
}

void Operations::Stub::experimental_async::RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartPersistentSubscriptions_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartPersistentSubscriptions_, context, request, response, std::move(f));
}

void Operations::Stub::experimental_async::RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartPersistentSubscriptions_, context, request, response, reactor);
}

void Operations::Stub::experimental_async::RestartPersistentSubscriptions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::event_store::client::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartPersistentSubscriptions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::AsyncRestartPersistentSubscriptionsRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_RestartPersistentSubscriptions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::event_store::client::Empty>* Operations::Stub::PrepareAsyncRestartPersistentSubscriptionsRaw(::grpc::ClientContext* context, const ::event_store::client::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::event_store::client::Empty>::Create(channel_.get(), cq, rpcmethod_RestartPersistentSubscriptions_, context, request, false);
}

Operations::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operations_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operations::Service, ::event_store::client::operations::StartScavengeReq, ::event_store::client::operations::ScavengeResp>(
          [](Operations::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::operations::StartScavengeReq* req,
             ::event_store::client::operations::ScavengeResp* resp) {
               return service->StartScavenge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operations_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operations::Service, ::event_store::client::operations::StopScavengeReq, ::event_store::client::operations::ScavengeResp>(
          [](Operations::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::operations::StopScavengeReq* req,
             ::event_store::client::operations::ScavengeResp* resp) {
               return service->StopScavenge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operations_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operations::Service, ::event_store::client::Empty, ::event_store::client::Empty>(
          [](Operations::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::Empty* req,
             ::event_store::client::Empty* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operations_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operations::Service, ::event_store::client::Empty, ::event_store::client::Empty>(
          [](Operations::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::Empty* req,
             ::event_store::client::Empty* resp) {
               return service->MergeIndexes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operations_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operations::Service, ::event_store::client::Empty, ::event_store::client::Empty>(
          [](Operations::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::Empty* req,
             ::event_store::client::Empty* resp) {
               return service->ResignNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operations_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operations::Service, ::event_store::client::operations::SetNodePriorityReq, ::event_store::client::Empty>(
          [](Operations::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::operations::SetNodePriorityReq* req,
             ::event_store::client::Empty* resp) {
               return service->SetNodePriority(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operations_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operations::Service, ::event_store::client::Empty, ::event_store::client::Empty>(
          [](Operations::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::event_store::client::Empty* req,
             ::event_store::client::Empty* resp) {
               return service->RestartPersistentSubscriptions(ctx, req, resp);
             }, this)));
}

Operations::Service::~Service() {
}

::grpc::Status Operations::Service::StartScavenge(::grpc::ServerContext* context, const ::event_store::client::operations::StartScavengeReq* request, ::event_store::client::operations::ScavengeResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Operations::Service::StopScavenge(::grpc::ServerContext* context, const ::event_store::client::operations::StopScavengeReq* request, ::event_store::client::operations::ScavengeResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Operations::Service::Shutdown(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Operations::Service::MergeIndexes(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Operations::Service::ResignNode(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Operations::Service::SetNodePriority(::grpc::ServerContext* context, const ::event_store::client::operations::SetNodePriorityReq* request, ::event_store::client::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Operations::Service::RestartPersistentSubscriptions(::grpc::ServerContext* context, const ::event_store::client::Empty* request, ::event_store::client::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace event_store
}  // namespace client
}  // namespace operations

